/*! OPENLAYERS ADAPTATION
 * Â© Dominique Cavailhez 2017
 * @myol/myol - v1.1.2.dev
 * This package adds many features to Openlayer https://openlayers.org/
 * https://github.com/Dominique92/myol#readme
 * Based on https://openlayers.org
 * Built 19/04/2025 17:18:58 using npm run build from the src/... sources
 * Please don't modify this file : best is to modify src/... & npm run build !
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.myol = factory());
})(this, (function () { 'use strict';

  /**
   * @module ol/ObjectEventType
   */

  /**
   * @enum {string}
   */
  var ObjectEventType = {
    /**
     * Triggered when a property is changed.
     * @event module:ol/Object.ObjectEvent#propertychange
     * @api
     */
    PROPERTYCHANGE: 'propertychange',
  };

  /**
   * @typedef {'propertychange'} Types
   */

  /**
   * @module ol/events/EventType
   */

  /**
   * @enum {string}
   * @const
   */
  var EventType = {
    /**
     * Generic change event. Triggered when the revision counter is increased.
     * @event module:ol/events/Event~BaseEvent#change
     * @api
     */
    CHANGE: 'change',

    /**
     * Generic error event. Triggered when an error occurs.
     * @event module:ol/events/Event~BaseEvent#error
     * @api
     */
    ERROR: 'error',

    CONTEXTMENU: 'contextmenu',
    CLICK: 'click',
    DBLCLICK: 'dblclick',
    KEYDOWN: 'keydown',
    KEYPRESS: 'keypress',
    LOAD: 'load',
    TOUCHMOVE: 'touchmove',
    WHEEL: 'wheel',
  };

  /**
   * @module ol/Disposable
   */

  /**
   * @classdesc
   * Objects that need to clean up after themselves.
   */
  class Disposable {
    constructor() {
      /**
       * The object has already been disposed.
       * @type {boolean}
       * @protected
       */
      this.disposed = false;
    }

    /**
     * Clean up.
     */
    dispose() {
      if (!this.disposed) {
        this.disposed = true;
        this.disposeInternal();
      }
    }

    /**
     * Extension point for disposable objects.
     * @protected
     */
    disposeInternal() {}
  }

  /**
   * @module ol/array
   */

  /**
   * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
   * https://github.com/darkskyapp/binary-search
   *
   * @param {Array<*>} haystack Items to search through.
   * @param {*} needle The item to look for.
   * @param {Function} [comparator] Comparator function.
   * @return {number} The index of the item if found, -1 if not.
   */
  function binarySearch(haystack, needle, comparator) {
    let mid, cmp;
    comparator = comparator || ascending;
    let low = 0;
    let high = haystack.length;
    let found = false;

    while (low < high) {
      /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
       * to double (which gives the wrong results). */
      mid = low + ((high - low) >> 1);
      cmp = +comparator(haystack[mid], needle);

      if (cmp < 0.0) {
        /* Too low. */
        low = mid + 1;
      } else {
        /* Key found or too high */
        high = mid;
        found = !cmp;
      }
    }

    /* Key not found. */
    return found ? low : ~low;
  }

  /**
   * Compare function sorting arrays in ascending order.  Safe to use for numeric values.
   * @param {*} a The first object to be compared.
   * @param {*} b The second object to be compared.
   * @return {number} A negative number, zero, or a positive number as the first
   *     argument is less than, equal to, or greater than the second.
   */
  function ascending(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  /**
   * Compare function sorting arrays in descending order.  Safe to use for numeric values.
   * @param {*} a The first object to be compared.
   * @param {*} b The second object to be compared.
   * @return {number} A negative number, zero, or a positive number as the first
   *     argument is greater than, equal to, or less than the second.
   */
  function descending(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }

  /**
   * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function
   * of this type to determine which nearest resolution to use.
   *
   * This function takes a `{number}` representing a value between two array entries,
   * a `{number}` representing the value of the nearest higher entry and
   * a `{number}` representing the value of the nearest lower entry
   * as arguments and returns a `{number}`. If a negative number or zero is returned
   * the lower value will be used, if a positive number is returned the higher value
   * will be used.
   * @typedef {function(number, number, number): number} NearestDirectionFunction
   * @api
   */

  /**
   * @param {Array<number>} arr Array in descending order.
   * @param {number} target Target.
   * @param {number|NearestDirectionFunction} direction
   *    0 means return the nearest,
   *    > 0 means return the largest nearest,
   *    < 0 means return the smallest nearest.
   * @return {number} Index.
   */
  function linearFindNearest(arr, target, direction) {
    if (arr[0] <= target) {
      return 0;
    }

    const n = arr.length;
    if (target <= arr[n - 1]) {
      return n - 1;
    }

    if (typeof direction === 'function') {
      for (let i = 1; i < n; ++i) {
        const candidate = arr[i];
        if (candidate === target) {
          return i;
        }
        if (candidate < target) {
          if (direction(target, arr[i - 1], candidate) > 0) {
            return i - 1;
          }
          return i;
        }
      }
      return n - 1;
    }

    if (direction > 0) {
      for (let i = 1; i < n; ++i) {
        if (arr[i] < target) {
          return i - 1;
        }
      }
      return n - 1;
    }

    if (direction < 0) {
      for (let i = 1; i < n; ++i) {
        if (arr[i] <= target) {
          return i;
        }
      }
      return n - 1;
    }

    for (let i = 1; i < n; ++i) {
      if (arr[i] == target) {
        return i;
      }
      if (arr[i] < target) {
        if (arr[i - 1] - target < target - arr[i]) {
          return i - 1;
        }
        return i;
      }
    }
    return n - 1;
  }

  /**
   * @param {Array<*>} arr Array.
   * @param {number} begin Begin index.
   * @param {number} end End index.
   */
  function reverseSubArray(arr, begin, end) {
    while (begin < end) {
      const tmp = arr[begin];
      arr[begin] = arr[end];
      arr[end] = tmp;
      ++begin;
      --end;
    }
  }

  /**
   * @param {Array<VALUE>} arr The array to modify.
   * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
   * @template VALUE
   */
  function extend$3(arr, data) {
    const extension = Array.isArray(data) ? data : [data];
    const length = extension.length;
    for (let i = 0; i < length; i++) {
      arr[arr.length] = extension[i];
    }
  }

  /**
   * @param {Array<any>|Uint8ClampedArray} arr1 The first array to compare.
   * @param {Array<any>|Uint8ClampedArray} arr2 The second array to compare.
   * @return {boolean} Whether the two arrays are equal.
   */
  function equals$2(arr1, arr2) {
    const len1 = arr1.length;
    if (len1 !== arr2.length) {
      return false;
    }
    for (let i = 0; i < len1; i++) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }
    return true;
  }

  /**
   * @param {Array<*>} arr The array to test.
   * @param {Function} [func] Comparison function.
   * @param {boolean} [strict] Strictly sorted (default false).
   * @return {boolean} Return index.
   */
  function isSorted(arr, func, strict) {
    const compare = func || ascending;
    return arr.every(function (currentVal, index) {
      if (index === 0) {
        return true;
      }
      const res = compare(arr[index - 1], currentVal);
      return !(res > 0 || (res === 0));
    });
  }

  /**
   * @module ol/functions
   */


  /**
   * Always returns true.
   * @return {boolean} true.
   */
  function TRUE() {
    return true;
  }

  /**
   * Always returns false.
   * @return {boolean} false.
   */
  function FALSE() {
    return false;
  }

  /**
   * A reusable function, used e.g. as a default for callbacks.
   *
   * @return {void} Nothing.
   */
  function VOID() {}

  /**
   * Wrap a function in another function that remembers the last return.  If the
   * returned function is called twice in a row with the same arguments and the same
   * this object, it will return the value from the first call in the second call.
   *
   * @param {function(...any): ReturnType} fn The function to memoize.
   * @return {function(...any): ReturnType} The memoized function.
   * @template ReturnType
   */
  function memoizeOne(fn) {
    /** @type {ReturnType} */
    let lastResult;

    /** @type {Array<any>|undefined} */
    let lastArgs;

    let lastThis;

    /**
     * @this {*} Only need to know if `this` changed, don't care what type
     * @return {ReturnType} Memoized value
     */
    return function () {
      const nextArgs = Array.prototype.slice.call(arguments);
      if (!lastArgs || this !== lastThis || !equals$2(nextArgs, lastArgs)) {
        lastThis = this;
        lastArgs = nextArgs;
        lastResult = fn.apply(this, arguments);
      }
      return lastResult;
    };
  }

  /**
   * @template T
   * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.
   * @return {Promise<T>} A promise for the value.
   */
  function toPromise(getter) {
    function promiseGetter() {
      let value;
      try {
        value = getter();
      } catch (err) {
        return Promise.reject(err);
      }
      if (value instanceof Promise) {
        return value;
      }
      return Promise.resolve(value);
    }
    return promiseGetter();
  }

  /**
   * @module ol/obj
   */

  /**
   * Removes all properties from an object.
   * @param {Object<string, unknown>} object The object to clear.
   */
  function clear$2(object) {
    for (const property in object) {
      delete object[property];
    }
  }

  /**
   * Determine if an object has any properties.
   * @param {Object} object The object to check.
   * @return {boolean} The object is empty.
   */
  function isEmpty$1(object) {
    let property;
    for (property in object) {
      return false;
    }
    return !property;
  }

  /**
   * @module ol/events/Event
   */

  /**
   * @classdesc
   * Stripped down implementation of the W3C DOM Level 2 Event interface.
   * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
   *
   * This implementation only provides `type` and `target` properties, and
   * `stopPropagation` and `preventDefault` methods. It is meant as base class
   * for higher level events defined in the library, and works with
   * {@link module:ol/events/Target~Target}.
   */
  class BaseEvent {
    /**
     * @param {string} type Type.
     */
    constructor(type) {
      /**
       * @type {boolean}
       */
      this.propagationStopped;

      /**
       * @type {boolean}
       */
      this.defaultPrevented;

      /**
       * The event type.
       * @type {string}
       * @api
       */
      this.type = type;

      /**
       * The event target.
       * @type {Object}
       * @api
       */
      this.target = null;
    }

    /**
     * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events
     * will be fired.
     * @api
     */
    preventDefault() {
      this.defaultPrevented = true;
    }

    /**
     * Stop event propagation.
     * @api
     */
    stopPropagation() {
      this.propagationStopped = true;
    }
  }

  /**
   * @param {Event|import("./Event.js").default} evt Event
   */
  function stopPropagation(evt) {
    evt.stopPropagation();
  }

  /**
   * @module ol/events/Target
   */

  /**
   * @typedef {EventTarget|Target} EventTargetLike
   */

  /**
   * @classdesc
   * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
   * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
   *
   * There are two important simplifications compared to the specification:
   *
   * 1. The handling of `useCapture` in `addEventListener` and
   *    `removeEventListener`. There is no real capture model.
   * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
   *    There is no event target hierarchy. When a listener calls
   *    `stopPropagation` or `preventDefault` on an event object, it means that no
   *    more listeners after this one will be called. Same as when the listener
   *    returns false.
   */
  class Target extends Disposable {
    /**
     * @param {*} [target] Default event target for dispatched events.
     */
    constructor(target) {
      super();

      /**
       * @private
       * @type {*}
       */
      this.eventTarget_ = target;

      /**
       * @private
       * @type {Object<string, number>|null}
       */
      this.pendingRemovals_ = null;

      /**
       * @private
       * @type {Object<string, number>|null}
       */
      this.dispatching_ = null;

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").Listener>>|null}
       */
      this.listeners_ = null;
    }

    /**
     * @param {string} type Type.
     * @param {import("../events.js").Listener} listener Listener.
     */
    addEventListener(type, listener) {
      if (!type || !listener) {
        return;
      }
      const listeners = this.listeners_ || (this.listeners_ = {});
      const listenersForType = listeners[type] || (listeners[type] = []);
      if (!listenersForType.includes(listener)) {
        listenersForType.push(listener);
      }
    }

    /**
     * Dispatches an event and calls all listeners listening for events
     * of this type. The event parameter can either be a string or an
     * Object with a `type` property.
     *
     * @param {import("./Event.js").default|string} event Event object.
     * @return {boolean|undefined} `false` if anyone called preventDefault on the
     *     event object or if any of the listeners returned false.
     * @api
     */
    dispatchEvent(event) {
      const isString = typeof event === 'string';
      const type = isString ? event : event.type;
      const listeners = this.listeners_ && this.listeners_[type];
      if (!listeners) {
        return;
      }

      const evt = isString ? new BaseEvent(event) : /** @type {Event} */ (event);
      if (!evt.target) {
        evt.target = this.eventTarget_ || this;
      }
      const dispatching = this.dispatching_ || (this.dispatching_ = {});
      const pendingRemovals =
        this.pendingRemovals_ || (this.pendingRemovals_ = {});
      if (!(type in dispatching)) {
        dispatching[type] = 0;
        pendingRemovals[type] = 0;
      }
      ++dispatching[type];
      let propagate;
      for (let i = 0, ii = listeners.length; i < ii; ++i) {
        if ('handleEvent' in listeners[i]) {
          propagate = /** @type {import("../events.js").ListenerObject} */ (
            listeners[i]
          ).handleEvent(evt);
        } else {
          propagate = /** @type {import("../events.js").ListenerFunction} */ (
            listeners[i]
          ).call(this, evt);
        }
        if (propagate === false || evt.propagationStopped) {
          propagate = false;
          break;
        }
      }
      if (--dispatching[type] === 0) {
        let pr = pendingRemovals[type];
        delete pendingRemovals[type];
        while (pr--) {
          this.removeEventListener(type, VOID);
        }
        delete dispatching[type];
      }
      return propagate;
    }

    /**
     * Clean up.
     * @override
     */
    disposeInternal() {
      this.listeners_ && clear$2(this.listeners_);
    }

    /**
     * Get the listeners for a specified event type. Listeners are returned in the
     * order that they will be called in.
     *
     * @param {string} type Type.
     * @return {Array<import("../events.js").Listener>|undefined} Listeners.
     */
    getListeners(type) {
      return (this.listeners_ && this.listeners_[type]) || undefined;
    }

    /**
     * @param {string} [type] Type. If not provided,
     *     `true` will be returned if this event target has any listeners.
     * @return {boolean} Has listeners.
     */
    hasListener(type) {
      if (!this.listeners_) {
        return false;
      }
      return type
        ? type in this.listeners_
        : Object.keys(this.listeners_).length > 0;
    }

    /**
     * @param {string} type Type.
     * @param {import("../events.js").Listener} listener Listener.
     */
    removeEventListener(type, listener) {
      if (!this.listeners_) {
        return;
      }
      const listeners = this.listeners_[type];
      if (!listeners) {
        return;
      }
      const index = listeners.indexOf(listener);
      if (index !== -1) {
        if (this.pendingRemovals_ && type in this.pendingRemovals_) {
          // make listener a no-op, and remove later in #dispatchEvent()
          listeners[index] = VOID;
          ++this.pendingRemovals_[type];
        } else {
          listeners.splice(index, 1);
          if (listeners.length === 0) {
            delete this.listeners_[type];
          }
        }
      }
    }
  }

  /**
   * @module ol/events
   */

  /**
   * Key to use with {@link module:ol/Observable.unByKey}.
   * @typedef {Object} EventsKey
   * @property {ListenerFunction} listener Listener.
   * @property {import("./events/Target.js").EventTargetLike} target Target.
   * @property {string} type Type.
   * @api
   */

  /**
   * Listener function. This function is called with an event object as argument.
   * When the function returns `false`, event propagation will stop.
   *
   * @typedef {function((Event|import("./events/Event.js").default)): (void|boolean)} ListenerFunction
   * @api
   */

  /**
   * @typedef {Object} ListenerObject
   * @property {ListenerFunction} handleEvent HandleEvent listener function.
   */

  /**
   * @typedef {ListenerFunction|ListenerObject} Listener
   */

  /**
   * Registers an event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` to a `this` object, and returns
   * a key for use with {@link module:ol/events.unlistenByKey}.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object} [thisArg] Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @param {boolean} [once] If true, add the listener as one-off listener.
   * @return {EventsKey} Unique key for the listener.
   */
  function listen(target, type, listener, thisArg, once) {
    if (once) {
      const originalListener = listener;
      /**
       * @param {Event|import('./events/Event.js').default} event The event
       * @return {void|boolean} When the function returns `false`, event propagation will stop.
       * @this {typeof target}
       */
      listener = function (event) {
        target.removeEventListener(type, listener);
        return originalListener.call(thisArg ?? this, event);
      };
    } else if (thisArg && thisArg !== target) {
      listener = listener.bind(thisArg);
    }
    const eventsKey = {
      target: target,
      type: type,
      listener: listener,
    };
    target.addEventListener(type, listener);
    return eventsKey;
  }

  /**
   * Registers a one-off event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` as self-unregistering listener
   * to a `this` object, and returns a key for use with
   * {@link module:ol/events.unlistenByKey} in case the listener needs to be
   * unregistered before it is called.
   *
   * When {@link module:ol/events.listen} is called with the same arguments after this
   * function, the self-unregistering listener will be turned into a permanent
   * listener.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object} [thisArg] Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @return {EventsKey} Key for unlistenByKey.
   */
  function listenOnce(target, type, listener, thisArg) {
    return listen(target, type, listener, thisArg, true);
  }

  /**
   * Unregisters event listeners on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * The argument passed to this function is the key returned from
   * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.
   *
   * @param {EventsKey} key The key.
   */
  function unlistenByKey(key) {
    if (key && key.target) {
      key.target.removeEventListener(key.type, key.listener);
      clear$2(key);
    }
  }

  /**
   * @module ol/Observable
   */

  /***
   * @template {string} Type
   * @template {Event|import("./events/Event.js").default} EventClass
   * @template Return
   * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature
   */

  /***
   * @template {string} Type
   * @template Return
   * @typedef {(type: Type[], listener: (event: Event|import("./events/Event").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature
   */

  /**
   * @typedef {'change'|'error'} EventTypes
   */

  /***
   * @template Return
   * @typedef {OnSignature<EventTypes, import("./events/Event.js").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * An event target providing convenient methods for listener registration
   * and unregistration. A generic `change` event is always available through
   * {@link module:ol/Observable~Observable#changed}.
   *
   * @fires import("./events/Event.js").default
   * @api
   */
  class Observable extends Target {
    constructor() {
      super();

      this.on =
        /** @type {ObservableOnSignature<import("./events").EventsKey>} */ (
          this.onInternal
        );

      this.once =
        /** @type {ObservableOnSignature<import("./events").EventsKey>} */ (
          this.onceInternal
        );

      this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);

      /**
       * @private
       * @type {number}
       */
      this.revision_ = 0;
    }

    /**
     * Increases the revision counter and dispatches a 'change' event.
     * @api
     */
    changed() {
      ++this.revision_;
      this.dispatchEvent(EventType.CHANGE);
    }

    /**
     * Get the version number for this object.  Each time the object is modified,
     * its version number will be incremented.
     * @return {number} Revision.
     * @api
     */
    getRevision() {
      return this.revision_;
    }

    /**
     * @param {string|Array<string>} type Type.
     * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
     * @protected
     */
    onInternal(type, listener) {
      if (Array.isArray(type)) {
        const len = type.length;
        const keys = new Array(len);
        for (let i = 0; i < len; ++i) {
          keys[i] = listen(this, type[i], listener);
        }
        return keys;
      }
      return listen(this, /** @type {string} */ (type), listener);
    }

    /**
     * @param {string|Array<string>} type Type.
     * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
     * @protected
     */
    onceInternal(type, listener) {
      let key;
      if (Array.isArray(type)) {
        const len = type.length;
        key = new Array(len);
        for (let i = 0; i < len; ++i) {
          key[i] = listenOnce(this, type[i], listener);
        }
      } else {
        key = listenOnce(this, /** @type {string} */ (type), listener);
      }
      /** @type {Object} */ (listener).ol_key = key;
      return key;
    }

    /**
     * Unlisten for a certain type of event.
     * @param {string|Array<string>} type Type.
     * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
     * @protected
     */
    unInternal(type, listener) {
      const key = /** @type {Object} */ (listener).ol_key;
      if (key) {
        unByKey(key);
      } else if (Array.isArray(type)) {
        for (let i = 0, ii = type.length; i < ii; ++i) {
          this.removeEventListener(type[i], listener);
        }
      } else {
        this.removeEventListener(type, listener);
      }
    }
  }

  /**
   * Listen for a certain type of event.
   * @function
   * @param {string|Array<string>} type The event type or array of event types.
   * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
   * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
   *     called with an array of event types as the first argument, the return
   *     will be an array of keys.
   * @api
   */
  Observable.prototype.on;

  /**
   * Listen once for a certain type of event.
   * @function
   * @param {string|Array<string>} type The event type or array of event types.
   * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
   * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
   *     called with an array of event types as the first argument, the return
   *     will be an array of keys.
   * @api
   */
  Observable.prototype.once;

  /**
   * Unlisten for a certain type of event.
   * @function
   * @param {string|Array<string>} type The event type or array of event types.
   * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
   * @api
   */
  Observable.prototype.un;

  /**
   * Removes an event listener using the key returned by `on()` or `once()`.
   * @param {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} key The key returned by `on()`
   *     or `once()` (or an array of keys).
   * @api
   */
  function unByKey(key) {
    if (Array.isArray(key)) {
      for (let i = 0, ii = key.length; i < ii; ++i) {
        unlistenByKey(key[i]);
      }
    } else {
      unlistenByKey(/** @type {import("./events.js").EventsKey} */ (key));
    }
  }

  /**
   * @module ol/util
   */

  /**
   * @return {never} Any return.
   */
  function abstract() {
    throw new Error('Unimplemented abstract method.');
  }

  /**
   * Counter for getUid.
   * @type {number}
   * @private
   */
  let uidCounter_ = 0;

  /**
   * Gets a unique ID for an object. This mutates the object so that further calls
   * with the same object as a parameter returns the same value. Unique IDs are generated
   * as a strictly increasing sequence. Adapted from goog.getUid.
   *
   * @param {Object} obj The object to get the unique ID for.
   * @return {string} The unique ID for the object.
   * @api
   */
  function getUid(obj) {
    return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));
  }

  /**
   * OpenLayers version.
   * @type {string}
   */
  const VERSION$1 = '10.5.0';

  /**
   * @module ol/Object
   */

  /**
   * @classdesc
   * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.
   */
  class ObjectEvent extends BaseEvent {
    /**
     * @param {string} type The event type.
     * @param {string} key The property name.
     * @param {*} oldValue The old value for `key`.
     */
    constructor(type, key, oldValue) {
      super(type);

      /**
       * The name of the property whose value is changing.
       * @type {string}
       * @api
       */
      this.key = key;

      /**
       * The old value. To get the new value use `e.target.get(e.key)` where
       * `e` is the event object.
       * @type {*}
       * @api
       */
      this.oldValue = oldValue;
    }
  }

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *    import("./Observable").OnSignature<import("./ObjectEventType").Types, ObjectEvent, Return> &
   *    import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types, Return>} ObjectOnSignature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Most non-trivial classes inherit from this.
   *
   * This extends {@link module:ol/Observable~Observable} with observable
   * properties, where each property is observable as well as the object as a
   * whole.
   *
   * Classes that inherit from this have pre-defined properties, to which you can
   * add your owns. The pre-defined properties are listed in this documentation as
   * 'Observable Properties', and have their own accessors; for example,
   * {@link module:ol/Map~Map} has a `target` property, accessed with
   * `getTarget()` and changed with `setTarget()`. Not all properties are however
   * settable. There are also general-purpose accessors `get()` and `set()`. For
   * example, `get('target')` is equivalent to `getTarget()`.
   *
   * The `set` accessors trigger a change event, and you can monitor this by
   * registering a listener. For example, {@link module:ol/View~View} has a
   * `center` property, so `view.on('change:center', function(evt) {...});` would
   * call the function whenever the value of the center property changes. Within
   * the function, `evt.target` would be the view, so `evt.target.getCenter()`
   * would return the new center.
   *
   * You can add your own observable properties with
   * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
   * You can listen for changes on that property value with
   * `object.on('change:prop', listener)`. You can get a list of all
   * properties with {@link module:ol/Object~BaseObject#getProperties}.
   *
   * Note that the observable properties are separate from standard JS properties.
   * You can, for example, give your map object a title with
   * `map.title='New title'` and with `map.set('title', 'Another title')`. The
   * first will be a `hasOwnProperty`; the second will appear in
   * `getProperties()`. Only the second is observable.
   *
   * Properties can be deleted by using the unset method. E.g.
   * object.unset('foo').
   *
   * @fires ObjectEvent
   * @api
   */
  class BaseObject extends Observable {
    /**
     * @param {Object<string, *>} [values] An object with key-value pairs.
     */
    constructor(values) {
      super();

      /***
       * @type {ObjectOnSignature<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {ObjectOnSignature<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {ObjectOnSignature<void>}
       */
      this.un;

      // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is
      // the same as the order in which they were created.  This also helps to
      // ensure that object properties are always added in the same order, which
      // helps many JavaScript engines generate faster code.
      getUid(this);

      /**
       * @private
       * @type {Object<string, *>|null}
       */
      this.values_ = null;

      if (values !== undefined) {
        this.setProperties(values);
      }
    }

    /**
     * Gets a value.
     * @param {string} key Key name.
     * @return {*} Value.
     * @api
     */
    get(key) {
      let value;
      if (this.values_ && this.values_.hasOwnProperty(key)) {
        value = this.values_[key];
      }
      return value;
    }

    /**
     * Get a list of object property names.
     * @return {Array<string>} List of property names.
     * @api
     */
    getKeys() {
      return (this.values_ && Object.keys(this.values_)) || [];
    }

    /**
     * Get an object of all property names and values.
     * @return {Object<string, *>} Object.
     * @api
     */
    getProperties() {
      return (this.values_ && Object.assign({}, this.values_)) || {};
    }

    /**
     * Get an object of all property names and values.
     * @return {Object<string, *>?} Object.
     */
    getPropertiesInternal() {
      return this.values_;
    }

    /**
     * @return {boolean} The object has properties.
     */
    hasProperties() {
      return !!this.values_;
    }

    /**
     * @param {string} key Key name.
     * @param {*} oldValue Old value.
     */
    notify(key, oldValue) {
      let eventType;
      eventType = `change:${key}`;
      if (this.hasListener(eventType)) {
        this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
      }
      eventType = ObjectEventType.PROPERTYCHANGE;
      if (this.hasListener(eventType)) {
        this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
      }
    }

    /**
     * @param {string} key Key name.
     * @param {import("./events.js").Listener} listener Listener.
     */
    addChangeListener(key, listener) {
      this.addEventListener(`change:${key}`, listener);
    }

    /**
     * @param {string} key Key name.
     * @param {import("./events.js").Listener} listener Listener.
     */
    removeChangeListener(key, listener) {
      this.removeEventListener(`change:${key}`, listener);
    }

    /**
     * Sets a value.
     * @param {string} key Key name.
     * @param {*} value Value.
     * @param {boolean} [silent] Update without triggering an event.
     * @api
     */
    set(key, value, silent) {
      const values = this.values_ || (this.values_ = {});
      if (silent) {
        values[key] = value;
      } else {
        const oldValue = values[key];
        values[key] = value;
        if (oldValue !== value) {
          this.notify(key, oldValue);
        }
      }
    }

    /**
     * Sets a collection of key-value pairs.  Note that this changes any existing
     * properties and adds new ones (it does not remove any existing properties).
     * @param {Object<string, *>} values Values.
     * @param {boolean} [silent] Update without triggering an event.
     * @api
     */
    setProperties(values, silent) {
      for (const key in values) {
        this.set(key, values[key], silent);
      }
    }

    /**
     * Apply any properties from another object without triggering events.
     * @param {BaseObject} source The source object.
     * @protected
     */
    applyProperties(source) {
      if (!source.values_) {
        return;
      }
      Object.assign(this.values_ || (this.values_ = {}), source.values_);
    }

    /**
     * Unsets a property.
     * @param {string} key Key name.
     * @param {boolean} [silent] Unset without triggering an event.
     * @api
     */
    unset(key, silent) {
      if (this.values_ && key in this.values_) {
        const oldValue = this.values_[key];
        delete this.values_[key];
        if (isEmpty$1(this.values_)) {
          this.values_ = null;
        }
        if (!silent) {
          this.notify(key, oldValue);
        }
      }
    }
  }

  /**
   * @module ol/asserts
   */

  /**
   * @param {*} assertion Assertion we expected to be truthy.
   * @param {string} errorMessage Error message.
   */
  function assert$1(assertion, errorMessage) {
    if (!assertion) {
      throw new Error(errorMessage);
    }
  }

  /**
   * @module ol/Feature
   */

  /**
   * @typedef {typeof Feature|typeof import("./render/Feature.js").default} FeatureClass
   */

  /**
   * @typedef {Feature|import("./render/Feature.js").default} FeatureLike
   */

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *   import("./Observable").OnSignature<import("./ObjectEventType").Types|'change:geometry', import("./Object").ObjectEvent, Return> &
   *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types
   *     |'change:geometry', Return>} FeatureOnSignature
   */

  /***
   * @template {import("./geom/Geometry.js").default} [Geometry=import("./geom/Geometry.js").default]
   * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry
   */

  /**
   * @classdesc
   * A vector object for geographic features with a geometry and other
   * attribute properties, similar to the features in vector file formats like
   * GeoJSON.
   *
   * Features can be styled individually with `setStyle`; otherwise they use the
   * style of their vector layer.
   *
   * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on
   * the feature object, so they are observable, and have get/set accessors.
   *
   * Typically, a feature has a single geometry property. You can set the
   * geometry using the `setGeometry` method and get it with `getGeometry`.
   * It is possible to store more than one geometry on a feature using attribute
   * properties. By default, the geometry used for rendering is identified by
   * the property name `geometry`. If you want to use another geometry property
   * for rendering, use the `setGeometryName` method to change the attribute
   * property associated with the geometry for the feature.  For example:
   *
   * ```js
   *
   * import Feature from 'ol/Feature.js';
   * import Polygon from 'ol/geom/Polygon.js';
   * import Point from 'ol/geom/Point.js';
   *
   * const feature = new Feature({
   *   geometry: new Polygon(polyCoords),
   *   labelPoint: new Point(labelCoords),
   *   name: 'My Polygon',
   * });
   *
   * // get the polygon geometry
   * const poly = feature.getGeometry();
   *
   * // Render the feature as a point using the coordinates from labelPoint
   * feature.setGeometryName('labelPoint');
   *
   * // get the point geometry
   * const point = feature.getGeometry();
   * ```
   *
   * @api
   * @template {import("./geom/Geometry.js").default} [Geometry=import("./geom/Geometry.js").default]
   */
  class Feature extends BaseObject {
    /**
     * @param {Geometry|ObjectWithGeometry<Geometry>} [geometryOrProperties]
     *     You may pass a Geometry object directly, or an object literal containing
     *     properties. If you pass an object literal, you may include a Geometry
     *     associated with a `geometry` key.
     */
    constructor(geometryOrProperties) {
      super();

      /***
       * @type {FeatureOnSignature<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {FeatureOnSignature<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {FeatureOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {number|string|undefined}
       */
      this.id_ = undefined;

      /**
       * @type {string}
       * @private
       */
      this.geometryName_ = 'geometry';

      /**
       * User provided style.
       * @private
       * @type {import("./style/Style.js").StyleLike}
       */
      this.style_ = null;

      /**
       * @private
       * @type {import("./style/Style.js").StyleFunction|undefined}
       */
      this.styleFunction_ = undefined;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.geometryChangeKey_ = null;

      this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);

      if (geometryOrProperties) {
        if (
          typeof (
            /** @type {?} */ (geometryOrProperties).getSimplifiedGeometry
          ) === 'function'
        ) {
          const geometry = /** @type {Geometry} */ (geometryOrProperties);
          this.setGeometry(geometry);
        } else {
          /** @type {Object<string, *>} */
          const properties = geometryOrProperties;
          this.setProperties(properties);
        }
      }
    }

    /**
     * Clone this feature. If the original feature has a geometry it
     * is also cloned. The feature id is not set in the clone.
     * @return {Feature<Geometry>} The clone.
     * @api
     */
    clone() {
      const clone = /** @type {Feature<Geometry>} */ (
        new Feature(this.hasProperties() ? this.getProperties() : null)
      );
      clone.setGeometryName(this.getGeometryName());
      const geometry = this.getGeometry();
      if (geometry) {
        clone.setGeometry(/** @type {Geometry} */ (geometry.clone()));
      }
      const style = this.getStyle();
      if (style) {
        clone.setStyle(style);
      }
      return clone;
    }

    /**
     * Get the feature's default geometry.  A feature may have any number of named
     * geometries.  The "default" geometry (the one that is rendered by default) is
     * set when calling {@link module:ol/Feature~Feature#setGeometry}.
     * @return {Geometry|undefined} The default geometry for the feature.
     * @api
     * @observable
     */
    getGeometry() {
      return /** @type {Geometry|undefined} */ (this.get(this.geometryName_));
    }

    /**
     * Get the feature identifier.  This is a stable identifier for the feature and
     * is either set when reading data from a remote source or set explicitly by
     * calling {@link module:ol/Feature~Feature#setId}.
     * @return {number|string|undefined} Id.
     * @api
     */
    getId() {
      return this.id_;
    }

    /**
     * Get the name of the feature's default geometry.  By default, the default
     * geometry is named `geometry`.
     * @return {string} Get the property name associated with the default geometry
     *     for this feature.
     * @api
     */
    getGeometryName() {
      return this.geometryName_;
    }

    /**
     * Get the feature's style. Will return what was provided to the
     * {@link module:ol/Feature~Feature#setStyle} method.
     * @return {import("./style/Style.js").StyleLike|undefined} The feature style.
     * @api
     */
    getStyle() {
      return this.style_;
    }

    /**
     * Get the feature's style function.
     * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
     * representing the current style of this feature.
     * @api
     */
    getStyleFunction() {
      return this.styleFunction_;
    }

    /**
     * @private
     */
    handleGeometryChange_() {
      this.changed();
    }

    /**
     * @private
     */
    handleGeometryChanged_() {
      if (this.geometryChangeKey_) {
        unlistenByKey(this.geometryChangeKey_);
        this.geometryChangeKey_ = null;
      }
      const geometry = this.getGeometry();
      if (geometry) {
        this.geometryChangeKey_ = listen(
          geometry,
          EventType.CHANGE,
          this.handleGeometryChange_,
          this,
        );
      }
      this.changed();
    }

    /**
     * Set the default geometry for the feature.  This will update the property
     * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
     * @param {Geometry|undefined} geometry The new geometry.
     * @api
     * @observable
     */
    setGeometry(geometry) {
      this.set(this.geometryName_, geometry);
    }

    /**
     * Set the style for the feature to override the layer style.  This can be a
     * single style object, an array of styles, or a function that takes a
     * resolution and returns an array of styles. To unset the feature style, call
     * `setStyle()` without arguments or a falsey value.
     * @param {import("./style/Style.js").StyleLike} [style] Style for this feature.
     * @api
     * @fires module:ol/events/Event~BaseEvent#event:change
     */
    setStyle(style) {
      this.style_ = style;
      this.styleFunction_ = !style ? undefined : createStyleFunction(style);
      this.changed();
    }

    /**
     * Set the feature id.  The feature id is considered stable and may be used when
     * requesting features or comparing identifiers returned from a remote source.
     * The feature id can be used with the
     * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
     * @param {number|string|undefined} id The feature id.
     * @api
     * @fires module:ol/events/Event~BaseEvent#event:change
     */
    setId(id) {
      this.id_ = id;
      this.changed();
    }

    /**
     * Set the property name to be used when getting the feature's default geometry.
     * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
     * this name will be returned.
     * @param {string} name The property name of the default geometry.
     * @api
     */
    setGeometryName(name) {
      this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);
      this.geometryName_ = name;
      this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);
      this.handleGeometryChanged_();
    }
  }

  /**
   * Convert the provided object into a feature style function.  Functions passed
   * through unchanged.  Arrays of Style or single style objects wrapped
   * in a new feature style function.
   * @param {!import("./style/Style.js").StyleFunction|!Array<import("./style/Style.js").default>|!import("./style/Style.js").default} obj
   *     A feature style function, a single style, or an array of styles.
   * @return {import("./style/Style.js").StyleFunction} A style function.
   */
  function createStyleFunction(obj) {
    if (typeof obj === 'function') {
      return obj;
    }
    /**
     * @type {Array<import("./style/Style.js").default>}
     */
    let styles;
    if (Array.isArray(obj)) {
      styles = obj;
    } else {
      assert$1(
        typeof (/** @type {?} */ (obj).getZIndex) === 'function',
        'Expected an `ol/style/Style` or an array of `ol/style/Style.js`',
      );
      const style = /** @type {import("./style/Style.js").default} */ (obj);
      styles = [style];
    }
    return function () {
      return styles;
    };
  }

  /**
   * @module ol/extent/Relationship
   */

  /**
   * Relationship to an extent.
   * @enum {number}
   */
  var Relationship = {
    UNKNOWN: 0,
    INTERSECTING: 1,
    ABOVE: 2,
    RIGHT: 4,
    BELOW: 8,
    LEFT: 16,
  };

  /**
   * @module ol/extent
   */

  /**
   * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
   * @typedef {Array<number>} Extent
   * @api
   */

  /**
   * Extent corner.
   * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner
   */

  /**
   * Build an extent that includes all given coordinates.
   *
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Bounding extent.
   * @api
   */
  function boundingExtent(coordinates) {
    const extent = createEmpty();
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      extendCoordinate(extent, coordinates[i]);
    }
    return extent;
  }

  /**
   * @param {Array<number>} xs Xs.
   * @param {Array<number>} ys Ys.
   * @param {Extent} [dest] Destination extent.
   * @private
   * @return {Extent} Extent.
   */
  function _boundingExtentXYs(xs, ys, dest) {
    const minX = Math.min.apply(null, xs);
    const minY = Math.min.apply(null, ys);
    const maxX = Math.max.apply(null, xs);
    const maxY = Math.max.apply(null, ys);
    return createOrUpdate$2(minX, minY, maxX, maxY, dest);
  }

  /**
   * Return extent increased by the provided value.
   * @param {Extent} extent Extent.
   * @param {number} value The amount by which the extent should be buffered.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   * @api
   */
  function buffer(extent, value, dest) {
    if (dest) {
      dest[0] = extent[0] - value;
      dest[1] = extent[1] - value;
      dest[2] = extent[2] + value;
      dest[3] = extent[3] + value;
      return dest;
    }
    return [
      extent[0] - value,
      extent[1] - value,
      extent[2] + value,
      extent[3] + value,
    ];
  }

  /**
   * Creates a clone of an extent.
   *
   * @param {Extent} extent Extent to clone.
   * @param {Extent} [dest] Extent.
   * @return {Extent} The clone.
   */
  function clone(extent, dest) {
    if (dest) {
      dest[0] = extent[0];
      dest[1] = extent[1];
      dest[2] = extent[2];
      dest[3] = extent[3];
      return dest;
    }
    return extent.slice();
  }

  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {number} Closest squared distance.
   */
  function closestSquaredDistanceXY(extent, x, y) {
    let dx, dy;
    if (x < extent[0]) {
      dx = extent[0] - x;
    } else if (extent[2] < x) {
      dx = x - extent[2];
    } else {
      dx = 0;
    }
    if (y < extent[1]) {
      dy = extent[1] - y;
    } else if (extent[3] < y) {
      dy = y - extent[3];
    } else {
      dy = 0;
    }
    return dx * dx + dy * dy;
  }

  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @return {boolean} The coordinate is contained in the extent.
   * @api
   */
  function containsCoordinate(extent, coordinate) {
    return containsXY(extent, coordinate[0], coordinate[1]);
  }

  /**
   * Check if one extent contains another.
   *
   * An extent is deemed contained if it lies completely within the other extent,
   * including if they share one or more edges.
   *
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The second extent is contained by or on the edge of the
   *     first.
   * @api
   */
  function containsExtent(extent1, extent2) {
    return (
      extent1[0] <= extent2[0] &&
      extent2[2] <= extent1[2] &&
      extent1[1] <= extent2[1] &&
      extent2[3] <= extent1[3]
    );
  }

  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {number} x X coordinate.
   * @param {number} y Y coordinate.
   * @return {boolean} The x, y values are contained in the extent.
   * @api
   */
  function containsXY(extent, x, y) {
    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
  }

  /**
   * Get the relationship between a coordinate and extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} coordinate The coordinate.
   * @return {import("./extent/Relationship.js").default} The relationship (bitwise compare with
   *     import("./extent/Relationship.js").Relationship).
   */
  function coordinateRelationship(extent, coordinate) {
    const minX = extent[0];
    const minY = extent[1];
    const maxX = extent[2];
    const maxY = extent[3];
    const x = coordinate[0];
    const y = coordinate[1];
    let relationship = Relationship.UNKNOWN;
    if (x < minX) {
      relationship = relationship | Relationship.LEFT;
    } else if (x > maxX) {
      relationship = relationship | Relationship.RIGHT;
    }
    if (y < minY) {
      relationship = relationship | Relationship.BELOW;
    } else if (y > maxY) {
      relationship = relationship | Relationship.ABOVE;
    }
    if (relationship === Relationship.UNKNOWN) {
      relationship = Relationship.INTERSECTING;
    }
    return relationship;
  }

  /**
   * Create an empty extent.
   * @return {Extent} Empty extent.
   * @api
   */
  function createEmpty() {
    return [Infinity, Infinity, -Infinity, -Infinity];
  }

  /**
   * Create a new extent or update the provided extent.
   * @param {number} minX Minimum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxX Maximum X.
   * @param {number} maxY Maximum Y.
   * @param {Extent} [dest] Destination extent.
   * @return {Extent} Extent.
   */
  function createOrUpdate$2(minX, minY, maxX, maxY, dest) {
    if (dest) {
      dest[0] = minX;
      dest[1] = minY;
      dest[2] = maxX;
      dest[3] = maxY;
      return dest;
    }
    return [minX, minY, maxX, maxY];
  }

  /**
   * Create a new empty extent or make the provided one empty.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateEmpty(dest) {
    return createOrUpdate$2(Infinity, Infinity, -Infinity, -Infinity, dest);
  }

  /**
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinate(coordinate, dest) {
    const x = coordinate[0];
    const y = coordinate[1];
    return createOrUpdate$2(x, y, x, y, dest);
  }

  /**
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinates(coordinates, dest) {
    const extent = createOrUpdateEmpty(dest);
    return extendCoordinates(extent, coordinates);
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromFlatCoordinates(
    flatCoordinates,
    offset,
    end,
    stride,
    dest,
  ) {
    const extent = createOrUpdateEmpty(dest);
    return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);
  }

  /**
   * @param {Array<Array<import("./coordinate.js").Coordinate>>} rings Rings.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromRings(rings, dest) {
    const extent = createOrUpdateEmpty(dest);
    return extendRings(extent, rings);
  }

  /**
   * Determine if two extents are equivalent.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The two extents are equivalent.
   * @api
   */
  function equals$1(extent1, extent2) {
    return (
      extent1[0] == extent2[0] &&
      extent1[2] == extent2[2] &&
      extent1[1] == extent2[1] &&
      extent1[3] == extent2[3]
    );
  }

  /**
   * Determine if two extents are approximately equivalent.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @param {number} tolerance Tolerance in extent coordinate units.
   * @return {boolean} The two extents differ by less than the tolerance.
   */
  function approximatelyEquals(extent1, extent2, tolerance) {
    return (
      Math.abs(extent1[0] - extent2[0]) < tolerance &&
      Math.abs(extent1[2] - extent2[2]) < tolerance &&
      Math.abs(extent1[1] - extent2[1]) < tolerance &&
      Math.abs(extent1[3] - extent2[3]) < tolerance
    );
  }

  /**
   * Modify an extent to include another extent.
   * @param {Extent} extent1 The extent to be modified.
   * @param {Extent} extent2 The extent that will be included in the first.
   * @return {Extent} A reference to the first (extended) extent.
   * @api
   */
  function extend$2(extent1, extent2) {
    if (extent2[0] < extent1[0]) {
      extent1[0] = extent2[0];
    }
    if (extent2[2] > extent1[2]) {
      extent1[2] = extent2[2];
    }
    if (extent2[1] < extent1[1]) {
      extent1[1] = extent2[1];
    }
    if (extent2[3] > extent1[3]) {
      extent1[3] = extent2[3];
    }
    return extent1;
  }

  /**
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   */
  function extendCoordinate(extent, coordinate) {
    if (coordinate[0] < extent[0]) {
      extent[0] = coordinate[0];
    }
    if (coordinate[0] > extent[2]) {
      extent[2] = coordinate[0];
    }
    if (coordinate[1] < extent[1]) {
      extent[1] = coordinate[1];
    }
    if (coordinate[1] > extent[3]) {
      extent[3] = coordinate[1];
    }
  }

  /**
   * @param {Extent} extent Extent.
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Extent.
   */
  function extendCoordinates(extent, coordinates) {
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      extendCoordinate(extent, coordinates[i]);
    }
    return extent;
  }

  /**
   * @param {Extent} extent Extent.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Extent} Extent.
   */
  function extendFlatCoordinates(
    extent,
    flatCoordinates,
    offset,
    end,
    stride,
  ) {
    for (; offset < end; offset += stride) {
      extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
    }
    return extent;
  }

  /**
   * @param {Extent} extent Extent.
   * @param {Array<Array<import("./coordinate.js").Coordinate>>} rings Rings.
   * @return {Extent} Extent.
   */
  function extendRings(extent, rings) {
    for (let i = 0, ii = rings.length; i < ii; ++i) {
      extendCoordinates(extent, rings[i]);
    }
    return extent;
  }

  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   */
  function extendXY(extent, x, y) {
    extent[0] = Math.min(extent[0], x);
    extent[1] = Math.min(extent[1], y);
    extent[2] = Math.max(extent[2], x);
    extent[3] = Math.max(extent[3], y);
  }

  /**
   * This function calls `callback` for each corner of the extent. If the
   * callback returns a truthy value the function returns that value
   * immediately. Otherwise the function returns `false`.
   * @param {Extent} extent Extent.
   * @param {function(import("./coordinate.js").Coordinate): S} callback Callback.
   * @return {S|boolean} Value.
   * @template S
   */
  function forEachCorner(extent, callback) {
    let val;
    val = callback(getBottomLeft(extent));
    if (val) {
      return val;
    }
    val = callback(getBottomRight(extent));
    if (val) {
      return val;
    }
    val = callback(getTopRight(extent));
    if (val) {
      return val;
    }
    val = callback(getTopLeft(extent));
    if (val) {
      return val;
    }
    return false;
  }

  /**
   * Get the size of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Area.
   * @api
   */
  function getArea$1(extent) {
    let area = 0;
    if (!isEmpty(extent)) {
      area = getWidth(extent) * getHeight(extent);
    }
    return area;
  }

  /**
   * Get the bottom left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom left coordinate.
   * @api
   */
  function getBottomLeft(extent) {
    return [extent[0], extent[1]];
  }

  /**
   * Get the bottom right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom right coordinate.
   * @api
   */
  function getBottomRight(extent) {
    return [extent[2], extent[1]];
  }

  /**
   * Get the center coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Center.
   * @api
   */
  function getCenter(extent) {
    return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
  }

  /**
   * Get a corner coordinate of an extent.
   * @param {Extent} extent Extent.
   * @param {Corner} corner Corner.
   * @return {import("./coordinate.js").Coordinate} Corner coordinate.
   */
  function getCorner(extent, corner) {
    let coordinate;
    if (corner === 'bottom-left') {
      coordinate = getBottomLeft(extent);
    } else if (corner === 'bottom-right') {
      coordinate = getBottomRight(extent);
    } else if (corner === 'top-left') {
      coordinate = getTopLeft(extent);
    } else if (corner === 'top-right') {
      coordinate = getTopRight(extent);
    } else {
      throw new Error('Invalid corner');
    }
    return coordinate;
  }

  /**
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {number} Enlarged area.
   */
  function getEnlargedArea(extent1, extent2) {
    const minX = Math.min(extent1[0], extent2[0]);
    const minY = Math.min(extent1[1], extent2[1]);
    const maxX = Math.max(extent1[2], extent2[2]);
    const maxY = Math.max(extent1[3], extent2[3]);
    return (maxX - minX) * (maxY - minY);
  }

  /**
   * @param {import("./coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {import("./size.js").Size} size Size.
   * @param {Extent} [dest] Destination extent.
   * @return {Extent} Extent.
   */
  function getForViewAndSize(center, resolution, rotation, size, dest) {
    const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(
      center,
      resolution,
      rotation,
      size,
    );
    return createOrUpdate$2(
      Math.min(x0, x1, x2, x3),
      Math.min(y0, y1, y2, y3),
      Math.max(x0, x1, x2, x3),
      Math.max(y0, y1, y2, y3),
      dest,
    );
  }

  /**
   * @param {import("./coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {import("./size.js").Size} size Size.
   * @return {Array<number>} Linear ring representing the viewport.
   */
  function getRotatedViewport(center, resolution, rotation, size) {
    const dx = (resolution * size[0]) / 2;
    const dy = (resolution * size[1]) / 2;
    const cosRotation = Math.cos(rotation);
    const sinRotation = Math.sin(rotation);
    const xCos = dx * cosRotation;
    const xSin = dx * sinRotation;
    const yCos = dy * cosRotation;
    const ySin = dy * sinRotation;
    const x = center[0];
    const y = center[1];
    return [
      x - xCos + ySin,
      y - xSin - yCos,
      x - xCos - ySin,
      y - xSin + yCos,
      x + xCos - ySin,
      y + xSin + yCos,
      x + xCos + ySin,
      y + xSin - yCos,
      x - xCos + ySin,
      y - xSin - yCos,
    ];
  }

  /**
   * Get the height of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Height.
   * @api
   */
  function getHeight(extent) {
    return extent[3] - extent[1];
  }

  /**
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {number} Intersection area.
   */
  function getIntersectionArea(extent1, extent2) {
    const intersection = getIntersection(extent1, extent2);
    return getArea$1(intersection);
  }

  /**
   * Get the intersection of two extents.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @param {Extent} [dest] Optional extent to populate with intersection.
   * @return {Extent} Intersecting extent.
   * @api
   */
  function getIntersection(extent1, extent2, dest) {
    const intersection = dest ? dest : createEmpty();
    if (intersects$1(extent1, extent2)) {
      if (extent1[0] > extent2[0]) {
        intersection[0] = extent1[0];
      } else {
        intersection[0] = extent2[0];
      }
      if (extent1[1] > extent2[1]) {
        intersection[1] = extent1[1];
      } else {
        intersection[1] = extent2[1];
      }
      if (extent1[2] < extent2[2]) {
        intersection[2] = extent1[2];
      } else {
        intersection[2] = extent2[2];
      }
      if (extent1[3] < extent2[3]) {
        intersection[3] = extent1[3];
      } else {
        intersection[3] = extent2[3];
      }
    } else {
      createOrUpdateEmpty(intersection);
    }
    return intersection;
  }

  /**
   * @param {Extent} extent Extent.
   * @return {number} Margin.
   */
  function getMargin(extent) {
    return getWidth(extent) + getHeight(extent);
  }

  /**
   * Get the size (width, height) of an extent.
   * @param {Extent} extent The extent.
   * @return {import("./size.js").Size} The extent size.
   * @api
   */
  function getSize(extent) {
    return [extent[2] - extent[0], extent[3] - extent[1]];
  }

  /**
   * Get the top left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top left coordinate.
   * @api
   */
  function getTopLeft(extent) {
    return [extent[0], extent[3]];
  }

  /**
   * Get the top right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top right coordinate.
   * @api
   */
  function getTopRight(extent) {
    return [extent[2], extent[3]];
  }

  /**
   * Get the width of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Width.
   * @api
   */
  function getWidth(extent) {
    return extent[2] - extent[0];
  }

  /**
   * Determine if one extent intersects another.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent.
   * @return {boolean} The two extents intersect.
   * @api
   */
  function intersects$1(extent1, extent2) {
    return (
      extent1[0] <= extent2[2] &&
      extent1[2] >= extent2[0] &&
      extent1[1] <= extent2[3] &&
      extent1[3] >= extent2[1]
    );
  }

  /**
   * Determine if an extent is empty.
   * @param {Extent} extent Extent.
   * @return {boolean} Is empty.
   * @api
   */
  function isEmpty(extent) {
    return extent[2] < extent[0] || extent[3] < extent[1];
  }

  /**
   * @param {Extent} extent Extent.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function returnOrUpdate(extent, dest) {
    if (dest) {
      dest[0] = extent[0];
      dest[1] = extent[1];
      dest[2] = extent[2];
      dest[3] = extent[3];
      return dest;
    }
    return extent;
  }

  /**
   * @param {Extent} extent Extent.
   * @param {number} value Value.
   */
  function scaleFromCenter(extent, value) {
    const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);
    const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);
    extent[0] -= deltaX;
    extent[2] += deltaX;
    extent[1] -= deltaY;
    extent[3] += deltaY;
  }

  /**
   * Determine if the segment between two coordinates intersects (crosses,
   * touches, or is contained by) the provided extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} start Segment start coordinate.
   * @param {import("./coordinate.js").Coordinate} end Segment end coordinate.
   * @return {boolean} The segment intersects the extent.
   */
  function intersectsSegment(extent, start, end) {
    let intersects = false;
    const startRel = coordinateRelationship(extent, start);
    const endRel = coordinateRelationship(extent, end);
    if (
      startRel === Relationship.INTERSECTING ||
      endRel === Relationship.INTERSECTING
    ) {
      intersects = true;
    } else {
      const minX = extent[0];
      const minY = extent[1];
      const maxX = extent[2];
      const maxY = extent[3];
      const startX = start[0];
      const startY = start[1];
      const endX = end[0];
      const endY = end[1];
      const slope = (endY - startY) / (endX - startX);
      let x, y;
      if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {
        // potentially intersects top
        x = endX - (endY - maxY) / slope;
        intersects = x >= minX && x <= maxX;
      }
      if (
        !intersects &&
        !!(endRel & Relationship.RIGHT) &&
        !(startRel & Relationship.RIGHT)
      ) {
        // potentially intersects right
        y = endY - (endX - maxX) * slope;
        intersects = y >= minY && y <= maxY;
      }
      if (
        !intersects &&
        !!(endRel & Relationship.BELOW) &&
        !(startRel & Relationship.BELOW)
      ) {
        // potentially intersects bottom
        x = endX - (endY - minY) / slope;
        intersects = x >= minX && x <= maxX;
      }
      if (
        !intersects &&
        !!(endRel & Relationship.LEFT) &&
        !(startRel & Relationship.LEFT)
      ) {
        // potentially intersects left
        y = endY - (endX - minX) * slope;
        intersects = y >= minY && y <= maxY;
      }
    }
    return intersects;
  }

  /**
   * Apply a transform function to the extent.
   * @param {Extent} extent Extent.
   * @param {import("./proj.js").TransformFunction} transformFn Transform function.
   * Called with `[minX, minY, maxX, maxY]` extent coordinates.
   * @param {Extent} [dest] Destination extent.
   * @param {number} [stops] Number of stops per side used for the transform.
   * By default only the corners are used.
   * @return {Extent} Extent.
   * @api
   */
  function applyTransform(extent, transformFn, dest, stops) {
    if (isEmpty(extent)) {
      return createOrUpdateEmpty(dest);
    }
    let coordinates = [];
    if (stops > 1) {
      const width = extent[2] - extent[0];
      const height = extent[3] - extent[1];
      for (let i = 0; i < stops; ++i) {
        coordinates.push(
          extent[0] + (width * i) / stops,
          extent[1],
          extent[2],
          extent[1] + (height * i) / stops,
          extent[2] - (width * i) / stops,
          extent[3],
          extent[0],
          extent[3] - (height * i) / stops,
        );
      }
    } else {
      coordinates = [
        extent[0],
        extent[1],
        extent[2],
        extent[1],
        extent[2],
        extent[3],
        extent[0],
        extent[3],
      ];
    }
    transformFn(coordinates, coordinates, 2);
    const xs = [];
    const ys = [];
    for (let i = 0, l = coordinates.length; i < l; i += 2) {
      xs.push(coordinates[i]);
      ys.push(coordinates[i + 1]);
    }
    return _boundingExtentXYs(xs, ys, dest);
  }

  /**
   * Modifies the provided extent in-place to be within the real world
   * extent.
   *
   * @param {Extent} extent Extent.
   * @param {import("./proj/Projection.js").default} projection Projection
   * @return {Extent} The extent within the real world extent.
   */
  function wrapX$2(extent, projection) {
    const projectionExtent = projection.getExtent();
    const center = getCenter(extent);
    if (
      projection.canWrapX() &&
      (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])
    ) {
      const worldWidth = getWidth(projectionExtent);
      const worldsAway = Math.floor(
        (center[0] - projectionExtent[0]) / worldWidth,
      );
      const offset = worldsAway * worldWidth;
      extent[0] -= offset;
      extent[2] -= offset;
    }
    return extent;
  }

  /**
   * Fits the extent to the real world
   *
   * If the extent does not cross the anti meridian, this will return the extent in an array
   * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the
   * real world
   *
   *
   * @param {Extent} extent Extent.
   * @param {import("./proj/Projection.js").default} projection Projection
   * @param {boolean} [multiWorld] Return all worlds
   * @return {Array<Extent>} The extent within the real world extent.
   */
  function wrapAndSliceX(extent, projection, multiWorld) {
    if (projection.canWrapX()) {
      const projectionExtent = projection.getExtent();

      if (!isFinite(extent[0]) || !isFinite(extent[2])) {
        return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];
      }

      wrapX$2(extent, projection);
      const worldWidth = getWidth(projectionExtent);

      if (getWidth(extent) > worldWidth && !multiWorld) {
        // the extent wraps around on itself
        return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];
      }
      if (extent[0] < projectionExtent[0]) {
        // the extent crosses the anti meridian, so it needs to be sliced
        return [
          [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],
          [projectionExtent[0], extent[1], extent[2], extent[3]],
        ];
      }
      if (extent[2] > projectionExtent[2]) {
        // the extent crosses the anti meridian, so it needs to be sliced
        return [
          [extent[0], extent[1], projectionExtent[2], extent[3]],
          [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],
        ];
      }
    }

    return [extent];
  }

  var extent = /*#__PURE__*/Object.freeze({
    __proto__: null,
    applyTransform: applyTransform,
    approximatelyEquals: approximatelyEquals,
    boundingExtent: boundingExtent,
    buffer: buffer,
    clone: clone,
    closestSquaredDistanceXY: closestSquaredDistanceXY,
    containsCoordinate: containsCoordinate,
    containsExtent: containsExtent,
    containsXY: containsXY,
    coordinateRelationship: coordinateRelationship,
    createEmpty: createEmpty,
    createOrUpdate: createOrUpdate$2,
    createOrUpdateEmpty: createOrUpdateEmpty,
    createOrUpdateFromCoordinate: createOrUpdateFromCoordinate,
    createOrUpdateFromCoordinates: createOrUpdateFromCoordinates,
    createOrUpdateFromFlatCoordinates: createOrUpdateFromFlatCoordinates,
    createOrUpdateFromRings: createOrUpdateFromRings,
    equals: equals$1,
    extend: extend$2,
    extendCoordinate: extendCoordinate,
    extendCoordinates: extendCoordinates,
    extendFlatCoordinates: extendFlatCoordinates,
    extendRings: extendRings,
    extendXY: extendXY,
    forEachCorner: forEachCorner,
    getArea: getArea$1,
    getBottomLeft: getBottomLeft,
    getBottomRight: getBottomRight,
    getCenter: getCenter,
    getCorner: getCorner,
    getEnlargedArea: getEnlargedArea,
    getForViewAndSize: getForViewAndSize,
    getHeight: getHeight,
    getIntersection: getIntersection,
    getIntersectionArea: getIntersectionArea,
    getMargin: getMargin,
    getRotatedViewport: getRotatedViewport,
    getSize: getSize,
    getTopLeft: getTopLeft,
    getTopRight: getTopRight,
    getWidth: getWidth,
    intersects: intersects$1,
    intersectsSegment: intersectsSegment,
    isEmpty: isEmpty,
    returnOrUpdate: returnOrUpdate,
    scaleFromCenter: scaleFromCenter,
    wrapAndSliceX: wrapAndSliceX,
    wrapX: wrapX$2
  });

  /**
   * @module ol/math
   */

  /**
   * Takes a number and clamps it to within the provided bounds.
   * @param {number} value The input number.
   * @param {number} min The minimum value to return.
   * @param {number} max The maximum value to return.
   * @return {number} The input number if it is within bounds, or the nearest
   *     number within the bounds.
   */
  function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }

  /**
   * Returns the square of the closest distance between the point (x, y) and the
   * line segment (x1, y1) to (x2, y2).
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    if (dx !== 0 || dy !== 0) {
      const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
      if (t > 1) {
        x1 = x2;
        y1 = y2;
      } else if (t > 0) {
        x1 += dx * t;
        y1 += dy * t;
      }
    }
    return squaredDistance$1(x, y, x1, y1);
  }

  /**
   * Returns the square of the distance between the points (x1, y1) and (x2, y2).
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredDistance$1(x1, y1, x2, y2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    return dx * dx + dy * dy;
  }

  /**
   * Solves system of linear equations using Gaussian elimination method.
   *
   * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)
   *                                     in row-major order.
   * @return {Array<number>|null} The resulting vector.
   */
  function solveLinearSystem(mat) {
    const n = mat.length;

    for (let i = 0; i < n; i++) {
      // Find max in the i-th column (ignoring i - 1 first rows)
      let maxRow = i;
      let maxEl = Math.abs(mat[i][i]);
      for (let r = i + 1; r < n; r++) {
        const absValue = Math.abs(mat[r][i]);
        if (absValue > maxEl) {
          maxEl = absValue;
          maxRow = r;
        }
      }

      if (maxEl === 0) {
        return null; // matrix is singular
      }

      // Swap max row with i-th (current) row
      const tmp = mat[maxRow];
      mat[maxRow] = mat[i];
      mat[i] = tmp;

      // Subtract the i-th row to make all the remaining rows 0 in the i-th column
      for (let j = i + 1; j < n; j++) {
        const coef = -mat[j][i] / mat[i][i];
        for (let k = i; k < n + 1; k++) {
          if (i == k) {
            mat[j][k] = 0;
          } else {
            mat[j][k] += coef * mat[i][k];
          }
        }
      }
    }

    // Solve Ax=b for upper triangular matrix A (mat)
    const x = new Array(n);
    for (let l = n - 1; l >= 0; l--) {
      x[l] = mat[l][n] / mat[l][l];
      for (let m = l - 1; m >= 0; m--) {
        mat[m][n] -= mat[m][l] * x[l];
      }
    }
    return x;
  }

  /**
   * Converts radians to to degrees.
   *
   * @param {number} angleInRadians Angle in radians.
   * @return {number} Angle in degrees.
   */
  function toDegrees(angleInRadians) {
    return (angleInRadians * 180) / Math.PI;
  }

  /**
   * Converts degrees to radians.
   *
   * @param {number} angleInDegrees Angle in degrees.
   * @return {number} Angle in radians.
   */
  function toRadians(angleInDegrees) {
    return (angleInDegrees * Math.PI) / 180;
  }

  /**
   * Returns the modulo of a / b, depending on the sign of b.
   *
   * @param {number} a Dividend.
   * @param {number} b Divisor.
   * @return {number} Modulo.
   */
  function modulo(a, b) {
    const r = a % b;
    return r * b < 0 ? r + b : r;
  }

  /**
   * Calculates the linearly interpolated value of x between a and b.
   *
   * @param {number} a Number
   * @param {number} b Number
   * @param {number} x Value to be interpolated.
   * @return {number} Interpolated value.
   */
  function lerp(a, b, x) {
    return a + x * (b - a);
  }

  /**
   * Returns a number with a limited number of decimal digits.
   * @param {number} n The input number.
   * @param {number} decimals The maximum number of decimal digits.
   * @return {number} The input number with a limited number of decimal digits.
   */
  function toFixed(n, decimals) {
    const factor = Math.pow(10, decimals);
    return Math.round(n * factor) / factor;
  }

  /**
   * Rounds a number to the nearest integer value considering only the given number
   * of decimal digits (with rounding on the final digit).
   * @param {number} n The input number.
   * @param {number} decimals The maximum number of decimal digits.
   * @return {number} The nearest integer.
   */
  function round(n, decimals) {
    return Math.round(toFixed(n, decimals));
  }

  /**
   * Rounds a number to the next smaller integer considering only the given number
   * of decimal digits (with rounding on the final digit).
   * @param {number} n The input number.
   * @param {number} decimals The maximum number of decimal digits.
   * @return {number} The next smaller integer.
   */
  function floor(n, decimals) {
    return Math.floor(toFixed(n, decimals));
  }

  /**
   * Rounds a number to the next bigger integer considering only the given number
   * of decimal digits (with rounding on the final digit).
   * @param {number} n The input number.
   * @param {number} decimals The maximum number of decimal digits.
   * @return {number} The next bigger integer.
   */
  function ceil(n, decimals) {
    return Math.ceil(toFixed(n, decimals));
  }

  /**
   * Wraps a number between some minimum and maximum values.
   * @param {number} n The number to wrap.
   * @param {number} min The minimum of the range (inclusive).
   * @param {number} max The maximum of the range (exclusive).
   * @return {number} The wrapped number.
   */
  function wrap(n, min, max) {
    if (n >= min && n < max) {
      return n;
    }
    const range = max - min;
    return ((((n - min) % range) + range) % range) + min;
  }

  /**
   * @module ol/sphere
   */

  /**
   * Object literal with options for the {@link getLength} or {@link getArea}
   * functions.
   * @typedef {Object} SphereMetricOptions
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857']
   * Projection of the  geometry.  By default, the geometry is assumed to be in
   * Web Mercator.
   * @property {number} [radius=6371008.8] Sphere radius.  By default, the
   * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)
   * for the WGS84 ellipsoid is used.
   */

  /**
   * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.
   * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius
   * @type {number}
   */
  const DEFAULT_RADIUS = 6371008.8;

  /**
   * Get the great circle distance (in meters) between two geographic coordinates.
   * @param {Array} c1 Starting coordinate.
   * @param {Array} c2 Ending coordinate.
   * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's
   *     mean radius using the WGS84 ellipsoid.
   * @return {number} The great circle distance between the points (in meters).
   * @api
   */
  function getDistance(c1, c2, radius) {
    radius = radius || DEFAULT_RADIUS;
    const lat1 = toRadians(c1[1]);
    const lat2 = toRadians(c2[1]);
    const deltaLatBy2 = (lat2 - lat1) / 2;
    const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;
    const a =
      Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +
      Math.sin(deltaLonBy2) *
        Math.sin(deltaLonBy2) *
        Math.cos(lat1) *
        Math.cos(lat2);
    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  }

  /**
   * Get the cumulative great circle length of linestring coordinates (geographic).
   * @param {Array} coordinates Linestring coordinates.
   * @param {number} radius The sphere radius to use.
   * @return {number} The length (in meters).
   */
  function getLengthInternal(coordinates, radius) {
    let length = 0;
    for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {
      length += getDistance(coordinates[i], coordinates[i + 1], radius);
    }
    return length;
  }

  /**
   * Get the spherical length of a geometry.  This length is the sum of the
   * great circle distances between coordinates.  For polygons, the length is
   * the sum of all rings.  For points, the length is zero.  For multi-part
   * geometries, the length is the sum of the length of each part.
   * @param {import("./geom/Geometry.js").default} geometry A geometry.
   * @param {SphereMetricOptions} [options] Options for the
   * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.
   * You can change this by providing a `projection` option.
   * @return {number} The spherical length (in meters).
   * @api
   */
  function getLength(geometry, options) {
    options = options || {};
    const radius = options.radius || DEFAULT_RADIUS;
    const projection = options.projection || 'EPSG:3857';
    const type = geometry.getType();
    if (type !== 'GeometryCollection') {
      geometry = geometry.clone().transform(projection, 'EPSG:4326');
    }
    let length = 0;
    let coordinates, coords, i, ii, j, jj;
    switch (type) {
      case 'Point':
      case 'MultiPoint': {
        break;
      }
      case 'LineString':
      case 'LinearRing': {
        coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (
          geometry
        ).getCoordinates();
        length = getLengthInternal(coordinates, radius);
        break;
      }
      case 'MultiLineString':
      case 'Polygon': {
        coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (
          geometry
        ).getCoordinates();
        for (i = 0, ii = coordinates.length; i < ii; ++i) {
          length += getLengthInternal(coordinates[i], radius);
        }
        break;
      }
      case 'MultiPolygon': {
        coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (
          geometry
        ).getCoordinates();
        for (i = 0, ii = coordinates.length; i < ii; ++i) {
          coords = coordinates[i];
          for (j = 0, jj = coords.length; j < jj; ++j) {
            length += getLengthInternal(coords[j], radius);
          }
        }
        break;
      }
      case 'GeometryCollection': {
        const geometries =
          /** @type {import("./geom/GeometryCollection.js").default} */ (
            geometry
          ).getGeometries();
        for (i = 0, ii = geometries.length; i < ii; ++i) {
          length += getLength(geometries[i], options);
        }
        break;
      }
      default: {
        throw new Error('Unsupported geometry type: ' + type);
      }
    }
    return length;
  }

  /**
   * Returns the spherical area for a list of coordinates.
   *
   * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)
   * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for
   * Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
   * Laboratory, Pasadena, CA, June 2007
   *
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates List of coordinates of a linear
   * ring. If the ring is oriented clockwise, the area will be positive,
   * otherwise it will be negative.
   * @param {number} radius The sphere radius.
   * @return {number} Area (in square meters).
   */
  function getAreaInternal(coordinates, radius) {
    let area = 0;
    const len = coordinates.length;
    let x1 = coordinates[len - 1][0];
    let y1 = coordinates[len - 1][1];
    for (let i = 0; i < len; i++) {
      const x2 = coordinates[i][0];
      const y2 = coordinates[i][1];
      area +=
        toRadians(x2 - x1) *
        (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));
      x1 = x2;
      y1 = y2;
    }
    return (area * radius * radius) / 2.0;
  }

  /**
   * Get the spherical area of a geometry.  This is the area (in meters) assuming
   * that polygon edges are segments of great circles on a sphere.
   * @param {import("./geom/Geometry.js").default} geometry A geometry.
   * @param {SphereMetricOptions} [options] Options for the area
   *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.
   *     You can change this by providing a `projection` option.
   * @return {number} The spherical area (in square meters).
   * @api
   */
  function getArea(geometry, options) {
    options = options || {};
    const radius = options.radius || DEFAULT_RADIUS;
    const projection = options.projection || 'EPSG:3857';
    const type = geometry.getType();
    if (type !== 'GeometryCollection') {
      geometry = geometry.clone().transform(projection, 'EPSG:4326');
    }
    let area = 0;
    let coordinates, coords, i, ii, j, jj;
    switch (type) {
      case 'Point':
      case 'MultiPoint':
      case 'LineString':
      case 'MultiLineString':
      case 'LinearRing': {
        break;
      }
      case 'Polygon': {
        coordinates = /** @type {import("./geom/Polygon.js").default} */ (
          geometry
        ).getCoordinates();
        area = Math.abs(getAreaInternal(coordinates[0], radius));
        for (i = 1, ii = coordinates.length; i < ii; ++i) {
          area -= Math.abs(getAreaInternal(coordinates[i], radius));
        }
        break;
      }
      case 'MultiPolygon': {
        coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (
          geometry
        ).getCoordinates();
        for (i = 0, ii = coordinates.length; i < ii; ++i) {
          coords = coordinates[i];
          area += Math.abs(getAreaInternal(coords[0], radius));
          for (j = 1, jj = coords.length; j < jj; ++j) {
            area -= Math.abs(getAreaInternal(coords[j], radius));
          }
        }
        break;
      }
      case 'GeometryCollection': {
        const geometries =
          /** @type {import("./geom/GeometryCollection.js").default} */ (
            geometry
          ).getGeometries();
        for (i = 0, ii = geometries.length; i < ii; ++i) {
          area += getArea(geometries[i], options);
        }
        break;
      }
      default: {
        throw new Error('Unsupported geometry type: ' + type);
      }
    }
    return area;
  }

  /**
   * Returns the coordinate at the given distance and bearing from `c1`.
   *
   * @param {import("./coordinate.js").Coordinate} c1 The origin point (`[lon, lat]` in degrees).
   * @param {number} distance The great-circle distance between the origin
   *     point and the target point.
   * @param {number} bearing The bearing (in radians).
   * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's
   *     mean radius using the WGS84 ellipsoid.
   * @return {import("./coordinate.js").Coordinate} The target point.
   */
  function offset(c1, distance, bearing, radius) {
    radius = radius || DEFAULT_RADIUS;
    const lat1 = toRadians(c1[1]);
    const lon1 = toRadians(c1[0]);
    const dByR = distance / radius;
    const lat = Math.asin(
      Math.sin(lat1) * Math.cos(dByR) +
        Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing),
    );
    const lon =
      lon1 +
      Math.atan2(
        Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),
        Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat),
      );
    return [toDegrees(lon), toDegrees(lat)];
  }

  var sphere$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DEFAULT_RADIUS: DEFAULT_RADIUS,
    getArea: getArea,
    getDistance: getDistance,
    getLength: getLength,
    offset: offset
  });

  /**
   * @module ol/console
   */


  /**
   * @param  {...any} args Arguments to log
   */
  function warn(...args) {
    console.warn(...args); // eslint-disable-line no-console
  }

  /**
   * @module ol/string
   */

  /**
   * @param {number} number Number to be formatted
   * @param {number} width The desired width
   * @param {number} [precision] Precision of the output string (i.e. number of decimal places)
   * @return {string} Formatted string
   */
  function padNumber(number, width, precision) {
    const numberString =
      precision !== undefined ? number.toFixed(precision) : '' + number;
    let decimal = numberString.indexOf('.');
    decimal = decimal === -1 ? numberString.length : decimal;
    return decimal > width
      ? numberString
      : new Array(1 + width - decimal).join('0') + numberString;
  }

  /**
   * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js
   * @param {string|number} v1 First version
   * @param {string|number} v2 Second version
   * @return {number} Value
   */
  function compareVersions(v1, v2) {
    const s1 = ('' + v1).split('.');
    const s2 = ('' + v2).split('.');

    for (let i = 0; i < Math.max(s1.length, s2.length); i++) {
      const n1 = parseInt(s1[i] || '0', 10);
      const n2 = parseInt(s2[i] || '0', 10);

      if (n1 > n2) {
        return 1;
      }
      if (n2 > n1) {
        return -1;
      }
    }

    return 0;
  }

  /**
   * @module ol/coordinate
   */

  /**
   * An array of numbers representing an `xy`, `xyz` or `xyzm` coordinate.
   * Example: `[16, 48]`.
   * @typedef {Array<number>} Coordinate
   * @api
   */

  /**
   * A function that takes a {@link module:ol/coordinate~Coordinate} and
   * transforms it into a `{string}`.
   *
   * @typedef {function((Coordinate|undefined)): string} CoordinateFormat
   * @api
   */

  /**
   * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {add} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     add(coord, [-2, 4]);
   *     // coord is now [5.85, 51.983333]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {Coordinate} delta Delta.
   * @return {Coordinate} The input coordinate adjusted by
   * the given delta.
   * @api
   */
  function add$3(coordinate, delta) {
    coordinate[0] += +delta[0];
    coordinate[1] += +delta[1];
    return coordinate;
  }

  /**
   * Calculates the point closest to the passed coordinate on the passed circle.
   *
   * @param {Coordinate} coordinate The coordinate.
   * @param {import("./geom/Circle.js").default} circle The circle.
   * @return {Coordinate} Closest point on the circumference.
   */
  function closestOnCircle(coordinate, circle) {
    const r = circle.getRadius();
    const center = circle.getCenter();
    const x0 = center[0];
    const y0 = center[1];
    const x1 = coordinate[0];
    const y1 = coordinate[1];

    let dx = x1 - x0;
    const dy = y1 - y0;
    if (dx === 0 && dy === 0) {
      dx = 1;
    }
    const d = Math.sqrt(dx * dx + dy * dy);

    const x = x0 + (r * dx) / d;
    const y = y0 + (r * dy) / d;

    return [x, y];
  }

  /**
   * Calculates the point closest to the passed coordinate on the passed segment.
   * This is the foot of the perpendicular of the coordinate to the segment when
   * the foot is on the segment, or the closest segment coordinate when the foot
   * is outside the segment.
   *
   * @param {Coordinate} coordinate The coordinate.
   * @param {Array<Coordinate>} segment The two coordinates
   * of the segment.
   * @return {Coordinate} The foot of the perpendicular of
   * the coordinate to the segment.
   */
  function closestOnSegment(coordinate, segment) {
    const x0 = coordinate[0];
    const y0 = coordinate[1];
    const start = segment[0];
    const end = segment[1];
    const x1 = start[0];
    const y1 = start[1];
    const x2 = end[0];
    const y2 = end[1];
    const dx = x2 - x1;
    const dy = y2 - y1;
    const along =
      dx === 0 && dy === 0
        ? 0
        : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);
    let x, y;
    if (along <= 0) {
      x = x1;
      y = y1;
    } else if (along >= 1) {
      x = x2;
      y = y2;
    } else {
      x = x1 + along * dx;
      y = y1 + along * dy;
    }
    return [x, y];
  }

  /**
   * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be
   * used to format
   * a {Coordinate} to a string.
   *
   * Example without specifying the fractional digits:
   *
   *     import {createStringXY} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const stringifyFunc = createStringXY();
   *     const out = stringifyFunc(coord);
   *     // out is now '8, 48'
   *
   * Example with explicitly specifying 2 fractional digits:
   *
   *     import {createStringXY} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const stringifyFunc = createStringXY(2);
   *     const out = stringifyFunc(coord);
   *     // out is now '7.85, 47.98'
   *
   * @param {number} [fractionDigits] The number of digits to include
   *    after the decimal point. Default is `0`.
   * @return {CoordinateFormat} Coordinate format.
   * @api
   */
  function createStringXY(fractionDigits) {
    return (
      /**
       * @param {Coordinate} coordinate Coordinate.
       * @return {string} String XY.
       */
      function (coordinate) {
        return toStringXY(coordinate, fractionDigits);
      }
    );
  }

  /**
   * @param {string} hemispheres Hemispheres.
   * @param {number} degrees Degrees.
   * @param {number} [fractionDigits] The number of digits to include
   *    after the decimal point. Default is `0`.
   * @return {string} String.
   */
  function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {
    const normalizedDegrees = modulo(degrees + 180, 360) - 180;
    const x = Math.abs(3600 * normalizedDegrees);
    const decimals = fractionDigits || 0;

    let deg = Math.floor(x / 3600);
    let min = Math.floor((x - deg * 3600) / 60);
    let sec = toFixed(x - deg * 3600 - min * 60, decimals);

    if (sec >= 60) {
      sec = 0;
      min += 1;
    }

    if (min >= 60) {
      min = 0;
      deg += 1;
    }

    let hdms = deg + '\u00b0';
    if (min !== 0 || sec !== 0) {
      hdms += ' ' + padNumber(min, 2) + '\u2032';
    }
    if (sec !== 0) {
      hdms += ' ' + padNumber(sec, 2, decimals) + '\u2033';
    }
    if (normalizedDegrees !== 0) {
      hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);
    }

    return hdms;
  }

  /**
   * Transforms the given {@link module:ol/coordinate~Coordinate} to a string
   * using the given string template. The strings `{x}` and `{y}` in the template
   * will be replaced with the first and second coordinate values respectively.
   *
   * Example without specifying the fractional digits:
   *
   *     import {format} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const template = 'Coordinate is ({x}|{y}).';
   *     const out = format(coord, template);
   *     // out is now 'Coordinate is (8|48).'
   *
   * Example explicitly specifying the fractional digits:
   *
   *     import {format} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const template = 'Coordinate is ({x}|{y}).';
   *     const out = format(coord, template, 2);
   *     // out is now 'Coordinate is (7.85|47.98).'
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {string} template A template string with `{x}` and `{y}` placeholders
   *     that will be replaced by first and second coordinate values.
   * @param {number} [fractionDigits] The number of digits to include
   *    after the decimal point. Default is `0`.
   * @return {string} Formatted coordinate.
   * @api
   */
  function format$1(coordinate, template, fractionDigits) {
    if (coordinate) {
      return template
        .replace('{x}', coordinate[0].toFixed(fractionDigits))
        .replace('{y}', coordinate[1].toFixed(fractionDigits));
    }
    return '';
  }

  /**
   * @param {Coordinate} coordinate1 First coordinate.
   * @param {Coordinate} coordinate2 Second coordinate.
   * @return {boolean} The two coordinates are equal.
   */
  function equals(coordinate1, coordinate2) {
    let equals = true;
    for (let i = coordinate1.length - 1; i >= 0; --i) {
      if (coordinate1[i] != coordinate2[i]) {
        equals = false;
        break;
      }
    }
    return equals;
  }

  /**
   * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
   * returned by the function.
   *
   * Example:
   *
   *     import {rotate} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const rotateRadians = Math.PI / 2; // 90 degrees
   *     rotate(coord, rotateRadians);
   *     // coord is now [-47.983333, 7.85]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} angle Angle in radian.
   * @return {Coordinate} Coordinate.
   * @api
   */
  function rotate$1(coordinate, angle) {
    const cosAngle = Math.cos(angle);
    const sinAngle = Math.sin(angle);
    const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
    const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
    coordinate[0] = x;
    coordinate[1] = y;
    return coordinate;
  }

  /**
   * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {scale as scaleCoordinate} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const scale = 1.2;
   *     scaleCoordinate(coord, scale);
   *     // coord is now [9.42, 57.5799996]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} scale Scale factor.
   * @return {Coordinate} Coordinate.
   */
  function scale$2(coordinate, scale) {
    coordinate[0] *= scale;
    coordinate[1] *= scale;
    return coordinate;
  }

  /**
   * @param {Coordinate} coord1 First coordinate.
   * @param {Coordinate} coord2 Second coordinate.
   * @return {number} Squared distance between coord1 and coord2.
   */
  function squaredDistance(coord1, coord2) {
    const dx = coord1[0] - coord2[0];
    const dy = coord1[1] - coord2[1];
    return dx * dx + dy * dy;
  }

  /**
   * @param {Coordinate} coord1 First coordinate.
   * @param {Coordinate} coord2 Second coordinate.
   * @return {number} Distance between coord1 and coord2.
   */
  function distance(coord1, coord2) {
    return Math.sqrt(squaredDistance(coord1, coord2));
  }

  /**
   * Calculate the squared distance from a coordinate to a line segment.
   *
   * @param {Coordinate} coordinate Coordinate of the point.
   * @param {Array<Coordinate>} segment Line segment (2
   * coordinates).
   * @return {number} Squared distance from the point to the line segment.
   */
  function squaredDistanceToSegment(coordinate, segment) {
    return squaredDistance(coordinate, closestOnSegment(coordinate, segment));
  }

  /**
   * Format a geographic coordinate with the hemisphere, degrees, minutes, and
   * seconds.
   *
   * Example without specifying fractional digits:
   *
   *     import {toStringHDMS} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const out = toStringHDMS(coord);
   *     // out is now '47Â° 58â² 60â³ N 7Â° 50â² 60â³ E'
   *
   * Example explicitly specifying 1 fractional digit:
   *
   *     import {toStringHDMS} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const out = toStringHDMS(coord, 1);
   *     // out is now '47Â° 58â² 60.0â³ N 7Â° 50â² 60.0â³ E'
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} [fractionDigits] The number of digits to include
   *    after the decimal point. Default is `0`.
   * @return {string} Hemisphere, degrees, minutes and seconds.
   * @api
   */
  function toStringHDMS(coordinate, fractionDigits) {
    if (coordinate) {
      return (
        degreesToStringHDMS('NS', coordinate[1], fractionDigits) +
        ' ' +
        degreesToStringHDMS('EW', coordinate[0], fractionDigits)
      );
    }
    return '';
  }

  /**
   * Format a coordinate as a comma delimited string.
   *
   * Example without specifying fractional digits:
   *
   *     import {toStringXY} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const out = toStringXY(coord);
   *     // out is now '8, 48'
   *
   * Example explicitly specifying 1 fractional digit:
   *
   *     import {toStringXY} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const out = toStringXY(coord, 1);
   *     // out is now '7.8, 48.0'
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} [fractionDigits] The number of digits to include
   *    after the decimal point. Default is `0`.
   * @return {string} XY.
   * @api
   */
  function toStringXY(coordinate, fractionDigits) {
    return format$1(coordinate, '{x}, {y}', fractionDigits);
  }

  /**
   * Modifies the provided coordinate in-place to be within the real world
   * extent. The lower projection extent boundary is inclusive, the upper one
   * exclusive.
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {Coordinate} The coordinate within the real world extent.
   */
  function wrapX$1(coordinate, projection) {
    if (projection.canWrapX()) {
      const worldWidth = getWidth(projection.getExtent());
      const worldsAway = getWorldsAway(coordinate, projection, worldWidth);
      if (worldsAway) {
        coordinate[0] -= worldsAway * worldWidth;
      }
    }
    return coordinate;
  }
  /**
   * @param {Coordinate} coordinate Coordinate.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @param {number} [sourceExtentWidth] Width of the source extent.
   * @return {number} Offset in world widths.
   */
  function getWorldsAway(coordinate, projection, sourceExtentWidth) {
    const projectionExtent = projection.getExtent();
    let worldsAway = 0;
    if (
      projection.canWrapX() &&
      (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])
    ) {
      sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);
      worldsAway = Math.floor(
        (coordinate[0] - projectionExtent[0]) / sourceExtentWidth,
      );
    }
    return worldsAway;
  }

  var coordinate = /*#__PURE__*/Object.freeze({
    __proto__: null,
    add: add$3,
    closestOnCircle: closestOnCircle,
    closestOnSegment: closestOnSegment,
    createStringXY: createStringXY,
    degreesToStringHDMS: degreesToStringHDMS,
    distance: distance,
    equals: equals,
    format: format$1,
    getWorldsAway: getWorldsAway,
    rotate: rotate$1,
    scale: scale$2,
    squaredDistance: squaredDistance,
    squaredDistanceToSegment: squaredDistanceToSegment,
    toStringHDMS: toStringHDMS,
    toStringXY: toStringXY,
    wrapX: wrapX$1
  });

  /**
   * @module ol/proj/Units
   */


  /**
   * @typedef {Object} MetersPerUnitLookup
   * @property {number} radians Radians
   * @property {number} degrees Degrees
   * @property {number} ft  Feet
   * @property {number} m Meters
   * @property {number} us-ft US feet
   */

  /**
   * Meters per unit lookup table.
   * @const
   * @type {MetersPerUnitLookup}
   * @api
   */
  const METERS_PER_UNIT$1 = {
    // use the radius of the Normal sphere
    'radians': 6370997 / (2 * Math.PI),
    'degrees': (2 * Math.PI * 6370997) / 360,
    'ft': 0.3048,
    'm': 1,
    'us-ft': 1200 / 3937,
  };

  /**
   * @module ol/proj/Projection
   */

  /**
   * The function is called with a `number` view resolution and a
   * {@link module:ol/coordinate~Coordinate} as arguments, and returns the `number` resolution
   * in projection units at the passed coordinate.
   * @typedef {function(number, import("../coordinate.js").Coordinate):number} GetPointResolution
   * @api
   */

  /**
   * @typedef {Object} Options
   * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
   * @property {import("./Units.js").Units} [units] Units. Required unless a
   * proj4 projection is defined for `code`.
   * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
   * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
   * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
   * @property {number} [metersPerUnit] The meters per unit for the SRS.
   * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}
   * lookup table.
   * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
   * @property {GetPointResolution} [getPointResolution]
   * Function to determine resolution at a point. The function is called with a
   * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns
   * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,
   * the default {@link module:ol/proj.getPointResolution} function will be used.
   */

  /**
   * @classdesc
   * In most cases, you should not need to create instances of this class.
   * Instead, where projection information is required, you can use a string
   * projection code or identifier (e.g. `EPSG:4326`) instead of a projection
   * instance.
   *
   * The library includes support for transforming coordinates between the following
   * projections:
   *
   *  WGS 84 / Geographic - Using codes `EPSG:4326`, `CRS:84`, `urn:ogc:def:crs:EPSG:6.6:4326`,
   *    `urn:ogc:def:crs:OGC:1.3:CRS84`, `urn:ogc:def:crs:OGC:2:84`, `http://www.opengis.net/gml/srs/epsg.xml#4326`,
   *    or `urn:x-ogc:def:crs:EPSG:4326`
   *  WGS 84 / Spherical Mercator - Using codes `EPSG:3857`, `EPSG:102100`, `EPSG:102113`, `EPSG:900913`,
   *    `urn:ogc:def:crs:EPSG:6.18:3:3857`, or `http://www.opengis.net/gml/srs/epsg.xml#3857`
   *  WGS 84 / UTM zones - Using codes `EPSG:32601` through `EPSG:32660` for northern zones
   *    and `EPSG:32701` through `EPSG:32760` for southern zones. Note that the built-in UTM transforms
   *    are lower accuracy (with errors on the order of 0.1 m) than those that you might get in a
   *    library like [proj4js](https://github.com/proj4js/proj4js).
   *
   * For additional projection support, or to use higher accuracy transforms than the built-in ones, you can use
   * the [proj4js](https://github.com/proj4js/proj4js) library. With `proj4js`, after adding any new projection
   * definitions, call the {@link module:ol/proj/proj4.register} function.
   *
   * You can use the {@link module:ol/proj.get} function to retrieve a projection instance
   * for one of the registered projections.
   *
   * @api
   */
  let Projection$1 = class Projection {
    /**
     * @param {Options} options Projection options.
     */
    constructor(options) {
      /**
       * @private
       * @type {string}
       */
      this.code_ = options.code;

      /**
       * Units of projected coordinates. When set to `TILE_PIXELS`, a
       * `this.extent_` and `this.worldExtent_` must be configured properly for each
       * tile.
       * @private
       * @type {import("./Units.js").Units}
       */
      this.units_ = /** @type {import("./Units.js").Units} */ (options.units);

      /**
       * Validity extent of the projection in projected coordinates. For projections
       * with `TILE_PIXELS` units, this is the extent of the tile in
       * tile pixel space.
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = options.extent !== undefined ? options.extent : null;

      /**
       * Extent of the world in EPSG:4326. For projections with
       * `TILE_PIXELS` units, this is the extent of the tile in
       * projected coordinate space.
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.worldExtent_ =
        options.worldExtent !== undefined ? options.worldExtent : null;

      /**
       * @private
       * @type {string}
       */
      this.axisOrientation_ =
        options.axisOrientation !== undefined ? options.axisOrientation : 'enu';

      /**
       * @private
       * @type {boolean}
       */
      this.global_ = options.global !== undefined ? options.global : false;

      /**
       * @private
       * @type {boolean}
       */
      this.canWrapX_ = !!(this.global_ && this.extent_);

      /**
       * @private
       * @type {GetPointResolution|undefined}
       */
      this.getPointResolutionFunc_ = options.getPointResolution;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.defaultTileGrid_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.metersPerUnit_ = options.metersPerUnit;
    }

    /**
     * @return {boolean} The projection is suitable for wrapping the x-axis
     */
    canWrapX() {
      return this.canWrapX_;
    }

    /**
     * Get the code for this projection, e.g. 'EPSG:4326'.
     * @return {string} Code.
     * @api
     */
    getCode() {
      return this.code_;
    }

    /**
     * Get the validity extent for this projection.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent() {
      return this.extent_;
    }

    /**
     * Get the units of this projection.
     * @return {import("./Units.js").Units} Units.
     * @api
     */
    getUnits() {
      return this.units_;
    }

    /**
     * Get the amount of meters per unit of this projection.  If the projection is
     * not configured with `metersPerUnit` or a units identifier, the return is
     * `undefined`.
     * @return {number|undefined} Meters.
     * @api
     */
    getMetersPerUnit() {
      return this.metersPerUnit_ || METERS_PER_UNIT$1[this.units_];
    }

    /**
     * Get the world extent for this projection.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getWorldExtent() {
      return this.worldExtent_;
    }

    /**
     * Get the axis orientation of this projection.
     * Example values are:
     * enu - the default easting, northing, elevation.
     * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
     *     or south orientated transverse mercator.
     * wnu - westing, northing, up - some planetary coordinate systems have
     *     "west positive" coordinate systems
     * @return {string} Axis orientation.
     * @api
     */
    getAxisOrientation() {
      return this.axisOrientation_;
    }

    /**
     * Is this projection a global projection which spans the whole world?
     * @return {boolean} Whether the projection is global.
     * @api
     */
    isGlobal() {
      return this.global_;
    }

    /**
     * Set if the projection is a global projection which spans the whole world
     * @param {boolean} global Whether the projection is global.
     * @api
     */
    setGlobal(global) {
      this.global_ = global;
      this.canWrapX_ = !!(global && this.extent_);
    }

    /**
     * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
     */
    getDefaultTileGrid() {
      return this.defaultTileGrid_;
    }

    /**
     * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
     */
    setDefaultTileGrid(tileGrid) {
      this.defaultTileGrid_ = tileGrid;
    }

    /**
     * Set the validity extent for this projection.
     * @param {import("../extent.js").Extent} extent Extent.
     * @api
     */
    setExtent(extent) {
      this.extent_ = extent;
      this.canWrapX_ = !!(this.global_ && extent);
    }

    /**
     * Set the world extent for this projection.
     * @param {import("../extent.js").Extent} worldExtent World extent
     *     [minlon, minlat, maxlon, maxlat].
     * @api
     */
    setWorldExtent(worldExtent) {
      this.worldExtent_ = worldExtent;
    }

    /**
     * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}
     * for this projection.
     * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
     * @api
     */
    setGetPointResolution(func) {
      this.getPointResolutionFunc_ = func;
    }

    /**
     * Get the custom point resolution function for this projection (if set).
     * @return {GetPointResolution|undefined} The custom point
     * resolution function (if set).
     */
    getPointResolutionFunc() {
      return this.getPointResolutionFunc_;
    }
  };

  /**
   * @module ol/proj/epsg3857
   */

  /**
   * Radius of WGS84 sphere
   *
   * @const
   * @type {number}
   */
  const RADIUS$1 = 6378137;

  /**
   * @const
   * @type {number}
   */
  const HALF_SIZE = Math.PI * RADIUS$1;

  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  const EXTENT$1 = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];

  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  const WORLD_EXTENT = [-180, -85, 180, 85];

  /**
   * Maximum safe value in y direction
   * @const
   * @type {number}
   */
  const MAX_SAFE_Y = RADIUS$1 * Math.log(Math.tan(Math.PI / 2));

  /**
   * @classdesc
   * Projection object for web/spherical Mercator (EPSG:3857).
   */
  class EPSG3857Projection extends Projection$1 {
    /**
     * @param {string} code Code.
     */
    constructor(code) {
      super({
        code: code,
        units: 'm',
        extent: EXTENT$1,
        global: true,
        worldExtent: WORLD_EXTENT,
        getPointResolution: function (resolution, point) {
          return resolution / Math.cosh(point[1] / RADIUS$1);
        },
      });
    }
  }

  /**
   * Projections equal to EPSG:3857.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  const PROJECTIONS$1 = [
    new EPSG3857Projection('EPSG:3857'),
    new EPSG3857Projection('EPSG:102100'),
    new EPSG3857Projection('EPSG:102113'),
    new EPSG3857Projection('EPSG:900913'),
    new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),
    new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),
  ];

  /**
   * Transformation from EPSG:4326 to EPSG:3857.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>} [output] Output array of coordinate values.
   * @param {number} [dimension] Dimension (default is `2`).
   * @param {number} [stride] Stride (default is `dimension`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function fromEPSG4326(input, output, dimension, stride) {
    const length = input.length;
    dimension = dimension > 1 ? dimension : 2;
    stride = stride ?? dimension;
    if (output === undefined) {
      if (dimension > 2) {
        // preserve values beyond second dimension
        output = input.slice();
      } else {
        output = new Array(length);
      }
    }
    for (let i = 0; i < length; i += stride) {
      output[i] = (HALF_SIZE * input[i]) / 180;
      let y = RADIUS$1 * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));
      if (y > MAX_SAFE_Y) {
        y = MAX_SAFE_Y;
      } else if (y < -MAX_SAFE_Y) {
        y = -MAX_SAFE_Y;
      }
      output[i + 1] = y;
    }
    return output;
  }

  /**
   * Transformation from EPSG:3857 to EPSG:4326.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>} [output] Output array of coordinate values.
   * @param {number} [dimension] Dimension (default is `2`).
   * @param {number} [stride] Stride (default is `dimension`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function toEPSG4326(input, output, dimension, stride) {
    const length = input.length;
    dimension = dimension > 1 ? dimension : 2;
    stride = stride ?? dimension;
    if (output === undefined) {
      if (dimension > 2) {
        // preserve values beyond second dimension
        output = input.slice();
      } else {
        output = new Array(length);
      }
    }
    for (let i = 0; i < length; i += stride) {
      output[i] = (180 * input[i]) / HALF_SIZE;
      output[i + 1] =
        (360 * Math.atan(Math.exp(input[i + 1] / RADIUS$1))) / Math.PI - 90;
    }
    return output;
  }

  /**
   * @module ol/proj/epsg4326
   */

  /**
   * Semi-major radius of the WGS84 ellipsoid.
   *
   * @const
   * @type {number}
   */
  const RADIUS = 6378137;

  /**
   * Extent of the EPSG:4326 projection which is the whole world.
   *
   * @const
   * @type {import("../extent.js").Extent}
   */
  const EXTENT = [-180, -90, 180, 90];

  /**
   * @const
   * @type {number}
   */
  const METERS_PER_UNIT = (Math.PI * RADIUS) / 180;

  /**
   * @classdesc
   * Projection object for WGS84 geographic coordinates (EPSG:4326).
   *
   * Note that OpenLayers does not strictly comply with the EPSG definition.
   * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
   * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
   */
  class EPSG4326Projection extends Projection$1 {
    /**
     * @param {string} code Code.
     * @param {string} [axisOrientation] Axis orientation.
     */
    constructor(code, axisOrientation) {
      super({
        code: code,
        units: 'degrees',
        extent: EXTENT,
        axisOrientation: axisOrientation,
        global: true,
        metersPerUnit: METERS_PER_UNIT,
        worldExtent: EXTENT,
      });
    }
  }

  /**
   * Projections equal to EPSG:4326.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  const PROJECTIONS = [
    new EPSG4326Projection('CRS:84'),
    new EPSG4326Projection('EPSG:4326', 'neu'),
    new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),
    new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),
    new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),
    new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
    new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),
  ];

  /**
   * @module ol/proj/projections
   */

  /**
   * @type {Object<string, import("./Projection.js").default>}
   */
  let cache$1 = {};

  /**
   * Clear the projections cache.
   */
  function clear$1() {
    cache$1 = {};
  }

  /**
   * Get a cached projection by code.
   * @param {string} code The code for the projection.
   * @return {import("./Projection.js").default|null} The projection (if cached).
   */
  function get$4(code) {
    return (
      cache$1[code] ||
      cache$1[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/, 'EPSG:$3')] ||
      null
    );
  }

  /**
   * Add a projection to the cache.
   * @param {string} code The projection code.
   * @param {import("./Projection.js").default} projection The projection to cache.
   */
  function add$2(code, projection) {
    cache$1[code] = projection;
  }

  /**
   * @module ol/proj/transforms
   */

  /**
   * @private
   * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
   */
  let transforms = {};

  /**
   * Clear the transform cache.
   */
  function clear() {
    transforms = {};
  }

  /**
   * Registers a conversion function to convert coordinates from the source
   * projection to the destination projection.
   *
   * @param {import("./Projection.js").default} source Source.
   * @param {import("./Projection.js").default} destination Destination.
   * @param {import("../proj.js").TransformFunction} transformFn Transform.
   */
  function add$1(source, destination, transformFn) {
    const sourceCode = source.getCode();
    const destinationCode = destination.getCode();
    if (!(sourceCode in transforms)) {
      transforms[sourceCode] = {};
    }
    transforms[sourceCode][destinationCode] = transformFn;
  }

  /**
   * Get a transform given a source code and a destination code.
   * @param {string} sourceCode The code for the source projection.
   * @param {string} destinationCode The code for the destination projection.
   * @return {import("../proj.js").TransformFunction|null} The transform function (if found).
   */
  function get$3(sourceCode, destinationCode) {
    if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {
      return transforms[sourceCode][destinationCode];
    }
    return null;
  }

  /**
   * @module ol/proj/utm
   */


  /**
   * @typedef {Object} UTMZone
   * @property {number} number The zone number (1 - 60).
   * @property {boolean} north The northern hemisphere.
   */

  const K0 = 0.9996;

  const E = 0.00669438;
  const E2 = E * E;
  const E3 = E2 * E;
  const E_P2 = E / (1 - E);

  const SQRT_E = Math.sqrt(1 - E);
  const _E = (1 - SQRT_E) / (1 + SQRT_E);
  const _E2 = _E * _E;
  const _E3 = _E2 * _E;
  const _E4 = _E3 * _E;
  const _E5 = _E4 * _E;

  const M1 = 1 - E / 4 - (3 * E2) / 64 - (5 * E3) / 256;
  const M2 = (3 * E) / 8 + (3 * E2) / 32 + (45 * E3) / 1024;
  const M3 = (15 * E2) / 256 + (45 * E3) / 1024;
  const M4 = (35 * E3) / 3072;

  const P2 = (3 / 2) * _E - (27 / 32) * _E3 + (269 / 512) * _E5;
  const P3 = (21 / 16) * _E2 - (55 / 32) * _E4;
  const P4 = (151 / 96) * _E3 - (417 / 128) * _E5;
  const P5 = (1097 / 512) * _E4;

  const R = 6378137;

  /**
   * @param {number} easting Easting value of coordinate.
   * @param {number} northing Northing value of coordinate.
   * @param {UTMZone} zone The UTM zone.
   * @return {import("../coordinate.js").Coordinate} The transformed coordinate.
   */
  function toLonLat$1(easting, northing, zone) {
    const x = easting - 500000;
    const y = zone.north ? northing : northing - 10000000;

    const m = y / K0;
    const mu = m / (R * M1);

    const pRad =
      mu +
      P2 * Math.sin(2 * mu) +
      P3 * Math.sin(4 * mu) +
      P4 * Math.sin(6 * mu) +
      P5 * Math.sin(8 * mu);

    const pSin = Math.sin(pRad);
    const pSin2 = pSin * pSin;

    const pCos = Math.cos(pRad);

    const pTan = pSin / pCos;
    const pTan2 = pTan * pTan;
    const pTan4 = pTan2 * pTan2;

    const epSin = 1 - E * pSin2;
    const epSinSqrt = Math.sqrt(1 - E * pSin2);

    const n = R / epSinSqrt;
    const r = (1 - E) / epSin;

    const c = E_P2 * pCos ** 2;
    const c2 = c * c;

    const d = x / (n * K0);
    const d2 = d * d;
    const d3 = d2 * d;
    const d4 = d3 * d;
    const d5 = d4 * d;
    const d6 = d5 * d;

    const latitude =
      pRad -
      (pTan / r) *
        (d2 / 2 - (d4 / 24) * (5 + 3 * pTan2 + 10 * c - 4 * c2 - 9 * E_P2)) +
      (d6 / 720) * (61 + 90 * pTan2 + 298 * c + 45 * pTan4 - 252 * E_P2 - 3 * c2);

    let longitude =
      (d -
        (d3 / 6) * (1 + 2 * pTan2 + c) +
        (d5 / 120) * (5 - 2 * c + 28 * pTan2 - 3 * c2 + 8 * E_P2 + 24 * pTan4)) /
      pCos;

    longitude = wrap(
      longitude + toRadians(zoneToCentralLongitude(zone.number)),
      -Math.PI,
      Math.PI,
    );

    return [toDegrees(longitude), toDegrees(latitude)];
  }

  const MIN_LATITUDE = -80;
  const MAX_LATITUDE = 84;
  const MIN_LONGITUDE = -180;
  const MAX_LONGITUDE = 180;

  /**
   * @param {number} longitude The longitude.
   * @param {number} latitude The latitude.
   * @param {UTMZone} zone The UTM zone.
   * @return {import('../coordinate.js').Coordinate} The UTM coordinate.
   */
  function fromLonLat$1(longitude, latitude, zone) {
    longitude = wrap(longitude, MIN_LONGITUDE, MAX_LONGITUDE);

    if (latitude < MIN_LATITUDE) {
      latitude = MIN_LATITUDE;
    } else if (latitude > MAX_LATITUDE) {
      latitude = MAX_LATITUDE;
    }

    const latRad = toRadians(latitude);
    const latSin = Math.sin(latRad);
    const latCos = Math.cos(latRad);

    const latTan = latSin / latCos;
    const latTan2 = latTan * latTan;
    const latTan4 = latTan2 * latTan2;

    const lonRad = toRadians(longitude);
    const centralLon = zoneToCentralLongitude(zone.number);
    const centralLonRad = toRadians(centralLon);

    const n = R / Math.sqrt(1 - E * latSin ** 2);
    const c = E_P2 * latCos ** 2;

    const a = latCos * wrap(lonRad - centralLonRad, -Math.PI, Math.PI);
    const a2 = a * a;
    const a3 = a2 * a;
    const a4 = a3 * a;
    const a5 = a4 * a;
    const a6 = a5 * a;

    const m =
      R *
      (M1 * latRad -
        M2 * Math.sin(2 * latRad) +
        M3 * Math.sin(4 * latRad) -
        M4 * Math.sin(6 * latRad));

    const easting =
      K0 *
        n *
        (a +
          (a3 / 6) * (1 - latTan2 + c) +
          (a5 / 120) * (5 - 18 * latTan2 + latTan4 + 72 * c - 58 * E_P2)) +
      500000;

    let northing =
      K0 *
      (m +
        n *
          latTan *
          (a2 / 2 +
            (a4 / 24) * (5 - latTan2 + 9 * c + 4 * c ** 2) +
            (a6 / 720) * (61 - 58 * latTan2 + latTan4 + 600 * c - 330 * E_P2)));

    if (!zone.north) {
      northing += 10000000;
    }

    return [easting, northing];
  }

  /**
   * @param {number} zone The zone number.
   * @return {number} The central longitude in degrees.
   */
  function zoneToCentralLongitude(zone) {
    return (zone - 1) * 6 - 180 + 3;
  }

  /**
   * @type {Array<RegExp>}
   */
  const epsgRegExes = [
    /^EPSG:(\d+)$/,
    /^urn:ogc:def:crs:EPSG::(\d+)$/,
    /^http:\/\/www\.opengis\.net\/def\/crs\/EPSG\/0\/(\d+)$/,
  ];

  /**
   * @param {string} code The projection code.
   * @return {UTMZone|null} The UTM zone info (or null if not UTM).
   */
  function zoneFromCode(code) {
    let epsgId = 0;
    for (const re of epsgRegExes) {
      const match = code.match(re);
      if (match) {
        epsgId = parseInt(match[1]);
        break;
      }
    }
    if (!epsgId) {
      return null;
    }

    let number = 0;
    let north = false;
    if (epsgId > 32700 && epsgId < 32761) {
      number = epsgId - 32700;
    } else if (epsgId > 32600 && epsgId < 32661) {
      north = true;
      number = epsgId - 32600;
    }
    if (!number) {
      return null;
    }

    return {number, north};
  }

  /**
   * @param {function(number, number, UTMZone): import('../coordinate.js').Coordinate} transformer The transformer.
   * @param {UTMZone} zone The UTM zone.
   * @return {import('../proj.js').TransformFunction} The transform function.
   */
  function makeTransformFunction(transformer, zone) {
    return function (input, output, dimension, stride) {
      const length = input.length;
      dimension = dimension > 1 ? dimension : 2;
      stride = stride ?? dimension;
      if (!output) {
        if (dimension > 2) {
          output = input.slice();
        } else {
          output = new Array(length);
        }
      }
      for (let i = 0; i < length; i += stride) {
        const x = input[i];
        const y = input[i + 1];
        const coord = transformer(x, y, zone);
        output[i] = coord[0];
        output[i + 1] = coord[1];
      }
      return output;
    };
  }

  /**
   * @param {string} code The projection code.
   * @return {import('./Projection.js').default|null} A projection or null if unable to create one.
   */
  function makeProjection(code) {
    const zone = zoneFromCode(code);
    if (!zone) {
      return null;
    }
    return new Projection$1({code, units: 'm'});
  }

  /**
   * @param {import('./Projection.js').default} projection The projection.
   * @return {import('../proj.js').Transforms|null} The transforms lookup or null if unable to handle projection.
   */
  function makeTransforms(projection) {
    const zone = zoneFromCode(projection.getCode());
    if (!zone) {
      return null;
    }

    return {
      forward: makeTransformFunction(fromLonLat$1, zone),
      inverse: makeTransformFunction(toLonLat$1, zone),
    };
  }

  /**
   * @module ol/proj
   */


  /**
   * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier
   * string or undefined.
   * @typedef {Projection|string|undefined} ProjectionLike
   * @api
   */

  /**
   * @typedef {Object} Transforms
   * @property {TransformFunction} forward The forward transform (from geographic).
   * @property {TransformFunction} inverse The inverse transform (to geographic).
   */

  /**
   * @type {Array<function(Projection): Transforms|null>}
   */
  const transformFactories = [makeTransforms];

  /**
   * @type {Array<function(string): Projection|null>}
   */
  const projectionFactories = [makeProjection];

  let showCoordinateWarning = true;

  /**
   * @param {boolean} [disable] Disable console info about `useGeographic()`
   */
  function disableCoordinateWarning(disable) {
    const hide = disable === undefined ? true : disable;
    showCoordinateWarning = !hide;
  }

  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>} [output] Output array of coordinate values.
   * @return {Array<number>} Output coordinate array (new array, same coordinate
   *     values).
   */
  function cloneTransform(input, output) {
    if (output !== undefined) {
      for (let i = 0, ii = input.length; i < ii; ++i) {
        output[i] = input[i];
      }
      output = output;
    } else {
      output = input.slice();
    }
    return output;
  }

  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>} [output] Output array of coordinate values.
   * @return {Array<number>} Input coordinate array (same array as input).
   */
  function identityTransform(input, output) {
    if (output !== undefined && input !== output) {
      for (let i = 0, ii = input.length; i < ii; ++i) {
        output[i] = input[i];
      }
      input = output;
    }
    return input;
  }

  /**
   * Add a Projection object to the list of supported projections that can be
   * looked up by their code.
   *
   * @param {Projection} projection Projection instance.
   * @api
   */
  function addProjection(projection) {
    add$2(projection.getCode(), projection);
    add$1(projection, projection, cloneTransform);
  }

  /**
   * @param {Array<Projection>} projections Projections.
   */
  function addProjections(projections) {
    projections.forEach(addProjection);
  }

  /**
   * Fetches a Projection object for the code specified.
   *
   * @param {ProjectionLike} projectionLike Either a code string which is
   *     a combination of authority and identifier such as "EPSG:4326", or an
   *     existing projection object, or undefined.
   * @return {Projection|null} Projection object, or null if not in list.
   * @api
   */
  function get$2(projectionLike) {
    if (!(typeof projectionLike === 'string')) {
      return projectionLike;
    }
    const projection = get$4(projectionLike);
    if (projection) {
      return projection;
    }
    for (const makeProjection of projectionFactories) {
      const projection = makeProjection(projectionLike);
      if (projection) {
        return projection;
      }
    }
    return null;
  }

  /**
   * Get the resolution of the point in degrees or distance units.
   * For projections with degrees as the unit this will simply return the
   * provided resolution. For other projections the point resolution is
   * by default estimated by transforming the `point` pixel to EPSG:4326,
   * measuring its width and height on the normal sphere,
   * and taking the average of the width and height.
   * A custom function can be provided for a specific projection, either
   * by setting the `getPointResolution` option in the
   * {@link module:ol/proj/Projection~Projection} constructor or by using
   * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
   * projection object.
   * @param {ProjectionLike} projection The projection.
   * @param {number} resolution Nominal resolution in projection units.
   * @param {import("./coordinate.js").Coordinate} point Point to find adjusted resolution at.
   * @param {import("./proj/Units.js").Units} [units] Units to get the point resolution in.
   * Default is the projection's units.
   * @return {number} Point resolution.
   * @api
   */
  function getPointResolution(projection, resolution, point, units) {
    projection = get$2(projection);
    let pointResolution;
    const getter = projection.getPointResolutionFunc();
    if (getter) {
      pointResolution = getter(resolution, point);
      if (units && units !== projection.getUnits()) {
        const metersPerUnit = projection.getMetersPerUnit();
        if (metersPerUnit) {
          pointResolution =
            (pointResolution * metersPerUnit) / METERS_PER_UNIT$1[units];
        }
      }
    } else {
      const projUnits = projection.getUnits();
      if ((projUnits == 'degrees' && !units) || units == 'degrees') {
        pointResolution = resolution;
      } else {
        // Estimate point resolution by transforming the center pixel to EPSG:4326,
        // measuring its width and height on the normal sphere, and taking the
        // average of the width and height.
        const toEPSG4326 = getTransformFromProjections(
          projection,
          get$2('EPSG:4326'),
        );
        if (!toEPSG4326 && projUnits !== 'degrees') {
          // no transform is available
          pointResolution = resolution * projection.getMetersPerUnit();
        } else {
          let vertices = [
            point[0] - resolution / 2,
            point[1],
            point[0] + resolution / 2,
            point[1],
            point[0],
            point[1] - resolution / 2,
            point[0],
            point[1] + resolution / 2,
          ];
          vertices = toEPSG4326(vertices, vertices, 2);
          const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));
          const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));
          pointResolution = (width + height) / 2;
        }
        const metersPerUnit = units
          ? METERS_PER_UNIT$1[units]
          : projection.getMetersPerUnit();
        if (metersPerUnit !== undefined) {
          pointResolution /= metersPerUnit;
        }
      }
    }
    return pointResolution;
  }

  /**
   * Registers transformation functions that don't alter coordinates. Those allow
   * to transform between projections with equal meaning.
   *
   * @param {Array<Projection>} projections Projections.
   * @api
   */
  function addEquivalentProjections(projections) {
    addProjections(projections);
    projections.forEach(function (source) {
      projections.forEach(function (destination) {
        if (source !== destination) {
          add$1(source, destination, cloneTransform);
        }
      });
    });
  }

  /**
   * Registers transformation functions to convert coordinates in any projection
   * in projection1 to any projection in projection2.
   *
   * @param {Array<Projection>} projections1 Projections with equal
   *     meaning.
   * @param {Array<Projection>} projections2 Projections with equal
   *     meaning.
   * @param {TransformFunction} forwardTransform Transformation from any
   *   projection in projection1 to any projection in projection2.
   * @param {TransformFunction} inverseTransform Transform from any projection
   *   in projection2 to any projection in projection1..
   */
  function addEquivalentTransforms(
    projections1,
    projections2,
    forwardTransform,
    inverseTransform,
  ) {
    projections1.forEach(function (projection1) {
      projections2.forEach(function (projection2) {
        add$1(projection1, projection2, forwardTransform);
        add$1(projection2, projection1, inverseTransform);
      });
    });
  }

  /**
   * Clear all cached projections and transforms.
   */
  function clearAllProjections() {
    clear$1();
    clear();
  }

  /**
   * @param {Projection|string|undefined} projection Projection.
   * @param {string} defaultCode Default code.
   * @return {Projection} Projection.
   */
  function createProjection(projection, defaultCode) {
    if (!projection) {
      return get$2(defaultCode);
    }
    if (typeof projection === 'string') {
      return get$2(projection);
    }
    return /** @type {Projection} */ (projection);
  }

  /**
   * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform
   * function.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} coordTransform Coordinate
   *     transform.
   * @return {TransformFunction} Transform function.
   */
  function createTransformFromCoordinateTransform(coordTransform) {
    return (
      /**
       * @param {Array<number>} input Input.
       * @param {Array<number>} [output] Output.
       * @param {number} [dimension] Dimensions that should be transformed.
       * @param {number} [stride] Stride.
       * @return {Array<number>} Output.
       */
      function (input, output, dimension, stride) {
        const length = input.length;
        dimension = dimension !== undefined ? dimension : 2;
        stride = stride ?? dimension;
        output = output !== undefined ? output : new Array(length);
        for (let i = 0; i < length; i += stride) {
          const point = coordTransform(input.slice(i, i + dimension));
          const pointLength = point.length;
          for (let j = 0, jj = stride; j < jj; ++j) {
            output[i + j] = j >= pointLength ? input[i + j] : point[j];
          }
        }
        return output;
      }
    );
  }

  /**
   * Registers coordinate transform functions to convert coordinates between the
   * source projection and the destination projection.
   * The forward and inverse functions convert coordinate pairs; this function
   * converts these into the functions used internally which also handle
   * extents and coordinate arrays.
   *
   * @param {ProjectionLike} source Source projection.
   * @param {ProjectionLike} destination Destination projection.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} forward The forward transform
   *     function (that is, from the source projection to the destination
   *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
   *     the transformed {@link module:ol/coordinate~Coordinate}.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} inverse The inverse transform
   *     function (that is, from the destination projection to the source
   *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
   *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only
   *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate
   *     with only the length it can transform. The other dimensions will be taken unchanged from the
   *     source.
   * @api
   */
  function addCoordinateTransforms(source, destination, forward, inverse) {
    const sourceProj = get$2(source);
    const destProj = get$2(destination);
    add$1(
      sourceProj,
      destProj,
      createTransformFromCoordinateTransform(forward),
    );
    add$1(
      destProj,
      sourceProj,
      createTransformFromCoordinateTransform(inverse),
    );
  }

  /**
   * Transforms a coordinate from longitude/latitude to a different projection.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate as longitude and latitude, i.e.
   *     an array with longitude as 1st and latitude as 2nd element.
   * @param {ProjectionLike} [projection] Target projection. The
   *     default is Web Mercator, i.e. 'EPSG:3857'.
   * @return {import("./coordinate.js").Coordinate} Coordinate projected to the target projection.
   * @api
   */
  function fromLonLat(coordinate, projection) {
    disableCoordinateWarning();
    return transform$1(
      coordinate,
      'EPSG:4326',
      projection !== undefined ? projection : 'EPSG:3857',
    );
  }

  /**
   * Transforms a coordinate to longitude/latitude.
   * @param {import("./coordinate.js").Coordinate} coordinate Projected coordinate.
   * @param {ProjectionLike} [projection] Projection of the coordinate.
   *     The default is Web Mercator, i.e. 'EPSG:3857'.
   * @return {import("./coordinate.js").Coordinate} Coordinate as longitude and latitude, i.e. an array
   *     with longitude as 1st and latitude as 2nd element.
   * @api
   */
  function toLonLat(coordinate, projection) {
    const lonLat = transform$1(
      coordinate,
      projection !== undefined ? projection : 'EPSG:3857',
      'EPSG:4326',
    );
    const lon = lonLat[0];
    if (lon < -180 || lon > 180) {
      lonLat[0] = modulo(lon + 180, 360) - 180;
    }
    return lonLat;
  }

  /**
   * Checks if two projections are the same, that is every coordinate in one
   * projection does represent the same geographic point as the same coordinate in
   * the other projection.
   *
   * @param {Projection} projection1 Projection 1.
   * @param {Projection} projection2 Projection 2.
   * @return {boolean} Equivalent.
   * @api
   */
  function equivalent$1(projection1, projection2) {
    if (projection1 === projection2) {
      return true;
    }
    const equalUnits = projection1.getUnits() === projection2.getUnits();
    if (projection1.getCode() === projection2.getCode()) {
      return equalUnits;
    }
    const transformFunc = getTransformFromProjections(projection1, projection2);
    return transformFunc === cloneTransform && equalUnits;
  }

  /**
   * Searches in the list of transform functions for the function for converting
   * coordinates from the source projection to the destination projection.
   *
   * @param {Projection} source Source Projection object.
   * @param {Projection} destination Destination Projection
   *     object.
   * @return {TransformFunction|null} Transform function.
   */
  function getTransformFromProjections(source, destination) {
    const sourceCode = source.getCode();
    const destinationCode = destination.getCode();
    let transformFunc = get$3(sourceCode, destinationCode);
    if (transformFunc) {
      return transformFunc;
    }

    /**
     * @type {Transforms|null}
     */
    let sourceTransforms = null;

    /**
     * @type {Transforms|null}
     */
    let destinationTransforms = null;

    // lazily add projections if we have supported transforms
    for (const makeTransforms of transformFactories) {
      if (!sourceTransforms) {
        sourceTransforms = makeTransforms(source);
      }
      if (!destinationTransforms) {
        destinationTransforms = makeTransforms(destination);
      }
    }

    if (!sourceTransforms && !destinationTransforms) {
      return null;
    }

    const intermediateCode = 'EPSG:4326';
    if (!destinationTransforms) {
      const toDestination = get$3(intermediateCode, destinationCode);
      if (toDestination) {
        transformFunc = composeTransformFuncs(
          sourceTransforms.inverse,
          toDestination,
        );
      }
    } else if (!sourceTransforms) {
      const fromSource = get$3(sourceCode, intermediateCode);
      if (fromSource) {
        transformFunc = composeTransformFuncs(
          fromSource,
          destinationTransforms.forward,
        );
      }
    } else {
      transformFunc = composeTransformFuncs(
        sourceTransforms.inverse,
        destinationTransforms.forward,
      );
    }

    if (transformFunc) {
      addProjection(source);
      addProjection(destination);
      add$1(source, destination, transformFunc);
    }

    return transformFunc;
  }

  /**
   * @param {TransformFunction} t1 The first transform function.
   * @param {TransformFunction} t2 The second transform function.
   * @return {TransformFunction} The composed transform function.
   */
  function composeTransformFuncs(t1, t2) {
    return function (input, output, dimensions, stride) {
      output = t1(input, output, dimensions, stride);
      return t2(output, output, dimensions, stride);
    };
  }

  /**
   * Given the projection-like objects, searches for a transformation
   * function to convert a coordinates array from the source projection to the
   * destination projection.
   *
   * @param {ProjectionLike} source Source.
   * @param {ProjectionLike} destination Destination.
   * @return {TransformFunction} Transform function.
   * @api
   */
  function getTransform(source, destination) {
    const sourceProjection = get$2(source);
    const destinationProjection = get$2(destination);
    return getTransformFromProjections(sourceProjection, destinationProjection);
  }

  /**
   * Transforms a coordinate from source projection to destination projection.
   * This returns a new coordinate (and does not modify the original). If there
   * is no available transform between the two projection, the function will throw
   * an error.
   *
   * See {@link module:ol/proj.transformExtent} for extent transformation.
   * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its
   * subclasses for geometry transforms.
   *
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {ProjectionLike} source Source projection-like.
   * @param {ProjectionLike} destination Destination projection-like.
   * @return {import("./coordinate.js").Coordinate} Coordinate.
   * @api
   */
  function transform$1(coordinate, source, destination) {
    const transformFunc = getTransform(source, destination);
    if (!transformFunc) {
      const sourceCode = get$2(source).getCode();
      const destinationCode = get$2(destination).getCode();
      throw new Error(
        `No transform available between ${sourceCode} and ${destinationCode}`,
      );
    }
    return transformFunc(coordinate, undefined, coordinate.length);
  }

  /**
   * Transforms an extent from source projection to destination projection.  This
   * returns a new extent (and does not modify the original).
   *
   * @param {import("./extent.js").Extent} extent The extent to transform.
   * @param {ProjectionLike} source Source projection-like.
   * @param {ProjectionLike} destination Destination projection-like.
   * @param {number} [stops] Number of stops per side used for the transform.
   * By default only the corners are used.
   * @return {import("./extent.js").Extent} The transformed extent.
   * @api
   */
  function transformExtent(extent, source, destination, stops) {
    const transformFunc = getTransform(source, destination);
    return applyTransform(extent, transformFunc, undefined, stops);
  }

  /**
   * Transforms the given point to the destination projection.
   *
   * @param {import("./coordinate.js").Coordinate} point Point.
   * @param {Projection} sourceProjection Source projection.
   * @param {Projection} destinationProjection Destination projection.
   * @return {import("./coordinate.js").Coordinate} Point.
   */
  function transformWithProjections(
    point,
    sourceProjection,
    destinationProjection,
  ) {
    const transformFunc = getTransformFromProjections(
      sourceProjection,
      destinationProjection,
    );
    return transformFunc(point);
  }

  /**
   * @type {Projection|null}
   */
  let userProjection = null;

  /**
   * Set the projection for coordinates supplied from and returned by API methods.
   * This includes all API methods except for those interacting with tile grids,
   * plus {@link import("./Map.js").FrameState} and {@link import("./View.js").State}.
   * @param {ProjectionLike} projection The user projection.
   * @api
   */
  function setUserProjection(projection) {
    userProjection = get$2(projection);
  }

  /**
   * Clear the user projection if set.
   * @api
   */
  function clearUserProjection() {
    userProjection = null;
  }

  /**
   * Get the projection for coordinates supplied from and returned by API methods.
   * @return {Projection|null} The user projection (or null if not set).
   * @api
   */
  function getUserProjection() {
    return userProjection;
  }

  /**
   * Use geographic coordinates (WGS-84 datum) in API methods.
   * This includes all API methods except for those interacting with tile grids,
   * plus {@link import("./Map.js").FrameState} and {@link import("./View.js").State}.
   * @api
   */
  function useGeographic() {
    setUserProjection('EPSG:4326');
  }

  /**
   * Return a coordinate transformed into the user projection.  If no user projection
   * is set, the original coordinate is returned.
   * @param {Array<number>} coordinate Input coordinate.
   * @param {ProjectionLike} sourceProjection The input coordinate projection.
   * @return {Array<number>} The input coordinate in the user projection.
   */
  function toUserCoordinate(coordinate, sourceProjection) {
    if (!userProjection) {
      return coordinate;
    }
    return transform$1(coordinate, sourceProjection, userProjection);
  }

  /**
   * Return a coordinate transformed from the user projection.  If no user projection
   * is set, the original coordinate is returned.
   * @param {Array<number>} coordinate Input coordinate.
   * @param {ProjectionLike} destProjection The destination projection.
   * @return {Array<number>} The input coordinate transformed.
   */
  function fromUserCoordinate(coordinate, destProjection) {
    if (!userProjection) {
      if (
        showCoordinateWarning &&
        !equals(coordinate, [0, 0]) &&
        coordinate[0] >= -180 &&
        coordinate[0] <= 180 &&
        coordinate[1] >= -90 &&
        coordinate[1] <= 90
      ) {
        showCoordinateWarning = false;
        warn(
          'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.',
        );
      }
      return coordinate;
    }
    return transform$1(coordinate, userProjection, destProjection);
  }

  /**
   * Return an extent transformed into the user projection.  If no user projection
   * is set, the original extent is returned.
   * @param {import("./extent.js").Extent} extent Input extent.
   * @param {ProjectionLike} sourceProjection The input extent projection.
   * @return {import("./extent.js").Extent} The input extent in the user projection.
   */
  function toUserExtent(extent, sourceProjection) {
    if (!userProjection) {
      return extent;
    }
    return transformExtent(extent, sourceProjection, userProjection);
  }

  /**
   * Return an extent transformed from the user projection.  If no user projection
   * is set, the original extent is returned.
   * @param {import("./extent.js").Extent} extent Input extent.
   * @param {ProjectionLike} destProjection The destination projection.
   * @return {import("./extent.js").Extent} The input extent transformed.
   */
  function fromUserExtent(extent, destProjection) {
    if (!userProjection) {
      return extent;
    }
    return transformExtent(extent, userProjection, destProjection);
  }

  /**
   * Return the resolution in user projection units per pixel. If no user projection
   * is set, or source or user projection are missing units, the original resolution
   * is returned.
   * @param {number} resolution Resolution in input projection units per pixel.
   * @param {ProjectionLike} sourceProjection The input projection.
   * @return {number} Resolution in user projection units per pixel.
   */
  function toUserResolution(resolution, sourceProjection) {
    if (!userProjection) {
      return resolution;
    }
    const sourceMetersPerUnit = get$2(sourceProjection).getMetersPerUnit();
    const userMetersPerUnit = userProjection.getMetersPerUnit();
    return sourceMetersPerUnit && userMetersPerUnit
      ? (resolution * sourceMetersPerUnit) / userMetersPerUnit
      : resolution;
  }

  /**
   * Return the resolution in user projection units per pixel. If no user projection
   * is set, or source or user projection are missing units, the original resolution
   * is returned.
   * @param {number} resolution Resolution in user projection units per pixel.
   * @param {ProjectionLike} destProjection The destination projection.
   * @return {number} Resolution in destination projection units per pixel.
   */
  function fromUserResolution(resolution, destProjection) {
    if (!userProjection) {
      return resolution;
    }
    const destMetersPerUnit = get$2(destProjection).getMetersPerUnit();
    const userMetersPerUnit = userProjection.getMetersPerUnit();
    return destMetersPerUnit && userMetersPerUnit
      ? (resolution * userMetersPerUnit) / destMetersPerUnit
      : resolution;
  }

  /**
   * Creates a safe coordinate transform function from a coordinate transform function.
   * "Safe" means that it can handle wrapping of x-coordinates for global projections,
   * and that coordinates exceeding the source projection validity extent's range will be
   * clamped to the validity range.
   * @param {Projection} sourceProj Source projection.
   * @param {Projection} destProj Destination projection.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} transform Transform function (source to destination).
   * @return {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} Safe transform function (source to destination).
   */
  function createSafeCoordinateTransform(sourceProj, destProj, transform) {
    return function (coord) {
      let transformed, worldsAway;
      if (sourceProj.canWrapX()) {
        const sourceExtent = sourceProj.getExtent();
        const sourceExtentWidth = getWidth(sourceExtent);
        coord = coord.slice(0);
        worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);
        if (worldsAway) {
          // Move x to the real world
          coord[0] = coord[0] - worldsAway * sourceExtentWidth;
        }
        coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);
        coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);
        transformed = transform(coord);
      } else {
        transformed = transform(coord);
      }
      if (worldsAway && destProj.canWrapX()) {
        // Move transformed coordinate back to the offset world
        transformed[0] += worldsAway * getWidth(destProj.getExtent());
      }
      return transformed;
    };
  }

  /**
   * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
   * by when this module is executed and should only need to be called again after
   * `clearAllProjections()` is called (e.g. in tests).
   */
  function addCommon() {
    // Add transformations that don't alter coordinates to convert within set of
    // projections with equal meaning.
    addEquivalentProjections(PROJECTIONS$1);
    addEquivalentProjections(PROJECTIONS);
    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
    // coordinates and back.
    addEquivalentTransforms(
      PROJECTIONS,
      PROJECTIONS$1,
      fromEPSG4326,
      toEPSG4326,
    );
  }

  addCommon();

  var proj = /*#__PURE__*/Object.freeze({
    __proto__: null,
    METERS_PER_UNIT: METERS_PER_UNIT$1,
    Projection: Projection$1,
    addCommon: addCommon,
    addCoordinateTransforms: addCoordinateTransforms,
    addEquivalentProjections: addEquivalentProjections,
    addEquivalentTransforms: addEquivalentTransforms,
    addProjection: addProjection,
    addProjections: addProjections,
    clearAllProjections: clearAllProjections,
    clearUserProjection: clearUserProjection,
    cloneTransform: cloneTransform,
    createProjection: createProjection,
    createSafeCoordinateTransform: createSafeCoordinateTransform,
    createTransformFromCoordinateTransform: createTransformFromCoordinateTransform,
    disableCoordinateWarning: disableCoordinateWarning,
    equivalent: equivalent$1,
    fromLonLat: fromLonLat,
    fromUserCoordinate: fromUserCoordinate,
    fromUserExtent: fromUserExtent,
    fromUserResolution: fromUserResolution,
    get: get$2,
    getPointResolution: getPointResolution,
    getTransform: getTransform,
    getTransformFromProjections: getTransformFromProjections,
    getUserProjection: getUserProjection,
    identityTransform: identityTransform,
    setUserProjection: setUserProjection,
    toLonLat: toLonLat,
    toUserCoordinate: toUserCoordinate,
    toUserExtent: toUserExtent,
    toUserResolution: toUserResolution,
    transform: transform$1,
    transformExtent: transformExtent,
    transformWithProjections: transformWithProjections,
    useGeographic: useGeographic
  });

  /**
   * @module ol/transform
   */

  /**
   * An array representing an affine 2d transformation for use with
   * {@link module:ol/transform} functions. The array has 6 elements.
   * @typedef {!Array<number>} Transform
   * @api
   */

  /**
   * Collection of affine 2d transformation functions. The functions work on an
   * array of 6 elements. The element order is compatible with the [SVGMatrix
   * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
   * a subset (elements a to f) of a 3Ã3 matrix:
   * ```
   * [ a c e ]
   * [ b d f ]
   * [ 0 0 1 ]
   * ```
   */

  /**
   * @private
   * @type {Transform}
   */
  new Array(6);

  /**
   * Create an identity transform.
   * @return {!Transform} Identity transform.
   */
  function create() {
    return [1, 0, 0, 1, 0, 0];
  }

  /**
   * Set transform on one matrix from another matrix.
   * @param {!Transform} transform1 Matrix to set transform to.
   * @param {!Transform} transform2 Matrix to set transform from.
   * @return {!Transform} transform1 with transform from transform2 applied.
   */
  function setFromArray(transform1, transform2) {
    transform1[0] = transform2[0];
    transform1[1] = transform2[1];
    transform1[2] = transform2[2];
    transform1[3] = transform2[3];
    transform1[4] = transform2[4];
    transform1[5] = transform2[5];
    return transform1;
  }

  /**
   * Transforms the given coordinate with the given transform returning the
   * resulting, transformed coordinate. The coordinate will be modified in-place.
   *
   * @param {Transform} transform The transformation.
   * @param {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} coordinate The coordinate to transform.
   * @return {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} return coordinate so that operations can be
   *     chained together.
   */
  function apply(transform, coordinate) {
    const x = coordinate[0];
    const y = coordinate[1];
    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
    return coordinate;
  }

  /**
   * Creates a composite transform given an initial translation, scale, rotation, and
   * final translation (in that order only, not commutative).
   * @param {!Transform} transform The transform (will be modified in place).
   * @param {number} dx1 Initial translation x.
   * @param {number} dy1 Initial translation y.
   * @param {number} sx Scale factor x.
   * @param {number} sy Scale factor y.
   * @param {number} angle Rotation (in counter-clockwise radians).
   * @param {number} dx2 Final translation x.
   * @param {number} dy2 Final translation y.
   * @return {!Transform} The composite transform.
   */
  function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
    const sin = Math.sin(angle);
    const cos = Math.cos(angle);
    transform[0] = sx * cos;
    transform[1] = sy * sin;
    transform[2] = -sx * sin;
    transform[3] = sy * cos;
    transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
    transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
    return transform;
  }

  /**
   * Invert the given transform.
   * @param {!Transform} target Transform to be set as the inverse of
   *     the source transform.
   * @param {!Transform} source The source transform to invert.
   * @return {!Transform} The inverted (target) transform.
   */
  function makeInverse(target, source) {
    const det = determinant(source);
    assert$1(det !== 0, 'Transformation matrix cannot be inverted');

    const a = source[0];
    const b = source[1];
    const c = source[2];
    const d = source[3];
    const e = source[4];
    const f = source[5];

    target[0] = d / det;
    target[1] = -b / det;
    target[2] = -c / det;
    target[3] = a / det;
    target[4] = (c * f - d * e) / det;
    target[5] = -(a * f - b * e) / det;

    return target;
  }

  /**
   * Returns the determinant of the given matrix.
   * @param {!Transform} mat Matrix.
   * @return {number} Determinant.
   */
  function determinant(mat) {
    return mat[0] * mat[3] - mat[1] * mat[2];
  }

  /**
   * @type {Array}
   */
  const matrixPrecision = [1e5, 1e5, 1e5, 1e5, 2, 2];

  /**
   * A matrix string version of the transform.  This can be used
   * for CSS transforms.
   * @param {!Transform} mat Matrix.
   * @return {string} The transform as a string.
   */
  function toString$1(mat) {
    const transformString = 'matrix(' + mat.join(', ') + ')';
    return transformString;
  }

  /**
   * Create a transform from a CSS transform matrix string.
   * @param {string} cssTransform The CSS string to parse.
   * @return {!Transform} The transform.
   */
  function fromString$1(cssTransform) {
    const values = cssTransform.substring(7, cssTransform.length - 1).split(',');
    return values.map(parseFloat);
  }

  /**
   * Compare two matrices for equality.
   * @param {!string} cssTransform1 A CSS transform matrix string.
   * @param {!string} cssTransform2 A CSS transform matrix string.
   * @return {boolean} The two matrices are equal.
   */
  function equivalent(cssTransform1, cssTransform2) {
    const mat1 = fromString$1(cssTransform1);
    const mat2 = fromString$1(cssTransform2);
    for (let i = 0; i < 6; ++i) {
      if (Math.round((mat1[i] - mat2[i]) * matrixPrecision[i]) !== 0) {
        return false;
      }
    }
    return true;
  }

  /**
   * @module ol/geom/flat/transform
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {Array<number>} [dest] Destination.
   * @param {number} [destinationStride] Stride of destination coordinates; if unspecified, assumed to be 2.
   * @return {Array<number>} Transformed coordinates.
   */
  function transform2D(
    flatCoordinates,
    offset,
    end,
    stride,
    transform,
    dest,
    destinationStride,
  ) {
    dest = dest ? dest : [];
    destinationStride = destinationStride ? destinationStride : 2;
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      const x = flatCoordinates[j];
      const y = flatCoordinates[j + 1];
      dest[i++] = transform[0] * x + transform[2] * y + transform[4];
      dest[i++] = transform[1] * x + transform[3] * y + transform[5];

      for (let k = 2; k < destinationStride; k++) {
        dest[i++] = flatCoordinates[j + k];
      }
    }

    if (dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} angle Angle.
   * @param {Array<number>} anchor Rotation anchor point.
   * @param {Array<number>} [dest] Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function rotate(
    flatCoordinates,
    offset,
    end,
    stride,
    angle,
    anchor,
    dest,
  ) {
    dest = dest ? dest : [];
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    const anchorX = anchor[0];
    const anchorY = anchor[1];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      const deltaX = flatCoordinates[j] - anchorX;
      const deltaY = flatCoordinates[j + 1] - anchorY;
      dest[i++] = anchorX + deltaX * cos - deltaY * sin;
      dest[i++] = anchorY + deltaX * sin + deltaY * cos;
      for (let k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }

  /**
   * Scale the coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} sx Scale factor in the x-direction.
   * @param {number} sy Scale factor in the y-direction.
   * @param {Array<number>} anchor Scale anchor point.
   * @param {Array<number>} [dest] Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function scale$1(
    flatCoordinates,
    offset,
    end,
    stride,
    sx,
    sy,
    anchor,
    dest,
  ) {
    dest = dest ? dest : [];
    const anchorX = anchor[0];
    const anchorY = anchor[1];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      const deltaX = flatCoordinates[j] - anchorX;
      const deltaY = flatCoordinates[j + 1] - anchorY;
      dest[i++] = anchorX + sx * deltaX;
      dest[i++] = anchorY + sy * deltaY;
      for (let k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} deltaX Delta X.
   * @param {number} deltaY Delta Y.
   * @param {Array<number>} [dest] Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function translate(
    flatCoordinates,
    offset,
    end,
    stride,
    deltaX,
    deltaY,
    dest,
  ) {
    dest = dest ? dest : [];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      dest[i++] = flatCoordinates[j] + deltaX;
      dest[i++] = flatCoordinates[j + 1] + deltaY;
      for (let k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }

  /**
   * @module ol/geom/Geometry
   */

  /**
   * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout
   * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
   * or measure ('M') coordinate is available.
   */

  /**
   * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type
   * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,
   * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
   * `'GeometryCollection'`, or `'Circle'`.
   */

  /**
   * @type {import("../transform.js").Transform}
   */
  const tmpTransform$1 = create();

  /** @type {import('../coordinate.js').Coordinate} */
  const tmpPoint = [NaN, NaN];

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for vector geometries.
   *
   * To get notified of changes to the geometry, register a listener for the
   * generic `change` event on your geometry instance.
   *
   * @abstract
   * @api
   */
  class Geometry extends BaseObject {
    constructor() {
      super();

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = createEmpty();

      /**
       * @private
       * @type {number}
       */
      this.extentRevision_ = -1;

      /**
       * @protected
       * @type {number}
       */
      this.simplifiedGeometryMaxMinSquaredTolerance = 0;

      /**
       * @protected
       * @type {number}
       */
      this.simplifiedGeometryRevision = 0;

      /**
       * Get a transformed and simplified version of the geometry.
       * @abstract
       * @param {number} revision The geometry revision.
       * @param {number} squaredTolerance Squared tolerance.
       * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
       * @return {Geometry} Simplified geometry.
       */
      this.simplifyTransformedInternal = memoizeOne(
        (revision, squaredTolerance, transform) => {
          if (!transform) {
            return this.getSimplifiedGeometry(squaredTolerance);
          }
          const clone = this.clone();
          clone.applyTransform(transform);
          return clone.getSimplifiedGeometry(squaredTolerance);
        },
      );
    }

    /**
     * Get a transformed and simplified version of the geometry.
     * @abstract
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
     * @return {Geometry} Simplified geometry.
     */
    simplifyTransformed(squaredTolerance, transform) {
      return this.simplifyTransformedInternal(
        this.getRevision(),
        squaredTolerance,
        transform,
      );
    }

    /**
     * Make a complete copy of the geometry.
     * @abstract
     * @return {!Geometry} Clone.
     */
    clone() {
      return abstract();
    }

    /**
     * @abstract
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      return abstract();
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    containsXY(x, y) {
      return this.closestPointXY(x, y, tmpPoint, Number.MIN_VALUE) === 0;
    }

    /**
     * Return the closest point of the geometry to the passed point as
     * {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} point Point.
     * @param {import("../coordinate.js").Coordinate} [closestPoint] Closest point.
     * @return {import("../coordinate.js").Coordinate} Closest point.
     * @api
     */
    getClosestPoint(point, closestPoint) {
      closestPoint = closestPoint ? closestPoint : [NaN, NaN];
      this.closestPointXY(point[0], point[1], closestPoint, Infinity);
      return closestPoint;
    }

    /**
     * Returns true if this geometry includes the specified coordinate. If the
     * coordinate is on the boundary of the geometry, returns false.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} Contains coordinate.
     * @api
     */
    intersectsCoordinate(coordinate) {
      return this.containsXY(coordinate[0], coordinate[1]);
    }

    /**
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */
    computeExtent(extent) {
      return abstract();
    }

    /**
     * Get the extent of the geometry.
     * @param {import("../extent.js").Extent} [extent] Extent.
     * @return {import("../extent.js").Extent} extent Extent.
     * @api
     */
    getExtent(extent) {
      if (this.extentRevision_ != this.getRevision()) {
        const extent = this.computeExtent(this.extent_);
        if (isNaN(extent[0]) || isNaN(extent[1])) {
          createOrUpdateEmpty(extent);
        }
        this.extentRevision_ = this.getRevision();
      }
      return returnOrUpdate(this.extent_, extent);
    }

    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} angle Rotation angle in radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */
    rotate(angle, anchor) {
      abstract();
    }

    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).
     * @param {import("../coordinate.js").Coordinate} [anchor] The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     */
    scale(sx, sy, anchor) {
      abstract();
    }

    /**
     * Create a simplified version of this geometry.  For linestrings, this uses
     * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)
     * algorithm.  For polygons, a quantization-based
     * simplification is used to preserve topology.
     * @param {number} tolerance The tolerance distance for simplification.
     * @return {Geometry} A new, simplified version of the original geometry.
     * @api
     */
    simplify(tolerance) {
      return this.getSimplifiedGeometry(tolerance * tolerance);
    }

    /**
     * Create a simplified version of this geometry using the Douglas Peucker
     * algorithm.
     * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
     * @abstract
     * @param {number} squaredTolerance Squared tolerance.
     * @return {Geometry} Simplified geometry.
     */
    getSimplifiedGeometry(squaredTolerance) {
      return abstract();
    }

    /**
     * Get the type of this geometry.
     * @abstract
     * @return {Type} Geometry type.
     */
    getType() {
      return abstract();
    }

    /**
     * Apply a transform function to the coordinates of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @abstract
     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
     * Called with a flat array of geometry coordinates.
     */
    applyTransform(transformFn) {
      abstract();
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     */
    intersectsExtent(extent) {
      return abstract();
    }

    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @abstract
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */
    translate(deltaX, deltaY) {
      abstract();
    }

    /**
     * Transform each coordinate of the geometry from one coordinate reference
     * system to another. The geometry is modified in place.
     * For example, a line will be transformed to a line and a circle to a circle.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     *
     * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @return {this} This geometry.  Note that original geometry is
     *     modified in place.
     * @api
     */
    transform(source, destination) {
      /** @type {import("../proj/Projection.js").default} */
      const sourceProj = get$2(source);
      const transformFn =
        sourceProj.getUnits() == 'tile-pixels'
          ? function (inCoordinates, outCoordinates, stride) {
              const pixelExtent = sourceProj.getExtent();
              const projectedExtent = sourceProj.getWorldExtent();
              const scale = getHeight(projectedExtent) / getHeight(pixelExtent);
              compose(
                tmpTransform$1,
                projectedExtent[0],
                projectedExtent[3],
                scale,
                -scale,
                0,
                0,
                0,
              );
              const transformed = transform2D(
                inCoordinates,
                0,
                inCoordinates.length,
                stride,
                tmpTransform$1,
                outCoordinates,
              );
              const projTransform = getTransform(sourceProj, destination);
              if (projTransform) {
                return projTransform(transformed, transformed, stride);
              }
              return transformed;
            }
          : getTransform(sourceProj, destination);
      this.applyTransform(transformFn);
      return this;
    }
  }

  /**
   * @module ol/geom/SimpleGeometry
   */

  /**
   * @classdesc
   * Abstract base class; only used for creating subclasses; do not instantiate
   * in apps, as cannot be rendered.
   *
   * @abstract
   * @api
   */
  class SimpleGeometry extends Geometry {
    constructor() {
      super();

      /**
       * @protected
       * @type {import("./Geometry.js").GeometryLayout}
       */
      this.layout = 'XY';

      /**
       * @protected
       * @type {number}
       */
      this.stride = 2;

      /**
       * @protected
       * @type {Array<number>}
       */
      this.flatCoordinates;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     * @override
     */
    computeExtent(extent) {
      return createOrUpdateFromFlatCoordinates(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        extent,
      );
    }

    /**
     * @abstract
     * @return {Array<*> | null} Coordinates.
     */
    getCoordinates() {
      return abstract();
    }

    /**
     * Return the first coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} First coordinate.
     * @api
     */
    getFirstCoordinate() {
      return this.flatCoordinates.slice(0, this.stride);
    }

    /**
     * @return {Array<number>} Flat coordinates.
     */
    getFlatCoordinates() {
      return this.flatCoordinates;
    }

    /**
     * Return the last coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} Last point.
     * @api
     */
    getLastCoordinate() {
      return this.flatCoordinates.slice(
        this.flatCoordinates.length - this.stride,
      );
    }

    /**
     * Return the {@link import("./Geometry.js").GeometryLayout layout} of the geometry.
     * @return {import("./Geometry.js").GeometryLayout} Layout.
     * @api
     */
    getLayout() {
      return this.layout;
    }

    /**
     * Create a simplified version of this geometry using the Douglas Peucker algorithm.
     * @param {number} squaredTolerance Squared tolerance.
     * @return {SimpleGeometry} Simplified geometry.
     * @override
     */
    getSimplifiedGeometry(squaredTolerance) {
      if (this.simplifiedGeometryRevision !== this.getRevision()) {
        this.simplifiedGeometryMaxMinSquaredTolerance = 0;
        this.simplifiedGeometryRevision = this.getRevision();
      }
      // If squaredTolerance is negative or if we know that simplification will not
      // have any effect then just return this.
      if (
        squaredTolerance < 0 ||
        (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
          squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)
      ) {
        return this;
      }

      const simplifiedGeometry =
        this.getSimplifiedGeometryInternal(squaredTolerance);
      const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
      if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {
        return simplifiedGeometry;
      }
      // Simplification did not actually remove any coordinates.  We now know
      // that any calls to getSimplifiedGeometry with a squaredTolerance less
      // than or equal to the current squaredTolerance will also not have any
      // effect.  This allows us to short circuit simplification (saving CPU
      // cycles) and prevents the cache of simplified geometries from filling
      // up with useless identical copies of this geometry (saving memory).
      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
      return this;
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {SimpleGeometry} Simplified geometry.
     * @protected
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      return this;
    }

    /**
     * @return {number} Stride.
     */
    getStride() {
      return this.stride;
    }

    /**
     * @param {import("./Geometry.js").GeometryLayout} layout Layout.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     */
    setFlatCoordinates(layout, flatCoordinates) {
      this.stride = getStrideForLayout(layout);
      this.layout = layout;
      this.flatCoordinates = flatCoordinates;
    }

    /**
     * @abstract
     * @param {!Array<*>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    setCoordinates(coordinates, layout) {
      abstract();
    }

    /**
     * @param {import("./Geometry.js").GeometryLayout|undefined} layout Layout.
     * @param {Array<*>} coordinates Coordinates.
     * @param {number} nesting Nesting.
     * @protected
     */
    setLayout(layout, coordinates, nesting) {
      let stride;
      if (layout) {
        stride = getStrideForLayout(layout);
      } else {
        for (let i = 0; i < nesting; ++i) {
          if (coordinates.length === 0) {
            this.layout = 'XY';
            this.stride = 2;
            return;
          }
          coordinates = /** @type {Array<unknown>} */ (coordinates[0]);
        }
        stride = coordinates.length;
        layout = getLayoutForStride(stride);
      }
      this.layout = layout;
      this.stride = stride;
    }

    /**
     * Apply a transform function to the coordinates of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
     * Called with a flat array of geometry coordinates.
     * @api
     * @override
     */
    applyTransform(transformFn) {
      if (this.flatCoordinates) {
        transformFn(
          this.flatCoordinates,
          this.flatCoordinates,
          this.layout.startsWith('XYZ') ? 3 : 2,
          this.stride,
        );
        this.changed();
      }
    }

    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @param {number} angle Rotation angle in counter-clockwise radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     * @override
     */
    rotate(angle, anchor) {
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        rotate(
          flatCoordinates,
          0,
          flatCoordinates.length,
          stride,
          angle,
          anchor,
          flatCoordinates,
        );
        this.changed();
      }
    }

    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).
     * @param {import("../coordinate.js").Coordinate} [anchor] The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     * @override
     */
    scale(sx, sy, anchor) {
      if (sy === undefined) {
        sy = sx;
      }
      if (!anchor) {
        anchor = getCenter(this.getExtent());
      }
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        scale$1(
          flatCoordinates,
          0,
          flatCoordinates.length,
          stride,
          sx,
          sy,
          anchor,
          flatCoordinates,
        );
        this.changed();
      }
    }

    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     * @override
     */
    translate(deltaX, deltaY) {
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        translate(
          flatCoordinates,
          0,
          flatCoordinates.length,
          stride,
          deltaX,
          deltaY,
          flatCoordinates,
        );
        this.changed();
      }
    }
  }

  /**
   * @param {number} stride Stride.
   * @return {import("./Geometry.js").GeometryLayout} layout Layout.
   */
  function getLayoutForStride(stride) {
    let layout;
    if (stride == 2) {
      layout = 'XY';
    } else if (stride == 3) {
      layout = 'XYZ';
    } else if (stride == 4) {
      layout = 'XYZM';
    }
    return /** @type {import("./Geometry.js").GeometryLayout} */ (layout);
  }

  /**
   * @param {import("./Geometry.js").GeometryLayout} layout Layout.
   * @return {number} Stride.
   */
  function getStrideForLayout(layout) {
    let stride;
    if (layout == 'XY') {
      stride = 2;
    } else if (layout == 'XYZ' || layout == 'XYM') {
      stride = 3;
    } else if (layout == 'XYZM') {
      stride = 4;
    }
    return /** @type {number} */ (stride);
  }

  /**
   * @param {SimpleGeometry} simpleGeometry Simple geometry.
   * @param {import("../transform.js").Transform} transform Transform.
   * @param {Array<number>} [dest] Destination.
   * @return {Array<number>} Transformed flat coordinates.
   */
  function transformGeom2D(simpleGeometry, transform, dest) {
    const flatCoordinates = simpleGeometry.getFlatCoordinates();
    if (!flatCoordinates) {
      return null;
    }
    const stride = simpleGeometry.getStride();
    return transform2D(
      flatCoordinates,
      0,
      flatCoordinates.length,
      stride,
      transform,
      dest,
    );
  }

  /**
   * @module ol/geom/flat/area
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRing(flatCoordinates, offset, end, stride) {
    let twiceArea = 0;
    const x0 = flatCoordinates[end - stride];
    const y0 = flatCoordinates[end - stride + 1];
    let dx1 = 0;
    let dy1 = 0;
    for (; offset < end; offset += stride) {
      const dx2 = flatCoordinates[offset] - x0;
      const dy2 = flatCoordinates[offset + 1] - y0;
      twiceArea += dy1 * dx2 - dx1 * dy2;
      dx1 = dx2;
      dy1 = dy2;
    }
    return twiceArea / 2;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRings(flatCoordinates, offset, ends, stride) {
    let area = 0;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      area += linearRing(flatCoordinates, offset, end, stride);
      offset = end;
    }
    return area;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRingss$1(flatCoordinates, offset, endss, stride) {
    let area = 0;
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      area += linearRings(flatCoordinates, offset, ends, stride);
      offset = ends[ends.length - 1];
    }
    return area;
  }

  /**
   * @module ol/geom/flat/closest
   */

  /**
   * Returns the point on the 2D line segment flatCoordinates[offset1] to
   * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
   * dimensions are linearly interpolated.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset1 Offset 1.
   * @param {number} offset2 Offset 2.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   */
  function assignClosest(
    flatCoordinates,
    offset1,
    offset2,
    stride,
    x,
    y,
    closestPoint,
  ) {
    const x1 = flatCoordinates[offset1];
    const y1 = flatCoordinates[offset1 + 1];
    const dx = flatCoordinates[offset2] - x1;
    const dy = flatCoordinates[offset2 + 1] - y1;
    let offset;
    if (dx === 0 && dy === 0) {
      offset = offset1;
    } else {
      const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
      if (t > 1) {
        offset = offset2;
      } else if (t > 0) {
        for (let i = 0; i < stride; ++i) {
          closestPoint[i] = lerp(
            flatCoordinates[offset1 + i],
            flatCoordinates[offset2 + i],
            t,
          );
        }
        closestPoint.length = stride;
        return;
      } else {
        offset = offset1;
      }
    }
    for (let i = 0; i < stride; ++i) {
      closestPoint[i] = flatCoordinates[offset + i];
    }
    closestPoint.length = stride;
  }

  /**
   * Return the squared of the largest distance between any pair of consecutive
   * coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
    let x1 = flatCoordinates[offset];
    let y1 = flatCoordinates[offset + 1];
    for (offset += stride; offset < end; offset += stride) {
      const x2 = flatCoordinates[offset];
      const y2 = flatCoordinates[offset + 1];
      const squaredDelta = squaredDistance$1(x1, y1, x2, y2);
      if (squaredDelta > max) {
        max = squaredDelta;
      }
      x1 = x2;
      y1 = y2;
    }
    return max;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function arrayMaxSquaredDelta(
    flatCoordinates,
    offset,
    ends,
    stride,
    max,
  ) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);
      offset = end;
    }
    return max;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function multiArrayMaxSquaredDelta(
    flatCoordinates,
    offset,
    endss,
    stride,
    max,
  ) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);
      offset = ends[ends.length - 1];
    }
    return max;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>} [tmpPoint] Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestPoint(
    flatCoordinates,
    offset,
    end,
    stride,
    maxDelta,
    isRing,
    x,
    y,
    closestPoint,
    minSquaredDistance,
    tmpPoint,
  ) {
    if (offset == end) {
      return minSquaredDistance;
    }
    let i, squaredDistance;
    if (maxDelta === 0) {
      // All points are identical, so just test the first point.
      squaredDistance = squaredDistance$1(
        x,
        y,
        flatCoordinates[offset],
        flatCoordinates[offset + 1],
      );
      if (squaredDistance < minSquaredDistance) {
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = flatCoordinates[offset + i];
        }
        closestPoint.length = stride;
        return squaredDistance;
      }
      return minSquaredDistance;
    }
    tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];
    let index = offset + stride;
    while (index < end) {
      assignClosest(
        flatCoordinates,
        index - stride,
        index,
        stride,
        x,
        y,
        tmpPoint,
      );
      squaredDistance = squaredDistance$1(x, y, tmpPoint[0], tmpPoint[1]);
      if (squaredDistance < minSquaredDistance) {
        minSquaredDistance = squaredDistance;
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = tmpPoint[i];
        }
        closestPoint.length = stride;
        index += stride;
      } else {
        // Skip ahead multiple points, because we know that all the skipped
        // points cannot be any closer than the closest point we have found so
        // far.  We know this because we know how close the current point is, how
        // close the closest point we have found so far is, and the maximum
        // distance between consecutive points.  For example, if we're currently
        // at distance 10, the best we've found so far is 3, and that the maximum
        // distance between consecutive points is 2, then we'll need to skip at
        // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
        // finding a closer point.  We use Math.max(..., 1) to ensure that we
        // always advance at least one point, to avoid an infinite loop.
        index +=
          stride *
          Math.max(
            ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /
              maxDelta) |
              0,
            1,
          );
      }
    }
    if (isRing) {
      // Check the closing segment.
      assignClosest(
        flatCoordinates,
        end - stride,
        offset,
        stride,
        x,
        y,
        tmpPoint,
      );
      squaredDistance = squaredDistance$1(x, y, tmpPoint[0], tmpPoint[1]);
      if (squaredDistance < minSquaredDistance) {
        minSquaredDistance = squaredDistance;
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = tmpPoint[i];
        }
        closestPoint.length = stride;
      }
    }
    return minSquaredDistance;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>} [tmpPoint] Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestArrayPoint(
    flatCoordinates,
    offset,
    ends,
    stride,
    maxDelta,
    isRing,
    x,
    y,
    closestPoint,
    minSquaredDistance,
    tmpPoint,
  ) {
    tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      minSquaredDistance = assignClosestPoint(
        flatCoordinates,
        offset,
        end,
        stride,
        maxDelta,
        isRing,
        x,
        y,
        closestPoint,
        minSquaredDistance,
        tmpPoint,
      );
      offset = end;
    }
    return minSquaredDistance;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>} [tmpPoint] Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestMultiArrayPoint(
    flatCoordinates,
    offset,
    endss,
    stride,
    maxDelta,
    isRing,
    x,
    y,
    closestPoint,
    minSquaredDistance,
    tmpPoint,
  ) {
    tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      minSquaredDistance = assignClosestArrayPoint(
        flatCoordinates,
        offset,
        ends,
        stride,
        maxDelta,
        isRing,
        x,
        y,
        closestPoint,
        minSquaredDistance,
        tmpPoint,
      );
      offset = ends[ends.length - 1];
    }
    return minSquaredDistance;
  }

  /**
   * @module ol/geom/flat/deflate
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
    for (let i = 0, ii = coordinate.length; i < ii; ++i) {
      flatCoordinates[offset++] = coordinate[i];
    }
    return offset;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<import("../../coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinates(
    flatCoordinates,
    offset,
    coordinates,
    stride,
  ) {
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      const coordinate = coordinates[i];
      for (let j = 0; j < stride; ++j) {
        flatCoordinates[offset++] = coordinate[j];
      }
    }
    return offset;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>} coordinatess Coordinatess.
   * @param {number} stride Stride.
   * @param {Array<number>} [ends] Ends.
   * @return {Array<number>} Ends.
   */
  function deflateCoordinatesArray(
    flatCoordinates,
    offset,
    coordinatess,
    stride,
    ends,
  ) {
    ends = ends ? ends : [];
    let i = 0;
    for (let j = 0, jj = coordinatess.length; j < jj; ++j) {
      const end = deflateCoordinates(
        flatCoordinates,
        offset,
        coordinatess[j],
        stride,
      );
      ends[i++] = end;
      offset = end;
    }
    ends.length = i;
    return ends;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} coordinatesss Coordinatesss.
   * @param {number} stride Stride.
   * @param {Array<Array<number>>} [endss] Endss.
   * @return {Array<Array<number>>} Endss.
   */
  function deflateMultiCoordinatesArray(
    flatCoordinates,
    offset,
    coordinatesss,
    stride,
    endss,
  ) {
    endss = endss ? endss : [];
    let i = 0;
    for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {
      const ends = deflateCoordinatesArray(
        flatCoordinates,
        offset,
        coordinatesss[j],
        stride,
        endss[i],
      );
      if (ends.length === 0) {
        ends[0] = offset;
      }
      endss[i++] = ends;
      offset = ends[ends.length - 1];
    }
    endss.length = i;
    return endss;
  }

  /**
   * @module ol/geom/flat/inflate
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Array<import("../../coordinate.js").Coordinate>} [coordinates] Coordinates.
   * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
   */
  function inflateCoordinates(
    flatCoordinates,
    offset,
    end,
    stride,
    coordinates,
  ) {
    coordinates = coordinates !== undefined ? coordinates : [];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      coordinates[i++] = flatCoordinates.slice(j, j + stride);
    }
    coordinates.length = i;
    return coordinates;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>} [coordinatess] Coordinatess.
   * @return {Array<Array<import("../../coordinate.js").Coordinate>>} Coordinatess.
   */
  function inflateCoordinatesArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    coordinatess,
  ) {
    coordinatess = coordinatess !== undefined ? coordinatess : [];
    let i = 0;
    for (let j = 0, jj = ends.length; j < jj; ++j) {
      const end = ends[j];
      coordinatess[i++] = inflateCoordinates(
        flatCoordinates,
        offset,
        end,
        stride,
        coordinatess[i],
      );
      offset = end;
    }
    coordinatess.length = i;
    return coordinatess;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} [coordinatesss]
   *     Coordinatesss.
   * @return {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} Coordinatesss.
   */
  function inflateMultiCoordinatesArray(
    flatCoordinates,
    offset,
    endss,
    stride,
    coordinatesss,
  ) {
    coordinatesss = coordinatesss !== undefined ? coordinatesss : [];
    let i = 0;
    for (let j = 0, jj = endss.length; j < jj; ++j) {
      const ends = endss[j];
      coordinatesss[i++] =
        ends.length === 1 && ends[0] === offset
          ? []
          : inflateCoordinatesArray(
              flatCoordinates,
              offset,
              ends,
              stride,
              coordinatesss[i],
            );
      offset = ends[ends.length - 1];
    }
    coordinatesss.length = i;
    return coordinatesss;
  }

  /**
   * @module ol/geom/flat/simplify
   */
  // Based on simplify-js https://github.com/mourner/simplify-js
  // Copyright (c) 2012, Vladimir Agafonkin
  // All rights reserved.
  //
  // Redistribution and use in source and binary forms, with or without
  // modification, are permitted provided that the following conditions are met:
  //
  //    1. Redistributions of source code must retain the above copyright notice,
  //       this list of conditions and the following disclaimer.
  //
  //    2. Redistributions in binary form must reproduce the above copyright
  //       notice, this list of conditions and the following disclaimer in the
  //       documentation and/or other materials provided with the distribution.
  //
  // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  // ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  // LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  // CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  // SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  // INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  // POSSIBILITY OF SUCH DAMAGE.


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function douglasPeucker(
    flatCoordinates,
    offset,
    end,
    stride,
    squaredTolerance,
    simplifiedFlatCoordinates,
    simplifiedOffset,
  ) {
    const n = (end - offset) / stride;
    if (n < 3) {
      for (; offset < end; offset += stride) {
        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];
        simplifiedFlatCoordinates[simplifiedOffset++] =
          flatCoordinates[offset + 1];
      }
      return simplifiedOffset;
    }
    /** @type {Array<number>} */
    const markers = new Array(n);
    markers[0] = 1;
    markers[n - 1] = 1;
    /** @type {Array<number>} */
    const stack = [offset, end - stride];
    let index = 0;
    while (stack.length > 0) {
      const last = stack.pop();
      const first = stack.pop();
      let maxSquaredDistance = 0;
      const x1 = flatCoordinates[first];
      const y1 = flatCoordinates[first + 1];
      const x2 = flatCoordinates[last];
      const y2 = flatCoordinates[last + 1];
      for (let i = first + stride; i < last; i += stride) {
        const x = flatCoordinates[i];
        const y = flatCoordinates[i + 1];
        const squaredDistance = squaredSegmentDistance(x, y, x1, y1, x2, y2);
        if (squaredDistance > maxSquaredDistance) {
          index = i;
          maxSquaredDistance = squaredDistance;
        }
      }
      if (maxSquaredDistance > squaredTolerance) {
        markers[(index - offset) / stride] = 1;
        if (first + stride < index) {
          stack.push(first, index);
        }
        if (index + stride < last) {
          stack.push(index, last);
        }
      }
    }
    for (let i = 0; i < n; ++i) {
      if (markers[i]) {
        simplifiedFlatCoordinates[simplifiedOffset++] =
          flatCoordinates[offset + i * stride];
        simplifiedFlatCoordinates[simplifiedOffset++] =
          flatCoordinates[offset + i * stride + 1];
      }
    }
    return simplifiedOffset;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function douglasPeuckerArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    squaredTolerance,
    simplifiedFlatCoordinates,
    simplifiedOffset,
    simplifiedEnds,
  ) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      simplifiedOffset = douglasPeucker(
        flatCoordinates,
        offset,
        end,
        stride,
        squaredTolerance,
        simplifiedFlatCoordinates,
        simplifiedOffset,
      );
      simplifiedEnds.push(simplifiedOffset);
      offset = end;
    }
    return simplifiedOffset;
  }

  /**
   * @param {number} value Value.
   * @param {number} tolerance Tolerance.
   * @return {number} Rounded value.
   */
  function snap(value, tolerance) {
    return tolerance * Math.round(value / tolerance);
  }

  /**
   * Simplifies a line string using an algorithm designed by Tim Schaub.
   * Coordinates are snapped to the nearest value in a virtual grid and
   * consecutive duplicate coordinates are discarded.  This effectively preserves
   * topology as the simplification of any subsection of a line string is
   * independent of the rest of the line string.  This means that, for examples,
   * the common edge between two polygons will be simplified to the same line
   * string independently in both polygons.  This implementation uses a single
   * pass over the coordinates and eliminates intermediate collinear points.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function quantize(
    flatCoordinates,
    offset,
    end,
    stride,
    tolerance,
    simplifiedFlatCoordinates,
    simplifiedOffset,
  ) {
    // do nothing if the line is empty
    if (offset == end) {
      return simplifiedOffset;
    }
    // snap the first coordinate (P1)
    let x1 = snap(flatCoordinates[offset], tolerance);
    let y1 = snap(flatCoordinates[offset + 1], tolerance);
    offset += stride;
    // add the first coordinate to the output
    simplifiedFlatCoordinates[simplifiedOffset++] = x1;
    simplifiedFlatCoordinates[simplifiedOffset++] = y1;
    // find the next coordinate that does not snap to the same value as the first
    // coordinate (P2)
    let x2, y2;
    do {
      x2 = snap(flatCoordinates[offset], tolerance);
      y2 = snap(flatCoordinates[offset + 1], tolerance);
      offset += stride;
      if (offset == end) {
        // all coordinates snap to the same value, the line collapses to a point
        // push the last snapped value anyway to ensure that the output contains
        // at least two points
        // FIXME should we really return at least two points anyway?
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
        return simplifiedOffset;
      }
    } while (x2 == x1 && y2 == y1);
    while (offset < end) {
      // snap the next coordinate (P3)
      const x3 = snap(flatCoordinates[offset], tolerance);
      const y3 = snap(flatCoordinates[offset + 1], tolerance);
      offset += stride;
      // skip P3 if it is equal to P2
      if (x3 == x2 && y3 == y2) {
        continue;
      }
      // calculate the delta between P1 and P2
      const dx1 = x2 - x1;
      const dy1 = y2 - y1;
      // calculate the delta between P3 and P1
      const dx2 = x3 - x1;
      const dy2 = y3 - y1;
      // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
      // P1 in the same direction then P2 is on the straight line between P1 and
      // P3
      if (
        dx1 * dy2 == dy1 * dx2 &&
        ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&
        ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))
      ) {
        // discard P2 and set P2 = P3
        x2 = x3;
        y2 = y3;
        continue;
      }
      // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
      // between P3 and P1 or on the opposite half of the line to P2.  add P2,
      // and continue with P1 = P2 and P2 = P3
      simplifiedFlatCoordinates[simplifiedOffset++] = x2;
      simplifiedFlatCoordinates[simplifiedOffset++] = y2;
      x1 = x2;
      y1 = y2;
      x2 = x3;
      y2 = y3;
    }
    // add the last point (P2)
    simplifiedFlatCoordinates[simplifiedOffset++] = x2;
    simplifiedFlatCoordinates[simplifiedOffset++] = y2;
    return simplifiedOffset;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function quantizeArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    tolerance,
    simplifiedFlatCoordinates,
    simplifiedOffset,
    simplifiedEnds,
  ) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      simplifiedOffset = quantize(
        flatCoordinates,
        offset,
        end,
        stride,
        tolerance,
        simplifiedFlatCoordinates,
        simplifiedOffset,
      );
      simplifiedEnds.push(simplifiedOffset);
      offset = end;
    }
    return simplifiedOffset;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<Array<number>>} simplifiedEndss Simplified endss.
   * @return {number} Simplified offset.
   */
  function quantizeMultiArray(
    flatCoordinates,
    offset,
    endss,
    stride,
    tolerance,
    simplifiedFlatCoordinates,
    simplifiedOffset,
    simplifiedEndss,
  ) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      /** @type {Array<number>} */
      const simplifiedEnds = [];
      simplifiedOffset = quantizeArray(
        flatCoordinates,
        offset,
        ends,
        stride,
        tolerance,
        simplifiedFlatCoordinates,
        simplifiedOffset,
        simplifiedEnds,
      );
      simplifiedEndss.push(simplifiedEnds);
      offset = ends[ends.length - 1];
    }
    return simplifiedOffset;
  }

  /**
   * @module ol/geom/LinearRing
   */

  /**
   * @classdesc
   * Linear ring geometry. Only used as part of polygon; cannot be rendered
   * on its own.
   *
   * @api
   */
  class LinearRing extends SimpleGeometry {
    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `layout` are also accepted.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    constructor(coordinates, layout) {
      super();

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (layout !== undefined && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates),
        );
      } else {
        this.setCoordinates(
          /** @type {Array<import("../coordinate.js").Coordinate>} */ (
            coordinates
          ),
          layout,
        );
      }
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!LinearRing} Clone.
     * @api
     * @override
     */
    clone() {
      return new LinearRing(this.flatCoordinates.slice(), this.layout);
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     * @override
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(
          maxSquaredDelta(
            this.flatCoordinates,
            0,
            this.flatCoordinates.length,
            this.stride,
            0,
          ),
        );
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestPoint(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        this.maxDelta_,
        true,
        x,
        y,
        closestPoint,
        minSquaredDistance,
      );
    }

    /**
     * Return the area of the linear ring on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    getArea() {
      return linearRing(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
      );
    }

    /**
     * Return the coordinates of the linear ring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @api
     * @override
     */
    getCoordinates() {
      return inflateCoordinates(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
      );
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {LinearRing} Simplified LinearRing.
     * @protected
     * @override
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      /** @type {Array<number>} */
      const simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = douglasPeucker(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        squaredTolerance,
        simplifiedFlatCoordinates,
        0,
      );
      return new LinearRing(simplifiedFlatCoordinates, 'XY');
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     * @override
     */
    getType() {
      return 'LinearRing';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     * @override
     */
    intersectsExtent(extent) {
      return false;
    }

    /**
     * Set the coordinates of the linear ring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     * @override
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride,
      );
      this.changed();
    }
  }

  /**
   * @module ol/geom/Point
   */

  /**
   * @classdesc
   * Point geometry.
   *
   * @api
   */
  let Point$1 = class Point extends SimpleGeometry {
    /**
     * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    constructor(coordinates, layout) {
      super();
      this.setCoordinates(coordinates, layout);
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!Point} Clone.
     * @api
     * @override
     */
    clone() {
      const point = new Point(this.flatCoordinates.slice(), this.layout);
      point.applyProperties(this);
      return point;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     * @override
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      const flatCoordinates = this.flatCoordinates;
      const squaredDistance = squaredDistance$1(
        x,
        y,
        flatCoordinates[0],
        flatCoordinates[1],
      );
      if (squaredDistance < minSquaredDistance) {
        const stride = this.stride;
        for (let i = 0; i < stride; ++i) {
          closestPoint[i] = flatCoordinates[i];
        }
        closestPoint.length = stride;
        return squaredDistance;
      }
      return minSquaredDistance;
    }

    /**
     * Return the coordinate of the point.
     * @return {import("../coordinate.js").Coordinate} Coordinates.
     * @api
     * @override
     */
    getCoordinates() {
      return this.flatCoordinates.slice();
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     * @override
     */
    computeExtent(extent) {
      return createOrUpdateFromCoordinate(this.flatCoordinates, extent);
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     * @override
     */
    getType() {
      return 'Point';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     * @override
     */
    intersectsExtent(extent) {
      return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
    }

    /**
     * @param {!Array<*>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     * @override
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 0);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinate(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride,
      );
      this.changed();
    }
  };

  /**
   * @module ol/geom/flat/contains
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} Contains extent.
   */
  function linearRingContainsExtent(
    flatCoordinates,
    offset,
    end,
    stride,
    extent,
  ) {
    const outside = forEachCorner(
      extent,
      /**
       * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
       * @return {boolean} Contains (x, y).
       */
      function (coordinate) {
        return !linearRingContainsXY(
          flatCoordinates,
          offset,
          end,
          stride,
          coordinate[0],
          coordinate[1],
        );
      },
    );
    return !outside;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingContainsXY(
    flatCoordinates,
    offset,
    end,
    stride,
    x,
    y,
  ) {
    // https://geomalgorithms.com/a03-_inclusion.html
    // Copyright 2000 softSurfer, 2012 Dan Sunday
    // This code may be freely used and modified for any purpose
    // providing that this copyright notice is included with it.
    // SoftSurfer makes no warranty for this code, and cannot be held
    // liable for any real or imagined damage resulting from its use.
    // Users of this code must verify correctness for their application.
    let wn = 0;
    let x1 = flatCoordinates[end - stride];
    let y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      const x2 = flatCoordinates[offset];
      const y2 = flatCoordinates[offset + 1];
      if (y1 <= y) {
        if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {
          wn++;
        }
      } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {
        wn--;
      }
      x1 = x2;
      y1 = y2;
    }
    return wn !== 0;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingsContainsXY(
    flatCoordinates,
    offset,
    ends,
    stride,
    x,
    y,
  ) {
    if (ends.length === 0) {
      return false;
    }
    if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {
      return false;
    }
    for (let i = 1, ii = ends.length; i < ii; ++i) {
      if (
        linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)
      ) {
        return false;
      }
    }
    return true;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingssContainsXY(
    flatCoordinates,
    offset,
    endss,
    stride,
    x,
    y,
  ) {
    if (endss.length === 0) {
      return false;
    }
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
        return true;
      }
      offset = ends[ends.length - 1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/interiorpoint
   */

  /**
   * Calculates a point that is likely to lie in the interior of the linear rings.
   * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @param {number} flatCentersOffset Flat center offset.
   * @param {Array<number>} [dest] Destination.
   * @return {Array<number>} Destination point as XYM coordinate, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointOfArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    flatCenters,
    flatCentersOffset,
    dest,
  ) {
    let i, ii, x, x1, x2, y1, y2;
    const y = flatCenters[flatCentersOffset + 1];
    /** @type {Array<number>} */
    const intersections = [];
    // Calculate intersections with the horizontal line
    for (let r = 0, rr = ends.length; r < rr; ++r) {
      const end = ends[r];
      x1 = flatCoordinates[end - stride];
      y1 = flatCoordinates[end - stride + 1];
      for (i = offset; i < end; i += stride) {
        x2 = flatCoordinates[i];
        y2 = flatCoordinates[i + 1];
        if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {
          x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;
          intersections.push(x);
        }
        x1 = x2;
        y1 = y2;
      }
    }
    // Find the longest segment of the horizontal line that has its center point
    // inside the linear ring.
    let pointX = NaN;
    let maxSegmentLength = -Infinity;
    intersections.sort(ascending);
    x1 = intersections[0];
    for (i = 1, ii = intersections.length; i < ii; ++i) {
      x2 = intersections[i];
      const segmentLength = Math.abs(x2 - x1);
      if (segmentLength > maxSegmentLength) {
        x = (x1 + x2) / 2;
        if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
          pointX = x;
          maxSegmentLength = segmentLength;
        }
      }
      x1 = x2;
    }
    if (isNaN(pointX)) {
      // There is no horizontal line that has its center point inside the linear
      // ring.  Use the center of the the linear ring's extent.
      pointX = flatCenters[flatCentersOffset];
    }
    if (dest) {
      dest.push(pointX, y, maxSegmentLength);
      return dest;
    }
    return [pointX, y, maxSegmentLength];
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @return {Array<number>} Interior points as XYM coordinates, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointsOfMultiArray(
    flatCoordinates,
    offset,
    endss,
    stride,
    flatCenters,
  ) {
    /** @type {Array<number>} */
    let interiorPoints = [];
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      interiorPoints = getInteriorPointOfArray(
        flatCoordinates,
        offset,
        ends,
        stride,
        flatCenters,
        2 * i,
        interiorPoints,
      );
      offset = ends[ends.length - 1];
    }
    return interiorPoints;
  }

  /**
   * @module ol/geom/flat/segments
   */

  /**
   * This function calls `callback` for each segment of the flat coordinates
   * array. If the callback returns a truthy value the function returns that
   * value immediately. Otherwise the function returns `false`.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {function(import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
   *     called for each segment.
   * @return {T|boolean} Value.
   * @template T
   */
  function forEach(flatCoordinates, offset, end, stride, callback) {
    let ret;
    offset += stride;
    for (; offset < end; offset += stride) {
      ret = callback(
        flatCoordinates.slice(offset - stride, offset),
        flatCoordinates.slice(offset, offset + stride),
      );
      if (ret) {
        return ret;
      }
    }
    return false;
  }

  /**
   * Calculate the intersection point of two line segments.
   * Reference: https://stackoverflow.com/a/72474223/2389327
   * @param {Array<import("../../coordinate.js").Coordinate>} segment1 The first line segment as an array of two points.
   * @param {Array<import("../../coordinate.js").Coordinate>} segment2 The second line segment as an array of two points.
   * @return {import("../../coordinate.js").Coordinate|undefined} The intersection point or `undefined` if no intersection.
   */
  function getIntersectionPoint(segment1, segment2) {
    const [a, b] = segment1;
    const [c, d] = segment2;
    const t =
      ((a[0] - c[0]) * (c[1] - d[1]) - (a[1] - c[1]) * (c[0] - d[0])) /
      ((a[0] - b[0]) * (c[1] - d[1]) - (a[1] - b[1]) * (c[0] - d[0]));
    const u =
      ((a[0] - c[0]) * (a[1] - b[1]) - (a[1] - c[1]) * (a[0] - b[0])) /
      ((a[0] - b[0]) * (c[1] - d[1]) - (a[1] - b[1]) * (c[0] - d[0]));

    // Check if lines actually intersect
    if (0 <= t && t <= 1 && 0 <= u && u <= 1) {
      return [a[0] + t * (b[0] - a[0]), a[1] + t * (b[1] - a[1])];
    }
    return undefined;
  }

  /**
   * @module ol/geom/flat/intersectsextent
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @param {import('../../extent.js').Extent} [coordinatesExtent] Coordinates extent
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineString(
    flatCoordinates,
    offset,
    end,
    stride,
    extent,
    coordinatesExtent,
  ) {
    coordinatesExtent =
      coordinatesExtent ??
      extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);
    if (!intersects$1(extent, coordinatesExtent)) {
      return false;
    }
    if (
      (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) ||
      (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3])
    ) {
      return true;
    }
    return forEach(
      flatCoordinates,
      offset,
      end,
      stride,
      /**
       * @param {import("../../coordinate.js").Coordinate} point1 Start point.
       * @param {import("../../coordinate.js").Coordinate} point2 End point.
       * @return {boolean} `true` if the segment and the extent intersect,
       *     `false` otherwise.
       */
      function (point1, point2) {
        return intersectsSegment(extent, point1, point2);
      },
    );
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineStringArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    extent,
  ) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      if (
        intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)
      ) {
        return true;
      }
      offset = ends[i];
    }
    return false;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRing(
    flatCoordinates,
    offset,
    end,
    stride,
    extent,
  ) {
    if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {
      return true;
    }
    if (
      linearRingContainsXY(
        flatCoordinates,
        offset,
        end,
        stride,
        extent[0],
        extent[1],
      )
    ) {
      return true;
    }
    if (
      linearRingContainsXY(
        flatCoordinates,
        offset,
        end,
        stride,
        extent[0],
        extent[3],
      )
    ) {
      return true;
    }
    if (
      linearRingContainsXY(
        flatCoordinates,
        offset,
        end,
        stride,
        extent[2],
        extent[1],
      )
    ) {
      return true;
    }
    if (
      linearRingContainsXY(
        flatCoordinates,
        offset,
        end,
        stride,
        extent[2],
        extent[3],
      )
    ) {
      return true;
    }
    return false;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    extent,
  ) {
    if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {
      return false;
    }
    if (ends.length === 1) {
      return true;
    }
    for (let i = 1, ii = ends.length; i < ii; ++i) {
      if (
        linearRingContainsExtent(
          flatCoordinates,
          ends[i - 1],
          ends[i],
          stride,
          extent,
        )
      ) {
        if (
          !intersectsLineString(
            flatCoordinates,
            ends[i - 1],
            ends[i],
            stride,
            extent,
          )
        ) {
          return false;
        }
      }
    }
    return true;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingMultiArray(
    flatCoordinates,
    offset,
    endss,
    stride,
    extent,
  ) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      if (
        intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)
      ) {
        return true;
      }
      offset = ends[ends.length - 1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/reverse
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   */
  function coordinates(flatCoordinates, offset, end, stride) {
    while (offset < end - stride) {
      for (let i = 0; i < stride; ++i) {
        const tmp = flatCoordinates[offset + i];
        flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
        flatCoordinates[end - stride + i] = tmp;
      }
      offset += stride;
      end -= stride;
    }
  }

  /**
   * @module ol/geom/flat/orient
   */

  /**
   * Is the linear ring oriented clockwise in a coordinate system with a bottom-left
   * coordinate origin? For a coordinate system with a top-left coordinate origin,
   * the ring's orientation is clockwise when this function returns false.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {boolean|undefined} Is clockwise.
   */
  function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
    // https://stackoverflow.com/q/1165647/clockwise-method#1165943
    // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp
    let edge = 0;
    let x1 = flatCoordinates[end - stride];
    let y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      const x2 = flatCoordinates[offset];
      const y2 = flatCoordinates[offset + 1];
      edge += (x2 - x1) * (y2 + y1);
      x1 = x2;
      y1 = y2;
    }
    return edge === 0 ? undefined : edge > 0;
  }

  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean} [right] Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingsAreOriented(
    flatCoordinates,
    offset,
    ends,
    stride,
    right,
  ) {
    right = right !== undefined ? right : false;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      const isClockwise = linearRingIsClockwise(
        flatCoordinates,
        offset,
        end,
        stride,
      );
      if (i === 0) {
        if ((right && isClockwise) || (!right && !isClockwise)) {
          return false;
        }
      } else {
        if ((right && !isClockwise) || (!right && isClockwise)) {
          return false;
        }
      }
      offset = end;
    }
    return true;
  }

  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean} [right] Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingssAreOriented(
    flatCoordinates,
    offset,
    endss,
    stride,
    right,
  ) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {
        return false;
      }
      if (ends.length) {
        offset = ends[ends.length - 1];
      }
    }
    return true;
  }

  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {boolean} [right] Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRings(
    flatCoordinates,
    offset,
    ends,
    stride,
    right,
  ) {
    right = right !== undefined ? right : false;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      const isClockwise = linearRingIsClockwise(
        flatCoordinates,
        offset,
        end,
        stride,
      );
      const reverse =
        i === 0
          ? (right && isClockwise) || (!right && !isClockwise)
          : (right && !isClockwise) || (!right && isClockwise);
      if (reverse) {
        coordinates(flatCoordinates, offset, end, stride);
      }
      offset = end;
    }
    return offset;
  }

  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean} [right] Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRingsArray(
    flatCoordinates,
    offset,
    endss,
    stride,
    right,
  ) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      offset = orientLinearRings(
        flatCoordinates,
        offset,
        endss[i],
        stride,
        right,
      );
    }
    return offset;
  }

  /**
   * Return a two-dimensional endss
   * @param {Array<number>} flatCoordinates Flat coordinates
   * @param {Array<number>} ends Linear ring end indexes
   * @return {Array<Array<number>>} Two dimensional endss array that can
   * be used to construct a MultiPolygon
   */
  function inflateEnds(flatCoordinates, ends) {
    const endss = [];
    let offset = 0;
    let prevEndIndex = 0;
    let startOrientation;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      // classifies an array of rings into polygons with outer rings and holes
      const orientation = linearRingIsClockwise(flatCoordinates, offset, end, 2);
      if (startOrientation === undefined) {
        startOrientation = orientation;
      }
      if (orientation === startOrientation) {
        endss.push(ends.slice(prevEndIndex, i + 1));
      } else {
        if (endss.length === 0) {
          continue;
        }
        endss[endss.length - 1].push(ends[prevEndIndex]);
      }
      prevEndIndex = i + 1;
      offset = end;
    }
    return endss;
  }

  /**
   * @module ol/geom/Polygon
   */

  /**
   * @classdesc
   * Polygon geometry.
   *
   * @api
   */
  class Polygon extends SimpleGeometry {
    /**
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
     *     Array of linear rings that define the polygon. The first linear ring of the
     *     array defines the outer-boundary or surface of the polygon. Each subsequent
     *     linear ring defines a hole in the surface of the polygon. A linear ring is
     *     an array of vertices' coordinates where the first coordinate and the last are
     *     equivalent. (For internal use, flat coordinates in combination with
     *     `layout` and `ends` are also accepted.)
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).
     */
    constructor(coordinates, layout, ends) {
      super();

      /**
       * @type {Array<number>}
       * @private
       */
      this.ends_ = [];

      /**
       * @private
       * @type {number}
       */
      this.flatInteriorPointRevision_ = -1;

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate|null}
       */
      this.flatInteriorPoint_ = null;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.orientedRevision_ = -1;

      /**
       * @private
       * @type {Array<number>|null}
       */
      this.orientedFlatCoordinates_ = null;

      if (layout !== undefined && ends) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates),
        );
        this.ends_ = ends;
      } else {
        this.setCoordinates(
          /** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (
            coordinates
          ),
          layout,
        );
      }
    }

    /**
     * Append the passed linear ring to this polygon.
     * @param {LinearRing} linearRing Linear ring.
     * @api
     */
    appendLinearRing(linearRing) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = linearRing.getFlatCoordinates().slice();
      } else {
        extend$3(this.flatCoordinates, linearRing.getFlatCoordinates());
      }
      this.ends_.push(this.flatCoordinates.length);
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!Polygon} Clone.
     * @api
     * @override
     */
    clone() {
      const polygon = new Polygon(
        this.flatCoordinates.slice(),
        this.layout,
        this.ends_.slice(),
      );
      polygon.applyProperties(this);
      return polygon;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     * @override
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(
          arrayMaxSquaredDelta(
            this.flatCoordinates,
            0,
            this.ends_,
            this.stride,
            0,
          ),
        );
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestArrayPoint(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        this.maxDelta_,
        true,
        x,
        y,
        closestPoint,
        minSquaredDistance,
      );
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     * @override
     */
    containsXY(x, y) {
      return linearRingsContainsXY(
        this.getOrientedFlatCoordinates(),
        0,
        this.ends_,
        this.stride,
        x,
        y,
      );
    }

    /**
     * Return the area of the polygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    getArea() {
      return linearRings(
        this.getOrientedFlatCoordinates(),
        0,
        this.ends_,
        this.stride,
      );
    }

    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for polygons.
     *
     * @param {boolean} [right] Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @api
     * @override
     */
    getCoordinates(right) {
      let flatCoordinates;
      if (right !== undefined) {
        flatCoordinates = this.getOrientedFlatCoordinates().slice();
        orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);
      } else {
        flatCoordinates = this.flatCoordinates;
      }

      return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);
    }

    /**
     * @return {Array<number>} Ends.
     */
    getEnds() {
      return this.ends_;
    }

    /**
     * @return {Array<number>} Interior point.
     */
    getFlatInteriorPoint() {
      if (this.flatInteriorPointRevision_ != this.getRevision()) {
        const flatCenter = getCenter(this.getExtent());
        this.flatInteriorPoint_ = getInteriorPointOfArray(
          this.getOrientedFlatCoordinates(),
          0,
          this.ends_,
          this.stride,
          flatCenter,
          0,
        );
        this.flatInteriorPointRevision_ = this.getRevision();
      }
      return /** @type {import("../coordinate.js").Coordinate} */ (
        this.flatInteriorPoint_
      );
    }

    /**
     * Return an interior point of the polygon.
     * @return {Point} Interior point as XYM coordinate, where M is the
     * length of the horizontal intersection that the point belongs to.
     * @api
     */
    getInteriorPoint() {
      return new Point$1(this.getFlatInteriorPoint(), 'XYM');
    }

    /**
     * Return the number of rings of the polygon,  this includes the exterior
     * ring and any interior rings.
     *
     * @return {number} Number of rings.
     * @api
     */
    getLinearRingCount() {
      return this.ends_.length;
    }

    /**
     * Return the Nth linear ring of the polygon geometry. Return `null` if the
     * given index is out of range.
     * The exterior linear ring is available at index `0` and the interior rings
     * at index `1` and beyond.
     *
     * @param {number} index Index.
     * @return {LinearRing|null} Linear ring.
     * @api
     */
    getLinearRing(index) {
      if (index < 0 || this.ends_.length <= index) {
        return null;
      }
      return new LinearRing(
        this.flatCoordinates.slice(
          index === 0 ? 0 : this.ends_[index - 1],
          this.ends_[index],
        ),
        this.layout,
      );
    }

    /**
     * Return the linear rings of the polygon.
     * @return {Array<LinearRing>} Linear rings.
     * @api
     */
    getLinearRings() {
      const layout = this.layout;
      const flatCoordinates = this.flatCoordinates;
      const ends = this.ends_;
      const linearRings = [];
      let offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const linearRing = new LinearRing(
          flatCoordinates.slice(offset, end),
          layout,
        );
        linearRings.push(linearRing);
        offset = end;
      }
      return linearRings;
    }

    /**
     * @return {Array<number>} Oriented flat coordinates.
     */
    getOrientedFlatCoordinates() {
      if (this.orientedRevision_ != this.getRevision()) {
        const flatCoordinates = this.flatCoordinates;
        if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {
          this.orientedFlatCoordinates_ = flatCoordinates;
        } else {
          this.orientedFlatCoordinates_ = flatCoordinates.slice();
          this.orientedFlatCoordinates_.length = orientLinearRings(
            this.orientedFlatCoordinates_,
            0,
            this.ends_,
            this.stride,
          );
        }
        this.orientedRevision_ = this.getRevision();
      }
      return /** @type {Array<number>} */ (this.orientedFlatCoordinates_);
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {Polygon} Simplified Polygon.
     * @protected
     * @override
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      /** @type {Array<number>} */
      const simplifiedFlatCoordinates = [];
      /** @type {Array<number>} */
      const simplifiedEnds = [];
      simplifiedFlatCoordinates.length = quantizeArray(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        Math.sqrt(squaredTolerance),
        simplifiedFlatCoordinates,
        0,
        simplifiedEnds,
      );
      return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     * @override
     */
    getType() {
      return 'Polygon';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     * @override
     */
    intersectsExtent(extent) {
      return intersectsLinearRingArray(
        this.getOrientedFlatCoordinates(),
        0,
        this.ends_,
        this.stride,
        extent,
      );
    }

    /**
     * Set the coordinates of the polygon.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     * @override
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 2);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      const ends = deflateCoordinatesArray(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride,
        this.ends_,
      );
      this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
      this.changed();
    }
  }

  /**
   * Create an approximation of a circle on the surface of a sphere.
   * @param {import("../coordinate.js").Coordinate} center Center (`[lon, lat]` in degrees).
   * @param {number} radius The great-circle distance from the center to
   *     the polygon vertices in meters.
   * @param {number} [n] Optional number of vertices for the resulting
   *     polygon. Default is `32`.
   * @param {number} [sphereRadius] Optional radius for the sphere (defaults to
   *     the Earth's mean radius using the WGS84 ellipsoid).
   * @return {Polygon} The "circular" polygon.
   * @api
   */
  function circular(center, radius, n, sphereRadius) {
    n = n ? n : 32;
    /** @type {Array<number>} */
    const flatCoordinates = [];
    for (let i = 0; i < n; ++i) {
      extend$3(
        flatCoordinates,
        offset(center, radius, (2 * Math.PI * i) / n, sphereRadius),
      );
    }
    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);
    return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);
  }

  /**
   * Create a polygon from an extent. The layout used is `XY`.
   * @param {import("../extent.js").Extent} extent The extent.
   * @return {Polygon} The polygon.
   * @api
   */
  function fromExtent(extent) {
    if (isEmpty(extent)) {
      throw new Error('Cannot create polygon from empty extent');
    }
    const minX = extent[0];
    const minY = extent[1];
    const maxX = extent[2];
    const maxY = extent[3];
    const flatCoordinates = [
      minX,
      minY,
      minX,
      maxY,
      maxX,
      maxY,
      maxX,
      minY,
      minX,
      minY,
    ];
    return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);
  }

  /**
   * Create a regular polygon from a circle.
   * @param {import("./Circle.js").default} circle Circle geometry.
   * @param {number} [sides] Number of sides of the polygon. Default is 32.
   * @param {number} [angle] Start angle for the first vertex of the polygon in
   *     counter-clockwise radians. 0 means East. Default is 0.
   * @return {Polygon} Polygon geometry.
   * @api
   */
  function fromCircle(circle, sides, angle) {
    sides = sides ? sides : 32;
    const stride = circle.getStride();
    const layout = circle.getLayout();
    const center = circle.getCenter();
    const arrayLength = stride * (sides + 1);
    const flatCoordinates = new Array(arrayLength);
    for (let i = 0; i < arrayLength; i += stride) {
      flatCoordinates[i] = 0;
      flatCoordinates[i + 1] = 0;
      for (let j = 2; j < stride; j++) {
        flatCoordinates[i + j] = center[j];
      }
    }
    const ends = [flatCoordinates.length];
    const polygon = new Polygon(flatCoordinates, layout, ends);
    makeRegular(polygon, center, circle.getRadius());
    return polygon;
  }

  /**
   * Modify the coordinates of a polygon to make it a regular polygon.
   * @param {Polygon} polygon Polygon geometry.
   * @param {import("../coordinate.js").Coordinate} center Center of the regular polygon.
   * @param {number} radius Radius of the regular polygon.
   * @param {number} [angle] Start angle for the first vertex of the polygon in
   *     counter-clockwise radians. 0 means East. Default is 0.
   */
  function makeRegular(polygon, center, radius, angle) {
    const flatCoordinates = polygon.getFlatCoordinates();
    const stride = polygon.getStride();
    const sides = flatCoordinates.length / stride - 1;
    const startAngle = 0;
    for (let i = 0; i <= sides; ++i) {
      const offset = i * stride;
      const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;
      flatCoordinates[offset] = center[0] + radius * Math.cos(angle);
      flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);
    }
    polygon.changed();
  }

  /**
   * @module ol/Geolocation
   */

  /**
   * @enum {string}
   */
  const Property$4 = {
    ACCURACY: 'accuracy',
    ACCURACY_GEOMETRY: 'accuracyGeometry',
    ALTITUDE: 'altitude',
    ALTITUDE_ACCURACY: 'altitudeAccuracy',
    HEADING: 'heading',
    POSITION: 'position',
    PROJECTION: 'projection',
    SPEED: 'speed',
    TRACKING: 'tracking',
    TRACKING_OPTIONS: 'trackingOptions',
  };

  /**
   * @enum string
   */
  const GeolocationErrorType = {
    /**
     * Triggered when a `GeolocationPositionError` occurs.
     * @event module:ol/Geolocation.GeolocationError#error
     * @api
     */
    ERROR: 'error',
  };

  /**
   * @classdesc
   * Events emitted on [GeolocationPositionError](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError).
   */
  class GeolocationError extends BaseEvent {
    /**
     * @param {GeolocationPositionError} error error object.
     */
    constructor(error) {
      super(GeolocationErrorType.ERROR);

      /**
       * Code of the underlying `GeolocationPositionError`.
       * @type {number}
       * @api
       */
      this.code = error.code;

      /**
       * Message of the underlying `GeolocationPositionError`.
       * @type {string}
       * @api
       */
      this.message = error.message;
    }
  }

  /**
   * @typedef {Object} Options
   * @property {boolean} [tracking=false] Start Tracking right after
   * instantiation.
   * @property {PositionOptions} [trackingOptions] Tracking options.
   * See https://www.w3.org/TR/geolocation-API/#position_options_interface.
   * @property {import("./proj.js").ProjectionLike} [projection] The projection the position
   * is reported in.
   */

  /**
   * @typedef {import("./ObjectEventType").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|
   *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|
   *    'change:trackingOptions'} GeolocationObjectEventTypes
   */

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<GeolocationObjectEventTypes, import("./Object").ObjectEvent, Return> &
   *   import("./Observable").OnSignature<'error', GeolocationError, Return> &
   *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|GeolocationObjectEventTypes, Return> &
   *   import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return>} GeolocationOnSignature
   */

  /**
   * @classdesc
   * Helper class for providing HTML5 Geolocation capabilities.
   * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)
   * is used to locate a user's position.
   *
   * To get notified of position changes and errors, register listeners for the generic
   * `change` event and the `error` event on your instance of {@link module:ol/Geolocation~Geolocation}.
   *
   * Example:
   *
   *     const geolocation = new Geolocation({
   *       // take the projection to use from the map's view
   *       projection: view.getProjection()
   *     });
   *     // listen to changes in position
   *     geolocation.on('change', function(evt) {
   *       console.log(geolocation.getPosition());
   *     });
   *     // listen to error
   *     geolocation.on('error', function(evt) {
   *       window.console.log(evt.message);
   *     });
   *
   * @fires GeolocationError
   * @api
   */
  class Geolocation extends BaseObject {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      /***
       * @type {GeolocationOnSignature<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {GeolocationOnSignature<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {GeolocationOnSignature<void>}
       */
      this.un;

      options = options || {};

      /**
       * The unprojected (EPSG:4326) device position.
       * @private
       * @type {?import("./coordinate.js").Coordinate}
       */
      this.position_ = null;

      /**
       * @private
       * @type {import("./proj.js").TransformFunction}
       */
      this.transform_ = identityTransform;

      /**
       * @private
       * @type {number|undefined}
       */
      this.watchId_ = undefined;

      this.addChangeListener(Property$4.PROJECTION, this.handleProjectionChanged_);
      this.addChangeListener(Property$4.TRACKING, this.handleTrackingChanged_);

      if (options.projection !== undefined) {
        this.setProjection(options.projection);
      }
      if (options.trackingOptions !== undefined) {
        this.setTrackingOptions(options.trackingOptions);
      }

      this.setTracking(options.tracking !== undefined ? options.tracking : false);
    }

    /**
     * Clean up.
     * @override
     */
    disposeInternal() {
      this.setTracking(false);
      super.disposeInternal();
    }

    /**
     * @private
     */
    handleProjectionChanged_() {
      const projection = this.getProjection();
      if (projection) {
        this.transform_ = getTransformFromProjections(
          get$2('EPSG:4326'),
          projection,
        );
        if (this.position_) {
          this.set(Property$4.POSITION, this.transform_(this.position_));
        }
      }
    }

    /**
     * @private
     */
    handleTrackingChanged_() {
      if ('geolocation' in navigator) {
        const tracking = this.getTracking();
        if (tracking && this.watchId_ === undefined) {
          this.watchId_ = navigator.geolocation.watchPosition(
            this.positionChange_.bind(this),
            this.positionError_.bind(this),
            this.getTrackingOptions(),
          );
        } else if (!tracking && this.watchId_ !== undefined) {
          navigator.geolocation.clearWatch(this.watchId_);
          this.watchId_ = undefined;
        }
      }
    }

    /**
     * @private
     * @param {GeolocationPosition} position position event.
     */
    positionChange_(position) {
      const coords = position.coords;
      this.set(Property$4.ACCURACY, coords.accuracy);
      this.set(
        Property$4.ALTITUDE,
        coords.altitude === null ? undefined : coords.altitude,
      );
      this.set(
        Property$4.ALTITUDE_ACCURACY,
        coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy,
      );
      this.set(
        Property$4.HEADING,
        coords.heading === null ? undefined : toRadians(coords.heading),
      );
      if (!this.position_) {
        this.position_ = [coords.longitude, coords.latitude];
      } else {
        this.position_[0] = coords.longitude;
        this.position_[1] = coords.latitude;
      }
      const projectedPosition = this.transform_(this.position_);
      this.set(Property$4.POSITION, projectedPosition.slice());
      this.set(Property$4.SPEED, coords.speed === null ? undefined : coords.speed);
      const geometry = circular(this.position_, coords.accuracy);
      geometry.applyTransform(this.transform_);
      this.set(Property$4.ACCURACY_GEOMETRY, geometry);
      this.changed();
    }

    /**
     * @private
     * @param {GeolocationPositionError} error error object.
     */
    positionError_(error) {
      this.dispatchEvent(new GeolocationError(error));
    }

    /**
     * Get the accuracy of the position in meters.
     * @return {number|undefined} The accuracy of the position measurement in
     *     meters.
     * @observable
     * @api
     */
    getAccuracy() {
      return /** @type {number|undefined} */ (this.get(Property$4.ACCURACY));
    }

    /**
     * Get a geometry of the position accuracy.
     * @return {?import("./geom/Polygon.js").default} A geometry of the position accuracy.
     * @observable
     * @api
     */
    getAccuracyGeometry() {
      return /** @type {?import("./geom/Polygon.js").default} */ (
        this.get(Property$4.ACCURACY_GEOMETRY) || null
      );
    }

    /**
     * Get the altitude associated with the position.
     * @return {number|undefined} The altitude of the position in meters above mean
     *     sea level.
     * @observable
     * @api
     */
    getAltitude() {
      return /** @type {number|undefined} */ (this.get(Property$4.ALTITUDE));
    }

    /**
     * Get the altitude accuracy of the position.
     * @return {number|undefined} The accuracy of the altitude measurement in
     *     meters.
     * @observable
     * @api
     */
    getAltitudeAccuracy() {
      return /** @type {number|undefined} */ (
        this.get(Property$4.ALTITUDE_ACCURACY)
      );
    }

    /**
     * Get the heading as radians clockwise from North.
     * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`
     * is set to `true` in the tracking options.
     * @return {number|undefined} The heading of the device in radians from north.
     * @observable
     * @api
     */
    getHeading() {
      return /** @type {number|undefined} */ (this.get(Property$4.HEADING));
    }

    /**
     * Get the position of the device.
     * @return {import("./coordinate.js").Coordinate|undefined} The current position of the device reported
     *     in the current projection.
     * @observable
     * @api
     */
    getPosition() {
      return /** @type {import("./coordinate.js").Coordinate|undefined} */ (
        this.get(Property$4.POSITION)
      );
    }

    /**
     * Get the projection associated with the position.
     * @return {import("./proj/Projection.js").default|undefined} The projection the position is
     *     reported in.
     * @observable
     * @api
     */
    getProjection() {
      return /** @type {import("./proj/Projection.js").default|undefined} */ (
        this.get(Property$4.PROJECTION)
      );
    }

    /**
     * Get the speed in meters per second.
     * @return {number|undefined} The instantaneous speed of the device in meters
     *     per second.
     * @observable
     * @api
     */
    getSpeed() {
      return /** @type {number|undefined} */ (this.get(Property$4.SPEED));
    }

    /**
     * Determine if the device location is being tracked.
     * @return {boolean} The device location is being tracked.
     * @observable
     * @api
     */
    getTracking() {
      return /** @type {boolean} */ (this.get(Property$4.TRACKING));
    }

    /**
     * Get the tracking options.
     * See https://www.w3.org/TR/geolocation-API/#position-options.
     * @return {PositionOptions|undefined} PositionOptions as defined by
     *     the [HTML5 Geolocation spec
     *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).
     * @observable
     * @api
     */
    getTrackingOptions() {
      return /** @type {PositionOptions|undefined} */ (
        this.get(Property$4.TRACKING_OPTIONS)
      );
    }

    /**
     * Set the projection to use for transforming the coordinates.
     * @param {import("./proj.js").ProjectionLike} projection The projection the position is
     *     reported in.
     * @observable
     * @api
     */
    setProjection(projection) {
      this.set(Property$4.PROJECTION, get$2(projection));
    }

    /**
     * Enable or disable tracking.
     * @param {boolean} tracking Enable tracking.
     * @observable
     * @api
     */
    setTracking(tracking) {
      this.set(Property$4.TRACKING, tracking);
    }

    /**
     * Set the tracking options.
     * See http://www.w3.org/TR/geolocation-API/#position-options.
     * @param {PositionOptions} options PositionOptions as defined by the
     *     [HTML5 Geolocation spec
     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
     * @observable
     * @api
     */
    setTrackingOptions(options) {
      this.set(Property$4.TRACKING_OPTIONS, options);
    }
  }

  /**
   * @module ol/CollectionEventType
   */

  /**
   * @enum {string}
   */
  var CollectionEventType = {
    /**
     * Triggered when an item is added to the collection.
     * @event module:ol/Collection.CollectionEvent#add
     * @api
     */
    ADD: 'add',
    /**
     * Triggered when an item is removed from the collection.
     * @event module:ol/Collection.CollectionEvent#remove
     * @api
     */
    REMOVE: 'remove',
  };

  /**
   * @module ol/Collection
   */

  /**
   * @enum {string}
   * @private
   */
  const Property$3 = {
    LENGTH: 'length',
  };

  /**
   * @classdesc
   * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
   * type.
   * @template T
   */
  class CollectionEvent extends BaseEvent {
    /**
     * @param {import("./CollectionEventType.js").default} type Type.
     * @param {T} element Element.
     * @param {number} index The index of the added or removed element.
     */
    constructor(type, element, index) {
      super(type);

      /**
       * The element that is added to or removed from the collection.
       * @type {T}
       * @api
       */
      this.element = element;

      /**
       * The index of the added or removed element.
       * @type {number}
       * @api
       */
      this.index = index;
    }
  }

  /***
   * @template T
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *   import("./Observable").OnSignature<import("./ObjectEventType").Types|'change:length', import("./Object").ObjectEvent, Return> &
   *   import("./Observable").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &
   *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types|
   *     'change:length'|'add'|'remove',Return>} CollectionOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {boolean} [unique=false] Disallow the same item from being added to
   * the collection twice.
   */

  /**
   * @classdesc
   * An expanded version of standard JS Array, adding convenience methods for
   * manipulation. Add and remove changes to the Collection trigger a Collection
   * event. Note that this does not cover changes to the objects _within_ the
   * Collection; they trigger events on the appropriate object, not on the
   * Collection as a whole.
   *
   * @fires CollectionEvent
   *
   * @template T
   * @api
   */
  class Collection extends BaseObject {
    /**
     * @param {Array<T>} [array] Array.
     * @param {Options} [options] Collection options.
     */
    constructor(array, options) {
      super();

      /***
       * @type {CollectionOnSignature<T, import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {CollectionOnSignature<T, import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {CollectionOnSignature<T, void>}
       */
      this.un;

      options = options || {};

      /**
       * @private
       * @type {boolean}
       */
      this.unique_ = !!options.unique;

      /**
       * @private
       * @type {!Array<T>}
       */
      this.array_ = array ? array : [];

      if (this.unique_) {
        for (let i = 0, ii = this.array_.length; i < ii; ++i) {
          this.assertUnique_(this.array_[i], i);
        }
      }

      this.updateLength_();
    }

    /**
     * Remove all elements from the collection.
     * @api
     */
    clear() {
      while (this.getLength() > 0) {
        this.pop();
      }
    }

    /**
     * Add elements to the collection.  This pushes each item in the provided array
     * to the end of the collection.
     * @param {!Array<T>} arr Array.
     * @return {Collection<T>} This collection.
     * @api
     */
    extend(arr) {
      for (let i = 0, ii = arr.length; i < ii; ++i) {
        this.push(arr[i]);
      }
      return this;
    }

    /**
     * Iterate over each element, calling the provided callback.
     * @param {function(T, number, Array<T>): *} f The function to call
     *     for every element. This function takes 3 arguments (the element, the
     *     index and the array). The return value is ignored.
     * @api
     */
    forEach(f) {
      const array = this.array_;
      for (let i = 0, ii = array.length; i < ii; ++i) {
        f(array[i], i, array);
      }
    }

    /**
     * Get a reference to the underlying Array object. Warning: if the array
     * is mutated, no events will be dispatched by the collection, and the
     * collection's "length" property won't be in sync with the actual length
     * of the array.
     * @return {!Array<T>} Array.
     * @api
     */
    getArray() {
      return this.array_;
    }

    /**
     * Get the element at the provided index.
     * @param {number} index Index.
     * @return {T} Element.
     * @api
     */
    item(index) {
      return this.array_[index];
    }

    /**
     * Get the length of this collection.
     * @return {number} The length of the array.
     * @observable
     * @api
     */
    getLength() {
      return this.get(Property$3.LENGTH);
    }

    /**
     * Insert an element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */
    insertAt(index, elem) {
      if (index < 0 || index > this.getLength()) {
        throw new Error('Index out of bounds: ' + index);
      }
      if (this.unique_) {
        this.assertUnique_(elem);
      }
      this.array_.splice(index, 0, elem);
      this.updateLength_();
      this.dispatchEvent(
        new CollectionEvent(CollectionEventType.ADD, elem, index),
      );
    }

    /**
     * Remove the last element of the collection and return it.
     * Return `undefined` if the collection is empty.
     * @return {T|undefined} Element.
     * @api
     */
    pop() {
      return this.removeAt(this.getLength() - 1);
    }

    /**
     * Insert the provided element at the end of the collection.
     * @param {T} elem Element.
     * @return {number} New length of the collection.
     * @api
     */
    push(elem) {
      if (this.unique_) {
        this.assertUnique_(elem);
      }
      const n = this.getLength();
      this.insertAt(n, elem);
      return this.getLength();
    }

    /**
     * Remove the first occurrence of an element from the collection.
     * @param {T} elem Element.
     * @return {T|undefined} The removed element or undefined if none found.
     * @api
     */
    remove(elem) {
      const arr = this.array_;
      for (let i = 0, ii = arr.length; i < ii; ++i) {
        if (arr[i] === elem) {
          return this.removeAt(i);
        }
      }
      return undefined;
    }

    /**
     * Remove the element at the provided index and return it.
     * Return `undefined` if the collection does not contain this index.
     * @param {number} index Index.
     * @return {T|undefined} Value.
     * @api
     */
    removeAt(index) {
      if (index < 0 || index >= this.getLength()) {
        return undefined;
      }
      const prev = this.array_[index];
      this.array_.splice(index, 1);
      this.updateLength_();
      this.dispatchEvent(
        /** @type {CollectionEvent<T>} */ (
          new CollectionEvent(CollectionEventType.REMOVE, prev, index)
        ),
      );
      return prev;
    }

    /**
     * Set the element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */
    setAt(index, elem) {
      const n = this.getLength();
      if (index >= n) {
        this.insertAt(index, elem);
        return;
      }
      if (index < 0) {
        throw new Error('Index out of bounds: ' + index);
      }
      if (this.unique_) {
        this.assertUnique_(elem, index);
      }
      const prev = this.array_[index];
      this.array_[index] = elem;
      this.dispatchEvent(
        /** @type {CollectionEvent<T>} */ (
          new CollectionEvent(CollectionEventType.REMOVE, prev, index)
        ),
      );
      this.dispatchEvent(
        /** @type {CollectionEvent<T>} */ (
          new CollectionEvent(CollectionEventType.ADD, elem, index)
        ),
      );
    }

    /**
     * @private
     */
    updateLength_() {
      this.set(Property$3.LENGTH, this.array_.length);
    }

    /**
     * @private
     * @param {T} elem Element.
     * @param {number} [except] Optional index to ignore.
     */
    assertUnique_(elem, except) {
      for (let i = 0, ii = this.array_.length; i < ii; ++i) {
        if (this.array_[i] === elem && i !== except) {
          throw new Error('Duplicate item added to a unique collection');
        }
      }
    }
  }

  /**
   * @module ol/MapEvent
   */

  /**
   * @classdesc
   * Events emitted as map events are instances of this type.
   * See {@link module:ol/Map~Map} for which events trigger a map event.
   */
  class MapEvent extends BaseEvent {
    /**
     * @param {string} type Event type.
     * @param {import("./Map.js").default} map Map.
     * @param {?import("./Map.js").FrameState} [frameState] Frame state.
     */
    constructor(type, map, frameState) {
      super(type);

      /**
       * The map where the event occurred.
       * @type {import("./Map.js").default}
       * @api
       */
      this.map = map;

      /**
       * The frame state at the time of the event.
       * @type {?import("./Map.js").FrameState}
       * @api
       */
      this.frameState = frameState !== undefined ? frameState : null;
    }
  }

  /**
   * @module ol/MapBrowserEvent
   */

  /**
   * @classdesc
   * Events emitted as map browser events are instances of this type.
   * See {@link module:ol/Map~Map} for which events trigger a map browser event.
   * @template {PointerEvent|KeyboardEvent|WheelEvent} [EVENT=PointerEvent|KeyboardEvent|WheelEvent]
   */
  class MapBrowserEvent extends MapEvent {
    /**
     * @param {string} type Event type.
     * @param {import("./Map.js").default} map Map.
     * @param {EVENT} originalEvent Original event.
     * @param {boolean} [dragging] Is the map currently being dragged?
     * @param {import("./Map.js").FrameState} [frameState] Frame state.
     * @param {Array<PointerEvent>} [activePointers] Active pointers.
     */
    constructor(type, map, originalEvent, dragging, frameState, activePointers) {
      super(type, map, frameState);

      /**
       * The original browser event.
       * @const
       * @type {EVENT}
       * @api
       */
      this.originalEvent = originalEvent;

      /**
       * The map pixel relative to the viewport corresponding to the original browser event.
       * @type {?import("./pixel.js").Pixel}
       * @private
       */
      this.pixel_ = null;

      /**
       * The coordinate in the user projection corresponding to the original browser event.
       * @type {?import("./coordinate.js").Coordinate}
       * @private
       */
      this.coordinate_ = null;

      /**
       * Indicates if the map is currently being dragged. Only set for
       * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
       *
       * @type {boolean}
       * @api
       */
      this.dragging = dragging !== undefined ? dragging : false;

      /**
       * @type {Array<PointerEvent>|undefined}
       */
      this.activePointers = activePointers;
    }

    /**
     * The map pixel relative to the viewport corresponding to the original event.
     * @type {import("./pixel.js").Pixel}
     * @api
     */
    get pixel() {
      if (!this.pixel_) {
        this.pixel_ = this.map.getEventPixel(this.originalEvent);
      }
      return this.pixel_;
    }
    set pixel(pixel) {
      this.pixel_ = pixel;
    }

    /**
     * The coordinate corresponding to the original browser event.  This will be in the user
     * projection if one is set.  Otherwise it will be in the view projection.
     * @type {import("./coordinate.js").Coordinate}
     * @api
     */
    get coordinate() {
      if (!this.coordinate_) {
        this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);
      }
      return this.coordinate_;
    }
    set coordinate(coordinate) {
      this.coordinate_ = coordinate;
    }

    /**
     * Prevents the default browser action.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
     * @api
     * @override
     */
    preventDefault() {
      super.preventDefault();
      if ('preventDefault' in this.originalEvent) {
        /** @type {UIEvent} */ (this.originalEvent).preventDefault();
      }
    }

    /**
     * Prevents further propagation of the current event.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
     * @api
     * @override
     */
    stopPropagation() {
      super.stopPropagation();
      if ('stopPropagation' in this.originalEvent) {
        /** @type {UIEvent} */ (this.originalEvent).stopPropagation();
      }
    }
  }

  /**
   * @module ol/MapBrowserEventType
   */

  /**
   * Constants for event names.
   * @enum {string}
   */
  var MapBrowserEventType = {
    /**
     * A true single click with no dragging and no double click. Note that this
     * event is delayed by 250 ms to ensure that it is not a double click.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
     * @api
     */
    SINGLECLICK: 'singleclick',

    /**
     * A click with no dragging. A double click will fire two of this.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
     * @api
     */
    CLICK: EventType.CLICK,

    /**
     * A true double click, with no dragging.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
     * @api
     */
    DBLCLICK: EventType.DBLCLICK,

    /**
     * Triggered when a pointer is dragged.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
     * @api
     */
    POINTERDRAG: 'pointerdrag',

    /**
     * Triggered when a pointer is moved. Note that on touch devices this is
     * triggered when the map is panned, so is not the same as mousemove.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
     * @api
     */
    POINTERMOVE: 'pointermove',

    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTEROVER: 'pointerover',
    POINTEROUT: 'pointerout',
    POINTERENTER: 'pointerenter',
    POINTERLEAVE: 'pointerleave',
    POINTERCANCEL: 'pointercancel',
  };

  /***
   * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types
   */

  /**
   * @module ol/has
   */

  const ua =
    typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'
      ? navigator.userAgent.toLowerCase()
      : '';

  /**
   * User agent string says we are dealing with Safari as browser.
   * @type {boolean}
   */
  const SAFARI = ua.includes('safari') && !ua.includes('chrom');

  /**
   * https://bugs.webkit.org/show_bug.cgi?id=237906
   * @type {boolean}
   */
  SAFARI &&
    (ua.includes('version/15.4') ||
      /cpu (os|iphone os) 15_4 like mac os x/.test(ua));

  /**
   * User agent string says we are dealing with a WebKit engine.
   * @type {boolean}
   */
  const WEBKIT = ua.includes('webkit') && !ua.includes('edge');

  /**
   * User agent string says we are dealing with a Mac as platform.
   * @type {boolean}
   */
  const MAC = ua.includes('macintosh');

  /**
   * The ratio between physical pixels and device-independent pixels
   * (dips) on the device (`window.devicePixelRatio`).
   * @const
   * @type {number}
   * @api
   */
  const DEVICE_PIXEL_RATIO =
    typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;

  /**
   * The execution context is a worker with OffscreenCanvas available.
   * @const
   * @type {boolean}
   */
  const WORKER_OFFSCREEN_CANVAS =
    typeof WorkerGlobalScope !== 'undefined' &&
    typeof OffscreenCanvas !== 'undefined' &&
    self instanceof WorkerGlobalScope; //eslint-disable-line

  /**
   * Image.prototype.decode() is supported.
   * @type {boolean}
   */
  const IMAGE_DECODE =
    typeof Image !== 'undefined' && Image.prototype.decode;

  /**
   * @type {boolean}
   */
  const PASSIVE_EVENT_LISTENERS = (function () {
    let passive = false;
    try {
      const options = Object.defineProperty({}, 'passive', {
        get: function () {
          passive = true;
        },
      });

      // @ts-ignore Ignore invalid event type '_'
      window.addEventListener('_', null, options);
      // @ts-ignore Ignore invalid event type '_'
      window.removeEventListener('_', null, options);
    } catch {
      // passive not supported
    }
    return passive;
  })();

  /**
   * @module ol/pointer/EventType
   */

  /**
   * Constants for event names.
   * @enum {string}
   */
  var PointerEventType = {
    POINTERMOVE: 'pointermove',
    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTEROUT: 'pointerout'};

  /**
   * @module ol/MapBrowserEventHandler
   */


  class MapBrowserEventHandler extends Target {
    /**
     * @param {import("./Map.js").default} map The map with the viewport to listen to events on.
     * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.
     */
    constructor(map, moveTolerance) {
      super(map);

      /**
       * This is the element that we will listen to the real events on.
       * @type {import("./Map.js").default}
       * @private
       */
      this.map_ = map;

      /**
       * @type {ReturnType<typeof setTimeout>}
       * @private
       */
      this.clickTimeoutId_;

      /**
       * Emulate dblclick and singleclick. Will be true when only one pointer is active.
       * @type {boolean}
       */
      this.emulateClicks_ = false;

      /**
       * @type {boolean}
       * @private
       */
      this.dragging_ = false;

      /**
       * @type {!Array<import("./events.js").EventsKey>}
       * @private
       */
      this.dragListenerKeys_ = [];

      /**
       * @type {number}
       * @private
       */
      this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;

      /**
       * The most recent "down" type event (or null if none have occurred).
       * Set on pointerdown.
       * @type {PointerEvent|null}
       * @private
       */
      this.down_ = null;

      const element = this.map_.getViewport();

      /**
       * @type {Array<PointerEvent>}
       * @private
       */
      this.activePointers_ = [];

      /**
       * @type {!Object<number, Event>}
       * @private
       */
      this.trackedTouches_ = {};

      /**
       * @private
       */
      this.element_ = element;

      /**
       * @type {?import("./events.js").EventsKey}
       * @private
       */
      this.pointerdownListenerKey_ = listen(
        element,
        PointerEventType.POINTERDOWN,
        this.handlePointerDown_,
        this,
      );

      /**
       * @type {PointerEvent}
       * @private
       */
      this.originalPointerMoveEvent_;

      /**
       * @type {?import("./events.js").EventsKey}
       * @private
       */
      this.relayedListenerKey_ = listen(
        element,
        PointerEventType.POINTERMOVE,
        this.relayMoveEvent_,
        this,
      );

      /**
       * @private
       */
      this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);

      this.element_.addEventListener(
        EventType.TOUCHMOVE,
        this.boundHandleTouchMove_,
        PASSIVE_EVENT_LISTENERS ? {passive: false} : false,
      );
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    emulateClick_(pointerEvent) {
      let newEvent = new MapBrowserEvent(
        MapBrowserEventType.CLICK,
        this.map_,
        pointerEvent,
      );
      this.dispatchEvent(newEvent);
      if (this.clickTimeoutId_ !== undefined) {
        // double-click
        clearTimeout(this.clickTimeoutId_);
        this.clickTimeoutId_ = undefined;
        newEvent = new MapBrowserEvent(
          MapBrowserEventType.DBLCLICK,
          this.map_,
          pointerEvent,
        );
        this.dispatchEvent(newEvent);
      } else {
        // click
        this.clickTimeoutId_ = setTimeout(() => {
          this.clickTimeoutId_ = undefined;
          const newEvent = new MapBrowserEvent(
            MapBrowserEventType.SINGLECLICK,
            this.map_,
            pointerEvent,
          );
          this.dispatchEvent(newEvent);
        }, 250);
      }
    }

    /**
     * Keeps track on how many pointers are currently active.
     *
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    updateActivePointers_(pointerEvent) {
      const event = pointerEvent;
      const id = event.pointerId;

      if (
        event.type == MapBrowserEventType.POINTERUP ||
        event.type == MapBrowserEventType.POINTERCANCEL
      ) {
        delete this.trackedTouches_[id];
        for (const pointerId in this.trackedTouches_) {
          if (this.trackedTouches_[pointerId].target !== event.target) {
            // Some platforms assign a new pointerId when the target changes.
            // If this happens, delete one tracked pointer. If there is more
            // than one tracked pointer for the old target, it will be cleared
            // by subsequent POINTERUP events from other pointers.
            delete this.trackedTouches_[pointerId];
            break;
          }
        }
      } else if (
        event.type == MapBrowserEventType.POINTERDOWN ||
        event.type == MapBrowserEventType.POINTERMOVE
      ) {
        this.trackedTouches_[id] = event;
      }
      this.activePointers_ = Object.values(this.trackedTouches_);
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    handlePointerUp_(pointerEvent) {
      this.updateActivePointers_(pointerEvent);
      const newEvent = new MapBrowserEvent(
        MapBrowserEventType.POINTERUP,
        this.map_,
        pointerEvent,
        undefined,
        undefined,
        this.activePointers_,
      );
      this.dispatchEvent(newEvent);

      // We emulate click events on left mouse button click, touch contact, and pen
      // contact. isMouseActionButton returns true in these cases (evt.button is set
      // to 0).
      // See http://www.w3.org/TR/pointerevents/#button-states
      // We only fire click, singleclick, and doubleclick if nobody has called
      // event.preventDefault().
      if (
        this.emulateClicks_ &&
        !newEvent.defaultPrevented &&
        !this.dragging_ &&
        this.isMouseActionButton_(pointerEvent)
      ) {
        this.emulateClick_(this.down_);
      }

      if (this.activePointers_.length === 0) {
        this.dragListenerKeys_.forEach(unlistenByKey);
        this.dragListenerKeys_.length = 0;
        this.dragging_ = false;
        this.down_ = null;
      }
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @return {boolean} If the left mouse button was pressed.
     * @private
     */
    isMouseActionButton_(pointerEvent) {
      return pointerEvent.button === 0;
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    handlePointerDown_(pointerEvent) {
      this.emulateClicks_ = this.activePointers_.length === 0;
      this.updateActivePointers_(pointerEvent);
      const newEvent = new MapBrowserEvent(
        MapBrowserEventType.POINTERDOWN,
        this.map_,
        pointerEvent,
        undefined,
        undefined,
        this.activePointers_,
      );
      this.dispatchEvent(newEvent);

      this.down_ = new PointerEvent(pointerEvent.type, pointerEvent);
      Object.defineProperty(this.down_, 'target', {
        writable: false,
        value: pointerEvent.target,
      });

      if (this.dragListenerKeys_.length === 0) {
        const doc = this.map_.getOwnerDocument();
        this.dragListenerKeys_.push(
          listen(
            doc,
            MapBrowserEventType.POINTERMOVE,
            this.handlePointerMove_,
            this,
          ),
          listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),
          /* Note that the listener for `pointercancel is set up on
           * `pointerEventHandler_` and not `documentPointerEventHandler_` like
           * the `pointerup` and `pointermove` listeners.
           *
           * The reason for this is the following: `TouchSource.vacuumTouches_()`
           * issues `pointercancel` events, when there was no `touchend` for a
           * `touchstart`. Now, let's say a first `touchstart` is registered on
           * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
           * But `documentPointerEventHandler_` doesn't know about the first
           * `touchstart`. If there is no `touchend` for the `touchstart`, we can
           * only receive a `touchcancel` from `pointerEventHandler_`, because it is
           * only registered there.
           */
          listen(
            this.element_,
            MapBrowserEventType.POINTERCANCEL,
            this.handlePointerUp_,
            this,
          ),
        );
        if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {
          this.dragListenerKeys_.push(
            listen(
              this.element_.getRootNode(),
              MapBrowserEventType.POINTERUP,
              this.handlePointerUp_,
              this,
            ),
          );
        }
      }
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    handlePointerMove_(pointerEvent) {
      // Between pointerdown and pointerup, pointermove events are triggered.
      // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
      // moved a significant distance.
      if (this.isMoving_(pointerEvent)) {
        this.updateActivePointers_(pointerEvent);
        this.dragging_ = true;
        const newEvent = new MapBrowserEvent(
          MapBrowserEventType.POINTERDRAG,
          this.map_,
          pointerEvent,
          this.dragging_,
          undefined,
          this.activePointers_,
        );
        this.dispatchEvent(newEvent);
      }
    }

    /**
     * Wrap and relay a pointermove event.
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    relayMoveEvent_(pointerEvent) {
      this.originalPointerMoveEvent_ = pointerEvent;
      const dragging = !!(this.down_ && this.isMoving_(pointerEvent));
      this.dispatchEvent(
        new MapBrowserEvent(
          MapBrowserEventType.POINTERMOVE,
          this.map_,
          pointerEvent,
          dragging,
        ),
      );
    }

    /**
     * Flexible handling of a `touch-action: none` css equivalent: because calling
     * `preventDefault()` on a `pointermove` event does not stop native page scrolling
     * and zooming, we also listen for `touchmove` and call `preventDefault()` on it
     * when an interaction (currently `DragPan` handles the event.
     * @param {TouchEvent} event Event.
     * @private
     */
    handleTouchMove_(event) {
      // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`
      // may not be initialized yet when we get here on a platform without native pointer events,
      // when elm-pep is used as pointer events polyfill.
      const originalEvent = this.originalPointerMoveEvent_;
      if (
        (!originalEvent || originalEvent.defaultPrevented) &&
        (typeof event.cancelable !== 'boolean' || event.cancelable === true)
      ) {
        event.preventDefault();
      }
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @return {boolean} Is moving.
     * @private
     */
    isMoving_(pointerEvent) {
      return (
        this.dragging_ ||
        Math.abs(pointerEvent.clientX - this.down_.clientX) >
          this.moveTolerance_ ||
        Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_
      );
    }

    /**
     * Clean up.
     * @override
     */
    disposeInternal() {
      if (this.relayedListenerKey_) {
        unlistenByKey(this.relayedListenerKey_);
        this.relayedListenerKey_ = null;
      }
      this.element_.removeEventListener(
        EventType.TOUCHMOVE,
        this.boundHandleTouchMove_,
      );

      if (this.pointerdownListenerKey_) {
        unlistenByKey(this.pointerdownListenerKey_);
        this.pointerdownListenerKey_ = null;
      }

      this.dragListenerKeys_.forEach(unlistenByKey);
      this.dragListenerKeys_.length = 0;

      this.element_ = null;
      super.disposeInternal();
    }
  }

  /**
   * @module ol/MapEventType
   */

  /**
   * @enum {string}
   */
  var MapEventType = {
    /**
     * Triggered after a map frame is rendered.
     * @event module:ol/MapEvent~MapEvent#postrender
     * @api
     */
    POSTRENDER: 'postrender',

    /**
     * Triggered when the map starts moving.
     * @event module:ol/MapEvent~MapEvent#movestart
     * @api
     */
    MOVESTART: 'movestart',

    /**
     * Triggered after the map is moved.
     * @event module:ol/MapEvent~MapEvent#moveend
     * @api
     */
    MOVEEND: 'moveend',

    /**
     * Triggered when loading of additional map data (tiles, images, features) starts.
     * @event module:ol/MapEvent~MapEvent#loadstart
     * @api
     */
    LOADSTART: 'loadstart',

    /**
     * Triggered when loading of additional map data has completed.
     * @event module:ol/MapEvent~MapEvent#loadend
     * @api
     */
    LOADEND: 'loadend',
  };

  /***
   * @typedef {'postrender'|'movestart'|'moveend'|'loadstart'|'loadend'} Types
   */

  /**
   * @module ol/MapProperty
   */

  /**
   * @enum {string}
   */
  var MapProperty = {
    LAYERGROUP: 'layergroup',
    SIZE: 'size',
    TARGET: 'target',
    VIEW: 'view',
  };

  /**
   * @module ol/TileState
   */

  /**
   * @enum {number}
   */
  var TileState = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    /**
     * Indicates that tile loading failed
     * @type {number}
     */
    ERROR: 3,
    EMPTY: 4,
  };

  /**
   * @module ol/structs/PriorityQueue
   */

  /**
   * @type {number}
   */
  const DROP = Infinity;

  /**
   * @classdesc
   * Priority queue.
   *
   * The implementation is inspired from the Closure Library's Heap class and
   * Python's heapq module.
   *
   * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js
   * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.
   *
   * @template T
   */
  class PriorityQueue {
    /**
     * @param {function(T): number} priorityFunction Priority function.
     * @param {function(T): string} keyFunction Key function.
     */
    constructor(priorityFunction, keyFunction) {
      /**
       * @type {function(T): number}
       * @private
       */
      this.priorityFunction_ = priorityFunction;

      /**
       * @type {function(T): string}
       * @private
       */
      this.keyFunction_ = keyFunction;

      /**
       * @type {Array<T>}
       * @private
       */
      this.elements_ = [];

      /**
       * @type {Array<number>}
       * @private
       */
      this.priorities_ = [];

      /**
       * @type {!Object<string, boolean>}
       * @private
       */
      this.queuedElements_ = {};
    }

    /**
     * FIXME empty description for jsdoc
     */
    clear() {
      this.elements_.length = 0;
      this.priorities_.length = 0;
      clear$2(this.queuedElements_);
    }

    /**
     * Remove and return the highest-priority element. O(log N).
     * @return {T} Element.
     */
    dequeue() {
      const elements = this.elements_;
      const priorities = this.priorities_;
      const element = elements[0];
      if (elements.length == 1) {
        elements.length = 0;
        priorities.length = 0;
      } else {
        elements[0] = /** @type {T} */ (elements.pop());
        priorities[0] = /** @type {number} */ (priorities.pop());
        this.siftUp_(0);
      }
      const elementKey = this.keyFunction_(element);
      delete this.queuedElements_[elementKey];
      return element;
    }

    /**
     * Enqueue an element. O(log N).
     * @param {T} element Element.
     * @return {boolean} The element was added to the queue.
     */
    enqueue(element) {
      assert$1(
        !(this.keyFunction_(element) in this.queuedElements_),
        'Tried to enqueue an `element` that was already added to the queue',
      );
      const priority = this.priorityFunction_(element);
      if (priority != DROP) {
        this.elements_.push(element);
        this.priorities_.push(priority);
        this.queuedElements_[this.keyFunction_(element)] = true;
        this.siftDown_(0, this.elements_.length - 1);
        return true;
      }
      return false;
    }

    /**
     * @return {number} Count.
     */
    getCount() {
      return this.elements_.length;
    }

    /**
     * Gets the index of the left child of the node at the given index.
     * @param {number} index The index of the node to get the left child for.
     * @return {number} The index of the left child.
     * @private
     */
    getLeftChildIndex_(index) {
      return index * 2 + 1;
    }

    /**
     * Gets the index of the right child of the node at the given index.
     * @param {number} index The index of the node to get the right child for.
     * @return {number} The index of the right child.
     * @private
     */
    getRightChildIndex_(index) {
      return index * 2 + 2;
    }

    /**
     * Gets the index of the parent of the node at the given index.
     * @param {number} index The index of the node to get the parent for.
     * @return {number} The index of the parent.
     * @private
     */
    getParentIndex_(index) {
      return (index - 1) >> 1;
    }

    /**
     * Make this a heap. O(N).
     * @private
     */
    heapify_() {
      let i;
      for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {
        this.siftUp_(i);
      }
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return this.elements_.length === 0;
    }

    /**
     * @param {string} key Key.
     * @return {boolean} Is key queued.
     */
    isKeyQueued(key) {
      return key in this.queuedElements_;
    }

    /**
     * @param {T} element Element.
     * @return {boolean} Is queued.
     */
    isQueued(element) {
      return this.isKeyQueued(this.keyFunction_(element));
    }

    /**
     * @param {number} index The index of the node to move down.
     * @private
     */
    siftUp_(index) {
      const elements = this.elements_;
      const priorities = this.priorities_;
      const count = elements.length;
      const element = elements[index];
      const priority = priorities[index];
      const startIndex = index;

      while (index < count >> 1) {
        const lIndex = this.getLeftChildIndex_(index);
        const rIndex = this.getRightChildIndex_(index);

        const smallerChildIndex =
          rIndex < count && priorities[rIndex] < priorities[lIndex]
            ? rIndex
            : lIndex;

        elements[index] = elements[smallerChildIndex];
        priorities[index] = priorities[smallerChildIndex];
        index = smallerChildIndex;
      }

      elements[index] = element;
      priorities[index] = priority;
      this.siftDown_(startIndex, index);
    }

    /**
     * @param {number} startIndex The index of the root.
     * @param {number} index The index of the node to move up.
     * @private
     */
    siftDown_(startIndex, index) {
      const elements = this.elements_;
      const priorities = this.priorities_;
      const element = elements[index];
      const priority = priorities[index];

      while (index > startIndex) {
        const parentIndex = this.getParentIndex_(index);
        if (priorities[parentIndex] > priority) {
          elements[index] = elements[parentIndex];
          priorities[index] = priorities[parentIndex];
          index = parentIndex;
        } else {
          break;
        }
      }
      elements[index] = element;
      priorities[index] = priority;
    }

    /**
     * FIXME empty description for jsdoc
     */
    reprioritize() {
      const priorityFunction = this.priorityFunction_;
      const elements = this.elements_;
      const priorities = this.priorities_;
      let index = 0;
      const n = elements.length;
      let element, i, priority;
      for (i = 0; i < n; ++i) {
        element = elements[i];
        priority = priorityFunction(element);
        if (priority == DROP) {
          delete this.queuedElements_[this.keyFunction_(element)];
        } else {
          priorities[index] = priority;
          elements[index++] = element;
        }
      }
      elements.length = index;
      priorities.length = index;
      this.heapify_();
    }
  }

  /**
   * @module ol/TileQueue
   */

  /**
   * @typedef {function(import("./Tile.js").default, string, import('./tilecoord.js').TileCoord, number): number} PriorityFunction
   */

  /**
   * @typedef {[import('./Tile.js').default, string, import('./tilecoord.js').TileCoord, number]} TileQueueElement
   */

  /**
   * @extends PriorityQueue<TileQueueElement>}
   */
  class TileQueue extends PriorityQueue {
    /**
     * @param {PriorityFunction} tilePriorityFunction Tile priority function.
     * @param {function(): ?} tileChangeCallback Function called on each tile change event.
     */
    constructor(tilePriorityFunction, tileChangeCallback) {
      super(
        (element) => tilePriorityFunction.apply(null, element),
        (element) => element[0].getKey(),
      );

      /** @private */
      this.boundHandleTileChange_ = this.handleTileChange.bind(this);

      /**
       * @private
       * @type {function(): ?}
       */
      this.tileChangeCallback_ = tileChangeCallback;

      /**
       * @private
       * @type {number}
       */
      this.tilesLoading_ = 0;

      /**
       * @private
       * @type {!Object<string,boolean>}
       */
      this.tilesLoadingKeys_ = {};
    }

    /**
     * @param {TileQueueElement} element Element.
     * @return {boolean} The element was added to the queue.
     * @override
     */
    enqueue(element) {
      const added = super.enqueue(element);
      if (added) {
        const tile = element[0];
        tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);
      }
      return added;
    }

    /**
     * @return {number} Number of tiles loading.
     */
    getTilesLoading() {
      return this.tilesLoading_;
    }

    /**
     * @param {import("./events/Event.js").default} event Event.
     * @protected
     */
    handleTileChange(event) {
      const tile = /** @type {import("./Tile.js").default} */ (event.target);
      const state = tile.getState();
      if (
        state === TileState.LOADED ||
        state === TileState.ERROR ||
        state === TileState.EMPTY
      ) {
        if (state !== TileState.ERROR) {
          tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);
        }
        const tileKey = tile.getKey();
        if (tileKey in this.tilesLoadingKeys_) {
          delete this.tilesLoadingKeys_[tileKey];
          --this.tilesLoading_;
        }
        this.tileChangeCallback_();
      }
    }

    /**
     * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
     * @param {number} maxNewLoads Maximum number of new tiles to load.
     */
    loadMoreTiles(maxTotalLoading, maxNewLoads) {
      let newLoads = 0;
      while (
        this.tilesLoading_ < maxTotalLoading &&
        newLoads < maxNewLoads &&
        this.getCount() > 0
      ) {
        const tile = this.dequeue()[0];
        const tileKey = tile.getKey();
        const state = tile.getState();
        if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {
          this.tilesLoadingKeys_[tileKey] = true;
          ++this.tilesLoading_;
          ++newLoads;
          tile.load();
        }
      }
    }
  }

  /**
   * @param {import('./Map.js').FrameState} frameState Frame state.
   * @param {import("./Tile.js").default} tile Tile.
   * @param {string} tileSourceKey Tile source key.
   * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
   * @param {number} tileResolution Tile resolution.
   * @return {number} Tile priority.
   */
  function getTilePriority(
    frameState,
    tile,
    tileSourceKey,
    tileCenter,
    tileResolution,
  ) {
    // Filter out tiles at higher zoom levels than the current zoom level, or that
    // are outside the visible extent.
    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {
      return DROP;
    }
    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {
      return DROP;
    }
    // Prioritize the highest zoom level tiles closest to the focus.
    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
    // Within a zoom level, tiles are prioritized by the distance in pixels between
    // the center of the tile and the center of the viewport.  The factor of 65536
    // means that the prioritization should behave as desired for tiles up to
    // 65536 * Math.log(2) = 45426 pixels from the focus.
    const center = frameState.viewState.center;
    const deltaX = tileCenter[0] - center[0];
    const deltaY = tileCenter[1] - center[1];
    return (
      65536 * Math.log(tileResolution) +
      Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution
    );
  }

  /**
   * @module ol/ViewHint
   */

  /**
   * @enum {number}
   */
  var ViewHint = {
    ANIMATING: 0,
    INTERACTING: 1,
  };

  /**
   * @module ol/ViewProperty
   */

  /**
   * @enum {string}
   */
  var ViewProperty = {
    CENTER: 'center',
    RESOLUTION: 'resolution',
    ROTATION: 'rotation',
  };

  /**
   * @module ol/centerconstraint
   */

  /**
   * @typedef {function((import("./coordinate.js").Coordinate|undefined), number, import("./size.js").Size, boolean=, Array<number>=): (import("./coordinate.js").Coordinate|undefined)} Type
   */

  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.
   * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent
   * (only during interaction and animation).
   * @return {Type} The constraint.
   */
  function createExtent(extent, onlyCenter, smooth) {
    return (
      /**
       * @param {import("./coordinate.js").Coordinate|undefined} center Center.
       * @param {number|undefined} resolution Resolution.
       * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @param {Array<number>} [centerShift] Shift between map center and viewport center.
       * @return {import("./coordinate.js").Coordinate|undefined} Center.
       */
      function (center, resolution, size, isMoving, centerShift) {
        if (!center) {
          return undefined;
        }
        if (!resolution && !onlyCenter) {
          return center;
        }
        const viewWidth = onlyCenter ? 0 : size[0] * resolution;
        const viewHeight = onlyCenter ? 0 : size[1] * resolution;
        const shiftX = centerShift ? centerShift[0] : 0;
        const shiftY = centerShift ? centerShift[1] : 0;
        let minX = extent[0] + viewWidth / 2 + shiftX;
        let maxX = extent[2] - viewWidth / 2 + shiftX;
        let minY = extent[1] + viewHeight / 2 + shiftY;
        let maxY = extent[3] - viewHeight / 2 + shiftY;

        // note: when zooming out of bounds, min and max values for x and y may
        // end up inverted (min > max); this has to be accounted for
        if (minX > maxX) {
          minX = (maxX + minX) / 2;
          maxX = minX;
        }
        if (minY > maxY) {
          minY = (maxY + minY) / 2;
          maxY = minY;
        }

        let x = clamp(center[0], minX, maxX);
        let y = clamp(center[1], minY, maxY);

        // during an interaction, allow some overscroll
        if (isMoving && smooth && resolution) {
          const ratio = 30 * resolution;
          x +=
            -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +
            ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);
          y +=
            -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +
            ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);
        }

        return [x, y];
      }
    );
  }

  /**
   * @param {import("./coordinate.js").Coordinate} [center] Center.
   * @return {import("./coordinate.js").Coordinate|undefined} Center.
   */
  function none$1(center) {
    return center;
  }

  /**
   * @module ol/easing
   */

  /**
   * Start slow and speed up.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeIn(t) {
    return Math.pow(t, 3);
  }

  /**
   * Start fast and slow down.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeOut(t) {
    return 1 - easeIn(1 - t);
  }

  /**
   * Start slow, speed up, and then slow down again.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function inAndOut(t) {
    return 3 * t * t - 2 * t * t * t;
  }

  /**
   * Maintain a constant speed over time.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function linear(t) {
    return t;
  }

  /**
   * @module ol/resolutionconstraint
   */

  /**
   * @typedef {function((number|undefined), number, import("./size.js").Size, boolean=): (number|undefined)} Type
   */

  /**
   * Returns a modified resolution taking into account the viewport size and maximum
   * allowed extent.
   * @param {number} resolution Resolution
   * @param {import("./extent.js").Extent} maxExtent Maximum allowed extent.
   * @param {import("./size.js").Size} viewportSize Viewport size.
   * @param {boolean} showFullExtent Whether to show the full extent.
   * @return {number} Capped resolution.
   */
  function getViewportClampedResolution(
    resolution,
    maxExtent,
    viewportSize,
    showFullExtent,
  ) {
    const xResolution = getWidth(maxExtent) / viewportSize[0];
    const yResolution = getHeight(maxExtent) / viewportSize[1];

    if (showFullExtent) {
      return Math.min(resolution, Math.max(xResolution, yResolution));
    }
    return Math.min(resolution, Math.min(xResolution, yResolution));
  }

  /**
   * Returns a modified resolution to be between maxResolution and minResolution while
   * still allowing the value to be slightly out of bounds.
   * Note: the computation is based on the logarithm function (ln):
   *  - at 1, ln(x) is 0
   *  - above 1, ln(x) keeps increasing but at a much slower pace than x
   * The final result is clamped to prevent getting too far away from bounds.
   * @param {number} resolution Resolution.
   * @param {number} maxResolution Max resolution.
   * @param {number} minResolution Min resolution.
   * @return {number} Smoothed resolution.
   */
  function getSmoothClampedResolution(resolution, maxResolution, minResolution) {
    let result = Math.min(resolution, maxResolution);
    const ratio = 50;

    result *=
      Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +
      1;
    if (minResolution) {
      result = Math.max(result, minResolution);
      result /=
        Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /
          ratio +
        1;
    }
    return clamp(result, minResolution / 2, maxResolution * 2);
  }

  /**
   * @param {Array<number>} resolutions Resolutions.
   * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent} [maxExtent] Maximum allowed extent.
   * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.
   * @return {Type} Zoom function.
   */
  function createSnapToResolutions(
    resolutions,
    smooth,
    maxExtent,
    showFullExtent,
  ) {
    smooth = smooth !== undefined ? smooth : true;
    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function (resolution, direction, size, isMoving) {
        if (resolution !== undefined) {
          const maxResolution = resolutions[0];
          const minResolution = resolutions[resolutions.length - 1];
          const cappedMaxRes = maxExtent
            ? getViewportClampedResolution(
                maxResolution,
                maxExtent,
                size,
                showFullExtent,
              )
            : maxResolution;

          // during interacting or animating, allow intermediary values
          if (isMoving) {
            if (!smooth) {
              return clamp(resolution, minResolution, cappedMaxRes);
            }
            return getSmoothClampedResolution(
              resolution,
              cappedMaxRes,
              minResolution,
            );
          }

          const capped = Math.min(cappedMaxRes, resolution);
          const z = Math.floor(linearFindNearest(resolutions, capped, direction));
          if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {
            return resolutions[z + 1];
          }
          return resolutions[z];
        }
        return undefined;
      }
    );
  }

  /**
   * @param {number} power Power.
   * @param {number} maxResolution Maximum resolution.
   * @param {number} [minResolution] Minimum resolution.
   * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent} [maxExtent] Maximum allowed extent.
   * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.
   * @return {Type} Zoom function.
   */
  function createSnapToPower(
    power,
    maxResolution,
    minResolution,
    smooth,
    maxExtent,
    showFullExtent,
  ) {
    smooth = smooth !== undefined ? smooth : true;
    minResolution = minResolution !== undefined ? minResolution : 0;

    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function (resolution, direction, size, isMoving) {
        if (resolution !== undefined) {
          const cappedMaxRes = maxExtent
            ? getViewportClampedResolution(
                maxResolution,
                maxExtent,
                size,
                showFullExtent,
              )
            : maxResolution;

          // during interacting or animating, allow intermediary values
          if (isMoving) {
            if (!smooth) {
              return clamp(resolution, minResolution, cappedMaxRes);
            }
            return getSmoothClampedResolution(
              resolution,
              cappedMaxRes,
              minResolution,
            );
          }

          const tolerance = 1e-9;
          const minZoomLevel = Math.ceil(
            Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance,
          );
          const offset = -direction * (0.5 - tolerance) + 0.5;
          const capped = Math.min(cappedMaxRes, resolution);
          const cappedZoomLevel = Math.floor(
            Math.log(maxResolution / capped) / Math.log(power) + offset,
          );
          const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);
          const newResolution = maxResolution / Math.pow(power, zoomLevel);
          return clamp(newResolution, minResolution, cappedMaxRes);
        }
        return undefined;
      }
    );
  }

  /**
   * @param {number} maxResolution Max resolution.
   * @param {number} minResolution Min resolution.
   * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent} [maxExtent] Maximum allowed extent.
   * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.
   * @return {Type} Zoom function.
   */
  function createMinMaxResolution(
    maxResolution,
    minResolution,
    smooth,
    maxExtent,
    showFullExtent,
  ) {
    smooth = smooth !== undefined ? smooth : true;

    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function (resolution, direction, size, isMoving) {
        if (resolution !== undefined) {
          const cappedMaxRes = maxExtent
            ? getViewportClampedResolution(
                maxResolution,
                maxExtent,
                size,
                showFullExtent,
              )
            : maxResolution;

          if (!smooth || !isMoving) {
            return clamp(resolution, minResolution, cappedMaxRes);
          }
          return getSmoothClampedResolution(
            resolution,
            cappedMaxRes,
            minResolution,
          );
        }
        return undefined;
      }
    );
  }

  /**
   * @module ol/rotationconstraint
   */

  /**
   * @typedef {function((number|undefined), boolean=): (number|undefined)} Type
   */

  /**
   * @param {number|undefined} rotation Rotation.
   * @return {number|undefined} Rotation.
   */
  function disable(rotation) {
    if (rotation !== undefined) {
      return 0;
    }
    return undefined;
  }

  /**
   * @param {number|undefined} rotation Rotation.
   * @return {number|undefined} Rotation.
   */
  function none(rotation) {
    if (rotation !== undefined) {
      return rotation;
    }
    return undefined;
  }

  /**
   * @param {number} n N.
   * @return {Type} Rotation constraint.
   */
  function createSnapToN(n) {
    const theta = (2 * Math.PI) / n;
    return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @return {number|undefined} Rotation.
       */
      function (rotation, isMoving) {
        if (isMoving) {
          return rotation;
        }

        if (rotation !== undefined) {
          rotation = Math.floor(rotation / theta + 0.5) * theta;
          return rotation;
        }
        return undefined;
      }
    );
  }

  /**
   * @param {number} [tolerance] Tolerance.
   * @return {Type} Rotation constraint.
   */
  function createSnapToZero(tolerance) {
    const t = toRadians(5) ;
    return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @return {number|undefined} Rotation.
       */
      function (rotation, isMoving) {
        if (isMoving || rotation === undefined) {
          return rotation;
        }

        if (Math.abs(rotation) <= t) {
          return 0;
        }
        return rotation;
      }
    );
  }

  /**
   * @module ol/tilegrid/common
   */

  /**
   * Default maximum zoom for default tile grids.
   * @type {number}
   */
  const DEFAULT_MAX_ZOOM = 42;

  /**
   * Default tile size.
   * @type {number}
   */
  const DEFAULT_TILE_SIZE = 256;

  /**
   * @module ol/View
   */

  /**
   * An animation configuration
   *
   * @typedef {Object} Animation
   * @property {import("./coordinate.js").Coordinate} [sourceCenter] Source center.
   * @property {import("./coordinate.js").Coordinate} [targetCenter] Target center.
   * @property {number} [sourceResolution] Source resolution.
   * @property {number} [targetResolution] Target resolution.
   * @property {number} [sourceRotation] Source rotation.
   * @property {number} [targetRotation] Target rotation.
   * @property {import("./coordinate.js").Coordinate} [anchor] Anchor.
   * @property {number} start Start.
   * @property {number} duration Duration.
   * @property {boolean} complete Complete.
   * @property {function(number):number} easing Easing.
   * @property {function(boolean):void} callback Callback.
   */

  /**
   * @typedef {Object} Constraints
   * @property {import("./centerconstraint.js").Type} center Center.
   * @property {import("./resolutionconstraint.js").Type} resolution Resolution.
   * @property {import("./rotationconstraint.js").Type} rotation Rotation.
   */

  /**
   * @typedef {Object} FitOptions
   * @property {import("./size.js").Size} [size] The size in pixels of the box to
   * fit the extent into. Defaults to the size of the map the view is associated with.
   * If no map or multiple maps are connected to the view, provide the desired box size
   * (e.g. `map.getSize()`).
   * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
   * cleared inside the view. Values in the array are top, right, bottom and left
   * padding.
   * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,
   * get the nearest extent instead of the closest that actually fits the view.
   * @property {number} [minResolution=0] Minimum resolution that we zoom to.
   * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
   * `minResolution` is given, this property is ignored.
   * @property {number} [duration] The duration of the animation in milliseconds.
   * By default, there is no animation to the target extent.
   * @property {function(number):number} [easing] The easing function used during
   * the animation (defaults to {@link module:ol/easing.inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   * @property {function(boolean):void} [callback] Function called when the view is in
   * its final position. The callback will be called with `true` if the animation
   * series completed on its own or `false` if it was cancelled.
   */

  /**
   * @typedef {Object} ViewOptions
   * @property {import("./coordinate.js").Coordinate} [center] The initial center for
   * the view. If a user projection is not set, the coordinate system for the center is
   * specified with the `projection` option. Layer sources will not be fetched if this
   * is not set, but the center can be set later with {@link #setCenter}.
   * @property {boolean|number} [constrainRotation=true] Rotation constraint.
   * `false` means no constraint. `true` means no constraint, but snap to zero
   * near zero. A number constrains the rotation to that number of values. For
   * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
   * @property {boolean} [enableRotation=true] Enable rotation.
   * If `false`, a rotation constraint that always sets the rotation to zero is
   * used. The `constrainRotation` option has no effect if `enableRotation` is
   * `false`.
   * @property {import("./extent.js").Extent} [extent] The extent that constrains the
   * view, in other words, nothing outside of this extent can be visible on the map.
   * @property {boolean} [constrainOnlyCenter=false] If true, the extent
   * constraint will only apply to the view center and not the whole extent.
   * @property {boolean} [smoothExtentConstraint=true] If true, the extent
   * constraint will be applied smoothly, i.e. allow the view to go slightly outside
   * of the given `extent`.
   * @property {number} [maxResolution] The maximum resolution used to determine
   * the resolution constraint. It is used together with `minResolution` (or
   * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
   * that the projection's validity extent fits in a 256x256 px tile. If the
   * projection is Spherical Mercator (the default) then `maxResolution` defaults
   * to `40075016.68557849 / 256 = 156543.03392804097`.
   * @property {number} [minResolution] The minimum resolution used to determine
   * the resolution constraint.  It is used together with `maxResolution` (or
   * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
   * zoom levels (with a factor of 2). If the projection is Spherical Mercator
   * (the default) then `minResolution` defaults to
   * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
   * @property {number} [maxZoom=28] The maximum zoom level used to determine the
   * resolution constraint. It is used together with `minZoom` (or
   * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
   * provided, it is given precedence over `maxZoom`.
   * @property {number} [minZoom=0] The minimum zoom level used to determine the
   * resolution constraint. It is used together with `maxZoom` (or
   * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
   * provided, it is given precedence over `minZoom`.
   * @property {boolean} [multiWorld=false] If `false` the view is constrained so
   * only one world is visible, and you cannot pan off the edge.  If `true` the map
   * may show multiple worlds at low zoom levels.  Only used if the `projection` is
   * global.  Note that if `extent` is also provided it is given precedence.
   * @property {boolean} [constrainResolution=false] If true, the view will always
   * animate to the closest zoom level after an interaction; false means
   * intermediary zoom levels are allowed.
   * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution
   * min/max values will be applied smoothly, i. e. allow the view to exceed slightly
   * the given resolution or zoom bounds.
   * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to
   * show the full configured extent. By default, when a view is configured with an
   * extent, users will not be able to zoom out so the viewport exceeds the extent in
   * either dimension. This means the full extent may not be visible if the viewport
   * is taller or wider than the aspect ratio of the configured extent. If
   * showFullExtent is true, the user will be able to zoom out so that the viewport
   * exceeds the height or width of the configured extent, but not both, allowing the
   * full extent to be shown.
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
   * projection. The default is Spherical Mercator.
   * @property {number} [resolution] The initial resolution for the view. The
   * units are `projection` units per pixel (e.g. meters per pixel). An
   * alternative to setting this is to set `zoom`. Layer sources will not be
   * fetched if neither this nor `zoom` are defined, but they can be set later
   * with {@link #setZoom} or {@link #setResolution}.
   * @property {Array<number>} [resolutions] Resolutions that determine the
   * zoom levels if specified. The index in the array corresponds to the zoom level,
   * therefore the resolution values have to be in descending order. It also constrains
   * the resolution by the minimum and maximum value. If set the `maxResolution`,
   * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
   * @property {number} [rotation=0] The initial rotation for the view in radians
   * (positive rotation clockwise, 0 means North).
   * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
   * level used to calculate the initial resolution for the view.
   * @property {number} [zoomFactor=2] The zoom factor used to compute the
   * corresponding resolution.
   * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).
   * If the map viewport is partially covered with other content (overlays) along
   * its edges, this setting allows to shift the center of the viewport away from
   * that content. The order of the values is top, right, bottom, left.
   */

  /**
   * @typedef {Object} AnimationOptions
   * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
   * the animation.
   * @property {number} [zoom] The zoom level of the view at the end of the
   * animation. This takes precedence over `resolution`.
   * @property {number} [resolution] The resolution of the view at the end
   * of the animation.  If `zoom` is also provided, this option will be ignored.
   * @property {number} [rotation] The rotation of the view at the end of
   * the animation.
   * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remain fixed
   * during a rotation or resolution animation.
   * @property {number} [duration=1000] The duration of the animation in milliseconds.
   * @property {function(number):number} [easing] The easing function used
   * during the animation (defaults to {@link module:ol/easing.inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   */

  /**
   * @typedef {Object} State
   * @property {import("./coordinate.js").Coordinate} center Center (in view projection coordinates).
   * @property {import("./proj/Projection.js").default} projection Projection.
   * @property {number} resolution Resolution.
   * @property {import("./coordinate.js").Coordinate} [nextCenter] The next center during an animation series.
   * @property {number} [nextResolution] The next resolution during an animation series.
   * @property {number} [nextRotation] The next rotation during an animation series.
   * @property {number} rotation Rotation.
   * @property {number} zoom Zoom.
   */

  /**
   * Like {@link import("./Map.js").FrameState}, but just `viewState` and `extent`.
   * @typedef {Object} ViewStateLayerStateExtent
   * @property {State} viewState View state.
   * @property {import("./extent.js").Extent} extent Extent (in user projection coordinates).
   * @property {Array<import("./layer/Layer.js").State>} [layerStatesArray] Layer states.
   */

  /**
   * Default min zoom level for the map view.
   * @type {number}
   */
  const DEFAULT_MIN_ZOOM = 0;

  /**
   * @typedef {import("./ObjectEventType").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes
   */

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *   import("./Observable").OnSignature<ViewObjectEventTypes, import("./Object").ObjectEvent, Return> &
   *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature
   */

  /**
   * @classdesc
   * A View object represents a simple 2D view of the map.
   *
   * This is the object to act upon to change the center, resolution,
   * and rotation of the map.
   *
   * A View has a `projection`. The projection determines the
   * coordinate system of the center, and its units determine the units of the
   * resolution (projection units per pixel). The default projection is
   * Web Mercator (EPSG:3857).
   *
   * ### The view states
   *
   * A View is determined by three states: `center`, `resolution`,
   * and `rotation`. Each state has a corresponding getter and setter, e.g.
   * `getCenter` and `setCenter` for the `center` state.
   *
   * The `zoom` state is actually not saved on the view: all computations
   * internally use the `resolution` state. Still, the `setZoom` and `getZoom`
   * methods are available, as well as `getResolutionForZoom` and
   * `getZoomForResolution` to switch from one system to the other.
   *
   * ### The constraints
   *
   * `setCenter`, `setResolution` and `setRotation` can be used to change the
   * states of the view, but any constraint defined in the constructor will
   * be applied along the way.
   *
   * A View object can have a *resolution constraint*, a *rotation constraint*
   * and a *center constraint*.
   *
   * The *resolution constraint* typically restricts min/max values and
   * snaps to specific resolutions. It is determined by the following
   * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.
   * If `resolutions` is set, the other three options are ignored. See
   * documentation for each option for more information. By default, the view
   * only has a min/max restriction and allow intermediary zoom levels when
   * pinch-zooming for example.
   *
   * The *rotation constraint* snaps to specific angles. It is determined
   * by the following options: `enableRotation` and `constrainRotation`.
   * By default rotation is allowed and its value is snapped to zero when approaching the
   * horizontal.
   *
   * The *center constraint* is determined by the `extent` option. By
   * default the view center is not constrained at all.
   *
   * ### Changing the view state
   *
   * It is important to note that `setZoom`, `setResolution`, `setCenter` and
   * `setRotation` are subject to the above mentioned constraints. As such, it
   * may sometimes not be possible to know in advance the resulting state of the
   * View. For example, calling `setResolution(10)` does not guarantee that
   * `getResolution()` will return `10`.
   *
   * A consequence of this is that, when applying a delta on the view state, one
   * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`
   * rather than the corresponding setters. This will let view do its internal
   * computations. Besides, the `adjust*` methods also take an `anchor`
   * argument which allows specifying an origin for the transformation.
   *
   * ### Interacting with the view
   *
   * View constraints are usually only applied when the view is *at rest*, meaning that
   * no interaction or animation is ongoing. As such, if the user puts the view in a
   * state that is not equivalent to a constrained one (e.g. rotating the view when
   * the snap angle is 0), an animation will be triggered at the interaction end to
   * put back the view to a stable state;
   *
   * @api
   */
  class View extends BaseObject {
    /**
     * @param {ViewOptions} [options] View options.
     */
    constructor(options) {
      super();

      /***
       * @type {ViewOnSignature<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {ViewOnSignature<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {ViewOnSignature<void>}
       */
      this.un;

      options = Object.assign({}, options);

      /**
       * @private
       * @type {Array<number>}
       */
      this.hints_ = [0, 0];

      /**
       * @private
       * @type {Array<Array<Animation>>}
       */
      this.animations_ = [];

      /**
       * @private
       * @type {number|undefined}
       */
      this.updateAnimationKey_;

      /**
       * @private
       * @const
       * @type {import("./proj/Projection.js").default}
       */
      this.projection_ = createProjection(options.projection, 'EPSG:3857');

      /**
       * @private
       * @type {import("./size.js").Size}
       */
      this.viewportSize_ = [100, 100];

      /**
       * @private
       * @type {import("./coordinate.js").Coordinate|undefined}
       */
      this.targetCenter_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.targetResolution_;

      /**
       * @private
       * @type {number|undefined}
       */
      this.targetRotation_;

      /**
       * @private
       * @type {import("./coordinate.js").Coordinate}
       */
      this.nextCenter_ = null;

      /**
       * @private
       * @type {number}
       */
      this.nextResolution_;

      /**
       * @private
       * @type {number}
       */
      this.nextRotation_;

      /**
       * @private
       * @type {import("./coordinate.js").Coordinate|undefined}
       */
      this.cancelAnchor_ = undefined;

      if (options.projection) {
        disableCoordinateWarning();
      }
      if (options.center) {
        options.center = fromUserCoordinate(options.center, this.projection_);
      }
      if (options.extent) {
        options.extent = fromUserExtent(options.extent, this.projection_);
      }

      this.applyOptions_(options);
    }

    /**
     * Set up the view with the given options.
     * @param {ViewOptions} options View options.
     */
    applyOptions_(options) {
      const properties = Object.assign({}, options);
      for (const key in ViewProperty) {
        delete properties[key];
      }
      this.setProperties(properties, true);

      const resolutionConstraintInfo = createResolutionConstraint(options);

      /**
       * @private
       * @type {number}
       */
      this.maxResolution_ = resolutionConstraintInfo.maxResolution;

      /**
       * @private
       * @type {number}
       */
      this.minResolution_ = resolutionConstraintInfo.minResolution;

      /**
       * @private
       * @type {number}
       */
      this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;

      /**
       * @private
       * @type {Array<number>|undefined}
       */
      this.resolutions_ = options.resolutions;

      /**
       * @type {Array<number>|undefined}
       * @private
       */
      this.padding_ = options.padding;

      /**
       * @private
       * @type {number}
       */
      this.minZoom_ = resolutionConstraintInfo.minZoom;

      const centerConstraint = createCenterConstraint(options);
      const resolutionConstraint = resolutionConstraintInfo.constraint;
      const rotationConstraint = createRotationConstraint(options);

      /**
       * @private
       * @type {Constraints}
       */
      this.constraints_ = {
        center: centerConstraint,
        resolution: resolutionConstraint,
        rotation: rotationConstraint,
      };

      this.setRotation(options.rotation !== undefined ? options.rotation : 0);
      this.setCenterInternal(
        options.center !== undefined ? options.center : null,
      );
      if (options.resolution !== undefined) {
        this.setResolution(options.resolution);
      } else if (options.zoom !== undefined) {
        this.setZoom(options.zoom);
      }
    }

    /**
     * Padding (in css pixels).
     * If the map viewport is partially covered with other content (overlays) along
     * its edges, this setting allows to shift the center of the viewport away from that
     * content. The order of the values in the array is top, right, bottom, left.
     * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.
     * @type {Array<number>|undefined}
     * @api
     */
    get padding() {
      return this.padding_;
    }
    set padding(padding) {
      let oldPadding = this.padding_;
      this.padding_ = padding;
      const center = this.getCenterInternal();
      if (center) {
        const newPadding = padding || [0, 0, 0, 0];
        oldPadding = oldPadding || [0, 0, 0, 0];
        const resolution = this.getResolution();
        const offsetX =
          (resolution / 2) *
          (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);
        const offsetY =
          (resolution / 2) *
          (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);
        this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);
      }
    }

    /**
     * Get an updated version of the view options used to construct the view.  The
     * current resolution (or zoom), center, and rotation are applied to any stored
     * options.  The provided options can be used to apply new min/max zoom or
     * resolution limits.
     * @param {ViewOptions} newOptions New options to be applied.
     * @return {ViewOptions} New options updated with the current view state.
     */
    getUpdatedOptions_(newOptions) {
      const options = this.getProperties();

      // preserve resolution (or zoom)
      if (options.resolution !== undefined) {
        options.resolution = this.getResolution();
      } else {
        options.zoom = this.getZoom();
      }

      // preserve center
      options.center = this.getCenterInternal();

      // preserve rotation
      options.rotation = this.getRotation();

      return Object.assign({}, options, newOptions);
    }

    /**
     * Animate the view.  The view's center, zoom (or resolution), and rotation
     * can be animated for smooth transitions between view states.  For example,
     * to animate the view to a new zoom level:
     *
     *     view.animate({zoom: view.getZoom() + 1});
     *
     * By default, the animation lasts one second and uses in-and-out easing.  You
     * can customize this behavior by including `duration` (in milliseconds) and
     * `easing` options (see {@link module:ol/easing}).
     *
     * To chain together multiple animations, call the method with multiple
     * animation objects.  For example, to first zoom and then pan:
     *
     *     view.animate({zoom: 10}, {center: [0, 0]});
     *
     * If you provide a function as the last argument to the animate method, it
     * will get called at the end of an animation series.  The callback will be
     * called with `true` if the animation series completed on its own or `false`
     * if it was cancelled.
     *
     * Animations are cancelled by user interactions (e.g. dragging the map) or by
     * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
     * (or another method that calls one of these).
     *
     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation
     *     options.  Multiple animations can be run in series by passing multiple
     *     options objects.  To run multiple animations in parallel, call the method
     *     multiple times.  An optional callback can be provided as a final
     *     argument.  The callback will be called with a boolean indicating whether
     *     the animation completed without being cancelled.
     * @api
     */
    animate(var_args) {
      if (this.isDef() && !this.getAnimating()) {
        this.resolveConstraints(0);
      }
      const args = new Array(arguments.length);
      for (let i = 0; i < args.length; ++i) {
        let options = arguments[i];
        if (options.center) {
          options = Object.assign({}, options);
          options.center = fromUserCoordinate(
            options.center,
            this.getProjection(),
          );
        }
        if (options.anchor) {
          options = Object.assign({}, options);
          options.anchor = fromUserCoordinate(
            options.anchor,
            this.getProjection(),
          );
        }
        args[i] = options;
      }
      this.animateInternal.apply(this, args);
    }

    /**
     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.
     */
    animateInternal(var_args) {
      let animationCount = arguments.length;
      let callback;
      if (
        animationCount > 1 &&
        typeof arguments[animationCount - 1] === 'function'
      ) {
        callback = arguments[animationCount - 1];
        --animationCount;
      }

      let i = 0;
      for (; i < animationCount && !this.isDef(); ++i) {
        // if view properties are not yet set, shortcut to the final state
        const state = arguments[i];
        if (state.center) {
          this.setCenterInternal(state.center);
        }
        if (state.zoom !== undefined) {
          this.setZoom(state.zoom);
        } else if (state.resolution) {
          this.setResolution(state.resolution);
        }
        if (state.rotation !== undefined) {
          this.setRotation(state.rotation);
        }
      }
      if (i === animationCount) {
        if (callback) {
          animationCallback(callback, true);
        }
        return;
      }

      let start = Date.now();
      let center = this.targetCenter_.slice();
      let resolution = this.targetResolution_;
      let rotation = this.targetRotation_;
      const series = [];
      for (; i < animationCount; ++i) {
        const options = /** @type {AnimationOptions} */ (arguments[i]);

        const animation = {
          start: start,
          complete: false,
          anchor: options.anchor,
          duration: options.duration !== undefined ? options.duration : 1000,
          easing: options.easing || inAndOut,
          callback: callback,
        };

        if (options.center) {
          animation.sourceCenter = center;
          animation.targetCenter = options.center.slice();
          center = animation.targetCenter;
        }

        if (options.zoom !== undefined) {
          animation.sourceResolution = resolution;
          animation.targetResolution = this.getResolutionForZoom(options.zoom);
          resolution = animation.targetResolution;
        } else if (options.resolution) {
          animation.sourceResolution = resolution;
          animation.targetResolution = options.resolution;
          resolution = animation.targetResolution;
        }

        if (options.rotation !== undefined) {
          animation.sourceRotation = rotation;
          const delta =
            modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
          animation.targetRotation = rotation + delta;
          rotation = animation.targetRotation;
        }

        // check if animation is a no-op
        if (isNoopAnimation(animation)) {
          animation.complete = true;
          // we still push it onto the series for callback handling
        } else {
          start += animation.duration;
        }
        series.push(animation);
      }
      this.animations_.push(series);
      this.setHint(ViewHint.ANIMATING, 1);
      this.updateAnimations_();
    }

    /**
     * Determine if the view is being animated.
     * @return {boolean} The view is being animated.
     * @api
     */
    getAnimating() {
      return this.hints_[ViewHint.ANIMATING] > 0;
    }

    /**
     * Determine if the user is interacting with the view, such as panning or zooming.
     * @return {boolean} The view is being interacted with.
     * @api
     */
    getInteracting() {
      return this.hints_[ViewHint.INTERACTING] > 0;
    }

    /**
     * Cancel any ongoing animations.
     * @api
     */
    cancelAnimations() {
      this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);
      let anchor;
      for (let i = 0, ii = this.animations_.length; i < ii; ++i) {
        const series = this.animations_[i];
        if (series[0].callback) {
          animationCallback(series[0].callback, false);
        }
        if (!anchor) {
          for (let j = 0, jj = series.length; j < jj; ++j) {
            const animation = series[j];
            if (!animation.complete) {
              anchor = animation.anchor;
              break;
            }
          }
        }
      }
      this.animations_.length = 0;
      this.cancelAnchor_ = anchor;
      this.nextCenter_ = null;
      this.nextResolution_ = NaN;
      this.nextRotation_ = NaN;
    }

    /**
     * Update all animations.
     */
    updateAnimations_() {
      if (this.updateAnimationKey_ !== undefined) {
        cancelAnimationFrame(this.updateAnimationKey_);
        this.updateAnimationKey_ = undefined;
      }
      if (!this.getAnimating()) {
        return;
      }
      const now = Date.now();
      let more = false;
      for (let i = this.animations_.length - 1; i >= 0; --i) {
        const series = this.animations_[i];
        let seriesComplete = true;
        for (let j = 0, jj = series.length; j < jj; ++j) {
          const animation = series[j];
          if (animation.complete) {
            continue;
          }
          const elapsed = now - animation.start;
          let fraction =
            animation.duration > 0 ? elapsed / animation.duration : 1;
          if (fraction >= 1) {
            animation.complete = true;
            fraction = 1;
          } else {
            seriesComplete = false;
          }
          const progress = animation.easing(fraction);
          if (animation.sourceCenter) {
            const x0 = animation.sourceCenter[0];
            const y0 = animation.sourceCenter[1];
            const x1 = animation.targetCenter[0];
            const y1 = animation.targetCenter[1];
            this.nextCenter_ = animation.targetCenter;
            const x = x0 + progress * (x1 - x0);
            const y = y0 + progress * (y1 - y0);
            this.targetCenter_ = [x, y];
          }
          if (animation.sourceResolution && animation.targetResolution) {
            const resolution =
              progress === 1
                ? animation.targetResolution
                : animation.sourceResolution +
                  progress *
                    (animation.targetResolution - animation.sourceResolution);
            if (animation.anchor) {
              const size = this.getViewportSize_(this.getRotation());
              const constrainedResolution = this.constraints_.resolution(
                resolution,
                0,
                size,
                true,
              );
              this.targetCenter_ = this.calculateCenterZoom(
                constrainedResolution,
                animation.anchor,
              );
            }
            this.nextResolution_ = animation.targetResolution;
            this.targetResolution_ = resolution;
            this.applyTargetState_(true);
          }
          if (
            animation.sourceRotation !== undefined &&
            animation.targetRotation !== undefined
          ) {
            const rotation =
              progress === 1
                ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -
                  Math.PI
                : animation.sourceRotation +
                  progress *
                    (animation.targetRotation - animation.sourceRotation);
            if (animation.anchor) {
              const constrainedRotation = this.constraints_.rotation(
                rotation,
                true,
              );
              this.targetCenter_ = this.calculateCenterRotate(
                constrainedRotation,
                animation.anchor,
              );
            }
            this.nextRotation_ = animation.targetRotation;
            this.targetRotation_ = rotation;
          }
          this.applyTargetState_(true);
          more = true;
          if (!animation.complete) {
            break;
          }
        }
        if (seriesComplete) {
          this.animations_[i] = null;
          this.setHint(ViewHint.ANIMATING, -1);
          this.nextCenter_ = null;
          this.nextResolution_ = NaN;
          this.nextRotation_ = NaN;
          const callback = series[0].callback;
          if (callback) {
            animationCallback(callback, true);
          }
        }
      }
      // prune completed series
      this.animations_ = this.animations_.filter(Boolean);
      if (more && this.updateAnimationKey_ === undefined) {
        this.updateAnimationKey_ = requestAnimationFrame(
          this.updateAnimations_.bind(this),
        );
      }
    }

    /**
     * @param {number} rotation Target rotation.
     * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
     */
    calculateCenterRotate(rotation, anchor) {
      let center;
      const currentCenter = this.getCenterInternal();
      if (currentCenter !== undefined) {
        center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];
        rotate$1(center, rotation - this.getRotation());
        add$3(center, anchor);
      }
      return center;
    }

    /**
     * @param {number} resolution Target resolution.
     * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
     */
    calculateCenterZoom(resolution, anchor) {
      let center;
      const currentCenter = this.getCenterInternal();
      const currentResolution = this.getResolution();
      if (currentCenter !== undefined && currentResolution !== undefined) {
        const x =
          anchor[0] -
          (resolution * (anchor[0] - currentCenter[0])) / currentResolution;
        const y =
          anchor[1] -
          (resolution * (anchor[1] - currentCenter[1])) / currentResolution;
        center = [x, y];
      }
      return center;
    }

    /**
     * Returns the current viewport size.
     * @private
     * @param {number} [rotation] Take into account the rotation of the viewport when giving the size
     * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
     */
    getViewportSize_(rotation) {
      const size = this.viewportSize_;
      if (rotation) {
        const w = size[0];
        const h = size[1];
        return [
          Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),
          Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation)),
        ];
      }
      return size;
    }

    /**
     * Stores the viewport size on the view. The viewport size is not read every time from the DOM
     * to avoid performance hit and layout reflow.
     * This should be done on map size change.
     * Note: the constraints are not resolved during an animation to avoid stopping it
     * @param {import("./size.js").Size} [size] Viewport size; if undefined, [100, 100] is assumed
     */
    setViewportSize(size) {
      this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];
      if (!this.getAnimating()) {
        this.resolveConstraints(0);
      }
    }

    /**
     * Get the view center.
     * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
     * @observable
     * @api
     */
    getCenter() {
      const center = this.getCenterInternal();
      if (!center) {
        return center;
      }
      return toUserCoordinate(center, this.getProjection());
    }

    /**
     * Get the view center without transforming to user projection.
     * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
     */
    getCenterInternal() {
      return /** @type {import("./coordinate.js").Coordinate|undefined} */ (
        this.get(ViewProperty.CENTER)
      );
    }

    /**
     * @return {Constraints} Constraints.
     */
    getConstraints() {
      return this.constraints_;
    }

    /**
     * @return {boolean} Resolution constraint is set
     */
    getConstrainResolution() {
      return this.get('constrainResolution');
    }

    /**
     * @param {Array<number>} [hints] Destination array.
     * @return {Array<number>} Hint.
     */
    getHints(hints) {
      if (hints !== undefined) {
        hints[0] = this.hints_[0];
        hints[1] = this.hints_[1];
        return hints;
      }
      return this.hints_.slice();
    }

    /**
     * Calculate the extent for the current view state and the passed box size.
     * @param {import("./size.js").Size} [size] The pixel dimensions of the box
     * into which the calculated extent should fit. Defaults to the size of the
     * map the view is associated with.
     * If no map or multiple maps are connected to the view, provide the desired
     * box size (e.g. `map.getSize()`).
     * @return {import("./extent.js").Extent} Extent.
     * @api
     */
    calculateExtent(size) {
      const extent = this.calculateExtentInternal(size);
      return toUserExtent(extent, this.getProjection());
    }

    /**
     * @param {import("./size.js").Size} [size] Box pixel size. If not provided,
     * the map's last known viewport size will be used.
     * @return {import("./extent.js").Extent} Extent.
     */
    calculateExtentInternal(size) {
      size = size || this.getViewportSizeMinusPadding_();
      const center = /** @type {!import("./coordinate.js").Coordinate} */ (
        this.getCenterInternal()
      );
      assert$1(center, 'The view center is not defined');
      const resolution = /** @type {!number} */ (this.getResolution());
      assert$1(resolution !== undefined, 'The view resolution is not defined');
      const rotation = /** @type {!number} */ (this.getRotation());
      assert$1(rotation !== undefined, 'The view rotation is not defined');

      return getForViewAndSize(center, resolution, rotation, size);
    }

    /**
     * Get the maximum resolution of the view.
     * @return {number} The maximum resolution of the view.
     * @api
     */
    getMaxResolution() {
      return this.maxResolution_;
    }

    /**
     * Get the minimum resolution of the view.
     * @return {number} The minimum resolution of the view.
     * @api
     */
    getMinResolution() {
      return this.minResolution_;
    }

    /**
     * Get the maximum zoom level for the view.
     * @return {number} The maximum zoom level.
     * @api
     */
    getMaxZoom() {
      return /** @type {number} */ (
        this.getZoomForResolution(this.minResolution_)
      );
    }

    /**
     * Set a new maximum zoom level for the view.
     * @param {number} zoom The maximum zoom level.
     * @api
     */
    setMaxZoom(zoom) {
      this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));
    }

    /**
     * Get the minimum zoom level for the view.
     * @return {number} The minimum zoom level.
     * @api
     */
    getMinZoom() {
      return /** @type {number} */ (
        this.getZoomForResolution(this.maxResolution_)
      );
    }

    /**
     * Set a new minimum zoom level for the view.
     * @param {number} zoom The minimum zoom level.
     * @api
     */
    setMinZoom(zoom) {
      this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));
    }

    /**
     * Set whether the view should allow intermediary zoom levels.
     * @param {boolean} enabled Whether the resolution is constrained.
     * @api
     */
    setConstrainResolution(enabled) {
      this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));
    }

    /**
     * Get the view projection.
     * @return {import("./proj/Projection.js").default} The projection of the view.
     * @api
     */
    getProjection() {
      return this.projection_;
    }

    /**
     * Get the view resolution.
     * @return {number|undefined} The resolution of the view.
     * @observable
     * @api
     */
    getResolution() {
      return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));
    }

    /**
     * Get the resolutions for the view. This returns the array of resolutions
     * passed to the constructor of the View, or undefined if none were given.
     * @return {Array<number>|undefined} The resolutions of the view.
     * @api
     */
    getResolutions() {
      return this.resolutions_;
    }

    /**
     * Get the resolution for a provided extent (in map units) and size (in pixels).
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {import("./size.js").Size} [size] Box pixel size.
     * @return {number} The resolution at which the provided extent will render at
     *     the given size.
     * @api
     */
    getResolutionForExtent(extent, size) {
      return this.getResolutionForExtentInternal(
        fromUserExtent(extent, this.getProjection()),
        size,
      );
    }

    /**
     * Get the resolution for a provided extent (in map units) and size (in pixels).
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {import("./size.js").Size} [size] Box pixel size.
     * @return {number} The resolution at which the provided extent will render at
     *     the given size.
     */
    getResolutionForExtentInternal(extent, size) {
      size = size || this.getViewportSizeMinusPadding_();
      const xResolution = getWidth(extent) / size[0];
      const yResolution = getHeight(extent) / size[1];
      return Math.max(xResolution, yResolution);
    }

    /**
     * Return a function that returns a value between 0 and 1 for a
     * resolution. Exponential scaling is assumed.
     * @param {number} [power] Power.
     * @return {function(number): number} Resolution for value function.
     */
    getResolutionForValueFunction(power) {
      power = power || 2;
      const maxResolution = this.getConstrainedResolution(this.maxResolution_);
      const minResolution = this.minResolution_;
      const max = Math.log(maxResolution / minResolution) / Math.log(power);
      return (
        /**
         * @param {number} value Value.
         * @return {number} Resolution.
         */
        function (value) {
          const resolution = maxResolution / Math.pow(power, value * max);
          return resolution;
        }
      );
    }

    /**
     * Get the view rotation.
     * @return {number} The rotation of the view in radians.
     * @observable
     * @api
     */
    getRotation() {
      return /** @type {number} */ (this.get(ViewProperty.ROTATION));
    }

    /**
     * Return a function that returns a resolution for a value between
     * 0 and 1. Exponential scaling is assumed.
     * @param {number} [power] Power.
     * @return {function(number): number} Value for resolution function.
     */
    getValueForResolutionFunction(power) {
      const logPower = Math.log(power || 2);
      const maxResolution = this.getConstrainedResolution(this.maxResolution_);
      const minResolution = this.minResolution_;
      const max = Math.log(maxResolution / minResolution) / logPower;
      return (
        /**
         * @param {number} resolution Resolution.
         * @return {number} Value.
         */
        function (resolution) {
          const value = Math.log(maxResolution / resolution) / logPower / max;
          return value;
        }
      );
    }

    /**
     * Returns the size of the viewport minus padding.
     * @private
     * @param {number} [rotation] Take into account the rotation of the viewport when giving the size
     * @return {import("./size.js").Size} Viewport size reduced by the padding.
     */
    getViewportSizeMinusPadding_(rotation) {
      let size = this.getViewportSize_(rotation);
      const padding = this.padding_;
      if (padding) {
        size = [
          size[0] - padding[1] - padding[3],
          size[1] - padding[0] - padding[2],
        ];
      }
      return size;
    }

    /**
     * @return {State} View state.
     */
    getState() {
      const projection = this.getProjection();
      const resolution = this.getResolution();
      const rotation = this.getRotation();
      let center = /** @type {import("./coordinate.js").Coordinate} */ (
        this.getCenterInternal()
      );
      const padding = this.padding_;
      if (padding) {
        const reducedSize = this.getViewportSizeMinusPadding_();
        center = calculateCenterOn(
          center,
          this.getViewportSize_(),
          [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],
          resolution,
          rotation,
        );
      }
      return {
        center: center.slice(0),
        projection: projection !== undefined ? projection : null,
        resolution: resolution,
        nextCenter: this.nextCenter_,
        nextResolution: this.nextResolution_,
        nextRotation: this.nextRotation_,
        rotation: rotation,
        zoom: this.getZoom(),
      };
    }

    /**
     * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.
     */
    getViewStateAndExtent() {
      return {
        viewState: this.getState(),
        extent: this.calculateExtent(),
      };
    }

    /**
     * Get the current zoom level. This method may return non-integer zoom levels
     * if the view does not constrain the resolution, or if an interaction or
     * animation is underway.
     * @return {number|undefined} Zoom.
     * @api
     */
    getZoom() {
      let zoom;
      const resolution = this.getResolution();
      if (resolution !== undefined) {
        zoom = this.getZoomForResolution(resolution);
      }
      return zoom;
    }

    /**
     * Get the zoom level for a resolution.
     * @param {number} resolution The resolution.
     * @return {number|undefined} The zoom level for the provided resolution.
     * @api
     */
    getZoomForResolution(resolution) {
      let offset = this.minZoom_ || 0;
      let max, zoomFactor;
      if (this.resolutions_) {
        const nearest = linearFindNearest(this.resolutions_, resolution, 1);
        offset = nearest;
        max = this.resolutions_[nearest];
        if (nearest == this.resolutions_.length - 1) {
          zoomFactor = 2;
        } else {
          zoomFactor = max / this.resolutions_[nearest + 1];
        }
      } else {
        max = this.maxResolution_;
        zoomFactor = this.zoomFactor_;
      }
      return offset + Math.log(max / resolution) / Math.log(zoomFactor);
    }

    /**
     * Get the resolution for a zoom level.
     * @param {number} zoom Zoom level.
     * @return {number} The view resolution for the provided zoom level.
     * @api
     */
    getResolutionForZoom(zoom) {
      if (this.resolutions_?.length) {
        if (this.resolutions_.length === 1) {
          return this.resolutions_[0];
        }
        const baseLevel = clamp(
          Math.floor(zoom),
          0,
          this.resolutions_.length - 2,
        );
        const zoomFactor =
          this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];
        return (
          this.resolutions_[baseLevel] /
          Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))
        );
      }
      return (
        this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)
      );
    }

    /**
     * Fit the given geometry or extent based on the given map size and border.
     * The size is pixel dimensions of the box to fit the extent into.
     * In most cases you will want to use the map size, that is `map.getSize()`.
     * Takes care of the map angle.
     * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
     *     extent to fit the view to.
     * @param {FitOptions} [options] Options.
     * @api
     */
    fit(geometryOrExtent, options) {
      /** @type {import("./geom/SimpleGeometry.js").default} */
      let geometry;
      assert$1(
        Array.isArray(geometryOrExtent) ||
          typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===
            'function',
        'Invalid extent or geometry provided as `geometry`',
      );
      if (Array.isArray(geometryOrExtent)) {
        assert$1(
          !isEmpty(geometryOrExtent),
          'Cannot fit empty extent provided as `geometry`',
        );
        const extent = fromUserExtent(geometryOrExtent, this.getProjection());
        geometry = fromExtent(extent);
      } else if (geometryOrExtent.getType() === 'Circle') {
        const extent = fromUserExtent(
          geometryOrExtent.getExtent(),
          this.getProjection(),
        );
        geometry = fromExtent(extent);
        geometry.rotate(this.getRotation(), getCenter(extent));
      } else {
        const userProjection = getUserProjection();
        if (userProjection) {
          geometry = /** @type {import("./geom/SimpleGeometry.js").default} */ (
            geometryOrExtent
              .clone()
              .transform(userProjection, this.getProjection())
          );
        } else {
          geometry = geometryOrExtent;
        }
      }

      this.fitInternal(geometry, options);
    }

    /**
     * Calculate rotated extent
     * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
     * @return {import("./extent").Extent} The rotated extent for the geometry.
     */
    rotatedExtentForGeometry(geometry) {
      const rotation = this.getRotation();
      const cosAngle = Math.cos(rotation);
      const sinAngle = Math.sin(-rotation);
      const coords = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      let minRotX = +Infinity;
      let minRotY = +Infinity;
      let maxRotX = -Infinity;
      let maxRotY = -Infinity;
      for (let i = 0, ii = coords.length; i < ii; i += stride) {
        const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
        const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
        minRotX = Math.min(minRotX, rotX);
        minRotY = Math.min(minRotY, rotY);
        maxRotX = Math.max(maxRotX, rotX);
        maxRotY = Math.max(maxRotY, rotY);
      }
      return [minRotX, minRotY, maxRotX, maxRotY];
    }

    /**
     * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
     * @param {FitOptions} [options] Options.
     */
    fitInternal(geometry, options) {
      options = options || {};
      let size = options.size;
      if (!size) {
        size = this.getViewportSizeMinusPadding_();
      }
      const padding =
        options.padding !== undefined ? options.padding : [0, 0, 0, 0];
      const nearest = options.nearest !== undefined ? options.nearest : false;
      let minResolution;
      if (options.minResolution !== undefined) {
        minResolution = options.minResolution;
      } else if (options.maxZoom !== undefined) {
        minResolution = this.getResolutionForZoom(options.maxZoom);
      } else {
        minResolution = 0;
      }

      const rotatedExtent = this.rotatedExtentForGeometry(geometry);

      // calculate resolution
      let resolution = this.getResolutionForExtentInternal(rotatedExtent, [
        size[0] - padding[1] - padding[3],
        size[1] - padding[0] - padding[2],
      ]);
      resolution = isNaN(resolution)
        ? minResolution
        : Math.max(resolution, minResolution);
      resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);

      // calculate center
      const rotation = this.getRotation();
      const sinAngle = Math.sin(rotation);
      const cosAngle = Math.cos(rotation);
      const centerRot = getCenter(rotatedExtent);
      centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;
      centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;
      const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;
      const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;
      const center = this.getConstrainedCenter([centerX, centerY], resolution);
      const callback = options.callback ? options.callback : VOID;

      if (options.duration !== undefined) {
        this.animateInternal(
          {
            resolution: resolution,
            center: center,
            duration: options.duration,
            easing: options.easing,
          },
          callback,
        );
      } else {
        this.targetResolution_ = resolution;
        this.targetCenter_ = center;
        this.applyTargetState_(false, true);
        animationCallback(callback, true);
      }
    }

    /**
     * Center on coordinate and view position.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("./size.js").Size} size Box pixel size.
     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
     * @api
     */
    centerOn(coordinate, size, position) {
      this.centerOnInternal(
        fromUserCoordinate(coordinate, this.getProjection()),
        size,
        position,
      );
    }

    /**
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("./size.js").Size} size Box pixel size.
     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
     */
    centerOnInternal(coordinate, size, position) {
      this.setCenterInternal(
        calculateCenterOn(
          coordinate,
          size,
          position,
          this.getResolution(),
          this.getRotation(),
        ),
      );
    }

    /**
     * Calculates the shift between map and viewport center.
     * @param {import("./coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("./size.js").Size} size Size.
     * @return {Array<number>|undefined} Center shift.
     */
    calculateCenterShift(center, resolution, rotation, size) {
      let centerShift;
      const padding = this.padding_;
      if (padding && center) {
        const reducedSize = this.getViewportSizeMinusPadding_(-rotation);
        const shiftedCenter = calculateCenterOn(
          center,
          size,
          [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],
          resolution,
          rotation,
        );
        centerShift = [
          center[0] - shiftedCenter[0],
          center[1] - shiftedCenter[1],
        ];
      }
      return centerShift;
    }

    /**
     * @return {boolean} Is defined.
     */
    isDef() {
      return !!this.getCenterInternal() && this.getResolution() !== undefined;
    }

    /**
     * Adds relative coordinates to the center of the view. Any extent constraint will apply.
     * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
     * @api
     */
    adjustCenter(deltaCoordinates) {
      const center = toUserCoordinate(this.targetCenter_, this.getProjection());
      this.setCenter([
        center[0] + deltaCoordinates[0],
        center[1] + deltaCoordinates[1],
      ]);
    }

    /**
     * Adds relative coordinates to the center of the view. Any extent constraint will apply.
     * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
     */
    adjustCenterInternal(deltaCoordinates) {
      const center = this.targetCenter_;
      this.setCenterInternal([
        center[0] + deltaCoordinates[0],
        center[1] + deltaCoordinates[1],
      ]);
    }

    /**
     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
     * constraint will apply.
     * @param {number} ratio The ratio to apply on the view resolution.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     * @api
     */
    adjustResolution(ratio, anchor) {
      anchor = anchor && fromUserCoordinate(anchor, this.getProjection());
      this.adjustResolutionInternal(ratio, anchor);
    }

    /**
     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
     * constraint will apply.
     * @param {number} ratio The ratio to apply on the view resolution.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     */
    adjustResolutionInternal(ratio, anchor) {
      const isMoving = this.getAnimating() || this.getInteracting();
      const size = this.getViewportSize_(this.getRotation());
      const newResolution = this.constraints_.resolution(
        this.targetResolution_ * ratio,
        0,
        size,
        isMoving,
      );

      if (anchor) {
        this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);
      }

      this.targetResolution_ *= ratio;
      this.applyTargetState_();
    }

    /**
     * Adds a value to the view zoom level, optionally using an anchor. Any resolution
     * constraint will apply.
     * @param {number} delta Relative value to add to the zoom level.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     * @api
     */
    adjustZoom(delta, anchor) {
      this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);
    }

    /**
     * Adds a value to the view rotation, optionally using an anchor. Any rotation
     * constraint will apply.
     * @param {number} delta Relative value to add to the zoom rotation, in radians.
     * @param {import("./coordinate.js").Coordinate} [anchor] The rotation center.
     * @api
     */
    adjustRotation(delta, anchor) {
      if (anchor) {
        anchor = fromUserCoordinate(anchor, this.getProjection());
      }
      this.adjustRotationInternal(delta, anchor);
    }

    /**
     * @param {number} delta Relative value to add to the zoom rotation, in radians.
     * @param {import("./coordinate.js").Coordinate} [anchor] The rotation center.
     */
    adjustRotationInternal(delta, anchor) {
      const isMoving = this.getAnimating() || this.getInteracting();
      const newRotation = this.constraints_.rotation(
        this.targetRotation_ + delta,
        isMoving,
      );
      if (anchor) {
        this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);
      }
      this.targetRotation_ += delta;
      this.applyTargetState_();
    }

    /**
     * Set the center of the current view. Any extent constraint will apply.
     * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
     * @observable
     * @api
     */
    setCenter(center) {
      this.setCenterInternal(
        center ? fromUserCoordinate(center, this.getProjection()) : center,
      );
    }

    /**
     * Set the center using the view projection (not the user projection).
     * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
     */
    setCenterInternal(center) {
      this.targetCenter_ = center;
      this.applyTargetState_();
    }

    /**
     * @param {import("./ViewHint.js").default} hint Hint.
     * @param {number} delta Delta.
     * @return {number} New value.
     */
    setHint(hint, delta) {
      this.hints_[hint] += delta;
      this.changed();
      return this.hints_[hint];
    }

    /**
     * Set the resolution for this view. Any resolution constraint will apply.
     * @param {number|undefined} resolution The resolution of the view.
     * @observable
     * @api
     */
    setResolution(resolution) {
      this.targetResolution_ = resolution;
      this.applyTargetState_();
    }

    /**
     * Set the rotation for this view. Any rotation constraint will apply.
     * @param {number} rotation The rotation of the view in radians.
     * @observable
     * @api
     */
    setRotation(rotation) {
      this.targetRotation_ = rotation;
      this.applyTargetState_();
    }

    /**
     * Zoom to a specific zoom level. Any resolution constrain will apply.
     * @param {number} zoom Zoom level.
     * @api
     */
    setZoom(zoom) {
      this.setResolution(this.getResolutionForZoom(zoom));
    }

    /**
     * Recompute rotation/resolution/center based on target values.
     * Note: we have to compute rotation first, then resolution and center considering that
     * parameters can influence one another in case a view extent constraint is present.
     * @param {boolean} [doNotCancelAnims] Do not cancel animations.
     * @param {boolean} [forceMoving] Apply constraints as if the view is moving.
     * @private
     */
    applyTargetState_(doNotCancelAnims, forceMoving) {
      const isMoving =
        this.getAnimating() || this.getInteracting() || forceMoving;

      // compute rotation
      const newRotation = this.constraints_.rotation(
        this.targetRotation_,
        isMoving,
      );
      const size = this.getViewportSize_(newRotation);
      const newResolution = this.constraints_.resolution(
        this.targetResolution_,
        0,
        size,
        isMoving,
      );
      const newCenter = this.constraints_.center(
        this.targetCenter_,
        newResolution,
        size,
        isMoving,
        this.calculateCenterShift(
          this.targetCenter_,
          newResolution,
          newRotation,
          size,
        ),
      );

      if (this.get(ViewProperty.ROTATION) !== newRotation) {
        this.set(ViewProperty.ROTATION, newRotation);
      }
      if (this.get(ViewProperty.RESOLUTION) !== newResolution) {
        this.set(ViewProperty.RESOLUTION, newResolution);
        this.set('zoom', this.getZoom(), true);
      }
      if (
        !newCenter ||
        !this.get(ViewProperty.CENTER) ||
        !equals(this.get(ViewProperty.CENTER), newCenter)
      ) {
        this.set(ViewProperty.CENTER, newCenter);
      }

      if (this.getAnimating() && !doNotCancelAnims) {
        this.cancelAnimations();
      }
      this.cancelAnchor_ = undefined;
    }

    /**
     * If any constraints need to be applied, an animation will be triggered.
     * This is typically done on interaction end.
     * Note: calling this with a duration of 0 will apply the constrained values straight away,
     * without animation.
     * @param {number} [duration] The animation duration in ms.
     * @param {number} [resolutionDirection] Which direction to zoom.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     */
    resolveConstraints(duration, resolutionDirection, anchor) {
      duration = duration !== undefined ? duration : 200;
      const direction = resolutionDirection || 0;

      const newRotation = this.constraints_.rotation(this.targetRotation_);
      const size = this.getViewportSize_(newRotation);
      const newResolution = this.constraints_.resolution(
        this.targetResolution_,
        direction,
        size,
      );
      const newCenter = this.constraints_.center(
        this.targetCenter_,
        newResolution,
        size,
        false,
        this.calculateCenterShift(
          this.targetCenter_,
          newResolution,
          newRotation,
          size,
        ),
      );

      if (duration === 0 && !this.cancelAnchor_) {
        this.targetResolution_ = newResolution;
        this.targetRotation_ = newRotation;
        this.targetCenter_ = newCenter;
        this.applyTargetState_();
        return;
      }

      anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);
      this.cancelAnchor_ = undefined;

      if (
        this.getResolution() !== newResolution ||
        this.getRotation() !== newRotation ||
        !this.getCenterInternal() ||
        !equals(this.getCenterInternal(), newCenter)
      ) {
        if (this.getAnimating()) {
          this.cancelAnimations();
        }

        this.animateInternal({
          rotation: newRotation,
          center: newCenter,
          resolution: newResolution,
          duration: duration,
          easing: easeOut,
          anchor: anchor,
        });
      }
    }

    /**
     * Notify the View that an interaction has started.
     * The view state will be resolved to a stable one if needed
     * (depending on its constraints).
     * @api
     */
    beginInteraction() {
      this.resolveConstraints(0);

      this.setHint(ViewHint.INTERACTING, 1);
    }

    /**
     * Notify the View that an interaction has ended. The view state will be resolved
     * to a stable one if needed (depending on its constraints).
     * @param {number} [duration] Animation duration in ms.
     * @param {number} [resolutionDirection] Which direction to zoom.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     * @api
     */
    endInteraction(duration, resolutionDirection, anchor) {
      anchor = anchor && fromUserCoordinate(anchor, this.getProjection());
      this.endInteractionInternal(duration, resolutionDirection, anchor);
    }

    /**
     * Notify the View that an interaction has ended. The view state will be resolved
     * to a stable one if needed (depending on its constraints).
     * @param {number} [duration] Animation duration in ms.
     * @param {number} [resolutionDirection] Which direction to zoom.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     */
    endInteractionInternal(duration, resolutionDirection, anchor) {
      if (!this.getInteracting()) {
        return;
      }
      this.setHint(ViewHint.INTERACTING, -1);
      this.resolveConstraints(duration, resolutionDirection, anchor);
    }

    /**
     * Get a valid position for the view center according to the current constraints.
     * @param {import("./coordinate.js").Coordinate|undefined} targetCenter Target center position.
     * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.
     * This is useful to guess a valid center position at a different zoom level.
     * @return {import("./coordinate.js").Coordinate|undefined} Valid center position.
     */
    getConstrainedCenter(targetCenter, targetResolution) {
      const size = this.getViewportSize_(this.getRotation());
      return this.constraints_.center(
        targetCenter,
        targetResolution || this.getResolution(),
        size,
      );
    }

    /**
     * Get a valid zoom level according to the current view constraints.
     * @param {number|undefined} targetZoom Target zoom.
     * @param {number} [direction] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     * @return {number|undefined} Valid zoom level.
     */
    getConstrainedZoom(targetZoom, direction) {
      const targetRes = this.getResolutionForZoom(targetZoom);
      return this.getZoomForResolution(
        this.getConstrainedResolution(targetRes, direction),
      );
    }

    /**
     * Get a valid resolution according to the current view constraints.
     * @param {number|undefined} targetResolution Target resolution.
     * @param {number} [direction] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     * @return {number|undefined} Valid resolution.
     */
    getConstrainedResolution(targetResolution, direction) {
      direction = direction || 0;
      const size = this.getViewportSize_(this.getRotation());

      return this.constraints_.resolution(targetResolution, direction, size);
    }
  }

  /**
   * @param {Function} callback Callback.
   * @param {*} returnValue Return value.
   */
  function animationCallback(callback, returnValue) {
    setTimeout(function () {
      callback(returnValue);
    }, 0);
  }

  /**
   * @param {ViewOptions} options View options.
   * @return {import("./centerconstraint.js").Type} The constraint.
   */
  function createCenterConstraint(options) {
    if (options.extent !== undefined) {
      const smooth =
        options.smoothExtentConstraint !== undefined
          ? options.smoothExtentConstraint
          : true;
      return createExtent(options.extent, options.constrainOnlyCenter, smooth);
    }

    const projection = createProjection(options.projection, 'EPSG:3857');
    if (options.multiWorld !== true && projection.isGlobal()) {
      const extent = projection.getExtent().slice();
      extent[0] = -Infinity;
      extent[2] = Infinity;
      return createExtent(extent, false, false);
    }

    return none$1;
  }

  /**
   * @param {ViewOptions} options View options.
   * @return {{constraint: import("./resolutionconstraint.js").Type, maxResolution: number,
   *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
   */
  function createResolutionConstraint(options) {
    let resolutionConstraint;
    let maxResolution;
    let minResolution;

    // TODO: move these to be ol constants
    // see https://github.com/openlayers/openlayers/issues/2076
    const defaultMaxZoom = 28;
    const defaultZoomFactor = 2;

    let minZoom =
      options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;

    let maxZoom =
      options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;

    const zoomFactor =
      options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;

    const multiWorld =
      options.multiWorld !== undefined ? options.multiWorld : false;

    const smooth =
      options.smoothResolutionConstraint !== undefined
        ? options.smoothResolutionConstraint
        : true;

    const showFullExtent =
      options.showFullExtent !== undefined ? options.showFullExtent : false;

    const projection = createProjection(options.projection, 'EPSG:3857');
    const projExtent = projection.getExtent();
    let constrainOnlyCenter = options.constrainOnlyCenter;
    let extent = options.extent;
    if (!multiWorld && !extent && projection.isGlobal()) {
      constrainOnlyCenter = false;
      extent = projExtent;
    }

    if (options.resolutions !== undefined) {
      const resolutions = options.resolutions;
      maxResolution = resolutions[minZoom];
      minResolution =
        resolutions[maxZoom] !== undefined
          ? resolutions[maxZoom]
          : resolutions[resolutions.length - 1];

      if (options.constrainResolution) {
        resolutionConstraint = createSnapToResolutions(
          resolutions,
          smooth,
          !constrainOnlyCenter && extent,
          showFullExtent,
        );
      } else {
        resolutionConstraint = createMinMaxResolution(
          maxResolution,
          minResolution,
          smooth,
          !constrainOnlyCenter && extent,
          showFullExtent,
        );
      }
    } else {
      // calculate the default min and max resolution
      const size = !projExtent
        ? // use an extent that can fit the whole world if need be
          (360 * METERS_PER_UNIT$1.degrees) / projection.getMetersPerUnit()
        : Math.max(getWidth(projExtent), getHeight(projExtent));

      const defaultMaxResolution =
        size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);

      const defaultMinResolution =
        defaultMaxResolution /
        Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);

      // user provided maxResolution takes precedence
      maxResolution = options.maxResolution;
      if (maxResolution !== undefined) {
        minZoom = 0;
      } else {
        maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
      }

      // user provided minResolution takes precedence
      minResolution = options.minResolution;
      if (minResolution === undefined) {
        if (options.maxZoom !== undefined) {
          if (options.maxResolution !== undefined) {
            minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
          } else {
            minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
          }
        } else {
          minResolution = defaultMinResolution;
        }
      }

      // given discrete zoom levels, minResolution may be different than provided
      maxZoom =
        minZoom +
        Math.floor(
          Math.log(maxResolution / minResolution) / Math.log(zoomFactor),
        );
      minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);

      if (options.constrainResolution) {
        resolutionConstraint = createSnapToPower(
          zoomFactor,
          maxResolution,
          minResolution,
          smooth,
          !constrainOnlyCenter && extent,
          showFullExtent,
        );
      } else {
        resolutionConstraint = createMinMaxResolution(
          maxResolution,
          minResolution,
          smooth,
          !constrainOnlyCenter && extent,
          showFullExtent,
        );
      }
    }
    return {
      constraint: resolutionConstraint,
      maxResolution: maxResolution,
      minResolution: minResolution,
      minZoom: minZoom,
      zoomFactor: zoomFactor,
    };
  }

  /**
   * @param {ViewOptions} options View options.
   * @return {import("./rotationconstraint.js").Type} Rotation constraint.
   */
  function createRotationConstraint(options) {
    const enableRotation =
      options.enableRotation !== undefined ? options.enableRotation : true;
    if (enableRotation) {
      const constrainRotation = options.constrainRotation;
      if (constrainRotation === undefined || constrainRotation === true) {
        return createSnapToZero();
      }
      if (constrainRotation === false) {
        return none;
      }
      if (typeof constrainRotation === 'number') {
        return createSnapToN(constrainRotation);
      }
      return none;
    }
    return disable;
  }

  /**
   * Determine if an animation involves no view change.
   * @param {Animation} animation The animation.
   * @return {boolean} The animation involves no view change.
   */
  function isNoopAnimation(animation) {
    if (animation.sourceCenter && animation.targetCenter) {
      if (!equals(animation.sourceCenter, animation.targetCenter)) {
        return false;
      }
    }
    if (animation.sourceResolution !== animation.targetResolution) {
      return false;
    }
    if (animation.sourceRotation !== animation.targetRotation) {
      return false;
    }
    return true;
  }

  /**
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("./size.js").Size} size Box pixel size.
   * @param {import("./pixel.js").Pixel} position Position on the view to center on.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @return {import("./coordinate.js").Coordinate} Shifted center.
   */
  function calculateCenterOn(coordinate, size, position, resolution, rotation) {
    // calculate rotated position
    const cosAngle = Math.cos(-rotation);
    let sinAngle = Math.sin(-rotation);
    let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
    let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
    rotX += (size[0] / 2 - position[0]) * resolution;
    rotY += (position[1] - size[1] / 2) * resolution;

    // go back to original angle
    sinAngle = -sinAngle; // go back to original rotation
    const centerX = rotX * cosAngle - rotY * sinAngle;
    const centerY = rotY * cosAngle + rotX * sinAngle;

    return [centerX, centerY];
  }

  /**
   * @module ol/css
   */

  /**
   * @typedef {Object} FontParameters
   * @property {string} style Style.
   * @property {string} variant Variant.
   * @property {string} weight Weight.
   * @property {string} size Size.
   * @property {string} lineHeight LineHeight.
   * @property {string} family Family.
   * @property {Array<string>} families Families.
   */

  /**
   * The CSS class for hidden feature.
   *
   * @const
   * @type {string}
   */
  const CLASS_HIDDEN = 'ol-hidden';

  /**
   * The CSS class that we'll give the DOM elements to have them selectable.
   *
   * @const
   * @type {string}
   */
  const CLASS_SELECTABLE = 'ol-selectable';

  /**
   * The CSS class that we'll give the DOM elements to have them unselectable.
   *
   * @const
   * @type {string}
   */
  const CLASS_UNSELECTABLE = 'ol-unselectable';

  /**
   * The CSS class for unsupported feature.
   *
   * @const
   * @type {string}
   */
  const CLASS_UNSUPPORTED = 'ol-unsupported';

  /**
   * The CSS class for controls.
   *
   * @const
   * @type {string}
   */
  const CLASS_CONTROL = 'ol-control';

  /**
   * The CSS class that we'll give the DOM elements that are collapsed, i.e.
   * to those elements which usually can be expanded.
   *
   * @const
   * @type {string}
   */
  const CLASS_COLLAPSED = 'ol-collapsed';

  /**
   * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font
   * @type {RegExp}
   */
  const fontRegEx = new RegExp(
    [
      '^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)',
      '(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)',
      '(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',
      '(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?',
      '(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))',
      '(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))',
      '?\\s*([-,\\"\\\'\\sa-z0-9]+?)\\s*$',
    ].join(''),
    'i',
  );
  /** @type {Array<'style'|'variant'|'weight'|'size'|'lineHeight'|'family'>} */
  const fontRegExMatchIndex = [
    'style',
    'variant',
    'weight',
    'size',
    'lineHeight',
    'family',
  ];

  /**
   * Get the list of font families from a font spec.  Note that this doesn't work
   * for font families that have commas in them.
   * @param {string} fontSpec The CSS font property.
   * @return {FontParameters|null} The font parameters (or null if the input spec is invalid).
   */
  const getFontParameters = function (fontSpec) {
    const match = fontSpec.match(fontRegEx);
    if (!match) {
      return null;
    }
    const style = /** @type {FontParameters} */ ({
      lineHeight: 'normal',
      size: '1.2em',
      style: 'normal',
      weight: 'normal',
      variant: 'normal',
    });
    for (let i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {
      const value = match[i + 1];
      if (value !== undefined) {
        style[fontRegExMatchIndex[i]] = value;
      }
    }
    style.families = style.family.split(/,\s?/);
    return style;
  };

  /**
   * @module ol/dom
   */

  //FIXME Move this function to the canvas module
  /**
   * Create an html canvas element and returns its 2d context.
   * @param {number} [width] Canvas width.
   * @param {number} [height] Canvas height.
   * @param {Array<HTMLCanvasElement>} [canvasPool] Canvas pool to take existing canvas from.
   * @param {CanvasRenderingContext2DSettings} [settings] CanvasRenderingContext2DSettings
   * @return {CanvasRenderingContext2D} The context.
   */
  function createCanvasContext2D(width, height, canvasPool, settings) {
    /** @type {HTMLCanvasElement|OffscreenCanvas} */
    let canvas;
    if (canvasPool && canvasPool.length) {
      canvas = /** @type {HTMLCanvasElement} */ (canvasPool.shift());
    } else if (WORKER_OFFSCREEN_CANVAS) {
      canvas = new OffscreenCanvas(width || 300, height || 300);
    } else {
      canvas = document.createElement('canvas');
    }
    if (width) {
      canvas.width = width;
    }
    if (height) {
      canvas.height = height;
    }
    //FIXME Allow OffscreenCanvasRenderingContext2D as return type
    return /** @type {CanvasRenderingContext2D} */ (
      canvas.getContext('2d', settings)
    );
  }

  /** @type {CanvasRenderingContext2D} */
  let sharedCanvasContext;

  /**
   * @return {CanvasRenderingContext2D} Shared canvas context.
   */
  function getSharedCanvasContext2D() {
    if (!sharedCanvasContext) {
      sharedCanvasContext = createCanvasContext2D(1, 1);
    }
    return sharedCanvasContext;
  }

  /**
   * Releases canvas memory to avoid exceeding memory limits in Safari.
   * See https://pqina.nl/blog/total-canvas-memory-use-exceeds-the-maximum-limit/
   * @param {CanvasRenderingContext2D} context Context.
   */
  function releaseCanvas(context) {
    const canvas = context.canvas;
    canvas.width = 1;
    canvas.height = 1;
    context.clearRect(0, 0, 1, 1);
  }

  /**
   * Get the current computed width for the given element including margin,
   * padding and border.
   * Equivalent to jQuery's `$(el).outerWidth(true)`.
   * @param {!HTMLElement} element Element.
   * @return {number} The width.
   */
  function outerWidth(element) {
    let width = element.offsetWidth;
    const style = getComputedStyle(element);
    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);

    return width;
  }

  /**
   * Get the current computed height for the given element including margin,
   * padding and border.
   * Equivalent to jQuery's `$(el).outerHeight(true)`.
   * @param {!HTMLElement} element Element.
   * @return {number} The height.
   */
  function outerHeight(element) {
    let height = element.offsetHeight;
    const style = getComputedStyle(element);
    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);

    return height;
  }

  /**
   * @param {Node} newNode Node to replace old node
   * @param {Node} oldNode The node to be replaced
   */
  function replaceNode(newNode, oldNode) {
    const parent = oldNode.parentNode;
    if (parent) {
      parent.replaceChild(newNode, oldNode);
    }
  }

  /**
   * @param {Node} node The node to remove the children from.
   */
  function removeChildren(node) {
    while (node.lastChild) {
      node.lastChild.remove();
    }
  }

  /**
   * Transform the children of a parent node so they match the
   * provided list of children.  This function aims to efficiently
   * remove, add, and reorder child nodes while maintaining a simple
   * implementation (it is not guaranteed to minimize DOM operations).
   * @param {Node} node The parent node whose children need reworking.
   * @param {Array<Node>} children The desired children.
   */
  function replaceChildren(node, children) {
    const oldChildren = node.childNodes;

    for (let i = 0; true; ++i) {
      const oldChild = oldChildren[i];
      const newChild = children[i];

      // check if our work is done
      if (!oldChild && !newChild) {
        break;
      }

      // check if children match
      if (oldChild === newChild) {
        continue;
      }

      // check if a new child needs to be added
      if (!oldChild) {
        node.appendChild(newChild);
        continue;
      }

      // check if an old child needs to be removed
      if (!newChild) {
        node.removeChild(oldChild);
        --i;
        continue;
      }

      // reorder
      node.insertBefore(newChild, oldChild);
    }
  }

  /**
   * @module ol/control/Control
   */

  /**
   * @typedef {Object} Options
   * @property {HTMLElement} [element] The element is the control's
   * container element. This only needs to be specified if you're developing
   * a custom control.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {HTMLElement|string} [target] Specify a target if you want
   * the control to be rendered outside of the map's viewport.
   */

  /**
   * @classdesc
   * A control is a visible widget with a DOM element in a fixed position on the
   * screen. They can involve user input (buttons), or be informational only;
   * the position is determined using CSS. By default these are placed in the
   * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
   * any outside DOM element.
   *
   * This is the base class for controls. You can use it for simple custom
   * controls by creating the element with listeners, creating an instance:
   * ```js
   * const myControl = new Control({element: myElement});
   * ```
   * and then adding this to the map.
   *
   * The main advantage of having this as a control rather than a simple separate
   * DOM element is that preventing propagation is handled for you. Controls
   * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
   *
   * You can also extend this base for your own control class. See
   * examples/custom-controls for an example of how to do this.
   *
   * @api
   */
  class Control extends BaseObject {
    /**
     * @param {Options} options Control options.
     */
    constructor(options) {
      super();

      const element = options.element;
      if (element && !options.target && !element.style.pointerEvents) {
        element.style.pointerEvents = 'auto';
      }

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.element = element ? element : null;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.target_ = null;

      /**
       * @private
       * @type {import("../Map.js").default|null}
       */
      this.map_ = null;

      /**
       * @protected
       * @type {!Array<import("../events.js").EventsKey>}
       */
      this.listenerKeys = [];

      if (options.render) {
        this.render = options.render;
      }

      if (options.target) {
        this.setTarget(options.target);
      }
    }

    /**
     * Clean up.
     * @override
     */
    disposeInternal() {
      this.element?.remove();
      super.disposeInternal();
    }

    /**
     * Get the map associated with this control.
     * @return {import("../Map.js").default|null} Map.
     * @api
     */
    getMap() {
      return this.map_;
    }

    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     */
    setMap(map) {
      if (this.map_) {
        this.element?.remove();
      }
      for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
        unlistenByKey(this.listenerKeys[i]);
      }
      this.listenerKeys.length = 0;
      this.map_ = map;
      if (map) {
        const target = this.target_ ?? map.getOverlayContainerStopEvent();
        if (this.element) {
          target.appendChild(this.element);
        }
        if (this.render !== VOID) {
          this.listenerKeys.push(
            listen(map, MapEventType.POSTRENDER, this.render, this),
          );
        }
        map.render();
      }
    }

    /**
     * Renders the control.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @api
     */
    render(mapEvent) {}

    /**
     * This function is used to set a target element for the control. It has no
     * effect if it is called after the control has been added to the map (i.e.
     * after `setMap` is called on the control). If no `target` is set in the
     * options passed to the control constructor and if `setTarget` is not called
     * then the control is added to the map's overlay container.
     * @param {HTMLElement|string} target Target.
     * @api
     */
    setTarget(target) {
      this.target_ =
        typeof target === 'string' ? document.getElementById(target) : target;
    }
  }

  /**
   * @module ol/control/Attribution
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-attribution'] CSS class name.
   * @property {HTMLElement|string} [target] Specify a target if you
   * want the control to be rendered outside of the map's
   * viewport.
   * @property {boolean} [collapsible] Specify if attributions can
   * be collapsed. If not specified, sources control this behavior with their
   * `attributionsCollapsible` setting.
   * @property {boolean} [collapsed=true] Specify if attributions should
   * be collapsed at startup.
   * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
   * @property {string|HTMLElement} [label='i'] Text label to use for the
   * collapsed attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [expandClassName=className + '-expand'] CSS class name for the
   * collapsed attributions button.
   * @property {string|HTMLElement} [collapseLabel='âº'] Text label to use
   * for the expanded attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the
   * expanded attributions button.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {string|Array<string>|undefined} [attributions] Optional attribution(s) that will always be
   * displayed regardless of the layers rendered
   */

  /**
   * @classdesc
   * Control to show all the attributions associated with the layer sources
   * in the map. This control is one of the default controls included in maps.
   * By default it will show in the bottom right portion of the map, but this can
   * be changed by using a css selector for `.ol-attribution`.
   *
   * @api
   */
  class Attribution extends Control {
    /**
     * @param {Options} [options] Attribution options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        render: options.render,
        target: options.target,
      });

      /**
       * @private
       * @type {HTMLElement}
       */
      this.ulElement_ = document.createElement('ul');

      /**
       * @private
       * @type {boolean}
       */
      this.collapsed_ =
        options.collapsed !== undefined ? options.collapsed : true;

      /**
       * @private
       * @type {boolean}
       */
      this.userCollapsed_ = this.collapsed_;

      /**
       * @private
       * @type {boolean}
       */
      this.overrideCollapsible_ = options.collapsible !== undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.collapsible_ =
        options.collapsible !== undefined ? options.collapsible : true;

      if (!this.collapsible_) {
        this.collapsed_ = false;
      }

      /**
       * @private
       * @type {string | Array<string> | undefined}
       */
      this.attributions_ = options.attributions;

      const className =
        options.className !== undefined ? options.className : 'ol-attribution';

      const tipLabel =
        options.tipLabel !== undefined ? options.tipLabel : 'Attributions';

      const expandClassName =
        options.expandClassName !== undefined
          ? options.expandClassName
          : className + '-expand';

      const collapseLabel =
        options.collapseLabel !== undefined ? options.collapseLabel : '\u203A';

      const collapseClassName =
        options.collapseClassName !== undefined
          ? options.collapseClassName
          : className + '-collapse';

      if (typeof collapseLabel === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.collapseLabel_ = document.createElement('span');
        this.collapseLabel_.textContent = collapseLabel;
        this.collapseLabel_.className = collapseClassName;
      } else {
        this.collapseLabel_ = collapseLabel;
      }

      const label = options.label !== undefined ? options.label : 'i';

      if (typeof label === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.label_ = document.createElement('span');
        this.label_.textContent = label;
        this.label_.className = expandClassName;
      } else {
        this.label_ = label;
      }

      const activeLabel =
        this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.toggleButton_ = document.createElement('button');
      this.toggleButton_.setAttribute('type', 'button');
      this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));
      this.toggleButton_.title = tipLabel;
      this.toggleButton_.appendChild(activeLabel);

      this.toggleButton_.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this),
        false,
      );

      const cssClasses =
        className +
        ' ' +
        CLASS_UNSELECTABLE +
        ' ' +
        CLASS_CONTROL +
        (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
        (this.collapsible_ ? '' : ' ol-uncollapsible');
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(this.toggleButton_);
      element.appendChild(this.ulElement_);

      /**
       * A list of currently rendered resolutions.
       * @type {Array<string>}
       * @private
       */
      this.renderedAttributions_ = [];

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;
    }

    /**
     * Collect a list of visible attributions and set the collapsible state.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @return {Array<string>} Attributions.
     * @private
     */
    collectSourceAttributions_(frameState) {
      const layers = this.getMap().getAllLayers();
      const visibleAttributions = new Set(
        layers.flatMap((layer) => layer.getAttributions(frameState)),
      );
      if (this.attributions_ !== undefined) {
        Array.isArray(this.attributions_)
          ? this.attributions_.forEach((item) => visibleAttributions.add(item))
          : visibleAttributions.add(this.attributions_);
      }

      if (!this.overrideCollapsible_) {
        const collapsible = !layers.some(
          (layer) => layer.getSource()?.getAttributionsCollapsible() === false,
        );
        this.setCollapsible(collapsible);
      }
      return Array.from(visibleAttributions);
    }

    /**
     * @private
     * @param {?import("../Map.js").FrameState} frameState Frame state.
     */
    async updateElement_(frameState) {
      if (!frameState) {
        if (this.renderedVisible_) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      const attributions = await Promise.all(
        this.collectSourceAttributions_(frameState).map((attribution) =>
          toPromise(() => attribution),
        ),
      );

      const visible = attributions.length > 0;
      if (this.renderedVisible_ != visible) {
        this.element.style.display = visible ? '' : 'none';
        this.renderedVisible_ = visible;
      }

      if (equals$2(attributions, this.renderedAttributions_)) {
        return;
      }

      removeChildren(this.ulElement_);

      // append the attributions
      for (let i = 0, ii = attributions.length; i < ii; ++i) {
        const element = document.createElement('li');
        element.innerHTML = attributions[i];
        this.ulElement_.appendChild(element);
      }

      this.renderedAttributions_ = attributions;
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleToggle_();
      this.userCollapsed_ = this.collapsed_;
    }

    /**
     * @private
     */
    handleToggle_() {
      this.element.classList.toggle(CLASS_COLLAPSED);
      if (this.collapsed_) {
        replaceNode(this.collapseLabel_, this.label_);
      } else {
        replaceNode(this.label_, this.collapseLabel_);
      }
      this.collapsed_ = !this.collapsed_;
      this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));
    }

    /**
     * Return `true` if the attribution is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */
    getCollapsible() {
      return this.collapsible_;
    }

    /**
     * Set whether the attribution should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */
    setCollapsible(collapsible) {
      if (this.collapsible_ === collapsible) {
        return;
      }
      this.collapsible_ = collapsible;
      this.element.classList.toggle('ol-uncollapsible');
      if (this.userCollapsed_) {
        this.handleToggle_();
      }
    }

    /**
     * Collapse or expand the attribution according to the passed parameter. Will
     * not do anything if the attribution isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */
    setCollapsed(collapsed) {
      this.userCollapsed_ = collapsed;
      if (!this.collapsible_ || this.collapsed_ === collapsed) {
        return;
      }
      this.handleToggle_();
    }

    /**
     * Return `true` when the attribution is currently collapsed or `false`
     * otherwise.
     * @return {boolean} True if the widget is collapsed.
     * @api
     */
    getCollapsed() {
      return this.collapsed_;
    }

    /**
     * Update the attribution element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      this.updateElement_(mapEvent.frameState);
    }
  }

  /**
   * @module ol/control/Rotate
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-rotate'] CSS class name.
   * @property {string|HTMLElement} [label='â§'] Text label to use for the rotate button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
   * @property {string} [compassClassName='ol-compass'] CSS class name for the compass.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control should
   * be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {function():void} [resetNorth] Function called when the control is clicked.
   * This will override the default `resetNorth`.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */

  /**
   * @classdesc
   * A button control to reset rotation to 0.
   * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
   * selector is added to the button when the rotation is 0.
   *
   * @api
   */
  class Rotate extends Control {
    /**
     * @param {Options} [options] Rotate options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        render: options.render,
        target: options.target,
      });

      const className =
        options.className !== undefined ? options.className : 'ol-rotate';

      const label = options.label !== undefined ? options.label : '\u21E7';

      const compassClassName =
        options.compassClassName !== undefined
          ? options.compassClassName
          : 'ol-compass';

      /**
       * @type {HTMLElement}
       * @private
       */
      this.label_ = null;

      if (typeof label === 'string') {
        this.label_ = document.createElement('span');
        this.label_.className = compassClassName;
        this.label_.textContent = label;
      } else {
        this.label_ = label;
        this.label_.classList.add(compassClassName);
      }

      const tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';

      const button = document.createElement('button');
      button.className = className + '-reset';
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(this.label_);

      button.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this),
        false,
      );

      const cssClasses =
        className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(button);

      /**
       * @private
       */
      this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

      /**
       * @type {boolean}
       * @private
       */
      this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = undefined;

      if (this.autoHide_) {
        this.element.classList.add(CLASS_HIDDEN);
      }
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      if (this.callResetNorth_ !== undefined) {
        this.callResetNorth_();
      } else {
        this.resetNorth_();
      }
    }

    /**
     * @private
     */
    resetNorth_() {
      const map = this.getMap();
      const view = map.getView();
      if (!view) {
        // the map does not have a view, so we can't act
        // upon it
        return;
      }
      const rotation = view.getRotation();
      if (rotation !== undefined) {
        if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) {
          view.animate({
            rotation: 0,
            duration: this.duration_,
            easing: easeOut,
          });
        } else {
          view.setRotation(0);
        }
      }
    }

    /**
     * Update the rotate control element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      const frameState = mapEvent.frameState;
      if (!frameState) {
        return;
      }
      const rotation = frameState.viewState.rotation;
      if (rotation != this.rotation_) {
        const transform = 'rotate(' + rotation + 'rad)';
        if (this.autoHide_) {
          const contains = this.element.classList.contains(CLASS_HIDDEN);
          if (!contains && rotation === 0) {
            this.element.classList.add(CLASS_HIDDEN);
          } else if (contains && rotation !== 0) {
            this.element.classList.remove(CLASS_HIDDEN);
          }
        }
        this.label_.style.transform = transform;
      }
      this.rotation_ = rotation;
    }
  }

  /**
   * @module ol/control/Zoom
   */

  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {string} [className='ol-zoom'] CSS class name.
   * @property {string} [zoomInClassName=className + '-in'] CSS class name for the zoom-in button.
   * @property {string} [zoomOutClassName=className + '-out'] CSS class name for the zoom-out button.
   * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
   * button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|HTMLElement} [zoomOutLabel='â'] Text label to use for the zoom-out button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
   * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
   * @property {number} [delta=1] The zoom delta applied on each click.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */

  /**
   * @classdesc
   * A control with 2 buttons, one for zoom in and one for zoom out.
   * This control is one of the default controls of a map. To style this control
   * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
   *
   * @api
   */
  class Zoom extends Control {
    /**
     * @param {Options} [options] Zoom options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        target: options.target,
      });

      const className =
        options.className !== undefined ? options.className : 'ol-zoom';

      const delta = options.delta !== undefined ? options.delta : 1;

      const zoomInClassName =
        options.zoomInClassName !== undefined
          ? options.zoomInClassName
          : className + '-in';

      const zoomOutClassName =
        options.zoomOutClassName !== undefined
          ? options.zoomOutClassName
          : className + '-out';

      const zoomInLabel =
        options.zoomInLabel !== undefined ? options.zoomInLabel : '+';
      const zoomOutLabel =
        options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\u2013';

      const zoomInTipLabel =
        options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : 'Zoom in';
      const zoomOutTipLabel =
        options.zoomOutTipLabel !== undefined
          ? options.zoomOutTipLabel
          : 'Zoom out';

      const inElement = document.createElement('button');
      inElement.className = zoomInClassName;
      inElement.setAttribute('type', 'button');
      inElement.title = zoomInTipLabel;
      inElement.appendChild(
        typeof zoomInLabel === 'string'
          ? document.createTextNode(zoomInLabel)
          : zoomInLabel,
      );

      inElement.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this, delta),
        false,
      );

      const outElement = document.createElement('button');
      outElement.className = zoomOutClassName;
      outElement.setAttribute('type', 'button');
      outElement.title = zoomOutTipLabel;
      outElement.appendChild(
        typeof zoomOutLabel === 'string'
          ? document.createTextNode(zoomOutLabel)
          : zoomOutLabel,
      );

      outElement.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this, -delta),
        false,
      );

      const cssClasses =
        className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(inElement);
      element.appendChild(outElement);

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;
    }

    /**
     * @param {number} delta Zoom delta.
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(delta, event) {
      event.preventDefault();
      this.zoomByDelta_(delta);
    }

    /**
     * @param {number} delta Zoom delta.
     * @private
     */
    zoomByDelta_(delta) {
      const map = this.getMap();
      const view = map.getView();
      if (!view) {
        // the map does not have a view, so we can't act
        // upon it
        return;
      }
      const currentZoom = view.getZoom();
      if (currentZoom !== undefined) {
        const newZoom = view.getConstrainedZoom(currentZoom + delta);
        if (this.duration_ > 0) {
          if (view.getAnimating()) {
            view.cancelAnimations();
          }
          view.animate({
            zoom: newZoom,
            duration: this.duration_,
            easing: easeOut,
          });
        } else {
          view.setZoom(newZoom);
        }
      }
    }
  }

  /**
   * @module ol/control/defaults
   */

  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [attribution=true] Include
   * {@link module:ol/control/Attribution~Attribution}.
   * @property {import("./Attribution.js").Options} [attributionOptions]
   * Options for {@link module:ol/control/Attribution~Attribution}.
   * @property {boolean} [rotate=true] Include
   * {@link module:ol/control/Rotate~Rotate}.
   * @property {import("./Rotate.js").Options} [rotateOptions] Options
   * for {@link module:ol/control/Rotate~Rotate}.
   * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
   * @property {import("./Zoom.js").Options} [zoomOptions] Options for
   * {@link module:ol/control/Zoom~Zoom}.
   */

  /**
   * Set of controls included in maps by default. Unless configured otherwise,
   * this returns a collection containing an instance of each of the following
   * controls:
   * {@link module:ol/control/Zoom~Zoom}
   * {@link module:ol/control/Rotate~Rotate}
   * {@link module:ol/control/Attribution~Attribution}
   *
   * @param {DefaultsOptions} [options] Options for the default controls.
   * @return {Collection<import("./Control.js").default>} A collection of controls
   * to be used with the {@link module:ol/Map~Map} constructor's `controls` option.
   * @api
   */
  function defaults$1(options) {
    options = options ? options : {};

    /** @type {Collection<import("./Control.js").default>} */
    const controls = new Collection();

    const zoomControl = options.zoom !== undefined ? options.zoom : true;
    if (zoomControl) {
      controls.push(new Zoom(options.zoomOptions));
    }

    const rotateControl = options.rotate !== undefined ? options.rotate : true;
    if (rotateControl) {
      controls.push(new Rotate(options.rotateOptions));
    }

    const attributionControl =
      options.attribution !== undefined ? options.attribution : true;
    if (attributionControl) {
      controls.push(new Attribution(options.attributionOptions));
    }

    return controls;
  }

  /**
   * @module ol/Kinetic
   */

  /**
   * @classdesc
   * Implementation of inertial deceleration for map movement.
   *
   * @api
   */
  class Kinetic {
    /**
     * @param {number} decay Rate of decay (must be negative).
     * @param {number} minVelocity Minimum velocity (pixels/millisecond).
     * @param {number} delay Delay to consider to calculate the kinetic
     *     initial values (milliseconds).
     */
    constructor(decay, minVelocity, delay) {
      /**
       * @private
       * @type {number}
       */
      this.decay_ = decay;

      /**
       * @private
       * @type {number}
       */
      this.minVelocity_ = minVelocity;

      /**
       * @private
       * @type {number}
       */
      this.delay_ = delay;

      /**
       * @private
       * @type {Array<number>}
       */
      this.points_ = [];

      /**
       * @private
       * @type {number}
       */
      this.angle_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.initialVelocity_ = 0;
    }

    /**
     * FIXME empty description for jsdoc
     */
    begin() {
      this.points_.length = 0;
      this.angle_ = 0;
      this.initialVelocity_ = 0;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     */
    update(x, y) {
      this.points_.push(x, y, Date.now());
    }

    /**
     * @return {boolean} Whether we should do kinetic animation.
     */
    end() {
      if (this.points_.length < 6) {
        // at least 2 points are required (i.e. there must be at least 6 elements
        // in the array)
        return false;
      }
      const delay = Date.now() - this.delay_;
      const lastIndex = this.points_.length - 3;
      if (this.points_[lastIndex + 2] < delay) {
        // the last tracked point is too old, which means that the user stopped
        // panning before releasing the map
        return false;
      }

      // get the first point which still falls into the delay time
      let firstIndex = lastIndex - 3;
      while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {
        firstIndex -= 3;
      }

      const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
      // we don't want a duration of 0 (divide by zero)
      // we also make sure the user panned for a duration of at least one frame
      // (1/60s) to compute sane displacement values
      if (duration < 1000 / 60) {
        return false;
      }

      const dx = this.points_[lastIndex] - this.points_[firstIndex];
      const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
      this.angle_ = Math.atan2(dy, dx);
      this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
      return this.initialVelocity_ > this.minVelocity_;
    }

    /**
     * @return {number} Total distance travelled (pixels).
     */
    getDistance() {
      return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
    }

    /**
     * @return {number} Angle of the kinetic panning animation (radians).
     */
    getAngle() {
      return this.angle_;
    }
  }

  /**
   * @module ol/interaction/Property
   */

  /**
   * @enum {string}
   */
  var InteractionProperty = {
    ACTIVE: 'active',
  };

  /**
   * @module ol/interaction/Interaction
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active', Return>} InteractionOnSignature
   */

  /**
   * Object literal with config options for interactions.
   * @typedef {Object} InteractionOptions
   * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. If the function returns a falsy value, propagation of
   * the event to other interactions in the map's interactions chain will be
   * prevented (this includes functions with no explicit return). The interactions
   * are traversed in reverse order of the interactions collection of the map.
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * User actions that change the state of the map. Some are similar to controls,
   * but are not associated with a DOM element.
   * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
   * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
   * by a keyboard event not a button element event.
   * Although interactions do not have a DOM element, some of them do render
   * vectors and so are visible on the screen.
   * @api
   */
  class Interaction extends BaseObject {
    /**
     * @param {InteractionOptions} [options] Options.
     */
    constructor(options) {
      super();

      /***
       * @type {InteractionOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {InteractionOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {InteractionOnSignature<void>}
       */
      this.un;

      if (options && options.handleEvent) {
        this.handleEvent = options.handleEvent;
      }

      /**
       * @private
       * @type {import("../Map.js").default|null}
       */
      this.map_ = null;

      this.setActive(true);
    }

    /**
     * Return whether the interaction is currently active.
     * @return {boolean} `true` if the interaction is active, `false` otherwise.
     * @observable
     * @api
     */
    getActive() {
      return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));
    }

    /**
     * Get the map associated with this interaction.
     * @return {import("../Map.js").default|null} Map.
     * @api
     */
    getMap() {
      return this.map_;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event}.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     */
    handleEvent(mapBrowserEvent) {
      return true;
    }

    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     */
    setActive(active) {
      this.set(InteractionProperty.ACTIVE, active);
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     */
    setMap(map) {
      this.map_ = map;
    }
  }

  /**
   * @param {import("../View.js").default} view View.
   * @param {import("../coordinate.js").Coordinate} delta Delta.
   * @param {number} [duration] Duration.
   */
  function pan(view, delta, duration) {
    const currentCenter = view.getCenterInternal();
    if (currentCenter) {
      const center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];
      view.animateInternal({
        duration: duration !== undefined ? duration : 250,
        easing: linear,
        center: view.getConstrainedCenter(center),
      });
    }
  }

  /**
   * @param {import("../View.js").default} view View.
   * @param {number} delta Delta from previous zoom level.
   * @param {import("../coordinate.js").Coordinate} [anchor] Anchor coordinate in the user projection.
   * @param {number} [duration] Duration.
   */
  function zoomByDelta(view, delta, anchor, duration) {
    const currentZoom = view.getZoom();

    if (currentZoom === undefined) {
      return;
    }

    const newZoom = view.getConstrainedZoom(currentZoom + delta);
    const newResolution = view.getResolutionForZoom(newZoom);

    if (view.getAnimating()) {
      view.cancelAnimations();
    }
    view.animate({
      resolution: newResolution,
      anchor: anchor,
      duration: duration !== undefined ? duration : 250,
      easing: easeOut,
    });
  }

  /**
   * @module ol/interaction/DoubleClickZoom
   */

  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [delta=1] The zoom delta applied on each double click.
   */

  /**
   * @classdesc
   * Allows the user to zoom by double-clicking on the map.
   * @api
   */
  class DoubleClickZoom extends Interaction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @private
       * @type {number}
       */
      this.delta_ = options.delta ? options.delta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a
     * doubleclick) and eventually zooms the map.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @override
     */
    handleEvent(mapBrowserEvent) {
      let stopEvent = false;
      if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {
        const browserEvent = /** @type {MouseEvent} */ (
          mapBrowserEvent.originalEvent
        );
        const map = mapBrowserEvent.map;
        const anchor = mapBrowserEvent.coordinate;
        const delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
        const view = map.getView();
        zoomByDelta(view, delta, anchor, this.duration_);
        browserEvent.preventDefault();
        stopEvent = true;
      }
      return !stopEvent;
    }
  }

  /**
   * @module ol/events/condition
   */

  /**
   * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * `{boolean}`. If the condition is met, true should be returned.
   *
   * @typedef {function(this: ?, import("../MapBrowserEvent.js").default): boolean} Condition
   */

  /**
   * Creates a condition function that passes when all provided conditions pass.
   * @param {...Condition} var_args Conditions to check.
   * @return {Condition} Condition function.
   */
  function all$1(var_args) {
    const conditions = arguments;
    /**
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} All conditions passed.
     */
    return function (event) {
      let pass = true;
      for (let i = 0, ii = conditions.length; i < ii; ++i) {
        pass = pass && conditions[i](event);
        if (!pass) {
          break;
        }
      }
      return pass;
    };
  }

  /**
   * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when
   * additionally the shift-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the alt key is pressed.
   * @api
   */
  const altKeyOnly = function (mapBrowserEvent) {
    const originalEvent = mapBrowserEvent.originalEvent;
    return (
      originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      !originalEvent.shiftKey
    );
  };

  /**
   * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
   * (e.g. when additionally the platform-modifier-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the alt and shift keys are pressed.
   * @api
   */
  const altShiftKeysOnly = function (mapBrowserEvent) {
    const originalEvent = mapBrowserEvent.originalEvent;
    return (
      originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      originalEvent.shiftKey
    );
  };

  /**
   * Return `true` if the map has the focus. This condition requires a map target
   * element with a `tabindex` attribute, e.g. `<div id="map" tabindex="1">`.
   *
   * @param {import("../MapBrowserEvent.js").default} event Map browser event.
   * @return {boolean} The map has the focus.
   * @api
   */
  const focus = function (event) {
    const targetElement = event.map.getTargetElement();
    const rootNode = targetElement.getRootNode();
    const activeElement = event.map.getOwnerDocument().activeElement;

    return rootNode instanceof ShadowRoot
      ? rootNode.host.contains(activeElement)
      : targetElement.contains(activeElement);
  };

  /**
   * Return `true` if the map has the focus or no 'tabindex' attribute set.
   *
   * @param {import("../MapBrowserEvent.js").default} event Map browser event.
   * @return {boolean} The map container has the focus or no 'tabindex' attribute.
   */
  const focusWithTabindex = function (event) {
    const targetElement = event.map.getTargetElement();
    const rootNode = targetElement.getRootNode();
    const tabIndexCandidate =
      rootNode instanceof ShadowRoot ? rootNode.host : targetElement;

    return tabIndexCandidate.hasAttribute('tabindex') ? focus(event) : true;
  };

  /**
   * Return always true.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True.
   * @api
   */
  const always$1 = TRUE;

  /**
   * Return `true` if the event is a `click` event, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event is a map `click` event.
   * @api
   */
  const click = function (mapBrowserEvent) {
    return mapBrowserEvent.type == MapBrowserEventType.CLICK;
  };

  /**
   * Return `true` if the event has an "action"-producing mouse button.
   *
   * By definition, this includes left-click on windows/linux, and left-click
   * without the ctrl key on Macs.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} The result.
   */
  const mouseActionButton = function (mapBrowserEvent) {
    const originalEvent = mapBrowserEvent.originalEvent;
    return (
      originalEvent instanceof PointerEvent &&
      originalEvent.button == 0 &&
      !(WEBKIT && MAC && originalEvent.ctrlKey)
    );
  };

  /**
   * Return always false.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} False.
   * @api
   */
  const never = FALSE;

  /**
   * Return `true` if the browser event is a `pointermove` event, `false`
   * otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the browser event is a `pointermove` event.
   * @api
   */
  const pointerMove = function (mapBrowserEvent) {
    return mapBrowserEvent.type == 'pointermove';
  };

  /**
   * Return `true` if the event is a map `singleclick` event, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event is a map `singleclick` event.
   * @api
   */
  const singleClick = function (mapBrowserEvent) {
    return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;
  };

  /**
   * Return `true` if the event is a map `dblclick` event, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event is a map `dblclick` event.
   * @api
   */
  const doubleClick = function (mapBrowserEvent) {
    return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;
  };

  /**
   * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
   * pressed.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if there no modifier keys are pressed.
   * @api
   */
  const noModifierKeys = function (mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (
      mapBrowserEvent.originalEvent
    );
    return (
      !originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      !originalEvent.shiftKey
    );
  };

  /**
   * Return `true` if only the platform-modifier-key (the meta-key on Mac,
   * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally
   * the shift-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the platform modifier key is pressed.
   * @api
   */
  const platformModifierKeyOnly = function (mapBrowserEvent) {
    const originalEvent = mapBrowserEvent.originalEvent;
    return (
      !originalEvent.altKey &&
      (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&
      !originalEvent.shiftKey
    );
  };

  /**
   * Return `true` if the platform-modifier-key (the meta-key on Mac,
   * ctrl-key otherwise) is pressed.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the platform modifier key is pressed.
   * @api
   */
  const platformModifierKey = function (mapBrowserEvent) {
    const originalEvent = mapBrowserEvent.originalEvent;
    return MAC ? originalEvent.metaKey : originalEvent.ctrlKey;
  };

  /**
   * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
   * additionally the alt-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the shift key is pressed.
   * @api
   */
  const shiftKeyOnly = function (mapBrowserEvent) {
    const originalEvent = mapBrowserEvent.originalEvent;
    return (
      !originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      originalEvent.shiftKey
    );
  };

  /**
   * Return `true` if the target element is not editable, i.e. not an `input`,
   * `select`, or `textarea` element and no `contenteditable` attribute is
   * set or inherited, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if the target element is not editable.
   * @api
   */
  const targetNotEditable = function (mapBrowserEvent) {
    const originalEvent = mapBrowserEvent.originalEvent;
    const tagName = /** @type {Element} */ (originalEvent.target).tagName;
    return (
      tagName !== 'INPUT' &&
      tagName !== 'SELECT' &&
      tagName !== 'TEXTAREA' &&
      // `isContentEditable` is only available on `HTMLElement`, but it may also be a
      // different type like `SVGElement`.
      // @ts-ignore
      !originalEvent.target.isContentEditable
    );
  };

  /**
   * Return `true` if the event originates from a mouse device.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a mouse device.
   * @api
   */
  const mouseOnly = function (mapBrowserEvent) {
    const pointerEvent = mapBrowserEvent.originalEvent;
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return (
      pointerEvent instanceof PointerEvent && pointerEvent.pointerType == 'mouse'
    );
  };

  /**
   * Return `true` if the event originates from a touchable device.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a touchable device.
   * @api
   */
  const touchOnly = function (mapBrowserEvent) {
    const pointerEvt = mapBrowserEvent.originalEvent;
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return (
      pointerEvt instanceof PointerEvent && pointerEvt.pointerType === 'touch'
    );
  };

  /**
   * Return `true` if the event originates from a digital pen.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a digital pen.
   * @api
   */
  const penOnly = function (mapBrowserEvent) {
    const pointerEvt = mapBrowserEvent.originalEvent;
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvt instanceof PointerEvent && pointerEvt.pointerType === 'pen';
  };

  /**
   * Return `true` if the event originates from a primary pointer in
   * contact with the surface or if the left mouse button is pressed.
   * See https://www.w3.org/TR/pointerevents/#button-states.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a primary pointer.
   * @api
   */
  const primaryAction = function (mapBrowserEvent) {
    const pointerEvent = mapBrowserEvent.originalEvent;
    return (
      pointerEvent instanceof PointerEvent &&
      pointerEvent.isPrimary &&
      pointerEvent.button === 0
    );
  };

  var condition = /*#__PURE__*/Object.freeze({
    __proto__: null,
    all: all$1,
    altKeyOnly: altKeyOnly,
    altShiftKeysOnly: altShiftKeysOnly,
    always: always$1,
    click: click,
    doubleClick: doubleClick,
    focus: focus,
    focusWithTabindex: focusWithTabindex,
    mouseActionButton: mouseActionButton,
    mouseOnly: mouseOnly,
    never: never,
    noModifierKeys: noModifierKeys,
    penOnly: penOnly,
    platformModifierKey: platformModifierKey,
    platformModifierKeyOnly: platformModifierKeyOnly,
    pointerMove: pointerMove,
    primaryAction: primaryAction,
    shiftKeyOnly: shiftKeyOnly,
    singleClick: singleClick,
    targetNotEditable: targetNotEditable,
    touchOnly: touchOnly
  });

  /**
   * @module ol/interaction/Pointer
   */

  /**
   * @typedef {Object} Options
   * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleDownEvent]
   * Function handling "down" events. If the function returns `true` then a drag
   * sequence is started.
   * @property {function(import("../MapBrowserEvent.js").default):void} [handleDragEvent]
   * Function handling "drag" events. This function is called on "move" events
   * during a drag sequence.
   * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. The function may return `false` to prevent the
   * propagation of the event to other interactions in the map's interactions
   * chain.
   * @property {function(import("../MapBrowserEvent.js").default):void} [handleMoveEvent]
   * Function handling "move" events. This function is called on "move" events.
   * This functions is also called during a drag sequence, so during a drag
   * sequence both the `handleDragEvent` function and this function are called.
   * If `handleDownEvent` is defined and it returns true this function will not
   * be called during a drag sequence.
   * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleUpEvent]
   *  Function handling "up" events. If the function returns `false` then the
   * current drag sequence is stopped.
   * @property {function(boolean):boolean} [stopDown]
   * Should the down event be propagated to other interactions, or should be
   * stopped?
   */

  /**
   * @classdesc
   * Base class that calls user-defined functions on `down`, `move` and `up`
   * events. This class also manages "drag sequences".
   *
   * When the `handleDownEvent` user function returns `true` a drag sequence is
   * started. During a drag sequence the `handleDragEvent` user function is
   * called on `move` events. The drag sequence ends when the `handleUpEvent`
   * user function is called and returns `false`.
   * @api
   */
  class PointerInteraction extends Interaction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super(
        /** @type {import("./Interaction.js").InteractionOptions} */ (options),
      );

      if (options.handleDownEvent) {
        this.handleDownEvent = options.handleDownEvent;
      }

      if (options.handleDragEvent) {
        this.handleDragEvent = options.handleDragEvent;
      }

      if (options.handleMoveEvent) {
        this.handleMoveEvent = options.handleMoveEvent;
      }

      if (options.handleUpEvent) {
        this.handleUpEvent = options.handleUpEvent;
      }

      if (options.stopDown) {
        this.stopDown = options.stopDown;
      }

      /**
       * @type {boolean}
       * @protected
       */
      this.handlingDownUpSequence = false;

      /**
       * @type {Array<PointerEvent>}
       * @protected
       */
      this.targetPointers = [];
    }

    /**
     * Returns the current number of pointers involved in the interaction,
     * e.g. `2` when two fingers are used.
     * @return {number} The number of pointers.
     * @api
     */
    getPointerCount() {
      return this.targetPointers.length;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */
    handleDownEvent(mapBrowserEvent) {
      return false;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @protected
     */
    handleDragEvent(mapBrowserEvent) {}

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into
     * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
     * detected.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     * @override
     */
    handleEvent(mapBrowserEvent) {
      if (!mapBrowserEvent.originalEvent) {
        return true;
      }

      let stopEvent = false;
      this.updateTrackedPointers_(mapBrowserEvent);
      if (this.handlingDownUpSequence) {
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {
          this.handleDragEvent(mapBrowserEvent);
          // prevent page scrolling during dragging
          mapBrowserEvent.originalEvent.preventDefault();
        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
          const handledUp = this.handleUpEvent(mapBrowserEvent);
          this.handlingDownUpSequence =
            handledUp && this.targetPointers.length > 0;
        }
      } else {
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {
          const handled = this.handleDownEvent(mapBrowserEvent);
          this.handlingDownUpSequence = handled;
          stopEvent = this.stopDown(handled);
        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {
          this.handleMoveEvent(mapBrowserEvent);
        }
      }
      return !stopEvent;
    }

    /**
     * Handle pointer move events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @protected
     */
    handleMoveEvent(mapBrowserEvent) {}

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */
    handleUpEvent(mapBrowserEvent) {
      return false;
    }

    /**
     * This function is used to determine if "down" events should be propagated
     * to other interactions or should be stopped.
     * @param {boolean} handled Was the event handled by the interaction?
     * @return {boolean} Should the `down` event be stopped?
     */
    stopDown(handled) {
      return handled;
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @private
     */
    updateTrackedPointers_(mapBrowserEvent) {
      if (mapBrowserEvent.activePointers) {
        this.targetPointers = mapBrowserEvent.activePointers;
      }
    }
  }

  /**
   * @param {Array<PointerEvent>} pointerEvents List of events.
   * @return {{clientX: number, clientY: number}} Centroid pixel.
   */
  function centroid(pointerEvents) {
    const length = pointerEvents.length;
    let clientX = 0;
    let clientY = 0;
    for (let i = 0; i < length; i++) {
      clientX += pointerEvents[i].clientX;
      clientY += pointerEvents[i].clientY;
    }
    return {clientX: clientX / length, clientY: clientY / length};
  }

  /**
   * @module ol/interaction/DragPan
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.
   * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
   * the interaction will only handle events when the map has the focus.
   * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
   */

  /**
   * @classdesc
   * Allows the user to pan the map by dragging the map.
   * @api
   */
  class DragPan extends PointerInteraction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super({
        stopDown: FALSE,
      });

      options = options ? options : {};

      /**
       * @private
       * @type {import("../Kinetic.js").default|undefined}
       */
      this.kinetic_ = options.kinetic;

      /**
       * @type {import("../pixel.js").Pixel}
       */
      this.lastCentroid = null;

      /**
       * @type {number}
       * @private
       */
      this.lastPointersCount_;

      /**
       * @type {boolean}
       * @private
       */
      this.panning_ = false;

      const condition = options.condition
        ? options.condition
        : all$1(noModifierKeys, primaryAction);

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.onFocusOnly
        ? all$1(focusWithTabindex, condition)
        : condition;

      /**
       * @private
       * @type {boolean}
       */
      this.noKinetic_ = false;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @override
     */
    handleDragEvent(mapBrowserEvent) {
      const map = mapBrowserEvent.map;
      if (!this.panning_) {
        this.panning_ = true;
        map.getView().beginInteraction();
      }
      const targetPointers = this.targetPointers;
      const centroid$1 = map.getEventPixel(centroid(targetPointers));
      if (targetPointers.length == this.lastPointersCount_) {
        if (this.kinetic_) {
          this.kinetic_.update(centroid$1[0], centroid$1[1]);
        }
        if (this.lastCentroid) {
          const delta = [
            this.lastCentroid[0] - centroid$1[0],
            centroid$1[1] - this.lastCentroid[1],
          ];
          const map = mapBrowserEvent.map;
          const view = map.getView();
          scale$2(delta, view.getResolution());
          rotate$1(delta, view.getRotation());
          view.adjustCenterInternal(delta);
        }
      } else if (this.kinetic_) {
        // reset so we don't overestimate the kinetic energy after
        // after one finger down, tiny drag, second finger down
        this.kinetic_.begin();
      }
      this.lastCentroid = centroid$1;
      this.lastPointersCount_ = targetPointers.length;
      mapBrowserEvent.originalEvent.preventDefault();
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleUpEvent(mapBrowserEvent) {
      const map = mapBrowserEvent.map;
      const view = map.getView();
      if (this.targetPointers.length === 0) {
        if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
          const distance = this.kinetic_.getDistance();
          const angle = this.kinetic_.getAngle();
          const center = view.getCenterInternal();
          const centerpx = map.getPixelFromCoordinateInternal(center);
          const dest = map.getCoordinateFromPixelInternal([
            centerpx[0] - distance * Math.cos(angle),
            centerpx[1] - distance * Math.sin(angle),
          ]);
          view.animateInternal({
            center: view.getConstrainedCenter(dest),
            duration: 500,
            easing: easeOut,
          });
        }
        if (this.panning_) {
          this.panning_ = false;
          view.endInteraction();
        }
        return false;
      }
      if (this.kinetic_) {
        // reset so we don't overestimate the kinetic energy after
        // after one finger up, tiny drag, second finger up
        this.kinetic_.begin();
      }
      this.lastCentroid = null;
      return true;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleDownEvent(mapBrowserEvent) {
      if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
        const map = mapBrowserEvent.map;
        const view = map.getView();
        this.lastCentroid = null;
        // stop any current animation
        if (view.getAnimating()) {
          view.cancelAnimations();
        }
        if (this.kinetic_) {
          this.kinetic_.begin();
        }
        // No kinetic as soon as more than one pointer on the screen is
        // detected. This is to prevent nasty pans after pinch.
        this.noKinetic_ = this.targetPointers.length > 1;
        return true;
      }
      return false;
    }
  }

  /**
   * @module ol/interaction/DragRotate
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes a
   * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition.altShiftKeysOnly}.
   * @property {number} [duration=250] Animation duration in milliseconds.
   */

  /**
   * @classdesc
   * Allows the user to rotate the map by clicking and dragging on the map,
   * normally combined with a {@link module:ol/events/condition} that limits
   * it to when the alt and shift keys are held down.
   *
   * This interaction is only supported for mouse devices.
   * @api
   */
  class DragRotate extends PointerInteraction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        stopDown: FALSE,
      });

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : altShiftKeysOnly;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @override
     */
    handleDragEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      const map = mapBrowserEvent.map;
      const view = map.getView();
      if (view.getConstraints().rotation === disable) {
        return;
      }
      const size = map.getSize();
      const offset = mapBrowserEvent.pixel;
      const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
      if (this.lastAngle_ !== undefined) {
        const delta = theta - this.lastAngle_;
        view.adjustRotationInternal(-delta);
      }
      this.lastAngle_ = theta;
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleUpEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      const map = mapBrowserEvent.map;
      const view = map.getView();
      view.endInteraction(this.duration_);
      return false;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleDownEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (
        mouseActionButton(mapBrowserEvent) &&
        this.condition_(mapBrowserEvent)
      ) {
        const map = mapBrowserEvent.map;
        map.getView().beginInteraction();
        this.lastAngle_ = undefined;
        return true;
      }
      return false;
    }
  }

  /**
   * @module ol/render/Box
   */


  class RenderBox extends Disposable {
    /**
     * @param {string} className CSS class name.
     */
    constructor(className) {
      super();

      /**
       * @type {import("../geom/Polygon.js").default}
       * @private
       */
      this.geometry_ = null;

      /**
       * @type {HTMLDivElement}
       * @private
       */
      this.element_ = document.createElement('div');
      this.element_.style.position = 'absolute';
      this.element_.style.pointerEvents = 'auto';
      this.element_.className = 'ol-box ' + className;

      /**
       * @private
       * @type {import("../Map.js").default|null}
       */
      this.map_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.startPixel_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.endPixel_ = null;
    }

    /**
     * Clean up.
     * @override
     */
    disposeInternal() {
      this.setMap(null);
    }

    /**
     * @private
     */
    render_() {
      const startPixel = this.startPixel_;
      const endPixel = this.endPixel_;
      const px = 'px';
      const style = this.element_.style;
      style.left = Math.min(startPixel[0], endPixel[0]) + px;
      style.top = Math.min(startPixel[1], endPixel[1]) + px;
      style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
      style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
    }

    /**
     * @param {import("../Map.js").default|null} map Map.
     */
    setMap(map) {
      if (this.map_) {
        this.map_.getOverlayContainer().removeChild(this.element_);
        const style = this.element_.style;
        style.left = 'inherit';
        style.top = 'inherit';
        style.width = 'inherit';
        style.height = 'inherit';
      }
      this.map_ = map;
      if (this.map_) {
        this.map_.getOverlayContainer().appendChild(this.element_);
      }
    }

    /**
     * @param {import("../pixel.js").Pixel} startPixel Start pixel.
     * @param {import("../pixel.js").Pixel} endPixel End pixel.
     */
    setPixels(startPixel, endPixel) {
      this.startPixel_ = startPixel;
      this.endPixel_ = endPixel;
      this.createOrUpdateGeometry();
      this.render_();
    }

    /**
     * Creates or updates the cached geometry.
     */
    createOrUpdateGeometry() {
      if (!this.map_) {
        return;
      }

      const startPixel = this.startPixel_;
      const endPixel = this.endPixel_;
      const pixels = [
        startPixel,
        [startPixel[0], endPixel[1]],
        endPixel,
        [endPixel[0], startPixel[1]],
      ];
      const coordinates = pixels.map(
        this.map_.getCoordinateFromPixelInternal,
        this.map_,
      );
      // close the polygon
      coordinates[4] = coordinates[0].slice();
      if (!this.geometry_) {
        this.geometry_ = new Polygon([coordinates]);
      } else {
        this.geometry_.setCoordinates([coordinates]);
      }
    }

    /**
     * @return {import("../geom/Polygon.js").default} Geometry.
     */
    getGeometry() {
      return this.geometry_;
    }
  }

  /**
   * @module ol/interaction/DragBox
   */
  // FIXME draw drag box

  /**
   * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
   * true should be returned.
   * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
   * @property {import("../events/condition.js").Condition} [condition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link ol/events/condition~mouseActionButton}.
   * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
   * `boxEndCondition` function.
   * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
   * Default is `true` if the area of the box is bigger than the `minArea` option.
   * @property {function(this:DragBox, import("../MapBrowserEvent.js").default):void} [onBoxEnd] Code to execute just
   * before `boxend` is fired.
   */

  /**
   * @enum {string}
   */
  const DragBoxEventType = {
    /**
     * Triggered upon drag box start.
     * @event DragBoxEvent#boxstart
     * @api
     */
    BOXSTART: 'boxstart',

    /**
     * Triggered on drag when box is active.
     * @event DragBoxEvent#boxdrag
     * @api
     */
    BOXDRAG: 'boxdrag',

    /**
     * Triggered upon drag box end.
     * @event DragBoxEvent#boxend
     * @api
     */
    BOXEND: 'boxend',

    /**
     * Triggered upon drag box canceled.
     * @event DragBoxEvent#boxcancel
     * @api
     */
    BOXCANCEL: 'boxcancel',
  };

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
   * this type.
   */
  class DragBoxEvent extends BaseEvent {
    /**
     * @param {string} type The event type.
     * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Originating event.
     */
    constructor(type, coordinate, mapBrowserEvent) {
      super(type);

      /**
       * The coordinate of the drag event.
       * @const
       * @type {import("../coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = coordinate;

      /**
       * @const
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;
    }
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature
   */

  /**
   * @classdesc
   * Allows the user to draw a vector box by clicking and dragging on the map,
   * normally combined with a {@link module:ol/events/condition} that limits
   * it to when the shift or other key is held down. This is used, for example,
   * for zooming to a specific area of the map
   * (see {@link module:ol/interaction/DragZoom~DragZoom} and
   * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).
   *
   * @fires DragBoxEvent
   * @api
   */
  class DragBox extends PointerInteraction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      /***
       * @type {DragBoxOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {DragBoxOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {DragBoxOnSignature<void>}
       */
      this.un;

      options = options ?? {};

      /**
       * @type {import("../render/Box.js").default}
       * @private
       */
      this.box_ = new RenderBox(options.className || 'ol-dragbox');

      /**
       * @type {number}
       * @private
       */
      this.minArea_ = options.minArea ?? 64;

      if (options.onBoxEnd) {
        this.onBoxEnd = options.onBoxEnd;
      }

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.startPixel_ = null;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ?? mouseActionButton;

      /**
       * @private
       * @type {EndCondition}
       */
      this.boxEndCondition_ =
        options.boxEndCondition ?? this.defaultBoxEndCondition;
    }

    /**
     * The default condition for determining whether the boxend event
     * should fire.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
     *     leading to the box end.
     * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
     * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
     * @return {boolean} Whether or not the boxend condition should be fired.
     */
    defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {
      const width = endPixel[0] - startPixel[0];
      const height = endPixel[1] - startPixel[1];
      return width * width + height * height >= this.minArea_;
    }

    /**
     * Returns geometry of last drawn box.
     * @return {import("../geom/Polygon.js").default} Geometry.
     * @api
     */
    getGeometry() {
      return this.box_.getGeometry();
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @override
     */
    handleDragEvent(mapBrowserEvent) {
      if (!this.startPixel_) {
        return;
      }

      this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);

      this.dispatchEvent(
        new DragBoxEvent(
          DragBoxEventType.BOXDRAG,
          mapBrowserEvent.coordinate,
          mapBrowserEvent,
        ),
      );
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleUpEvent(mapBrowserEvent) {
      if (!this.startPixel_) {
        return false;
      }

      const completeBox = this.boxEndCondition_(
        mapBrowserEvent,
        this.startPixel_,
        mapBrowserEvent.pixel,
      );
      if (completeBox) {
        this.onBoxEnd(mapBrowserEvent);
      }
      this.dispatchEvent(
        new DragBoxEvent(
          completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL,
          mapBrowserEvent.coordinate,
          mapBrowserEvent,
        ),
      );

      this.box_.setMap(null);
      this.startPixel_ = null;

      return false;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleDownEvent(mapBrowserEvent) {
      if (this.condition_(mapBrowserEvent)) {
        this.startPixel_ = mapBrowserEvent.pixel;
        this.box_.setMap(mapBrowserEvent.map);
        this.box_.setPixels(this.startPixel_, this.startPixel_);
        this.dispatchEvent(
          new DragBoxEvent(
            DragBoxEventType.BOXSTART,
            mapBrowserEvent.coordinate,
            mapBrowserEvent,
          ),
        );
        return true;
      }
      return false;
    }

    /**
     * Function to execute just before `onboxend` is fired
     * @param {import("../MapBrowserEvent.js").default} event Event.
     */
    onBoxEnd(event) {}

    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     * @override
     */
    setActive(active) {
      if (!active) {
        this.box_.setMap(null);
        if (this.startPixel_) {
          this.dispatchEvent(
            new DragBoxEvent(DragBoxEventType.BOXCANCEL, this.startPixel_, null),
          );
          this.startPixel_ = null;
        }
      }

      super.setActive(active);
    }

    /**
     * @param {import("../Map.js").default|null} map Map.
     * @override
     */
    setMap(map) {
      const oldMap = this.getMap();

      if (oldMap) {
        this.box_.setMap(null);

        if (this.startPixel_) {
          this.dispatchEvent(
            new DragBoxEvent(DragBoxEventType.BOXCANCEL, this.startPixel_, null),
          );
          this.startPixel_ = null;
        }
      }

      super.setMap(map);
    }
  }

  /**
   * @module ol/interaction/DragZoom
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragzoom'] CSS class name for styling the
   * box.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition.shiftKeyOnly}.
   * @property {number} [duration=200] Animation duration in milliseconds.
   * @property {boolean} [out=false] Use interaction for zooming out.
   * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default
   * `boxEndCondition` function.
   */

  /**
   * @classdesc
   * Allows the user to zoom the map by clicking and dragging on the map,
   * normally combined with a {@link module:ol/events/condition} that limits
   * it to when a key, shift by default, is held down.
   *
   * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
   * your custom one configured with `className`.
   * @api
   */
  class DragZoom extends DragBox {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const condition = options.condition ? options.condition : shiftKeyOnly;

      super({
        condition: condition,
        className: options.className || 'ol-dragzoom',
        minArea: options.minArea,
      });

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 200;

      /**
       * @private
       * @type {boolean}
       */
      this.out_ = options.out !== undefined ? options.out : false;
    }

    /**
     * Function to execute just before `onboxend` is fired
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @override
     */
    onBoxEnd(event) {
      const map = this.getMap();
      const view = /** @type {!import("../View.js").default} */ (map.getView());
      let geometry = this.getGeometry();

      if (this.out_) {
        const rotatedExtent = view.rotatedExtentForGeometry(geometry);
        const resolution = view.getResolutionForExtentInternal(rotatedExtent);
        const factor = view.getResolution() / resolution;
        geometry = geometry.clone();
        geometry.scale(factor * factor);
      }

      view.fitInternal(geometry, {
        duration: this.duration_,
        easing: easeOut,
      });
    }
  }

  /**
   * @module ol/events/Key
   */

  /**
   * @enum {string}
   * @const
   */
  var Key = {
    LEFT: 'ArrowLeft',
    UP: 'ArrowUp',
    RIGHT: 'ArrowRight',
    DOWN: 'ArrowDown',
  };

  /**
   * @module ol/interaction/KeyboardPan
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition.noModifierKeys} and
   * {@link module:ol/events/condition.targetNotEditable}.
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
   * press.
   */

  /**
   * @classdesc
   * Allows the user to pan the map using keyboard arrows.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
   * @api
   */
  class KeyboardPan extends Interaction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options || {};

      /**
       * @private
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
       * @return {boolean} Combined condition result.
       */
      this.defaultCondition_ = function (mapBrowserEvent) {
        return (
          noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent)
        );
      };

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ =
        options.condition !== undefined
          ? options.condition
          : this.defaultCondition_;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 100;

      /**
       * @private
       * @type {number}
       */
      this.pixelDelta_ =
        options.pixelDelta !== undefined ? options.pixelDelta : 128;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a
     * `KeyEvent`, and decides the direction to pan to (if an arrow key was
     * pressed).
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @override
     */
    handleEvent(mapBrowserEvent) {
      let stopEvent = false;
      if (mapBrowserEvent.type == EventType.KEYDOWN) {
        const keyEvent = /** @type {KeyboardEvent} */ (
          mapBrowserEvent.originalEvent
        );
        const key = keyEvent.key;
        if (
          this.condition_(mapBrowserEvent) &&
          (key == Key.DOWN ||
            key == Key.LEFT ||
            key == Key.RIGHT ||
            key == Key.UP)
        ) {
          const map = mapBrowserEvent.map;
          const view = map.getView();
          const mapUnitsDelta = view.getResolution() * this.pixelDelta_;
          let deltaX = 0,
            deltaY = 0;
          if (key == Key.DOWN) {
            deltaY = -mapUnitsDelta;
          } else if (key == Key.LEFT) {
            deltaX = -mapUnitsDelta;
          } else if (key == Key.RIGHT) {
            deltaX = mapUnitsDelta;
          } else {
            deltaY = mapUnitsDelta;
          }
          const delta = [deltaX, deltaY];
          rotate$1(delta, view.getRotation());
          pan(view, delta, this.duration_);
          keyEvent.preventDefault();
          stopEvent = true;
        }
      }
      return !stopEvent;
    }
  }

  /**
   * @module ol/interaction/KeyboardZoom
   */

  /**
   * @typedef {Object} Options
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. The default condition is
   * that {@link module:ol/events/condition.targetNotEditable} is fulfilled and that
   * the platform modifier key isn't pressed
   * (!{@link module:ol/events/condition.platformModifierKey}).
   * @property {number} [delta=1] The zoom level delta on each key press.
   */

  /**
   * @classdesc
   * Allows the user to zoom the map using keyboard + and -.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
   * @api
   */
  class KeyboardZoom extends Interaction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition
        ? options.condition
        : function (mapBrowserEvent) {
            return (
              !platformModifierKey(mapBrowserEvent) &&
              targetNotEditable(mapBrowserEvent)
            );
          };

      /**
       * @private
       * @type {number}
       */
      this.delta_ = options.delta ? options.delta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 100;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a
     * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
     * key pressed was '+' or '-').
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @override
     */
    handleEvent(mapBrowserEvent) {
      let stopEvent = false;
      if (
        mapBrowserEvent.type == EventType.KEYDOWN ||
        mapBrowserEvent.type == EventType.KEYPRESS
      ) {
        const keyEvent = /** @type {KeyboardEvent} */ (
          mapBrowserEvent.originalEvent
        );
        const key = keyEvent.key;
        if (this.condition_(mapBrowserEvent) && (key === '+' || key === '-')) {
          const map = mapBrowserEvent.map;
          const delta = key === '+' ? this.delta_ : -this.delta_;
          const view = map.getView();
          zoomByDelta(view, delta, undefined, this.duration_);
          keyEvent.preventDefault();
          stopEvent = true;
        }
      }
      return !stopEvent;
    }
  }

  /**
   * @module ol/interaction/MouseWheelZoom
   */

  /**
   * @typedef {'trackpad' | 'wheel'} Mode
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition.always}.
   * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
   * the interaction will only handle events when the map has the focus.
   * @property {number} [maxDelta=1] Maximum mouse wheel delta.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
   * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
   * location as the anchor. When set to `false`, zooming in and out will zoom to
   * the center of the screen instead of zooming on the mouse's location.
   * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom
   * event will always animate to the closest zoom level after an interaction;
   * false means intermediary zoom levels are allowed.
   */

  /**
   * @classdesc
   * Allows the user to zoom the map by scrolling the mouse wheel.
   * @api
   */
  class MouseWheelZoom extends Interaction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super(
        /** @type {import("./Interaction.js").InteractionOptions} */ (options),
      );

      /**
       * @private
       * @type {number}
       */
      this.totalDelta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.lastDelta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

      /**
       * @private
       * @type {number}
       */
      this.timeout_ = options.timeout !== undefined ? options.timeout : 80;

      /**
       * @private
       * @type {boolean}
       */
      this.useAnchor_ =
        options.useAnchor !== undefined ? options.useAnchor : true;

      /**
       * @private
       * @type {boolean}
       */
      this.constrainResolution_ =
        options.constrainResolution !== undefined
          ? options.constrainResolution
          : false;

      const condition = options.condition ? options.condition : always$1;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.onFocusOnly
        ? all$1(focusWithTabindex, condition)
        : condition;

      /**
       * @private
       * @type {?import("../pixel.js").Pixel}
       */
      this.lastAnchor_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.startTime_ = undefined;

      /**
       * @private
       * @type {ReturnType<typeof setTimeout>}
       */
      this.timeoutId_;

      /**
       * @private
       * @type {Mode|undefined}
       */
      this.mode_ = undefined;

      /**
       * Trackpad events separated by this delay will be considered separate
       * interactions.
       * @private
       * @type {number}
       */
      this.trackpadEventGap_ = 400;

      /**
       * @private
       * @type {ReturnType<typeof setTimeout>}
       */
      this.trackpadTimeoutId_;

      /**
       * The number of delta values per zoom level
       * @private
       * @type {number}
       */
      this.deltaPerZoom_ = 300;
    }

    /**
     * @private
     */
    endInteraction_() {
      this.trackpadTimeoutId_ = undefined;
      const map = this.getMap();
      if (!map) {
        return;
      }
      const view = map.getView();
      view.endInteraction(
        undefined,
        this.lastDelta_ ? (this.lastDelta_ > 0 ? 1 : -1) : 0,
        this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null,
      );
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
     * zooms the map.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @override
     */
    handleEvent(mapBrowserEvent) {
      if (!this.condition_(mapBrowserEvent)) {
        return true;
      }
      const type = mapBrowserEvent.type;
      if (type !== EventType.WHEEL) {
        return true;
      }

      const map = mapBrowserEvent.map;
      const wheelEvent = /** @type {WheelEvent} */ (
        mapBrowserEvent.originalEvent
      );
      wheelEvent.preventDefault();

      if (this.useAnchor_) {
        this.lastAnchor_ = mapBrowserEvent.pixel;
      }

      // Delta normalisation inspired by
      // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
      let delta;
      if (mapBrowserEvent.type == EventType.WHEEL) {
        delta = wheelEvent.deltaY;
        if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {
          delta *= 40;
        }
      }

      if (delta === 0) {
        return false;
      }
      this.lastDelta_ = delta;

      const now = Date.now();

      if (this.startTime_ === undefined) {
        this.startTime_ = now;
      }

      if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {
        this.mode_ = Math.abs(delta) < 4 ? 'trackpad' : 'wheel';
      }

      const view = map.getView();
      if (
        this.mode_ === 'trackpad' &&
        !(view.getConstrainResolution() || this.constrainResolution_)
      ) {
        if (this.trackpadTimeoutId_) {
          clearTimeout(this.trackpadTimeoutId_);
        } else {
          if (view.getAnimating()) {
            view.cancelAnimations();
          }
          view.beginInteraction();
        }
        this.trackpadTimeoutId_ = setTimeout(
          this.endInteraction_.bind(this),
          this.timeout_,
        );
        view.adjustZoom(
          -delta / this.deltaPerZoom_,
          this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null,
        );
        this.startTime_ = now;
        return false;
      }

      this.totalDelta_ += delta;

      const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);

      clearTimeout(this.timeoutId_);
      this.timeoutId_ = setTimeout(
        this.handleWheelZoom_.bind(this, map),
        timeLeft,
      );

      return false;
    }

    /**
     * @private
     * @param {import("../Map.js").default} map Map.
     */
    handleWheelZoom_(map) {
      const view = map.getView();
      if (view.getAnimating()) {
        view.cancelAnimations();
      }
      let delta =
        -clamp(
          this.totalDelta_,
          -this.maxDelta_ * this.deltaPerZoom_,
          this.maxDelta_ * this.deltaPerZoom_,
        ) / this.deltaPerZoom_;
      if (view.getConstrainResolution() || this.constrainResolution_) {
        // view has a zoom constraint, zoom by 1
        delta = delta ? (delta > 0 ? 1 : -1) : 0;
      }
      zoomByDelta(
        view,
        delta,
        this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null,
        this.duration_,
      );

      this.mode_ = undefined;
      this.totalDelta_ = 0;
      this.lastAnchor_ = null;
      this.startTime_ = undefined;
      this.timeoutId_ = undefined;
    }

    /**
     * Enable or disable using the mouse's location as an anchor when zooming
     * @param {boolean} useAnchor true to zoom to the mouse's location, false
     * to zoom to the center of the map
     * @api
     */
    setMouseAnchor(useAnchor) {
      this.useAnchor_ = useAnchor;
      if (!useAnchor) {
        this.lastAnchor_ = null;
      }
    }
  }

  /**
   * @module ol/interaction/PinchRotate
   */

  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] The duration of the animation in
   * milliseconds.
   * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
   */

  /**
   * @classdesc
   * Allows the user to rotate the map by twisting with two fingers
   * on a touch screen.
   * @api
   */
  class PinchRotate extends PointerInteraction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (
        options
      );

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.rotating_ = false;

      /**
       * @private
       * @type {number}
       */
      this.rotationDelta_ = 0.0;

      /**
       * @private
       * @type {number}
       */
      this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @override
     */
    handleDragEvent(mapBrowserEvent) {
      let rotationDelta = 0.0;

      const touch0 = this.targetPointers[0];
      const touch1 = this.targetPointers[1];

      // angle between touches
      const angle = Math.atan2(
        touch1.clientY - touch0.clientY,
        touch1.clientX - touch0.clientX,
      );

      if (this.lastAngle_ !== undefined) {
        const delta = angle - this.lastAngle_;
        this.rotationDelta_ += delta;
        if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {
          this.rotating_ = true;
        }
        rotationDelta = delta;
      }
      this.lastAngle_ = angle;

      const map = mapBrowserEvent.map;
      const view = map.getView();
      if (view.getConstraints().rotation === disable) {
        return;
      }

      // rotate anchor point.
      // FIXME: should be the intersection point between the lines:
      //     touch0,touch1 and previousTouch0,previousTouch1
      this.anchor_ = map.getCoordinateFromPixelInternal(
        map.getEventPixel(centroid(this.targetPointers)),
      );

      // rotate
      if (this.rotating_) {
        map.render();
        view.adjustRotationInternal(rotationDelta, this.anchor_);
      }
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleUpEvent(mapBrowserEvent) {
      if (this.targetPointers.length < 2) {
        const map = mapBrowserEvent.map;
        const view = map.getView();
        view.endInteraction(this.duration_);
        return false;
      }
      return true;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleDownEvent(mapBrowserEvent) {
      if (this.targetPointers.length >= 2) {
        const map = mapBrowserEvent.map;
        this.anchor_ = null;
        this.lastAngle_ = undefined;
        this.rotating_ = false;
        this.rotationDelta_ = 0.0;
        if (!this.handlingDownUpSequence) {
          map.getView().beginInteraction();
        }
        return true;
      }
      return false;
    }
  }

  /**
   * @module ol/interaction/PinchZoom
   */

  /**
   * @typedef {Object} Options
   * @property {number} [duration=400] Animation duration in milliseconds.
   */

  /**
   * @classdesc
   * Allows the user to zoom the map by pinching with two fingers
   * on a touch screen.
   * @api
   */
  class PinchZoom extends PointerInteraction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (
        options
      );

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 400;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastDistance_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.lastScaleDelta_ = 1;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @override
     */
    handleDragEvent(mapBrowserEvent) {
      let scaleDelta = 1.0;

      const touch0 = this.targetPointers[0];
      const touch1 = this.targetPointers[1];
      const dx = touch0.clientX - touch1.clientX;
      const dy = touch0.clientY - touch1.clientY;

      // distance between touches
      const distance = Math.sqrt(dx * dx + dy * dy);

      if (this.lastDistance_ !== undefined) {
        scaleDelta = this.lastDistance_ / distance;
      }
      this.lastDistance_ = distance;

      const map = mapBrowserEvent.map;
      const view = map.getView();

      if (scaleDelta != 1.0) {
        this.lastScaleDelta_ = scaleDelta;
      }

      // scale anchor point.
      this.anchor_ = map.getCoordinateFromPixelInternal(
        map.getEventPixel(centroid(this.targetPointers)),
      );

      // scale, bypass the resolution constraint
      map.render();
      view.adjustResolutionInternal(scaleDelta, this.anchor_);
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleUpEvent(mapBrowserEvent) {
      if (this.targetPointers.length < 2) {
        const map = mapBrowserEvent.map;
        const view = map.getView();
        const direction = this.lastScaleDelta_ > 1 ? 1 : -1;
        view.endInteraction(this.duration_, direction);
        return false;
      }
      return true;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleDownEvent(mapBrowserEvent) {
      if (this.targetPointers.length >= 2) {
        const map = mapBrowserEvent.map;
        this.anchor_ = null;
        this.lastDistance_ = undefined;
        this.lastScaleDelta_ = 1;
        if (!this.handlingDownUpSequence) {
          map.getView().beginInteraction();
        }
        return true;
      }
      return false;
    }
  }

  /**
   * @module ol/interaction/defaults
   */

  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
   * desired.
   * @property {boolean} [onFocusOnly=false] Interact only when the map has the
   * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is
   * useful when page scroll is desired for maps that do not have the browser's
   * focus.
   * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
   * desired.
   * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
   * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
   * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
   * @property {boolean} [dragPan=true] Whether drag pan is desired.
   * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
   * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
   * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.
   * @property {number} [zoomDuration] Duration of the zoom animation in
   * milliseconds.
   */

  /**
   * Set of interactions included in maps by default. Specific interactions can be
   * excluded by setting the appropriate option to false in the constructor
   * options, but the order of the interactions is fixed.  If you want to specify
   * a different order for interactions, you will need to create your own
   * {@link module:ol/interaction/Interaction~Interaction} instances and insert
   * them into a {@link module:ol/Collection~Collection} in the order you want
   * before creating your {@link module:ol/Map~Map} instance. Changing the order can
   * be of interest if the event propagation needs to be stopped at a point.
   * The default set of interactions, in sequence, is:
   * {@link module:ol/interaction/DragRotate~DragRotate}
   * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
   * {@link module:ol/interaction/DragPan~DragPan}
   * {@link module:ol/interaction/PinchRotate~PinchRotate}
   * {@link module:ol/interaction/PinchZoom~PinchZoom}
   * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
   * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
   * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
   * {@link module:ol/interaction/DragZoom~DragZoom}
   *
   * @param {DefaultsOptions} [options] Defaults options.
   * @return {Collection<import("./Interaction.js").default>}
   * A collection of interactions to be used with the {@link module:ol/Map~Map}
   * constructor's `interactions` option.
   * @api
   */
  function defaults(options) {
    options = options ? options : {};

    /** @type {Collection<import("./Interaction.js").default>} */
    const interactions = new Collection();

    const kinetic = new Kinetic(-5e-3, 0.05, 100);

    const altShiftDragRotate =
      options.altShiftDragRotate !== undefined
        ? options.altShiftDragRotate
        : true;
    if (altShiftDragRotate) {
      interactions.push(new DragRotate());
    }

    const doubleClickZoom =
      options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;
    if (doubleClickZoom) {
      interactions.push(
        new DoubleClickZoom({
          delta: options.zoomDelta,
          duration: options.zoomDuration,
        }),
      );
    }

    const dragPan = options.dragPan !== undefined ? options.dragPan : true;
    if (dragPan) {
      interactions.push(
        new DragPan({
          onFocusOnly: options.onFocusOnly,
          kinetic: kinetic,
        }),
      );
    }

    const pinchRotate =
      options.pinchRotate !== undefined ? options.pinchRotate : true;
    if (pinchRotate) {
      interactions.push(new PinchRotate());
    }

    const pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
    if (pinchZoom) {
      interactions.push(
        new PinchZoom({
          duration: options.zoomDuration,
        }),
      );
    }

    const keyboard = options.keyboard !== undefined ? options.keyboard : true;
    if (keyboard) {
      interactions.push(new KeyboardPan());
      interactions.push(
        new KeyboardZoom({
          delta: options.zoomDelta,
          duration: options.zoomDuration,
        }),
      );
    }

    const mouseWheelZoom =
      options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;
    if (mouseWheelZoom) {
      interactions.push(
        new MouseWheelZoom({
          onFocusOnly: options.onFocusOnly,
          duration: options.zoomDuration,
        }),
      );
    }

    const shiftDragZoom =
      options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;
    if (shiftDragZoom) {
      interactions.push(
        new DragZoom({
          duration: options.zoomDuration,
        }),
      );
    }

    return interactions;
  }

  /**
   * @module ol/layer/Property
   */

  /**
   * @enum {string}
   */
  var LayerProperty = {
    OPACITY: 'opacity',
    VISIBLE: 'visible',
    EXTENT: 'extent',
    Z_INDEX: 'zIndex',
    MAX_RESOLUTION: 'maxResolution',
    MIN_RESOLUTION: 'minResolution',
    MAX_ZOOM: 'maxZoom',
    MIN_ZOOM: 'minZoom',
    SOURCE: 'source',
    MAP: 'map',
  };

  /**
   * @module ol/layer/Base
   */

  /**
   * A css color, or a function called with a view resolution returning a css color.
   *
   * @typedef {string|function(number):string} BackgroundColor
   * @api
   */

  /**
   * @typedef {import("../ObjectEventType").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|
   *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<BaseLayerObjectEventTypes, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number | undefined} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background
   * will be rendered.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in
   * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so
   * is observable, and has get/set accessors.
   *
   * @api
   */
  class BaseLayer extends BaseObject {
    /**
     * @param {Options} options Layer options.
     */
    constructor(options) {
      super();

      /***
       * @type {BaseLayerOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {BaseLayerOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {BaseLayerOnSignature<void>}
       */
      this.un;

      /**
       * @type {BackgroundColor|false}
       * @private
       */
      this.background_ = options.background;

      /**
       * @type {Object<string, *>}
       */
      const properties = Object.assign({}, options);
      if (typeof options.properties === 'object') {
        delete properties.properties;
        Object.assign(properties, options.properties);
      }

      properties[LayerProperty.OPACITY] =
        options.opacity !== undefined ? options.opacity : 1;
      assert$1(
        typeof properties[LayerProperty.OPACITY] === 'number',
        'Layer opacity must be a number',
      );

      properties[LayerProperty.VISIBLE] =
        options.visible !== undefined ? options.visible : true;
      properties[LayerProperty.Z_INDEX] = options.zIndex;
      properties[LayerProperty.MAX_RESOLUTION] =
        options.maxResolution !== undefined ? options.maxResolution : Infinity;
      properties[LayerProperty.MIN_RESOLUTION] =
        options.minResolution !== undefined ? options.minResolution : 0;
      properties[LayerProperty.MIN_ZOOM] =
        options.minZoom !== undefined ? options.minZoom : -Infinity;
      properties[LayerProperty.MAX_ZOOM] =
        options.maxZoom !== undefined ? options.maxZoom : Infinity;

      /**
       * @type {string}
       * @private
       */
      this.className_ =
        properties.className !== undefined ? properties.className : 'ol-layer';
      delete properties.className;

      this.setProperties(properties);

      /**
       * @type {import("./Layer.js").State}
       * @private
       */
      this.state_ = null;
    }

    /**
     * Get the background for this layer.
     * @return {BackgroundColor|false} Layer background.
     */
    getBackground() {
      return this.background_;
    }

    /**
     * @return {string} CSS class name.
     */
    getClassName() {
      return this.className_;
    }

    /**
     * This method is not meant to be called by layers or layer renderers because the state
     * is incorrect if the layer is included in a layer group.
     *
     * @param {boolean} [managed] Layer is managed.
     * @return {import("./Layer.js").State} Layer state.
     */
    getLayerState(managed) {
      /** @type {import("./Layer.js").State} */
      const state =
        this.state_ ||
        /** @type {?} */ ({
          layer: this,
          managed: managed === undefined ? true : managed,
        });
      const zIndex = this.getZIndex();
      state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);
      state.visible = this.getVisible();
      state.extent = this.getExtent();
      state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;
      state.maxResolution = this.getMaxResolution();
      state.minResolution = Math.max(this.getMinResolution(), 0);
      state.minZoom = this.getMinZoom();
      state.maxZoom = this.getMaxZoom();
      this.state_ = state;

      return state;
    }

    /**
     * @abstract
     * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be
     *     modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     */
    getLayersArray(array) {
      return abstract();
    }

    /**
     * @abstract
     * @param {Array<import("./Layer.js").State>} [states] Optional list of layer
     *     states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     */
    getLayerStatesArray(states) {
      return abstract();
    }

    /**
     * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
     * will be visible regardless of extent.
     * @return {import("../extent.js").Extent|undefined} The layer extent.
     * @observable
     * @api
     */
    getExtent() {
      return /** @type {import("../extent.js").Extent|undefined} */ (
        this.get(LayerProperty.EXTENT)
      );
    }

    /**
     * Return the maximum resolution of the layer. Returns Infinity if
     * the layer has no maximum resolution set.
     * @return {number} The maximum resolution of the layer.
     * @observable
     * @api
     */
    getMaxResolution() {
      return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));
    }

    /**
     * Return the minimum resolution of the layer. Returns 0 if
     * the layer has no minimum resolution set.
     * @return {number} The minimum resolution of the layer.
     * @observable
     * @api
     */
    getMinResolution() {
      return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));
    }

    /**
     * Return the minimum zoom level of the layer. Returns -Infinity if
     * the layer has no minimum zoom set.
     * @return {number} The minimum zoom level of the layer.
     * @observable
     * @api
     */
    getMinZoom() {
      return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));
    }

    /**
     * Return the maximum zoom level of the layer. Returns Infinity if
     * the layer has no maximum zoom set.
     * @return {number} The maximum zoom level of the layer.
     * @observable
     * @api
     */
    getMaxZoom() {
      return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));
    }

    /**
     * Return the opacity of the layer (between 0 and 1).
     * @return {number} The opacity of the layer.
     * @observable
     * @api
     */
    getOpacity() {
      return /** @type {number} */ (this.get(LayerProperty.OPACITY));
    }

    /**
     * @abstract
     * @return {import("../source/Source.js").State} Source state.
     */
    getSourceState() {
      return abstract();
    }

    /**
     * Return the value of this layer's `visible` property. To find out whether the layer
     * is visible on a map, use `isVisible()` instead.
     * @return {boolean} The value of the `visible` property of the layer.
     * @observable
     * @api
     */
    getVisible() {
      return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));
    }

    /**
     * Return the Z-index of the layer, which is used to order layers before
     * rendering. Returns undefined if the layer is unmanaged.
     * @return {number|undefined} The Z-index of the layer.
     * @observable
     * @api
     */
    getZIndex() {
      return /** @type {number|undefined} */ (this.get(LayerProperty.Z_INDEX));
    }

    /**
     * Sets the background color.
     * @param {BackgroundColor} [background] Background color.
     */
    setBackground(background) {
      this.background_ = background;
      this.changed();
    }

    /**
     * Set the extent at which the layer is visible.  If `undefined`, the layer
     * will be visible at all extents.
     * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
     * @observable
     * @api
     */
    setExtent(extent) {
      this.set(LayerProperty.EXTENT, extent);
    }

    /**
     * Set the maximum resolution at which the layer is visible.
     * @param {number} maxResolution The maximum resolution of the layer.
     * @observable
     * @api
     */
    setMaxResolution(maxResolution) {
      this.set(LayerProperty.MAX_RESOLUTION, maxResolution);
    }

    /**
     * Set the minimum resolution at which the layer is visible.
     * @param {number} minResolution The minimum resolution of the layer.
     * @observable
     * @api
     */
    setMinResolution(minResolution) {
      this.set(LayerProperty.MIN_RESOLUTION, minResolution);
    }

    /**
     * Set the maximum zoom (exclusive) at which the layer is visible.
     * Note that the zoom levels for layer visibility are based on the
     * view zoom level, which may be different from a tile source zoom level.
     * @param {number} maxZoom The maximum zoom of the layer.
     * @observable
     * @api
     */
    setMaxZoom(maxZoom) {
      this.set(LayerProperty.MAX_ZOOM, maxZoom);
    }

    /**
     * Set the minimum zoom (inclusive) at which the layer is visible.
     * Note that the zoom levels for layer visibility are based on the
     * view zoom level, which may be different from a tile source zoom level.
     * @param {number} minZoom The minimum zoom of the layer.
     * @observable
     * @api
     */
    setMinZoom(minZoom) {
      this.set(LayerProperty.MIN_ZOOM, minZoom);
    }

    /**
     * Set the opacity of the layer, allowed values range from 0 to 1.
     * @param {number} opacity The opacity of the layer.
     * @observable
     * @api
     */
    setOpacity(opacity) {
      assert$1(typeof opacity === 'number', 'Layer opacity must be a number');
      this.set(LayerProperty.OPACITY, opacity);
    }

    /**
     * Set the visibility of the layer (`true` or `false`).
     * @param {boolean} visible The visibility of the layer.
     * @observable
     * @api
     */
    setVisible(visible) {
      this.set(LayerProperty.VISIBLE, visible);
    }

    /**
     * Set Z-index of the layer, which is used to order layers before rendering.
     * The default Z-index is 0.
     * @param {number} zindex The z-index of the layer.
     * @observable
     * @api
     */
    setZIndex(zindex) {
      this.set(LayerProperty.Z_INDEX, zindex);
    }

    /**
     * Clean up.
     * @override
     */
    disposeInternal() {
      if (this.state_) {
        this.state_.layer = null;
        this.state_ = null;
      }
      super.disposeInternal();
    }
  }

  /**
   * @module ol/layer/Group
   */

  /**
   * @typedef {'addlayer'|'removelayer'} GroupEventType
   */

  /**
   * @classdesc
   * A layer group triggers 'addlayer' and 'removelayer' events when layers are added to or removed from
   * the group or one of its child groups.  When a layer group is added to or removed from another layer group,
   * a single event will be triggered (instead of one per layer in the group added or removed).
   */
  class GroupEvent extends BaseEvent {
    /**
     * @param {GroupEventType} type The event type.
     * @param {BaseLayer} layer The layer.
     */
    constructor(type, layer) {
      super(type);

      /**
       * The added or removed layer.
       * @type {BaseLayer}
       * @api
       */
      this.layer = layer;
    }
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
   *     'change:layers', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {Array<import("./Base.js").default>|Collection<import("./Base.js").default>} [layers] Child layers.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @enum {string}
   * @private
   */
  const Property$2 = {
    LAYERS: 'layers',
  };

  /**
   * @classdesc
   * A {@link module:ol/Collection~Collection} of layers that are handled together.
   *
   * A generic `change` event is triggered when the group/Collection changes.
   *
   * @api
   */
  class LayerGroup extends BaseLayer {
    /**
     * @param {Options} [options] Layer options.
     */
    constructor(options) {
      options = options || {};
      const baseOptions = /** @type {Options} */ (Object.assign({}, options));
      delete baseOptions.layers;

      let layers = options.layers;

      super(baseOptions);

      /***
       * @type {GroupOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {GroupOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {GroupOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.layersListenerKeys_ = [];

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").EventsKey>>}
       */
      this.listenerKeys_ = {};

      this.addChangeListener(Property$2.LAYERS, this.handleLayersChanged_);

      if (layers) {
        if (Array.isArray(layers)) {
          layers = new Collection(layers.slice(), {unique: true});
        } else {
          assert$1(
            typeof (/** @type {?} */ (layers).getArray) === 'function',
            'Expected `layers` to be an array or a `Collection`',
          );
        }
      } else {
        layers = new Collection(undefined, {unique: true});
      }

      this.setLayers(layers);
    }

    /**
     * @private
     */
    handleLayerChange_() {
      this.changed();
    }

    /**
     * @private
     */
    handleLayersChanged_() {
      this.layersListenerKeys_.forEach(unlistenByKey);
      this.layersListenerKeys_.length = 0;

      const layers = this.getLayers();
      this.layersListenerKeys_.push(
        listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this),
        listen(
          layers,
          CollectionEventType.REMOVE,
          this.handleLayersRemove_,
          this,
        ),
      );

      for (const id in this.listenerKeys_) {
        this.listenerKeys_[id].forEach(unlistenByKey);
      }
      clear$2(this.listenerKeys_);

      const layersArray = layers.getArray();
      for (let i = 0, ii = layersArray.length; i < ii; i++) {
        const layer = layersArray[i];
        this.registerLayerListeners_(layer);
        this.dispatchEvent(new GroupEvent('addlayer', layer));
      }
      this.changed();
    }

    /**
     * @param {BaseLayer} layer The layer.
     */
    registerLayerListeners_(layer) {
      const listenerKeys = [
        listen(
          layer,
          ObjectEventType.PROPERTYCHANGE,
          this.handleLayerChange_,
          this,
        ),
        listen(layer, EventType.CHANGE, this.handleLayerChange_, this),
      ];

      if (layer instanceof LayerGroup) {
        listenerKeys.push(
          listen(layer, 'addlayer', this.handleLayerGroupAdd_, this),
          listen(layer, 'removelayer', this.handleLayerGroupRemove_, this),
        );
      }

      this.listenerKeys_[getUid(layer)] = listenerKeys;
    }

    /**
     * @param {GroupEvent} event The layer group event.
     */
    handleLayerGroupAdd_(event) {
      this.dispatchEvent(new GroupEvent('addlayer', event.layer));
    }

    /**
     * @param {GroupEvent} event The layer group event.
     */
    handleLayerGroupRemove_(event) {
      this.dispatchEvent(new GroupEvent('removelayer', event.layer));
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<import("./Base.js").default>} collectionEvent CollectionEvent.
     * @private
     */
    handleLayersAdd_(collectionEvent) {
      const layer = collectionEvent.element;
      this.registerLayerListeners_(layer);
      this.dispatchEvent(new GroupEvent('addlayer', layer));
      this.changed();
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<import("./Base.js").default>} collectionEvent CollectionEvent.
     * @private
     */
    handleLayersRemove_(collectionEvent) {
      const layer = collectionEvent.element;
      const key = getUid(layer);
      this.listenerKeys_[key].forEach(unlistenByKey);
      delete this.listenerKeys_[key];
      this.dispatchEvent(new GroupEvent('removelayer', layer));
      this.changed();
    }

    /**
     * Returns the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @return {!Collection<import("./Base.js").default>} Collection of
     *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.
     * @observable
     * @api
     */
    getLayers() {
      return /** @type {!Collection<import("./Base.js").default>} */ (
        this.get(Property$2.LAYERS)
      );
    }

    /**
     * Set the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @param {!Collection<import("./Base.js").default>} layers Collection of
     *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.
     * @observable
     * @api
     */
    setLayers(layers) {
      const collection = this.getLayers();
      if (collection) {
        const currentLayers = collection.getArray();
        for (let i = 0, ii = currentLayers.length; i < ii; ++i) {
          this.dispatchEvent(new GroupEvent('removelayer', currentLayers[i]));
        }
      }

      this.set(Property$2.LAYERS, layers);
    }

    /**
     * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     * @override
     */
    getLayersArray(array) {
      array = array !== undefined ? array : [];
      this.getLayers().forEach(function (layer) {
        layer.getLayersArray(array);
      });
      return array;
    }

    /**
     * Get the layer states list and use this groups z-index as the default
     * for all layers in this and nested groups, if it is unset at this point.
     * If dest is not provided and this group's z-index is undefined
     * 0 is used a the default z-index.
     * @param {Array<import("./Layer.js").State>} [dest] Optional list
     * of layer states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     * @override
     */
    getLayerStatesArray(dest) {
      const states = dest !== undefined ? dest : [];
      const pos = states.length;

      this.getLayers().forEach(function (layer) {
        layer.getLayerStatesArray(states);
      });

      const ownLayerState = this.getLayerState();
      let defaultZIndex = ownLayerState.zIndex;
      if (!dest && ownLayerState.zIndex === undefined) {
        defaultZIndex = 0;
      }
      for (let i = pos, ii = states.length; i < ii; i++) {
        const layerState = states[i];
        layerState.opacity *= ownLayerState.opacity;
        layerState.visible = layerState.visible && ownLayerState.visible;
        layerState.maxResolution = Math.min(
          layerState.maxResolution,
          ownLayerState.maxResolution,
        );
        layerState.minResolution = Math.max(
          layerState.minResolution,
          ownLayerState.minResolution,
        );
        layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);
        layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);
        if (ownLayerState.extent !== undefined) {
          if (layerState.extent !== undefined) {
            layerState.extent = getIntersection(
              layerState.extent,
              ownLayerState.extent,
            );
          } else {
            layerState.extent = ownLayerState.extent;
          }
        }
        if (layerState.zIndex === undefined) {
          layerState.zIndex = defaultZIndex;
        }
      }

      return states;
    }

    /**
     * @return {import("../source/Source.js").State} Source state.
     * @override
     */
    getSourceState() {
      return 'ready';
    }
  }

  /**
   * @module ol/render/EventType
   */

  /**
   * @enum {string}
   */
  var RenderEventType = {
    /**
     * Triggered before a layer is rendered.
     * @event module:ol/render/Event~RenderEvent#prerender
     * @api
     */
    PRERENDER: 'prerender',

    /**
     * Triggered after a layer is rendered.
     * @event module:ol/render/Event~RenderEvent#postrender
     * @api
     */
    POSTRENDER: 'postrender',

    /**
     * Triggered before layers are composed.  When dispatched by the map, the event object will not have
     * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
     * WebGL layers currently dispatch this event.
     * @event module:ol/render/Event~RenderEvent#precompose
     * @api
     */
    PRECOMPOSE: 'precompose',

    /**
     * Triggered after layers are composed.  When dispatched by the map, the event object will not have
     * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
     * WebGL layers currently dispatch this event.
     * @event module:ol/render/Event~RenderEvent#postcompose
     * @api
     */
    POSTCOMPOSE: 'postcompose',

    /**
     * Triggered when rendering is complete, i.e. all sources and tiles have
     * finished loading for the current viewport, and all tiles are faded in.
     * The event object will not have a `context` set.
     * @event module:ol/render/Event~RenderEvent#rendercomplete
     * @api
     */
    RENDERCOMPLETE: 'rendercomplete',
  };

  /**
   * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes
   */

  /**
   * @typedef {'postrender'|'prerender'} LayerRenderEventTypes
   */

  /**
   * @module ol/layer/Layer
   */

  /**
   * @typedef {function(import("../Map.js").FrameState):HTMLElement} RenderFunction
   */

  /**
   * @typedef {'sourceready'|'change:source'} LayerEventType
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
   *     LayerEventType, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<import("../render/EventType").LayerRenderEventTypes, import("../render/Event").default, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|LayerEventType|
   *     import("../render/EventType").LayerRenderEventTypes, Return>} LayerOnSignature
   */

  /**
   * @template {import("../source/Source.js").default} [SourceType=import("../source/Source.js").default]
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,
   * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after
   * construction.
   * @property {import("../Map.js").default|null} [map] Map.
   * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an
   * HTML element. Will overwrite the default rendering for the layer.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @typedef {Object} State
   * @property {import("./Layer.js").default} layer Layer.
   * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.
   * @property {boolean} visible Visible.
   * @property {boolean} managed Managed.
   * @property {import("../extent.js").Extent} [extent] Extent.
   * @property {number} zIndex ZIndex.
   * @property {number} maxResolution Maximum resolution.
   * @property {number} minResolution Minimum resolution.
   * @property {number} minZoom Minimum zoom.
   * @property {number} maxZoom Maximum zoom.
   */

  /**
   * @classdesc
   * Base class from which all layer types are derived. This should only be instantiated
   * in the case where a custom layer is added to the map with a custom `render` function.
   * Such a function can be specified in the `options` object, and is expected to return an HTML element.
   *
   * A visual representation of raster or vector map data.
   * Layers group together those properties that pertain to how the data is to be
   * displayed, irrespective of the source of that data.
   *
   * Layers are usually added to a map with [map.addLayer()]{@link import("../Map.js").default#addLayer}.
   * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers
   * internally. These unmanaged layers are associated with the map using
   * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.
   *
   * A generic `change` event is fired when the state of the source changes.
   * A `sourceready` event is fired when the layer's source is ready.
   *
   * @fires import("../render/Event.js").RenderEvent#prerender
   * @fires import("../render/Event.js").RenderEvent#postrender
   * @fires import("../events/Event.js").BaseEvent#sourceready
   *
   * @template {import("../source/Source.js").default} [SourceType=import("../source/Source.js").default]
   * @template {import("../renderer/Layer.js").default} [RendererType=import("../renderer/Layer.js").default]
   * @api
   */
  class Layer extends BaseLayer {
    /**
     * @param {Options<SourceType>} options Layer options.
     */
    constructor(options) {
      const baseOptions = Object.assign({}, options);
      delete baseOptions.source;

      super(baseOptions);

      /***
       * @type {LayerOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {LayerOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {LayerOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.mapPrecomposeKey_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.mapRenderKey_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.sourceChangeKey_ = null;

      /**
       * @private
       * @type {RendererType}
       */
      this.renderer_ = null;

      /**
       * @private
       * @type {boolean}
       */
      this.sourceReady_ = false;

      /**
       * @protected
       * @type {boolean}
       */
      this.rendered = false;

      // Overwrite default render method with a custom one
      if (options.render) {
        this.render = options.render;
      }

      if (options.map) {
        this.setMap(options.map);
      }

      this.addChangeListener(
        LayerProperty.SOURCE,
        this.handleSourcePropertyChange_,
      );

      const source = options.source
        ? /** @type {SourceType} */ (options.source)
        : null;
      this.setSource(source);
    }

    /**
     * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     * @override
     */
    getLayersArray(array) {
      array = array ? array : [];
      array.push(this);
      return array;
    }

    /**
     * @param {Array<import("./Layer.js").State>} [states] Optional list of layer states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     * @override
     */
    getLayerStatesArray(states) {
      states = states ? states : [];
      states.push(this.getLayerState());
      return states;
    }

    /**
     * Get the layer source.
     * @return {SourceType|null} The layer source (or `null` if not yet set).
     * @observable
     * @api
     */
    getSource() {
      return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;
    }

    /**
     * @return {SourceType|null} The source being rendered.
     */
    getRenderSource() {
      return this.getSource();
    }

    /**
     * @return {import("../source/Source.js").State} Source state.
     * @override
     */
    getSourceState() {
      const source = this.getSource();
      return !source ? 'undefined' : source.getState();
    }

    /**
     * @private
     */
    handleSourceChange_() {
      this.changed();
      if (this.sourceReady_ || this.getSource().getState() !== 'ready') {
        return;
      }
      this.sourceReady_ = true;
      this.dispatchEvent('sourceready');
    }

    /**
     * @private
     */
    handleSourcePropertyChange_() {
      if (this.sourceChangeKey_) {
        unlistenByKey(this.sourceChangeKey_);
        this.sourceChangeKey_ = null;
      }
      this.sourceReady_ = false;
      const source = this.getSource();
      if (source) {
        this.sourceChangeKey_ = listen(
          source,
          EventType.CHANGE,
          this.handleSourceChange_,
          this,
        );
        if (source.getState() === 'ready') {
          this.sourceReady_ = true;
          setTimeout(() => {
            this.dispatchEvent('sourceready');
          }, 0);
        }
        this.clearRenderer();
      }
      this.changed();
    }

    /**
     * @param {import("../pixel").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with
     * an array of features.
     */
    getFeatures(pixel) {
      if (!this.renderer_) {
        return Promise.resolve([]);
      }
      return this.renderer_.getFeatures(pixel);
    }

    /**
     * @param {import("../pixel").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
     */
    getData(pixel) {
      if (!this.renderer_ || !this.rendered) {
        return null;
      }
      return this.renderer_.getData(pixel);
    }

    /**
     * The layer is visible on the map view, i.e. within its min/max resolution or zoom and
     * extent, not set to `visible: false`, and not inside a layer group that is set
     * to `visible: false`.
     * @param {View|import("../View.js").ViewStateLayerStateExtent} [view] View or {@link import("../Map.js").FrameState}.
     * Only required when the layer is not added to a map.
     * @return {boolean} The layer is visible in the map view.
     * @api
     */
    isVisible(view) {
      let frameState;
      const map = this.getMapInternal();
      if (!view && map) {
        view = map.getView();
      }
      if (view instanceof View) {
        frameState = {
          viewState: view.getState(),
          extent: view.calculateExtent(),
        };
      } else {
        frameState = view;
      }
      if (!frameState.layerStatesArray && map) {
        frameState.layerStatesArray = map.getLayerGroup().getLayerStatesArray();
      }
      let layerState;
      if (frameState.layerStatesArray) {
        layerState = frameState.layerStatesArray.find(
          (layerState) => layerState.layer === this,
        );
        if (!layerState) {
          return false;
        }
      } else {
        layerState = this.getLayerState();
      }

      const layerExtent = this.getExtent();

      return (
        inView(layerState, frameState.viewState) &&
        (!layerExtent || intersects$1(layerExtent, frameState.extent))
      );
    }

    /**
     * Get the attributions of the source of this layer for the given view.
     * @param {View|import("../View.js").ViewStateLayerStateExtent} [view] View or {@link import("../Map.js").FrameState}.
     * Only required when the layer is not added to a map.
     * @return {Array<string>} Attributions for this layer at the given view.
     * @api
     */
    getAttributions(view) {
      if (!this.isVisible(view)) {
        return [];
      }
      const getAttributions = this.getSource()?.getAttributions();
      if (!getAttributions) {
        return [];
      }
      const frameState =
        view instanceof View ? view.getViewStateAndExtent() : view;
      let attributions = getAttributions(frameState);
      if (!Array.isArray(attributions)) {
        attributions = [attributions];
      }
      return attributions;
    }

    /**
     * In charge to manage the rendering of the layer. One layer type is
     * bounded with one layer renderer.
     * @param {?import("../Map.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target which the renderer may (but need not) use
     * for rendering its content.
     * @return {HTMLElement|null} The rendered element.
     */
    render(frameState, target) {
      const layerRenderer = this.getRenderer();

      if (layerRenderer.prepareFrame(frameState)) {
        this.rendered = true;
        return layerRenderer.renderFrame(frameState, target);
      }
      return null;
    }

    /**
     * Called when a layer is not visible during a map render.
     */
    unrender() {
      this.rendered = false;
    }

    /** @return {string} Declutter */
    getDeclutter() {
      return undefined;
    }

    /**
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @param {import("../layer/Layer.js").State} layerState Layer state.
     */
    renderDeclutter(frameState, layerState) {}

    /**
     * When the renderer follows a layout -> render approach, do the final rendering here.
     * @param {import('../Map.js').FrameState} frameState Frame state
     */
    renderDeferred(frameState) {
      const layerRenderer = this.getRenderer();
      if (!layerRenderer) {
        return;
      }
      layerRenderer.renderDeferred(frameState);
    }

    /**
     * For use inside the library only.
     * @param {import("../Map.js").default|null} map Map.
     */
    setMapInternal(map) {
      if (!map) {
        this.unrender();
      }
      this.set(LayerProperty.MAP, map);
    }

    /**
     * For use inside the library only.
     * @return {import("../Map.js").default|null} Map.
     */
    getMapInternal() {
      return this.get(LayerProperty.MAP);
    }

    /**
     * Sets the layer to be rendered on top of other layers on a map. The map will
     * not manage this layer in its layers collection. This
     * is useful for temporary layers. To remove an unmanaged layer from the map,
     * use `#setMap(null)`.
     *
     * To add the layer to a map and have it managed by the map, use
     * {@link module:ol/Map~Map#addLayer} instead.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     */
    setMap(map) {
      if (this.mapPrecomposeKey_) {
        unlistenByKey(this.mapPrecomposeKey_);
        this.mapPrecomposeKey_ = null;
      }
      if (!map) {
        this.changed();
      }
      if (this.mapRenderKey_) {
        unlistenByKey(this.mapRenderKey_);
        this.mapRenderKey_ = null;
      }
      if (map) {
        this.mapPrecomposeKey_ = listen(
          map,
          RenderEventType.PRECOMPOSE,
          this.handlePrecompose_,
          this,
        );
        this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);
        this.changed();
      }
    }

    /**
     * @param {import("../events/Event.js").default} renderEvent Render event
     * @private
     */
    handlePrecompose_(renderEvent) {
      const layerStatesArray =
        /** @type {import("../render/Event.js").default} */ (renderEvent)
          .frameState.layerStatesArray;
      const layerState = this.getLayerState(false);
      assert$1(
        !layerStatesArray.some(
          (arrayLayerState) => arrayLayerState.layer === layerState.layer,
        ),
        'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.',
      );
      layerStatesArray.push(layerState);
    }

    /**
     * Set the layer source.
     * @param {SourceType|null} source The layer source.
     * @observable
     * @api
     */
    setSource(source) {
      this.set(LayerProperty.SOURCE, source);
    }

    /**
     * Get the renderer for this layer.
     * @return {RendererType|null} The layer renderer.
     */
    getRenderer() {
      if (!this.renderer_) {
        this.renderer_ = this.createRenderer();
      }
      return this.renderer_;
    }

    /**
     * @return {boolean} The layer has a renderer.
     */
    hasRenderer() {
      return !!this.renderer_;
    }

    /**
     * Create a renderer for this layer.
     * @return {RendererType} A layer renderer.
     * @protected
     */
    createRenderer() {
      return null;
    }

    /**
     * This will clear the renderer so that a new one can be created next time it is needed
     */
    clearRenderer() {
      if (this.renderer_) {
        this.renderer_.dispose();
        delete this.renderer_;
      }
    }

    /**
     * Clean up.
     * @override
     */
    disposeInternal() {
      this.clearRenderer();
      this.setSource(null);
      super.disposeInternal();
    }
  }

  /**
   * Return `true` if the layer is visible and if the provided view state
   * has resolution and zoom levels that are in range of the layer's min/max.
   * @param {State} layerState Layer state.
   * @param {import("../View.js").State} viewState View state.
   * @return {boolean} The layer is visible at the given view state.
   */
  function inView(layerState, viewState) {
    if (!layerState.visible) {
      return false;
    }
    const resolution = viewState.resolution;
    if (
      resolution < layerState.minResolution ||
      resolution >= layerState.maxResolution
    ) {
      return false;
    }
    const zoom = viewState.zoom;
    return zoom > layerState.minZoom && zoom <= layerState.maxZoom;
  }

  /**
   * Rearranges items so that all items in the [left, k] are the smallest.
   * The k-th element will have the (k - left + 1)-th smallest value in [left, right].
   *
   * @template T
   * @param {T[]} arr the array to partially sort (in place)
   * @param {number} k middle index for partial sorting (as defined above)
   * @param {number} [left=0] left index of the range to sort
   * @param {number} [right=arr.length-1] right index
   * @param {(a: T, b: T) => number} [compare = (a, b) => a - b] compare function
   */
  function quickselect(arr, k, left = 0, right = arr.length - 1, compare = defaultCompare) {

      while (right > left) {
          if (right - left > 600) {
              const n = right - left + 1;
              const m = k - left + 1;
              const z = Math.log(n);
              const s = 0.5 * Math.exp(2 * z / 3);
              const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
              const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
              const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
              quickselect(arr, k, newLeft, newRight, compare);
          }

          const t = arr[k];
          let i = left;
          /** @type {number} */
          let j = right;

          swap(arr, left, k);
          if (compare(arr[right], t) > 0) swap(arr, left, right);

          while (i < j) {
              swap(arr, i, j);
              i++;
              j--;
              while (compare(arr[i], t) < 0) i++;
              while (compare(arr[j], t) > 0) j--;
          }

          if (compare(arr[left], t) === 0) swap(arr, left, j);
          else {
              j++;
              swap(arr, j, right);
          }

          if (j <= k) left = j + 1;
          if (k <= j) right = j - 1;
      }
  }

  /**
   * @template T
   * @param {T[]} arr
   * @param {number} i
   * @param {number} j
   */
  function swap(arr, i, j) {
      const tmp = arr[i];
      arr[i] = arr[j];
      arr[j] = tmp;
  }

  /**
   * @template T
   * @param {T} a
   * @param {T} b
   * @returns {number}
   */
  function defaultCompare(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
  }

  let RBush$1 = class RBush {
      constructor(maxEntries = 9) {
          // max entries in a node is 9 by default; min node fill is 40% for best performance
          this._maxEntries = Math.max(4, maxEntries);
          this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));
          this.clear();
      }

      all() {
          return this._all(this.data, []);
      }

      search(bbox) {
          let node = this.data;
          const result = [];

          if (!intersects(bbox, node)) return result;

          const toBBox = this.toBBox;
          const nodesToSearch = [];

          while (node) {
              for (let i = 0; i < node.children.length; i++) {
                  const child = node.children[i];
                  const childBBox = node.leaf ? toBBox(child) : child;

                  if (intersects(bbox, childBBox)) {
                      if (node.leaf) result.push(child);
                      else if (contains(bbox, childBBox)) this._all(child, result);
                      else nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return result;
      }

      collides(bbox) {
          let node = this.data;

          if (!intersects(bbox, node)) return false;

          const nodesToSearch = [];
          while (node) {
              for (let i = 0; i < node.children.length; i++) {
                  const child = node.children[i];
                  const childBBox = node.leaf ? this.toBBox(child) : child;

                  if (intersects(bbox, childBBox)) {
                      if (node.leaf || contains(bbox, childBBox)) return true;
                      nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return false;
      }

      load(data) {
          if (!(data && data.length)) return this;

          if (data.length < this._minEntries) {
              for (let i = 0; i < data.length; i++) {
                  this.insert(data[i]);
              }
              return this;
          }

          // recursively build the tree with the given data from scratch using OMT algorithm
          let node = this._build(data.slice(), 0, data.length - 1, 0);

          if (!this.data.children.length) {
              // save as is if tree is empty
              this.data = node;

          } else if (this.data.height === node.height) {
              // split root if trees have the same height
              this._splitRoot(this.data, node);

          } else {
              if (this.data.height < node.height) {
                  // swap trees if inserted one is bigger
                  const tmpNode = this.data;
                  this.data = node;
                  node = tmpNode;
              }

              // insert the small tree into the large tree at appropriate level
              this._insert(node, this.data.height - node.height - 1, true);
          }

          return this;
      }

      insert(item) {
          if (item) this._insert(item, this.data.height - 1);
          return this;
      }

      clear() {
          this.data = createNode([]);
          return this;
      }

      remove(item, equalsFn) {
          if (!item) return this;

          let node = this.data;
          const bbox = this.toBBox(item);
          const path = [];
          const indexes = [];
          let i, parent, goingUp;

          // depth-first iterative tree traversal
          while (node || path.length) {

              if (!node) { // go up
                  node = path.pop();
                  parent = path[path.length - 1];
                  i = indexes.pop();
                  goingUp = true;
              }

              if (node.leaf) { // check current node
                  const index = findItem(item, node.children, equalsFn);

                  if (index !== -1) {
                      // item found, remove the item and condense tree upwards
                      node.children.splice(index, 1);
                      path.push(node);
                      this._condense(path);
                      return this;
                  }
              }

              if (!goingUp && !node.leaf && contains(node, bbox)) { // go down
                  path.push(node);
                  indexes.push(i);
                  i = 0;
                  parent = node;
                  node = node.children[0];

              } else if (parent) { // go right
                  i++;
                  node = parent.children[i];
                  goingUp = false;

              } else node = null; // nothing found
          }

          return this;
      }

      toBBox(item) { return item; }

      compareMinX(a, b) { return a.minX - b.minX; }
      compareMinY(a, b) { return a.minY - b.minY; }

      toJSON() { return this.data; }

      fromJSON(data) {
          this.data = data;
          return this;
      }

      _all(node, result) {
          const nodesToSearch = [];
          while (node) {
              if (node.leaf) result.push(...node.children);
              else nodesToSearch.push(...node.children);

              node = nodesToSearch.pop();
          }
          return result;
      }

      _build(items, left, right, height) {

          const N = right - left + 1;
          let M = this._maxEntries;
          let node;

          if (N <= M) {
              // reached leaf level; return leaf
              node = createNode(items.slice(left, right + 1));
              calcBBox(node, this.toBBox);
              return node;
          }

          if (!height) {
              // target height of the bulk-loaded tree
              height = Math.ceil(Math.log(N) / Math.log(M));

              // target number of root entries to maximize storage utilization
              M = Math.ceil(N / Math.pow(M, height - 1));
          }

          node = createNode([]);
          node.leaf = false;
          node.height = height;

          // split the items into M mostly square tiles

          const N2 = Math.ceil(N / M);
          const N1 = N2 * Math.ceil(Math.sqrt(M));

          multiSelect(items, left, right, N1, this.compareMinX);

          for (let i = left; i <= right; i += N1) {

              const right2 = Math.min(i + N1 - 1, right);

              multiSelect(items, i, right2, N2, this.compareMinY);

              for (let j = i; j <= right2; j += N2) {

                  const right3 = Math.min(j + N2 - 1, right2);

                  // pack each entry recursively
                  node.children.push(this._build(items, j, right3, height - 1));
              }
          }

          calcBBox(node, this.toBBox);

          return node;
      }

      _chooseSubtree(bbox, node, level, path) {
          while (true) {
              path.push(node);

              if (node.leaf || path.length - 1 === level) break;

              let minArea = Infinity;
              let minEnlargement = Infinity;
              let targetNode;

              for (let i = 0; i < node.children.length; i++) {
                  const child = node.children[i];
                  const area = bboxArea(child);
                  const enlargement = enlargedArea(bbox, child) - area;

                  // choose entry with the least area enlargement
                  if (enlargement < minEnlargement) {
                      minEnlargement = enlargement;
                      minArea = area < minArea ? area : minArea;
                      targetNode = child;

                  } else if (enlargement === minEnlargement) {
                      // otherwise choose one with the smallest area
                      if (area < minArea) {
                          minArea = area;
                          targetNode = child;
                      }
                  }
              }

              node = targetNode || node.children[0];
          }

          return node;
      }

      _insert(item, level, isNode) {
          const bbox = isNode ? item : this.toBBox(item);
          const insertPath = [];

          // find the best node for accommodating the item, saving all nodes along the path too
          const node = this._chooseSubtree(bbox, this.data, level, insertPath);

          // put the item into the node
          node.children.push(item);
          extend$1(node, bbox);

          // split on node overflow; propagate upwards if necessary
          while (level >= 0) {
              if (insertPath[level].children.length > this._maxEntries) {
                  this._split(insertPath, level);
                  level--;
              } else break;
          }

          // adjust bboxes along the insertion path
          this._adjustParentBBoxes(bbox, insertPath, level);
      }

      // split overflowed node into two
      _split(insertPath, level) {
          const node = insertPath[level];
          const M = node.children.length;
          const m = this._minEntries;

          this._chooseSplitAxis(node, m, M);

          const splitIndex = this._chooseSplitIndex(node, m, M);

          const newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
          newNode.height = node.height;
          newNode.leaf = node.leaf;

          calcBBox(node, this.toBBox);
          calcBBox(newNode, this.toBBox);

          if (level) insertPath[level - 1].children.push(newNode);
          else this._splitRoot(node, newNode);
      }

      _splitRoot(node, newNode) {
          // split root node
          this.data = createNode([node, newNode]);
          this.data.height = node.height + 1;
          this.data.leaf = false;
          calcBBox(this.data, this.toBBox);
      }

      _chooseSplitIndex(node, m, M) {
          let index;
          let minOverlap = Infinity;
          let minArea = Infinity;

          for (let i = m; i <= M - m; i++) {
              const bbox1 = distBBox(node, 0, i, this.toBBox);
              const bbox2 = distBBox(node, i, M, this.toBBox);

              const overlap = intersectionArea(bbox1, bbox2);
              const area = bboxArea(bbox1) + bboxArea(bbox2);

              // choose distribution with minimum overlap
              if (overlap < minOverlap) {
                  minOverlap = overlap;
                  index = i;

                  minArea = area < minArea ? area : minArea;

              } else if (overlap === minOverlap) {
                  // otherwise choose distribution with minimum area
                  if (area < minArea) {
                      minArea = area;
                      index = i;
                  }
              }
          }

          return index || M - m;
      }

      // sorts node children by the best axis for split
      _chooseSplitAxis(node, m, M) {
          const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;
          const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;
          const xMargin = this._allDistMargin(node, m, M, compareMinX);
          const yMargin = this._allDistMargin(node, m, M, compareMinY);

          // if total distributions margin value is minimal for x, sort by minX,
          // otherwise it's already sorted by minY
          if (xMargin < yMargin) node.children.sort(compareMinX);
      }

      // total margin of all possible split distributions where each node is at least m full
      _allDistMargin(node, m, M, compare) {
          node.children.sort(compare);

          const toBBox = this.toBBox;
          const leftBBox = distBBox(node, 0, m, toBBox);
          const rightBBox = distBBox(node, M - m, M, toBBox);
          let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);

          for (let i = m; i < M - m; i++) {
              const child = node.children[i];
              extend$1(leftBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin(leftBBox);
          }

          for (let i = M - m - 1; i >= m; i--) {
              const child = node.children[i];
              extend$1(rightBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin(rightBBox);
          }

          return margin;
      }

      _adjustParentBBoxes(bbox, path, level) {
          // adjust bboxes along the given tree path
          for (let i = level; i >= 0; i--) {
              extend$1(path[i], bbox);
          }
      }

      _condense(path) {
          // go through the path, removing empty nodes and updating bboxes
          for (let i = path.length - 1, siblings; i >= 0; i--) {
              if (path[i].children.length === 0) {
                  if (i > 0) {
                      siblings = path[i - 1].children;
                      siblings.splice(siblings.indexOf(path[i]), 1);

                  } else this.clear();

              } else calcBBox(path[i], this.toBBox);
          }
      }
  };

  function findItem(item, items, equalsFn) {
      if (!equalsFn) return items.indexOf(item);

      for (let i = 0; i < items.length; i++) {
          if (equalsFn(item, items[i])) return i;
      }
      return -1;
  }

  // calculate node's bbox from bboxes of its children
  function calcBBox(node, toBBox) {
      distBBox(node, 0, node.children.length, toBBox, node);
  }

  // min bounding rectangle of node children from k to p-1
  function distBBox(node, k, p, toBBox, destNode) {
      if (!destNode) destNode = createNode(null);
      destNode.minX = Infinity;
      destNode.minY = Infinity;
      destNode.maxX = -Infinity;
      destNode.maxY = -Infinity;

      for (let i = k; i < p; i++) {
          const child = node.children[i];
          extend$1(destNode, node.leaf ? toBBox(child) : child);
      }

      return destNode;
  }

  function extend$1(a, b) {
      a.minX = Math.min(a.minX, b.minX);
      a.minY = Math.min(a.minY, b.minY);
      a.maxX = Math.max(a.maxX, b.maxX);
      a.maxY = Math.max(a.maxY, b.maxY);
      return a;
  }

  function compareNodeMinX(a, b) { return a.minX - b.minX; }
  function compareNodeMinY(a, b) { return a.minY - b.minY; }

  function bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }
  function bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }

  function enlargedArea(a, b) {
      return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *
             (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
  }

  function intersectionArea(a, b) {
      const minX = Math.max(a.minX, b.minX);
      const minY = Math.max(a.minY, b.minY);
      const maxX = Math.min(a.maxX, b.maxX);
      const maxY = Math.min(a.maxY, b.maxY);

      return Math.max(0, maxX - minX) *
             Math.max(0, maxY - minY);
  }

  function contains(a, b) {
      return a.minX <= b.minX &&
             a.minY <= b.minY &&
             b.maxX <= a.maxX &&
             b.maxY <= a.maxY;
  }

  function intersects(a, b) {
      return b.minX <= a.maxX &&
             b.minY <= a.maxY &&
             b.maxX >= a.minX &&
             b.maxY >= a.minY;
  }

  function createNode(children) {
      return {
          children,
          height: 1,
          leaf: true,
          minX: Infinity,
          minY: Infinity,
          maxX: -Infinity,
          maxY: -Infinity
      };
  }

  // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
  // combines selection algorithm with binary divide & conquer approach

  function multiSelect(arr, left, right, n, compare) {
      const stack = [left, right];

      while (stack.length) {
          right = stack.pop();
          left = stack.pop();

          if (right - left <= n) continue;

          const mid = left + Math.ceil((right - left) / n / 2) * n;
          quickselect(arr, mid, left, right, compare);

          stack.push(left, mid, mid, right);
      }
  }

  /**
   * @module ol/color
   */

  /**
   * A color represented as a short array [red, green, blue, alpha].
   * red, green, and blue should be integers in the range 0..255 inclusive.
   * alpha should be a float in the range 0..1 inclusive. If no alpha value is
   * given then `1` will be used.
   * @typedef {Array<number>} Color
   * @api
   */

  /**
   * Color to indicate that no color should be rendered. This is meant to be used for per-reference
   * comparisons only.
   * @type {Color}
   */
  const NO_COLOR = [NaN, NaN, NaN, 0];

  let colorParseContext;
  /**
   * @return {CanvasRenderingContext2D} The color parse context
   */
  function getColorParseContext() {
    if (!colorParseContext) {
      colorParseContext = createCanvasContext2D(1, 1, undefined, {
        willReadFrequently: true,
        desynchronized: true,
      });
    }
    return colorParseContext;
  }

  const rgbModernRegEx =
    /^rgba?\(\s*(\d+%?)\s+(\d+%?)\s+(\d+%?)(?:\s*\/\s*(\d+%|\d*\.\d+|[01]))?\s*\)$/i;
  const rgbLegacyAbsoluteRegEx =
    /^rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)(?:\s*,\s*(\d+%|\d*\.\d+|[01]))?\s*\)$/i;
  const rgbLegacyPercentageRegEx =
    /^rgba?\(\s*(\d+%)\s*,\s*(\d+%)\s*,\s*(\d+%)(?:\s*,\s*(\d+%|\d*\.\d+|[01]))?\s*\)$/i;
  const hexRegEx = /^#([\da-f]{3,4}|[\da-f]{6}|[\da-f]{8})$/i;

  /**
   * @param {string} s Color component as number or percentage.
   * @param {number} divider Divider for percentage.
   * @return {number} Color component.
   */
  function toColorComponent(s, divider) {
    return s.endsWith('%')
      ? Number(s.substring(0, s.length - 1)) / divider
      : Number(s);
  }

  /**
   * @param {string} color Color string.
   */
  function throwInvalidColor(color) {
    throw new Error('failed to parse "' + color + '" as color');
  }

  /**
   * @param {string} color Color string.
   * @return {Color} RGBa color array.
   */
  function parseRgba(color) {
    // Fast lane for rgb(a) colors
    if (color.toLowerCase().startsWith('rgb')) {
      const rgb =
        color.match(rgbLegacyAbsoluteRegEx) ||
        color.match(rgbModernRegEx) ||
        color.match(rgbLegacyPercentageRegEx);
      if (rgb) {
        const alpha = rgb[4];
        const rgbDivider = 100 / 255;
        return [
          clamp((toColorComponent(rgb[1], rgbDivider) + 0.5) | 0, 0, 255),
          clamp((toColorComponent(rgb[2], rgbDivider) + 0.5) | 0, 0, 255),
          clamp((toColorComponent(rgb[3], rgbDivider) + 0.5) | 0, 0, 255),
          alpha !== undefined ? clamp(toColorComponent(alpha, 100), 0, 1) : 1,
        ];
      }
      throwInvalidColor(color);
    }
    // Fast lane for hex colors (also with alpha)
    if (color.startsWith('#')) {
      if (hexRegEx.test(color)) {
        const hex = color.substring(1);
        const step = hex.length <= 4 ? 1 : 2;
        const colorFromHex = [0, 0, 0, 255];
        for (let i = 0, ii = hex.length; i < ii; i += step) {
          let colorComponent = parseInt(hex.substring(i, i + step), 16);
          if (step === 1) {
            colorComponent += colorComponent << 4;
          }
          colorFromHex[i / step] = colorComponent;
        }
        colorFromHex[3] = colorFromHex[3] / 255;
        return colorFromHex;
      }
      throwInvalidColor(color);
    }
    // Use canvas color serialization to parse the color into hex or rgba
    // See https://www.w3.org/TR/2021/SPSD-2dcontext-20210128/#serialization-of-a-color
    const context = getColorParseContext();
    context.fillStyle = '#abcdef';
    let invalidCheckFillStyle = context.fillStyle;
    context.fillStyle = color;
    if (context.fillStyle === invalidCheckFillStyle) {
      context.fillStyle = '#fedcba';
      invalidCheckFillStyle = context.fillStyle;
      context.fillStyle = color;
      if (context.fillStyle === invalidCheckFillStyle) {
        throwInvalidColor(color);
      }
    }
    const colorString = context.fillStyle;
    if (colorString.startsWith('#') || colorString.startsWith('rgba')) {
      return parseRgba(colorString);
    }
    context.clearRect(0, 0, 1, 1);
    context.fillRect(0, 0, 1, 1);
    const colorFromImage = Array.from(context.getImageData(0, 0, 1, 1).data);
    colorFromImage[3] = toFixed(colorFromImage[3] / 255, 3);
    return colorFromImage;
  }

  /**
   * Return the color as an rgba string.
   * @param {Color|string} color Color.
   * @return {string} Rgba string.
   * @api
   */
  function asString(color) {
    if (typeof color === 'string') {
      return color;
    }
    return toString(color);
  }

  /**
   * @type {number}
   */
  const MAX_CACHE_SIZE = 1024;

  /**
   * We maintain a small cache of parsed strings.  Whenever the cache grows too large,
   * we delete an arbitrary set of the entries.
   *
   * @type {Object<string, Color>}
   */
  const cache = {};

  /**
   * @type {number}
   */
  let cacheSize = 0;

  /**
   * @param {Color} color A color that may or may not have an alpha channel.
   * @return {Color} The input color with an alpha channel.  If the input color has
   * an alpha channel, the input color will be returned unchanged.  Otherwise, a new
   * array will be returned with the input color and an alpha channel of 1.
   */
  function withAlpha(color) {
    if (color.length === 4) {
      return color;
    }
    const output = color.slice();
    output[3] = 1;
    return output;
  }

  // The functions b1, b2, a1, a2, rgbaToLcha and lchaToRgba below are adapted from
  // https://stackoverflow.com/a/67219995/2389327

  /**
   * @param {number} v Input value.
   * @return {number} Output value.
   */
  function b1(v) {
    return v > 0.0031308 ? Math.pow(v, 1 / 2.4) * 269.025 - 14.025 : v * 3294.6;
  }

  /**
   * @param {number} v Input value.
   * @return {number} Output value.
   */
  function b2(v) {
    return v > 0.2068965 ? Math.pow(v, 3) : (v - 4 / 29) * (108 / 841);
  }

  /**
   * @param {number} v Input value.
   * @return {number} Output value.
   */
  function a1(v) {
    return v > 10.314724 ? Math.pow((v + 14.025) / 269.025, 2.4) : v / 3294.6;
  }

  /**
   * @param {number} v Input value.
   * @return {number} Output value.
   */
  function a2(v) {
    return v > 0.0088564 ? Math.pow(v, 1 / 3) : v / (108 / 841) + 4 / 29;
  }

  /**
   * @param {Color} color RGBA color.
   * @return {Color} LCHuv color with alpha.
   */
  function rgbaToLcha(color) {
    const r = a1(color[0]);
    const g = a1(color[1]);
    const b = a1(color[2]);
    const y = a2(r * 0.222488403 + g * 0.716873169 + b * 0.06060791);
    const l = 500 * (a2(r * 0.452247074 + g * 0.399439023 + b * 0.148375274) - y);
    const q = 200 * (y - a2(r * 0.016863605 + g * 0.117638439 + b * 0.865350722));
    const h = Math.atan2(q, l) * (180 / Math.PI);
    return [
      116 * y - 16,
      Math.sqrt(l * l + q * q),
      h < 0 ? h + 360 : h,
      color[3],
    ];
  }

  /**
   * @param {Color} color LCHuv color with alpha.
   * @return {Color} RGBA color.
   */
  function lchaToRgba(color) {
    const l = (color[0] + 16) / 116;
    const c = color[1];
    const h = (color[2] * Math.PI) / 180;
    const y = b2(l);
    const x = b2(l + (c / 500) * Math.cos(h));
    const z = b2(l - (c / 200) * Math.sin(h));
    const r = b1(x * 3.021973625 - y * 1.617392459 - z * 0.404875592);
    const g = b1(x * -0.943766287 + y * 1.916279586 + z * 0.027607165);
    const b = b1(x * 0.069407491 - y * 0.22898585 + z * 1.159737864);
    return [
      clamp((r + 0.5) | 0, 0, 255),
      clamp((g + 0.5) | 0, 0, 255),
      clamp((b + 0.5) | 0, 0, 255),
      color[3],
    ];
  }

  /**
   * @param {string} s String.
   * @return {Color} Color.
   */
  function fromString(s) {
    if (s === 'none') {
      return NO_COLOR;
    }
    if (cache.hasOwnProperty(s)) {
      return cache[s];
    }
    if (cacheSize >= MAX_CACHE_SIZE) {
      let i = 0;
      for (const key in cache) {
        if ((i++ & 3) === 0) {
          delete cache[key];
          --cacheSize;
        }
      }
    }

    const color = parseRgba(s);
    if (color.length !== 4) {
      throwInvalidColor(s);
    }
    for (const c of color) {
      if (isNaN(c)) {
        throwInvalidColor(s);
      }
    }
    cache[s] = color;
    ++cacheSize;
    return color;
  }

  /**
   * Return the color as an array. This function maintains a cache of calculated
   * arrays which means the result should not be modified.
   * @param {Color|string} color Color.
   * @return {Color} Color.
   * @api
   */
  function asArray(color) {
    if (Array.isArray(color)) {
      return color;
    }
    return fromString(color);
  }

  /**
   * @param {Color} color Color.
   * @return {string} String.
   */
  function toString(color) {
    let r = color[0];
    if (r != (r | 0)) {
      r = (r + 0.5) | 0;
    }
    let g = color[1];
    if (g != (g | 0)) {
      g = (g + 0.5) | 0;
    }
    let b = color[2];
    if (b != (b | 0)) {
      b = (b + 0.5) | 0;
    }
    const a = color[3] === undefined ? 1 : Math.round(color[3] * 1000) / 1000;
    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
  }

  /**
   * @module ol/size
   */


  /**
   * Determines if a size has a positive area.
   * @param {Size} size The size to test.
   * @return {boolean} The size has a positive area.
   */
  function hasArea(size) {
    return size[0] > 0 && size[1] > 0;
  }

  /**
   * Returns a size scaled by a ratio. The result will be an array of integers.
   * @param {Size} size Size.
   * @param {number} ratio Ratio.
   * @param {Size} [dest] Optional reusable size array.
   * @return {Size} The scaled size.
   */
  function scale(size, ratio, dest) {
    if (dest === undefined) {
      dest = [0, 0];
    }
    dest[0] = (size[0] * ratio + 0.5) | 0;
    dest[1] = (size[1] * ratio + 0.5) | 0;
    return dest;
  }

  /**
   * Returns an `Size` array for the passed in number (meaning: square) or
   * `Size` array.
   * (meaning: non-square),
   * @param {number|Size} size Width and height.
   * @param {Size} [dest] Optional reusable size array.
   * @return {Size} Size.
   * @api
   */
  function toSize(size, dest) {
    if (Array.isArray(size)) {
      return size;
    }
    if (dest === undefined) {
      dest = [size, size];
    } else {
      dest[0] = size;
      dest[1] = size;
    }
    return dest;
  }

  /**
   * @module ol/expr/expression
   */

  /**
   * @fileoverview This module includes types and functions for parsing array encoded expressions.
   * The result of parsing an encoded expression is one of the specific expression classes.
   * During parsing, information is added to the parsing context about the data accessed by the
   * expression.
   */

  /**
   * Base type used for literal style parameters; can be a number literal or the output of an operator,
   * which in turns takes {@link import("./expression.js").ExpressionValue} arguments.
   *
   * See below for details on the available operators (with notes for those that are WebGL or Canvas only).
   *
   * Reading operators:
   *   `['band', bandIndex, xOffset, yOffset]` For tile layers only. Fetches pixel values from band
   *     `bandIndex` of the source's data. The first `bandIndex` of the source data is `1`. Fetched values
   *     are in the 0..1 range. {@link import("../source/TileImage.js").default} sources have 4 bands: red,
   *     green, blue and alpha. {@link import("../source/DataTile.js").default} sources can have any number
   *     of bands, depending on the underlying data source and
   *     {@link import("../source/GeoTIFF.js").Options configuration}. `xOffset` and `yOffset` are optional
   *     and allow specifying pixel offsets for x and y. This is used for sampling data from neighboring pixels (WebGL only).
   *   `['get', attributeName]` fetches a feature property value, similar to `feature.get('attributeName')`.
   *   `['get', attributeName, keyOrArrayIndex, ...]` (Canvas only) Access nested properties and array items of a
   *     feature property. The result is `undefined` when there is nothing at the specified key or index.
   *   `['geometry-type']` returns a feature's geometry type as string, either: 'LineString', 'Point' or 'Polygon'
   *     `Multi*` values are returned as their singular equivalent
   *     `Circle` geometries are returned as 'Polygon'
   *     `GeometryCollection` geometries are returned as the type of the first geometry found in the collection (WebGL only).
   *   `['resolution']` returns the current resolution
   *   `['time']` The time in seconds since the creation of the layer (WebGL only).
   *   `['var', 'varName']` fetches a value from the style variables; will throw an error if that variable is undefined
   *   `['zoom']` The current zoom level (WebGL only).
   *   `['line-metric']` returns the M component of the current point on a line (WebGL only); in case where the geometry layout of the line
   *      does not contain an M component (e.g. XY or XYZ), 0 is returned; 0 is also returned for geometries other than lines.
   *      Please note that the M component will be linearly interpolated between the two points composing a segment.
   *
   * Math operators:
   *   `['*', value1, value2, ...]` multiplies the values (either numbers or colors)
   *   `['/', value1, value2]` divides `value1` by `value2`
   *   `['+', value1, value2, ...]` adds the values
   *   `['-', value1, value2]` subtracts `value2` from `value1`
   *   `['clamp', value, low, high]` clamps `value` between `low` and `high`
   *   `['%', value1, value2]` returns the result of `value1 % value2` (modulo)
   *   `['^', value1, value2]` returns the value of `value1` raised to the `value2` power
   *   `['abs', value1]` returns the absolute value of `value1`
   *   `['floor', value1]` returns the nearest integer less than or equal to `value1`
   *   * `['round', value1]` returns the nearest integer to `value1`
   *   * `['ceil', value1]` returns the nearest integer greater than or equal to `value1`
   *   * `['sin', value1]` returns the sine of `value1`
   *   * `['cos', value1]` returns the cosine of `value1`
   *   * `['atan', value1, value2]` returns `atan2(value1, value2)`. If `value2` is not provided, returns `atan(value1)`
   *   * `['sqrt', value1]` returns the square root of `value1`
   *
   * * Transform operators:
   *   * `['case', condition1, output1, ...conditionN, outputN, fallback]` selects the first output whose corresponding
   *     condition evaluates to `true`. If no match is found, returns the `fallback` value.
   *     All conditions should be `boolean`, output and fallback can be any kind.
   *   * `['match', input, match1, output1, ...matchN, outputN, fallback]` compares the `input` value against all
   *     provided `matchX` values, returning the output associated with the first valid match. If no match is found,
   *     returns the `fallback` value.
   *     `input` and `matchX` values must all be of the same type, and can be `number` or `string`. `outputX` and
   *     `fallback` values must be of the same type, and can be of any kind.
   *   * `['interpolate', interpolation, input, stop1, output1, ...stopN, outputN]` returns a value by interpolating between
   *     pairs of inputs and outputs; `interpolation` can either be `['linear']` or `['exponential', base]` where `base` is
   *     the rate of increase from stop A to stop B (i.e. power to which the interpolation ratio is raised); a value
   *     of 1 is equivalent to `['linear']`.
   *     `input` and `stopX` values must all be of type `number`. `outputX` values can be `number` or `color` values.
   *     Note: `input` will be clamped between `stop1` and `stopN`, meaning that all output values will be comprised
   *     between `output1` and `outputN`.
   *   * `['string', value1, value2, ...]` returns the first value in the list that evaluates to a string.
   *     An example would be to provide a default value for get: `['string', ['get', 'propertyname'], 'default value']]`
   *     (Canvas only).
   *   * `['number', value1, value2, ...]` returns the first value in the list that evaluates to a number.
   *     An example would be to provide a default value for get: `['string', ['get', 'propertyname'], 42]]`
   *     (Canvas only).
   *   * `['coalesce', value1, value2, ...]` returns the first value in the list which is not null or undefined.
   *     An example would be to provide a default value for get: `['coalesce', ['get','propertyname'], 'default value']]`
   *     (Canvas only).
   *
   * * Logical operators:
   *   * `['<', value1, value2]` returns `true` if `value1` is strictly lower than `value2`, or `false` otherwise.
   *   * `['<=', value1, value2]` returns `true` if `value1` is lower than or equals `value2`, or `false` otherwise.
   *   * `['>', value1, value2]` returns `true` if `value1` is strictly greater than `value2`, or `false` otherwise.
   *   * `['>=', value1, value2]` returns `true` if `value1` is greater than or equals `value2`, or `false` otherwise.
   *   * `['==', value1, value2]` returns `true` if `value1` equals `value2`, or `false` otherwise.
   *   * `['!=', value1, value2]` returns `true` if `value1` does not equal `value2`, or `false` otherwise.
   *   * `['!', value1]` returns `false` if `value1` is `true` or greater than `0`, or `true` otherwise.
   *   * `['all', value1, value2, ...]` returns `true` if all the inputs are `true`, `false` otherwise.
   *   * `['any', value1, value2, ...]` returns `true` if any of the inputs are `true`, `false` otherwise.
   *   * `['has', attributeName, keyOrArrayIndex, ...]` returns `true` if feature properties include the (nested) key `attributeName`,
   *     `false` otherwise.
   *     Note that for WebGL layers, the hardcoded value `-9999999` is used to distinguish when a property is not defined.
   *   * `['between', value1, value2, value3]` returns `true` if `value1` is contained between `value2` and `value3`
   *     (inclusively), or `false` otherwise.
   *   * `['in', needle, haystack]` returns `true` if `needle` is found in `haystack`, and
   *     `false` otherwise.
   *     This operator has the following limitations:
   *     * `haystack` has to be an array of numbers or strings (searching for a substring in a string is not supported yet)
   *     * Only literal arrays are supported as `haystack` for now; this means that `haystack` cannot be the result of an
   *     expression. If `haystack` is an array of strings, use the `literal` operator to disambiguate from an expression:
   *     `['literal', ['abc', 'def', 'ghi']]`
   *
   * * Conversion operators:
   *   * `['array', value1, ...valueN]` creates a numerical array from `number` values; please note that the amount of
   *     values can currently only be 2, 3 or 4 (WebGL only).
   *   * `['color', red, green, blue, alpha]` or `['color', shade, alpha]` creates a `color` value from `number` values;
   *     the `alpha` parameter is optional; if not specified, it will be set to 1 (WebGL only).
   *     Note: `red`, `green` and `blue` or `shade` components must be values between 0 and 255; `alpha` between 0 and 1.
   *   * `['palette', index, colors]` picks a `color` value from an array of colors using the given index; the `index`
   *     expression must evaluate to a number; the items in the `colors` array must be strings with hex colors
   *     (e.g. `'#86A136'`), colors using the rgba[a] functional notation (e.g. `'rgb(134, 161, 54)'` or `'rgba(134, 161, 54, 1)'`),
   *     named colors (e.g. `'red'`), or array literals with 3 ([r, g, b]) or 4 ([r, g, b, a]) values (with r, g, and b
   *     in the 0-255 range and a in the 0-1 range) (WebGL only).
   *   * `['to-string', value]` converts the input value to a string. If the input is a boolean, the result is "true" or "false".
   *     If the input is a number, it is converted to a string as specified by the "NumberToString" algorithm of the ECMAScript
   *     Language Specification. If the input is a color, it is converted to a string of the form "rgba(r,g,b,a)". (Canvas only)
   *
   * Values can either be literals or another operator, as they will be evaluated recursively.
   * Literal values can be of the following types:
   * * `boolean`
   * * `number`
   * * `number[]` (number arrays can only have a length of 2, 3 or 4)
   * * `string`
   * * {@link module:ol/color~Color}
   *
   * @typedef {Array<*>|import("../color.js").Color|string|number|boolean} ExpressionValue
   * @api
   */

  let numTypes = 0;
  const BooleanType = 1 << numTypes++;
  const NumberType = 1 << numTypes++;
  const StringType = 1 << numTypes++;
  const ColorType = 1 << numTypes++;
  const NumberArrayType = 1 << numTypes++;
  const SizeType = 1 << numTypes++;
  const AnyType = Math.pow(2, numTypes) - 1;

  const typeNames = {
    [BooleanType]: 'boolean',
    [NumberType]: 'number',
    [StringType]: 'string',
    [ColorType]: 'color',
    [NumberArrayType]: 'number[]',
    [SizeType]: 'size',
  };

  const namedTypes = Object.keys(typeNames).map(Number).sort(ascending);

  /**
   * @param {number} type The type.
   * @return {boolean} The type is one of the specific types (not any or a union type).
   */
  function isSpecific(type) {
    return type in typeNames;
  }

  /**
   * Get a string representation for a type.
   * @param {number} type The type.
   * @return {string} The type name.
   */
  function typeName(type) {
    const names = [];
    for (const namedType of namedTypes) {
      if (includesType(type, namedType)) {
        names.push(typeNames[namedType]);
      }
    }
    if (names.length === 0) {
      return 'untyped';
    }
    if (names.length < 3) {
      return names.join(' or ');
    }
    return names.slice(0, -1).join(', ') + ', or ' + names[names.length - 1];
  }

  /**
   * @param {number} broad The broad type.
   * @param {number} specific The specific type.
   * @return {boolean} The broad type includes the specific type.
   */
  function includesType(broad, specific) {
    return (broad & specific) === specific;
  }

  /**
   * @param {number} type The type.
   * @param {number} expected The expected type.
   * @return {boolean} The given type is exactly the expected type.
   */
  function isType(type, expected) {
    return type === expected;
  }

  /**
   * @typedef {boolean|number|string|Array<number>} LiteralValue
   */

  class LiteralExpression {
    /**
     * @param {number} type The value type.
     * @param {LiteralValue} value The literal value.
     */
    constructor(type, value) {
      if (!isSpecific(type)) {
        throw new Error(
          `literal expressions must have a specific type, got ${typeName(type)}`,
        );
      }
      this.type = type;
      this.value = value;
    }
  }

  class CallExpression {
    /**
     * @param {number} type The return type.
     * @param {string} operator The operator.
     * @param {...Expression} args The arguments.
     */
    constructor(type, operator, ...args) {
      this.type = type;
      this.operator = operator;
      this.args = args;
    }
  }

  /**
   * @typedef {LiteralExpression|CallExpression} Expression
   */

  /**
   * @typedef {Object} ParsingContext
   * @property {Set<string>} variables Variables referenced with the 'var' operator.
   * @property {Set<string>} properties Properties referenced with the 'get' operator.
   * @property {boolean} featureId The style uses the feature id.
   * @property {boolean} geometryType The style uses the feature geometry type.
   * @property {boolean} mapState The style uses the map state (view state or time elapsed).
   */

  /**
   * @return {ParsingContext} A new parsing context.
   */
  function newParsingContext() {
    return {
      variables: new Set(),
      properties: new Set(),
      featureId: false,
      geometryType: false,
      mapState: false,
    };
  }

  /**
   * @typedef {LiteralValue|Array} EncodedExpression
   */

  /**
   * @param {EncodedExpression} encoded The encoded expression.
   * @param {number} expectedType The expected type.
   * @param {ParsingContext} context The parsing context.
   * @return {Expression} The parsed expression result.
   */
  function parse$2(encoded, expectedType, context) {
    switch (typeof encoded) {
      case 'boolean': {
        if (isType(expectedType, StringType)) {
          return new LiteralExpression(StringType, encoded ? 'true' : 'false');
        }
        if (!includesType(expectedType, BooleanType)) {
          throw new Error(
            `got a boolean, but expected ${typeName(expectedType)}`,
          );
        }
        return new LiteralExpression(BooleanType, encoded);
      }
      case 'number': {
        if (isType(expectedType, SizeType)) {
          return new LiteralExpression(SizeType, toSize(encoded));
        }
        if (isType(expectedType, BooleanType)) {
          return new LiteralExpression(BooleanType, !!encoded);
        }
        if (isType(expectedType, StringType)) {
          return new LiteralExpression(StringType, encoded.toString());
        }
        if (!includesType(expectedType, NumberType)) {
          throw new Error(`got a number, but expected ${typeName(expectedType)}`);
        }
        return new LiteralExpression(NumberType, encoded);
      }
      case 'string': {
        if (isType(expectedType, ColorType)) {
          return new LiteralExpression(ColorType, fromString(encoded));
        }
        if (isType(expectedType, BooleanType)) {
          return new LiteralExpression(BooleanType, !!encoded);
        }
        if (!includesType(expectedType, StringType)) {
          throw new Error(`got a string, but expected ${typeName(expectedType)}`);
        }
        return new LiteralExpression(StringType, encoded);
      }
    }

    if (!Array.isArray(encoded)) {
      throw new Error('expression must be an array or a primitive value');
    }

    if (encoded.length === 0) {
      throw new Error('empty expression');
    }

    if (typeof encoded[0] === 'string') {
      return parseCallExpression(encoded, expectedType, context);
    }

    for (const item of encoded) {
      if (typeof item !== 'number') {
        throw new Error('expected an array of numbers');
      }
    }

    if (isType(expectedType, SizeType)) {
      if (encoded.length !== 2) {
        throw new Error(
          `expected an array of two values for a size, got ${encoded.length}`,
        );
      }
      return new LiteralExpression(SizeType, encoded);
    }

    if (isType(expectedType, ColorType)) {
      if (encoded.length === 3) {
        return new LiteralExpression(ColorType, [...encoded, 1]);
      }
      if (encoded.length === 4) {
        return new LiteralExpression(ColorType, encoded);
      }
      throw new Error(
        `expected an array of 3 or 4 values for a color, got ${encoded.length}`,
      );
    }

    if (!includesType(expectedType, NumberArrayType)) {
      throw new Error(
        `got an array of numbers, but expected ${typeName(expectedType)}`,
      );
    }

    return new LiteralExpression(NumberArrayType, encoded);
  }

  /**
   * @type {Object<string, string>}
   */
  const Ops = {
    Get: 'get',
    Var: 'var',
    Concat: 'concat',
    GeometryType: 'geometry-type',
    LineMetric: 'line-metric',
    Any: 'any',
    All: 'all',
    Not: '!',
    Resolution: 'resolution',
    Zoom: 'zoom',
    Time: 'time',
    Equal: '==',
    NotEqual: '!=',
    GreaterThan: '>',
    GreaterThanOrEqualTo: '>=',
    LessThan: '<',
    LessThanOrEqualTo: '<=',
    Multiply: '*',
    Divide: '/',
    Add: '+',
    Subtract: '-',
    Clamp: 'clamp',
    Mod: '%',
    Pow: '^',
    Abs: 'abs',
    Floor: 'floor',
    Ceil: 'ceil',
    Round: 'round',
    Sin: 'sin',
    Cos: 'cos',
    Atan: 'atan',
    Sqrt: 'sqrt',
    Match: 'match',
    Between: 'between',
    Interpolate: 'interpolate',
    Coalesce: 'coalesce',
    Case: 'case',
    In: 'in',
    Number: 'number',
    String: 'string',
    Array: 'array',
    Color: 'color',
    Id: 'id',
    Band: 'band',
    Palette: 'palette',
    ToString: 'to-string',
    Has: 'has',
  };

  /**
   * @typedef {function(Array, number, ParsingContext):Expression} Parser
   *
   * Second argument is the expected type.
   */

  /**
   * @type {Object<string, Parser>}
   */
  const parsers = {
    [Ops.Get]: createCallExpressionParser(hasArgsCount(1, Infinity), withGetArgs),
    [Ops.Var]: createCallExpressionParser(hasArgsCount(1, 1), withVarArgs),
    [Ops.Has]: createCallExpressionParser(hasArgsCount(1, Infinity), withGetArgs),
    [Ops.Id]: createCallExpressionParser(usesFeatureId, withNoArgs),
    [Ops.Concat]: createCallExpressionParser(
      hasArgsCount(2, Infinity),
      withArgsOfType(StringType),
    ),
    [Ops.GeometryType]: createCallExpressionParser(usesGeometryType, withNoArgs),
    [Ops.LineMetric]: createCallExpressionParser(withNoArgs),
    [Ops.Resolution]: createCallExpressionParser(usesMapState, withNoArgs),
    [Ops.Zoom]: createCallExpressionParser(usesMapState, withNoArgs),
    [Ops.Time]: createCallExpressionParser(usesMapState, withNoArgs),
    [Ops.Any]: createCallExpressionParser(
      hasArgsCount(2, Infinity),
      withArgsOfType(BooleanType),
    ),
    [Ops.All]: createCallExpressionParser(
      hasArgsCount(2, Infinity),
      withArgsOfType(BooleanType),
    ),
    [Ops.Not]: createCallExpressionParser(
      hasArgsCount(1, 1),
      withArgsOfType(BooleanType),
    ),
    [Ops.Equal]: createCallExpressionParser(
      hasArgsCount(2, 2),
      withArgsOfType(AnyType),
    ),
    [Ops.NotEqual]: createCallExpressionParser(
      hasArgsCount(2, 2),
      withArgsOfType(AnyType),
    ),
    [Ops.GreaterThan]: createCallExpressionParser(
      hasArgsCount(2, 2),
      withArgsOfType(NumberType),
    ),
    [Ops.GreaterThanOrEqualTo]: createCallExpressionParser(
      hasArgsCount(2, 2),
      withArgsOfType(NumberType),
    ),
    [Ops.LessThan]: createCallExpressionParser(
      hasArgsCount(2, 2),
      withArgsOfType(NumberType),
    ),
    [Ops.LessThanOrEqualTo]: createCallExpressionParser(
      hasArgsCount(2, 2),
      withArgsOfType(NumberType),
    ),
    [Ops.Multiply]: createCallExpressionParser(
      hasArgsCount(2, Infinity),
      withArgsOfReturnType,
    ),
    [Ops.Coalesce]: createCallExpressionParser(
      hasArgsCount(2, Infinity),
      withArgsOfReturnType,
    ),
    [Ops.Divide]: createCallExpressionParser(
      hasArgsCount(2, 2),
      withArgsOfType(NumberType),
    ),
    [Ops.Add]: createCallExpressionParser(
      hasArgsCount(2, Infinity),
      withArgsOfType(NumberType),
    ),
    [Ops.Subtract]: createCallExpressionParser(
      hasArgsCount(2, 2),
      withArgsOfType(NumberType),
    ),
    [Ops.Clamp]: createCallExpressionParser(
      hasArgsCount(3, 3),
      withArgsOfType(NumberType),
    ),
    [Ops.Mod]: createCallExpressionParser(
      hasArgsCount(2, 2),
      withArgsOfType(NumberType),
    ),
    [Ops.Pow]: createCallExpressionParser(
      hasArgsCount(2, 2),
      withArgsOfType(NumberType),
    ),
    [Ops.Abs]: createCallExpressionParser(
      hasArgsCount(1, 1),
      withArgsOfType(NumberType),
    ),
    [Ops.Floor]: createCallExpressionParser(
      hasArgsCount(1, 1),
      withArgsOfType(NumberType),
    ),
    [Ops.Ceil]: createCallExpressionParser(
      hasArgsCount(1, 1),
      withArgsOfType(NumberType),
    ),
    [Ops.Round]: createCallExpressionParser(
      hasArgsCount(1, 1),
      withArgsOfType(NumberType),
    ),
    [Ops.Sin]: createCallExpressionParser(
      hasArgsCount(1, 1),
      withArgsOfType(NumberType),
    ),
    [Ops.Cos]: createCallExpressionParser(
      hasArgsCount(1, 1),
      withArgsOfType(NumberType),
    ),
    [Ops.Atan]: createCallExpressionParser(
      hasArgsCount(1, 2),
      withArgsOfType(NumberType),
    ),
    [Ops.Sqrt]: createCallExpressionParser(
      hasArgsCount(1, 1),
      withArgsOfType(NumberType),
    ),
    [Ops.Match]: createCallExpressionParser(
      hasArgsCount(4, Infinity),
      hasEvenArgs,
      withMatchArgs,
    ),
    [Ops.Between]: createCallExpressionParser(
      hasArgsCount(3, 3),
      withArgsOfType(NumberType),
    ),
    [Ops.Interpolate]: createCallExpressionParser(
      hasArgsCount(6, Infinity),
      hasEvenArgs,
      withInterpolateArgs,
    ),
    [Ops.Case]: createCallExpressionParser(
      hasArgsCount(3, Infinity),
      hasOddArgs,
      withCaseArgs,
    ),
    [Ops.In]: createCallExpressionParser(hasArgsCount(2, 2), withInArgs),
    [Ops.Number]: createCallExpressionParser(
      hasArgsCount(1, Infinity),
      withArgsOfType(AnyType),
    ),
    [Ops.String]: createCallExpressionParser(
      hasArgsCount(1, Infinity),
      withArgsOfType(AnyType),
    ),
    [Ops.Array]: createCallExpressionParser(
      hasArgsCount(1, Infinity),
      withArgsOfType(NumberType),
    ),
    [Ops.Color]: createCallExpressionParser(
      hasArgsCount(1, 4),
      withArgsOfType(NumberType),
    ),
    [Ops.Band]: createCallExpressionParser(
      hasArgsCount(1, 3),
      withArgsOfType(NumberType),
    ),
    [Ops.Palette]: createCallExpressionParser(
      hasArgsCount(2, 2),
      withPaletteArgs,
    ),
    [Ops.ToString]: createCallExpressionParser(
      hasArgsCount(1, 1),
      withArgsOfType(BooleanType | NumberType | StringType | ColorType),
    ),
  };

  /**
   * @typedef {function(Array<EncodedExpression>, number, ParsingContext):Array<Expression>|void} ArgValidator
   *
   * An argument validator applies various checks to an encoded expression arguments and
   * returns the parsed arguments if any.  The second argument is the return type of the call expression.
   */

  /**
   * @type {ArgValidator}
   */
  function withGetArgs(encoded, returnType, context) {
    const argsCount = encoded.length - 1;
    const args = new Array(argsCount);
    for (let i = 0; i < argsCount; ++i) {
      const key = encoded[i + 1];
      switch (typeof key) {
        case 'number': {
          args[i] = new LiteralExpression(NumberType, key);
          break;
        }
        case 'string': {
          args[i] = new LiteralExpression(StringType, key);
          break;
        }
        default: {
          throw new Error(
            `expected a string key or numeric array index for a get operation, got ${key}`,
          );
        }
      }
      if (i === 0) {
        context.properties.add(String(key));
      }
    }
    return args;
  }

  /**
   * @type {ArgValidator}
   */
  function withVarArgs(encoded, returnType, context) {
    const name = encoded[1];
    if (typeof name !== 'string') {
      throw new Error('expected a string argument for var operation');
    }
    context.variables.add(name);

    return [new LiteralExpression(StringType, name)];
  }

  /**
   * @type {ArgValidator}
   */
  function usesFeatureId(encoded, returnType, context) {
    context.featureId = true;
  }

  /**
   * @type {ArgValidator}
   */
  function usesGeometryType(encoded, returnType, context) {
    context.geometryType = true;
  }

  /**
   * @type {ArgValidator}
   */
  function usesMapState(encoded, returnType, context) {
    context.mapState = true;
  }

  /**
   * @type {ArgValidator}
   */
  function withNoArgs(encoded, returnType, context) {
    const operation = encoded[0];
    if (encoded.length !== 1) {
      throw new Error(`expected no arguments for ${operation} operation`);
    }
    return [];
  }

  /**
   * @param {number} minArgs The minimum number of arguments.
   * @param {number} maxArgs The maximum number of arguments.
   * @return {ArgValidator} The argument validator
   */
  function hasArgsCount(minArgs, maxArgs) {
    return function (encoded, returnType, context) {
      const operation = encoded[0];
      const argCount = encoded.length - 1;
      if (minArgs === maxArgs) {
        if (argCount !== minArgs) {
          const plural = minArgs === 1 ? '' : 's';
          throw new Error(
            `expected ${minArgs} argument${plural} for ${operation}, got ${argCount}`,
          );
        }
      } else if (argCount < minArgs || argCount > maxArgs) {
        const range =
          maxArgs === Infinity
            ? `${minArgs} or more`
            : `${minArgs} to ${maxArgs}`;
        throw new Error(
          `expected ${range} arguments for ${operation}, got ${argCount}`,
        );
      }
    };
  }

  /**
   * @type {ArgValidator}
   */
  function withArgsOfReturnType(encoded, returnType, context) {
    const argCount = encoded.length - 1;
    /**
     * @type {Array<Expression>}
     */
    const args = new Array(argCount);
    for (let i = 0; i < argCount; ++i) {
      const expression = parse$2(encoded[i + 1], returnType, context);
      args[i] = expression;
    }
    return args;
  }

  /**
   * @param {number} argType The argument type.
   * @return {ArgValidator} The argument validator
   */
  function withArgsOfType(argType) {
    return function (encoded, returnType, context) {
      const argCount = encoded.length - 1;
      /**
       * @type {Array<Expression>}
       */
      const args = new Array(argCount);
      for (let i = 0; i < argCount; ++i) {
        const expression = parse$2(encoded[i + 1], argType, context);
        args[i] = expression;
      }
      return args;
    };
  }

  /**
   * @type {ArgValidator}
   */
  function hasOddArgs(encoded, returnType, context) {
    const operation = encoded[0];
    const argCount = encoded.length - 1;
    if (argCount % 2 === 0) {
      throw new Error(
        `expected an odd number of arguments for ${operation}, got ${argCount} instead`,
      );
    }
  }

  /**
   * @type {ArgValidator}
   */
  function hasEvenArgs(encoded, returnType, context) {
    const operation = encoded[0];
    const argCount = encoded.length - 1;
    if (argCount % 2 === 1) {
      throw new Error(
        `expected an even number of arguments for operation ${operation}, got ${argCount} instead`,
      );
    }
  }

  /**
   * @type {ArgValidator}
   */
  function withMatchArgs(encoded, returnType, context) {
    const argsCount = encoded.length - 1;

    const inputType = StringType | NumberType | BooleanType;

    const input = parse$2(encoded[1], inputType, context);

    const fallback = parse$2(encoded[encoded.length - 1], returnType, context);

    const args = new Array(argsCount - 2);
    for (let i = 0; i < argsCount - 2; i += 2) {
      try {
        const match = parse$2(encoded[i + 2], input.type, context);
        args[i] = match;
      } catch (err) {
        throw new Error(
          `failed to parse argument ${i + 1} of match expression: ${err.message}`,
        );
      }
      try {
        const output = parse$2(encoded[i + 3], fallback.type, context);
        args[i + 1] = output;
      } catch (err) {
        throw new Error(
          `failed to parse argument ${i + 2} of match expression: ${err.message}`,
        );
      }
    }

    return [input, ...args, fallback];
  }

  /**
   * @type {ArgValidator}
   */
  function withInterpolateArgs(encoded, returnType, context) {
    const interpolationType = encoded[1];
    /**
     * @type {number}
     */
    let base;
    switch (interpolationType[0]) {
      case 'linear':
        base = 1;
        break;
      case 'exponential':
        const b = interpolationType[1];
        if (typeof b !== 'number' || b <= 0) {
          throw new Error(
            `expected a number base for exponential interpolation` +
              `, got ${JSON.stringify(b)} instead`,
          );
        }
        base = b;
        break;
      default:
        throw new Error(
          `invalid interpolation type: ${JSON.stringify(interpolationType)}`,
        );
    }

    const interpolation = new LiteralExpression(NumberType, base);

    let input;
    try {
      input = parse$2(encoded[2], NumberType, context);
    } catch (err) {
      throw new Error(
        `failed to parse argument 1 in interpolate expression: ${err.message}`,
      );
    }

    const args = new Array(encoded.length - 3);
    for (let i = 0; i < args.length; i += 2) {
      try {
        const stop = parse$2(encoded[i + 3], NumberType, context);
        args[i] = stop;
      } catch (err) {
        throw new Error(
          `failed to parse argument ${i + 2} for interpolate expression: ${err.message}`,
        );
      }
      try {
        const output = parse$2(encoded[i + 4], returnType, context);
        args[i + 1] = output;
      } catch (err) {
        throw new Error(
          `failed to parse argument ${i + 3} for interpolate expression: ${err.message}`,
        );
      }
    }

    return [interpolation, input, ...args];
  }

  /**
   * @type {ArgValidator}
   */
  function withCaseArgs(encoded, returnType, context) {
    const fallback = parse$2(encoded[encoded.length - 1], returnType, context);

    const args = new Array(encoded.length - 1);
    for (let i = 0; i < args.length - 1; i += 2) {
      try {
        const condition = parse$2(encoded[i + 1], BooleanType, context);
        args[i] = condition;
      } catch (err) {
        throw new Error(
          `failed to parse argument ${i} of case expression: ${err.message}`,
        );
      }
      try {
        const output = parse$2(encoded[i + 2], fallback.type, context);
        args[i + 1] = output;
      } catch (err) {
        throw new Error(
          `failed to parse argument ${i + 1} of case expression: ${err.message}`,
        );
      }
    }

    args[args.length - 1] = fallback;
    return args;
  }

  /**
   * @type {ArgValidator}
   */
  function withInArgs(encoded, returnType, context) {
    let haystack = encoded[2];
    if (!Array.isArray(haystack)) {
      throw new Error(
        `the second argument for the "in" operator must be an array`,
      );
    }
    /**
     * @type {number}
     */
    let needleType;
    if (typeof haystack[0] === 'string') {
      if (haystack[0] !== 'literal') {
        throw new Error(
          `for the "in" operator, a string array should be wrapped in a "literal" operator to disambiguate from expressions`,
        );
      }
      if (!Array.isArray(haystack[1])) {
        throw new Error(
          `failed to parse "in" expression: the literal operator must be followed by an array`,
        );
      }
      haystack = haystack[1];
      needleType = StringType;
    } else {
      needleType = NumberType;
    }

    const args = new Array(haystack.length);
    for (let i = 0; i < args.length; i++) {
      try {
        const arg = parse$2(haystack[i], needleType, context);
        args[i] = arg;
      } catch (err) {
        throw new Error(
          `failed to parse haystack item ${i} for "in" expression: ${err.message}`,
        );
      }
    }

    const needle = parse$2(encoded[1], needleType, context);
    return [needle, ...args];
  }

  /**
   * @type {ArgValidator}
   */
  function withPaletteArgs(encoded, returnType, context) {
    let index;
    try {
      index = parse$2(encoded[1], NumberType, context);
    } catch (err) {
      throw new Error(
        `failed to parse first argument in palette expression: ${err.message}`,
      );
    }
    const colors = encoded[2];
    if (!Array.isArray(colors)) {
      throw new Error('the second argument of palette must be an array');
    }
    const parsedColors = new Array(colors.length);
    for (let i = 0; i < parsedColors.length; i++) {
      let color;
      try {
        color = parse$2(colors[i], ColorType, context);
      } catch (err) {
        throw new Error(
          `failed to parse color at index ${i} in palette expression: ${err.message}`,
        );
      }
      if (!(color instanceof LiteralExpression)) {
        throw new Error(
          `the palette color at index ${i} must be a literal value`,
        );
      }
      parsedColors[i] = color;
    }
    return [index, ...parsedColors];
  }

  /**
   * @param {Array<ArgValidator>} validators A chain of argument validators.  The last validator is expected
   * to return the parsed arguments.
   * @return {Parser} The parser.
   */
  function createCallExpressionParser(...validators) {
    return function (encoded, returnType, context) {
      const operator = encoded[0];

      /**
       * @type {Array<Expression>}
       */
      let args;
      for (let i = 0; i < validators.length; i++) {
        const parsed = validators[i](encoded, returnType, context);
        if (i == validators.length - 1) {
          if (!parsed) {
            throw new Error(
              'expected last argument validator to return the parsed args',
            );
          }
          args = parsed;
        }
      }
      return new CallExpression(returnType, operator, ...args);
    };
  }

  /**
   * @param {Array} encoded The encoded expression.
   * @param {number} returnType The expected return type of the call expression.
   * @param {ParsingContext} context The parsing context.
   * @return {Expression} The parsed expression.
   */
  function parseCallExpression(encoded, returnType, context) {
    const operator = encoded[0];

    const parser = parsers[operator];
    if (!parser) {
      throw new Error(`unknown operator: ${operator}`);
    }
    return parser(encoded, returnType, context);
  }

  /**
   * Returns a simplified geometry type suited for the `geometry-type` operator
   * @param {import('../geom/Geometry.js').default|import('../render/Feature.js').default} geometry Geometry object
   * @return {'Point'|'LineString'|'Polygon'|''} Simplified geometry type; empty string of no geometry found
   */
  function computeGeometryType(geometry) {
    if (!geometry) {
      return '';
    }
    const type = geometry.getType();
    switch (type) {
      case 'Point':
      case 'LineString':
      case 'Polygon':
        return type;
      case 'MultiPoint':
      case 'MultiLineString':
      case 'MultiPolygon':
        return /** @type {'Point'|'LineString'|'Polygon'} */ (type.substring(5));
      case 'Circle':
        return 'Polygon';
      case 'GeometryCollection':
        return computeGeometryType(
          /** @type {import("../geom/GeometryCollection.js").default} */ (
            geometry
          ).getGeometries()[0],
        );
      default:
        return '';
    }
  }

  /**
   * @module ol/expr/cpu
   */


  /**
   * @fileoverview This module includes functions to build expressions for evaluation on the CPU.
   * Building is composed of two steps: parsing and compiling.  The parsing step takes an encoded
   * expression and returns an instance of one of the expression classes.  The compiling step takes
   * the expression instance and returns a function that can be evaluated in to return a literal
   * value.  The evaluator function should do as little allocation and work as possible.
   */

  /**
   * @typedef {Object} EvaluationContext
   * @property {Object} properties The values for properties used in 'get' expressions.
   * @property {Object} variables The values for variables used in 'var' expressions.
   * @property {number} resolution The map resolution.
   * @property {string|number|null} featureId The feature id.
   * @property {string} geometryType Geometry type of the current object.
   */

  /**
   * @return {EvaluationContext} A new evaluation context.
   */
  function newEvaluationContext() {
    return {
      variables: {},
      properties: {},
      resolution: NaN,
      featureId: null,
      geometryType: '',
    };
  }

  /**
   * @typedef {function(EvaluationContext):import("./expression.js").LiteralValue} ExpressionEvaluator
   */

  /**
   * @typedef {function(EvaluationContext):boolean} BooleanEvaluator
   */

  /**
   * @typedef {function(EvaluationContext):number} NumberEvaluator
   */

  /**
   * @typedef {function(EvaluationContext):string} StringEvaluator
   */

  /**
   * @typedef {function(EvaluationContext):(Array<number>|string)} ColorLikeEvaluator
   */

  /**
   * @typedef {function(EvaluationContext):Array<number>} NumberArrayEvaluator
   */

  /**
   * @typedef {function(EvaluationContext):Array<number>} CoordinateEvaluator
   */

  /**
   * @typedef {function(EvaluationContext):(Array<number>)} SizeEvaluator
   */

  /**
   * @typedef {function(EvaluationContext):(Array<number>|number)} SizeLikeEvaluator
   */

  /**
   * @param {import('./expression.js').EncodedExpression} encoded The encoded expression.
   * @param {number} type The expected type.
   * @param {import('./expression.js').ParsingContext} context The parsing context.
   * @return {ExpressionEvaluator} The expression evaluator.
   */
  function buildExpression(encoded, type, context) {
    const expression = parse$2(encoded, type, context);
    return compileExpression(expression);
  }

  /**
   * @param {import("./expression.js").Expression} expression The expression.
   * @param {import('./expression.js').ParsingContext} context The parsing context.
   * @return {ExpressionEvaluator} The evaluator function.
   */
  function compileExpression(expression, context) {
    if (expression instanceof LiteralExpression) {
      // convert colors to array if possible
      if (expression.type === ColorType && typeof expression.value === 'string') {
        const colorValue = fromString(expression.value);
        return function () {
          return colorValue;
        };
      }
      return function () {
        return expression.value;
      };
    }
    const operator = expression.operator;
    switch (operator) {
      case Ops.Number:
      case Ops.String:
      case Ops.Coalesce: {
        return compileAssertionExpression(expression);
      }
      case Ops.Get:
      case Ops.Var:
      case Ops.Has: {
        return compileAccessorExpression(expression);
      }
      case Ops.Id: {
        return (context) => context.featureId;
      }
      case Ops.GeometryType: {
        return (context) => context.geometryType;
      }
      case Ops.Concat: {
        const args = expression.args.map((e) => compileExpression(e));
        return (context) =>
          ''.concat(...args.map((arg) => arg(context).toString()));
      }
      case Ops.Resolution: {
        return (context) => context.resolution;
      }
      case Ops.Any:
      case Ops.All:
      case Ops.Between:
      case Ops.In:
      case Ops.Not: {
        return compileLogicalExpression(expression);
      }
      case Ops.Equal:
      case Ops.NotEqual:
      case Ops.LessThan:
      case Ops.LessThanOrEqualTo:
      case Ops.GreaterThan:
      case Ops.GreaterThanOrEqualTo: {
        return compileComparisonExpression(expression);
      }
      case Ops.Multiply:
      case Ops.Divide:
      case Ops.Add:
      case Ops.Subtract:
      case Ops.Clamp:
      case Ops.Mod:
      case Ops.Pow:
      case Ops.Abs:
      case Ops.Floor:
      case Ops.Ceil:
      case Ops.Round:
      case Ops.Sin:
      case Ops.Cos:
      case Ops.Atan:
      case Ops.Sqrt: {
        return compileNumericExpression(expression);
      }
      case Ops.Case: {
        return compileCaseExpression(expression);
      }
      case Ops.Match: {
        return compileMatchExpression(expression);
      }
      case Ops.Interpolate: {
        return compileInterpolateExpression(expression);
      }
      case Ops.ToString: {
        return compileConvertExpression(expression);
      }
      default: {
        throw new Error(`Unsupported operator ${operator}`);
      }
      // TODO: unimplemented
      // Ops.Zoom
      // Ops.Time
      // Ops.Array
      // Ops.Color
      // Ops.Band
      // Ops.Palette
    }
  }

  /**
   * @param {import('./expression.js').CallExpression} expression The call expression.
   * @param {import('./expression.js').ParsingContext} context The parsing context.
   * @return {ExpressionEvaluator} The evaluator function.
   */
  function compileAssertionExpression(expression, context) {
    const type = expression.operator;
    const length = expression.args.length;

    const args = new Array(length);
    for (let i = 0; i < length; ++i) {
      args[i] = compileExpression(expression.args[i]);
    }
    switch (type) {
      case Ops.Coalesce: {
        return (context) => {
          for (let i = 0; i < length; ++i) {
            const value = args[i](context);
            if (typeof value !== 'undefined' && value !== null) {
              return value;
            }
          }
          throw new Error('Expected one of the values to be non-null');
        };
      }
      case Ops.Number:
      case Ops.String: {
        return (context) => {
          for (let i = 0; i < length; ++i) {
            const value = args[i](context);
            if (typeof value === type) {
              return value;
            }
          }
          throw new Error(`Expected one of the values to be a ${type}`);
        };
      }
      default: {
        throw new Error(`Unsupported assertion operator ${type}`);
      }
    }
  }

  /**
   * @param {import('./expression.js').CallExpression} expression The call expression.
   * @param {import('./expression.js').ParsingContext} context The parsing context.
   * @return {ExpressionEvaluator} The evaluator function.
   */
  function compileAccessorExpression(expression, context) {
    const nameExpression = /** @type {LiteralExpression} */ (expression.args[0]);
    const name = /** @type {string} */ (nameExpression.value);
    switch (expression.operator) {
      case Ops.Get: {
        return (context) => {
          const args = expression.args;
          let value = context.properties[name];
          for (let i = 1, ii = args.length; i < ii; ++i) {
            const keyExpression = /** @type {LiteralExpression} */ (args[i]);
            const key = /** @type {string|number} */ (keyExpression.value);
            value = value[key];
          }
          return value;
        };
      }
      case Ops.Var: {
        return (context) => context.variables[name];
      }
      case Ops.Has: {
        return (context) => {
          const args = expression.args;
          if (!(name in context.properties)) {
            return false;
          }
          let value = context.properties[name];
          for (let i = 1, ii = args.length; i < ii; ++i) {
            const keyExpression = /** @type {LiteralExpression} */ (args[i]);
            const key = /** @type {string|number} */ (keyExpression.value);
            if (!value || !Object.hasOwn(value, key)) {
              return false;
            }
            value = value[key];
          }
          return true;
        };
      }
      default: {
        throw new Error(`Unsupported accessor operator ${expression.operator}`);
      }
    }
  }

  /**
   * @param {import('./expression.js').CallExpression} expression The call expression.
   * @param {import('./expression.js').ParsingContext} context The parsing context.
   * @return {BooleanEvaluator} The evaluator function.
   */
  function compileComparisonExpression(expression, context) {
    const op = expression.operator;
    const left = compileExpression(expression.args[0]);
    const right = compileExpression(expression.args[1]);
    switch (op) {
      case Ops.Equal: {
        return (context) => left(context) === right(context);
      }
      case Ops.NotEqual: {
        return (context) => left(context) !== right(context);
      }
      case Ops.LessThan: {
        return (context) => left(context) < right(context);
      }
      case Ops.LessThanOrEqualTo: {
        return (context) => left(context) <= right(context);
      }
      case Ops.GreaterThan: {
        return (context) => left(context) > right(context);
      }
      case Ops.GreaterThanOrEqualTo: {
        return (context) => left(context) >= right(context);
      }
      default: {
        throw new Error(`Unsupported comparison operator ${op}`);
      }
    }
  }

  /**
   * @param {import('./expression.js').CallExpression} expression The call expression.
   * @param {import('./expression.js').ParsingContext} context The parsing context.
   * @return {BooleanEvaluator} The evaluator function.
   */
  function compileLogicalExpression(expression, context) {
    const op = expression.operator;
    const length = expression.args.length;

    const args = new Array(length);
    for (let i = 0; i < length; ++i) {
      args[i] = compileExpression(expression.args[i]);
    }
    switch (op) {
      case Ops.Any: {
        return (context) => {
          for (let i = 0; i < length; ++i) {
            if (args[i](context)) {
              return true;
            }
          }
          return false;
        };
      }
      case Ops.All: {
        return (context) => {
          for (let i = 0; i < length; ++i) {
            if (!args[i](context)) {
              return false;
            }
          }
          return true;
        };
      }
      case Ops.Between: {
        return (context) => {
          const value = args[0](context);
          const min = args[1](context);
          const max = args[2](context);
          return value >= min && value <= max;
        };
      }
      case Ops.In: {
        return (context) => {
          const value = args[0](context);
          for (let i = 1; i < length; ++i) {
            if (value === args[i](context)) {
              return true;
            }
          }
          return false;
        };
      }
      case Ops.Not: {
        return (context) => !args[0](context);
      }
      default: {
        throw new Error(`Unsupported logical operator ${op}`);
      }
    }
  }

  /**
   * @param {import('./expression.js').CallExpression} expression The call expression.
   * @param {import('./expression.js').ParsingContext} context The parsing context.
   * @return {NumberEvaluator} The evaluator function.
   */
  function compileNumericExpression(expression, context) {
    const op = expression.operator;
    const length = expression.args.length;

    const args = new Array(length);
    for (let i = 0; i < length; ++i) {
      args[i] = compileExpression(expression.args[i]);
    }
    switch (op) {
      case Ops.Multiply: {
        return (context) => {
          let value = 1;
          for (let i = 0; i < length; ++i) {
            value *= args[i](context);
          }
          return value;
        };
      }
      case Ops.Divide: {
        return (context) => args[0](context) / args[1](context);
      }
      case Ops.Add: {
        return (context) => {
          let value = 0;
          for (let i = 0; i < length; ++i) {
            value += args[i](context);
          }
          return value;
        };
      }
      case Ops.Subtract: {
        return (context) => args[0](context) - args[1](context);
      }
      case Ops.Clamp: {
        return (context) => {
          const value = args[0](context);
          const min = args[1](context);
          if (value < min) {
            return min;
          }
          const max = args[2](context);
          if (value > max) {
            return max;
          }
          return value;
        };
      }
      case Ops.Mod: {
        return (context) => args[0](context) % args[1](context);
      }
      case Ops.Pow: {
        return (context) => Math.pow(args[0](context), args[1](context));
      }
      case Ops.Abs: {
        return (context) => Math.abs(args[0](context));
      }
      case Ops.Floor: {
        return (context) => Math.floor(args[0](context));
      }
      case Ops.Ceil: {
        return (context) => Math.ceil(args[0](context));
      }
      case Ops.Round: {
        return (context) => Math.round(args[0](context));
      }
      case Ops.Sin: {
        return (context) => Math.sin(args[0](context));
      }
      case Ops.Cos: {
        return (context) => Math.cos(args[0](context));
      }
      case Ops.Atan: {
        if (length === 2) {
          return (context) => Math.atan2(args[0](context), args[1](context));
        }
        return (context) => Math.atan(args[0](context));
      }
      case Ops.Sqrt: {
        return (context) => Math.sqrt(args[0](context));
      }
      default: {
        throw new Error(`Unsupported numeric operator ${op}`);
      }
    }
  }

  /**
   * @param {import('./expression.js').CallExpression} expression The call expression.
   * @param {import('./expression.js').ParsingContext} context The parsing context.
   * @return {ExpressionEvaluator} The evaluator function.
   */
  function compileCaseExpression(expression, context) {
    const length = expression.args.length;
    const args = new Array(length);
    for (let i = 0; i < length; ++i) {
      args[i] = compileExpression(expression.args[i]);
    }
    return (context) => {
      for (let i = 0; i < length - 1; i += 2) {
        const condition = args[i](context);
        if (condition) {
          return args[i + 1](context);
        }
      }
      return args[length - 1](context);
    };
  }

  /**
   * @param {import('./expression.js').CallExpression} expression The call expression.
   * @param {import('./expression.js').ParsingContext} context The parsing context.
   * @return {ExpressionEvaluator} The evaluator function.
   */
  function compileMatchExpression(expression, context) {
    const length = expression.args.length;
    const args = new Array(length);
    for (let i = 0; i < length; ++i) {
      args[i] = compileExpression(expression.args[i]);
    }
    return (context) => {
      const value = args[0](context);
      for (let i = 1; i < length - 1; i += 2) {
        if (value === args[i](context)) {
          return args[i + 1](context);
        }
      }
      return args[length - 1](context);
    };
  }

  /**
   * @param {import('./expression.js').CallExpression} expression The call expression.
   * @param {import('./expression.js').ParsingContext} context The parsing context.
   * @return {ExpressionEvaluator} The evaluator function.
   */
  function compileInterpolateExpression(expression, context) {
    const length = expression.args.length;
    const args = new Array(length);
    for (let i = 0; i < length; ++i) {
      args[i] = compileExpression(expression.args[i]);
    }
    return (context) => {
      const base = args[0](context);
      const value = args[1](context);

      let previousInput;
      let previousOutput;
      for (let i = 2; i < length; i += 2) {
        const input = args[i](context);
        let output = args[i + 1](context);
        const isColor = Array.isArray(output);
        if (isColor) {
          output = withAlpha(output);
        }
        if (input >= value) {
          if (i === 2) {
            return output;
          }
          if (isColor) {
            return interpolateColor(
              base,
              value,
              previousInput,
              previousOutput,
              input,
              output,
            );
          }
          return interpolateNumber(
            base,
            value,
            previousInput,
            previousOutput,
            input,
            output,
          );
        }
        previousInput = input;
        previousOutput = output;
      }
      return previousOutput;
    };
  }

  /**
   * @param {import('./expression.js').CallExpression} expression The call expression.
   * @param {import('./expression.js').ParsingContext} context The parsing context.
   * @return {ExpressionEvaluator} The evaluator function.
   */
  function compileConvertExpression(expression, context) {
    const op = expression.operator;
    const length = expression.args.length;

    const args = new Array(length);
    for (let i = 0; i < length; ++i) {
      args[i] = compileExpression(expression.args[i]);
    }
    switch (op) {
      case Ops.ToString: {
        return (context) => {
          const value = args[0](context);
          if (expression.args[0].type === ColorType) {
            return toString(value);
          }
          return value.toString();
        };
      }
      default: {
        throw new Error(`Unsupported convert operator ${op}`);
      }
    }
  }

  /**
   * @param {number} base The base.
   * @param {number} value The value.
   * @param {number} input1 The first input value.
   * @param {number} output1 The first output value.
   * @param {number} input2 The second input value.
   * @param {number} output2 The second output value.
   * @return {number} The interpolated value.
   */
  function interpolateNumber(base, value, input1, output1, input2, output2) {
    const delta = input2 - input1;
    if (delta === 0) {
      return output1;
    }
    const along = value - input1;
    const factor =
      base === 1
        ? along / delta
        : (Math.pow(base, along) - 1) / (Math.pow(base, delta) - 1);
    return output1 + factor * (output2 - output1);
  }

  /**
   * @param {number} base The base.
   * @param {number} value The value.
   * @param {number} input1 The first input value.
   * @param {import('../color.js').Color} rgba1 The first output value.
   * @param {number} input2 The second input value.
   * @param {import('../color.js').Color} rgba2 The second output value.
   * @return {import('../color.js').Color} The interpolated color.
   */
  function interpolateColor(base, value, input1, rgba1, input2, rgba2) {
    const delta = input2 - input1;
    if (delta === 0) {
      return rgba1;
    }
    const lcha1 = rgbaToLcha(rgba1);
    const lcha2 = rgbaToLcha(rgba2);
    let deltaHue = lcha2[2] - lcha1[2];
    if (deltaHue > 180) {
      deltaHue -= 360;
    } else if (deltaHue < -180) {
      deltaHue += 360;
    }

    const lcha = [
      interpolateNumber(base, value, input1, lcha1[0], input2, lcha2[0]),
      interpolateNumber(base, value, input1, lcha1[1], input2, lcha2[1]),
      lcha1[2] + interpolateNumber(base, value, input1, 0, input2, deltaHue),
      interpolateNumber(base, value, input1, rgba1[3], input2, rgba2[3]),
    ];
    return lchaToRgba(lcha);
  }

  /**
   * @module ol/ImageState
   */

  /**
   * @enum {number}
   */
  var ImageState = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    ERROR: 3};

  /**
   * @module ol/Image
   */

  /**
   * @param {import('./DataTile.js').ImageLike} image Image element.
   * @param {function():any} loadHandler Load callback function.
   * @param {function():any} errorHandler Error callback function.
   * @return {function():void} Callback to stop listening.
   */
  function listenImage(image, loadHandler, errorHandler) {
    const img = /** @type {HTMLImageElement} */ (image);
    let listening = true;
    let decoding = false;
    let loaded = false;

    const listenerKeys = [
      listenOnce(img, EventType.LOAD, function () {
        loaded = true;
        if (!decoding) {
          loadHandler();
        }
      }),
    ];

    if (img.src && IMAGE_DECODE) {
      decoding = true;
      img
        .decode()
        .then(function () {
          if (listening) {
            loadHandler();
          }
        })
        .catch(function (error) {
          if (listening) {
            if (loaded) {
              loadHandler();
            } else {
              errorHandler();
            }
          }
        });
    } else {
      listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));
    }

    return function unlisten() {
      listening = false;
      listenerKeys.forEach(unlistenByKey);
    };
  }

  /**
   * Loads an image.
   * @param {HTMLImageElement} image Image, not yet loaded.
   * @param {string} [src] `src` attribute of the image. Optional, not required if already present.
   * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.
   * @api
   */
  function load(image, src) {
    return new Promise((resolve, reject) => {
      function handleLoad() {
        unlisten();
        resolve(image);
      }
      function handleError() {
        unlisten();
        reject(new Error('Image load error'));
      }
      function unlisten() {
        image.removeEventListener('load', handleLoad);
        image.removeEventListener('error', handleError);
      }
      image.addEventListener('load', handleLoad);
      image.addEventListener('error', handleError);
    });
  }

  /**
   * @param {HTMLImageElement} image Image, not yet loaded.
   * @param {string} [src] `src` attribute of the image. Optional, not required if already present.
   * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.
   */
  function decodeFallback(image, src) {
    if (src) {
      image.src = src;
    }
    return image.src && IMAGE_DECODE
      ? new Promise((resolve, reject) =>
          image
            .decode()
            .then(() => resolve(image))
            .catch((e) =>
              image.complete && image.width ? resolve(image) : reject(e),
            ),
        )
      : load(image);
  }

  /**
   * @module ol/style/IconImageCache
   */

  /**
   * @classdesc
   * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.
   */
  class IconImageCache {
    constructor() {
      /**
       * @type {!Object<string, import("./IconImage.js").default>}
       * @private
       */
      this.cache_ = {};

      /**
       * @type {!Object<string, CanvasPattern>}
       * @private
       */
      this.patternCache_ = {};

      /**
       * @type {number}
       * @private
       */
      this.cacheSize_ = 0;

      /**
       * @type {number}
       * @private
       */
      this.maxCacheSize_ = 1024;
    }

    /**
     * FIXME empty description for jsdoc
     */
    clear() {
      this.cache_ = {};
      this.patternCache_ = {};
      this.cacheSize_ = 0;
    }

    /**
     * @return {boolean} Can expire cache.
     */
    canExpireCache() {
      return this.cacheSize_ > this.maxCacheSize_;
    }

    /**
     * FIXME empty description for jsdoc
     */
    expire() {
      if (this.canExpireCache()) {
        let i = 0;
        for (const key in this.cache_) {
          const iconImage = this.cache_[key];
          if ((i++ & 3) === 0 && !iconImage.hasListener()) {
            delete this.cache_[key];
            delete this.patternCache_[key];
            --this.cacheSize_;
          }
        }
      }
    }

    /**
     * @param {string} src Src.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../color.js").Color|string|null} color Color.
     * @return {import("./IconImage.js").default} Icon image.
     */
    get(src, crossOrigin, color) {
      const key = getCacheKey$1(src, crossOrigin, color);
      return key in this.cache_ ? this.cache_[key] : null;
    }

    /**
     * @param {string} src Src.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../color.js").Color|string|null} color Color.
     * @return {CanvasPattern} Icon image.
     */
    getPattern(src, crossOrigin, color) {
      const key = getCacheKey$1(src, crossOrigin, color);
      return key in this.patternCache_ ? this.patternCache_[key] : null;
    }

    /**
     * @param {string} src Src.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../color.js").Color|string|null} color Color.
     * @param {import("./IconImage.js").default|null} iconImage Icon image.
     * @param {boolean} [pattern] Also cache a `'repeat'` pattern with this `iconImage`.
     */
    set(src, crossOrigin, color, iconImage, pattern) {
      const key = getCacheKey$1(src, crossOrigin, color);
      const update = key in this.cache_;
      this.cache_[key] = iconImage;
      if (pattern) {
        if (iconImage.getImageState() === ImageState.IDLE) {
          iconImage.load();
        }
        if (iconImage.getImageState() === ImageState.LOADING) {
          iconImage.ready().then(() => {
            this.patternCache_[key] = getSharedCanvasContext2D().createPattern(
              iconImage.getImage(1),
              'repeat',
            );
          });
        } else {
          this.patternCache_[key] = getSharedCanvasContext2D().createPattern(
            iconImage.getImage(1),
            'repeat',
          );
        }
      }
      if (!update) {
        ++this.cacheSize_;
      }
    }

    /**
     * Set the cache size of the icon cache. Default is `1024`. Change this value when
     * your map uses more than 1024 different icon images and you are not caching icon
     * styles on the application level.
     * @param {number} maxCacheSize Cache max size.
     * @api
     */
    setSize(maxCacheSize) {
      this.maxCacheSize_ = maxCacheSize;
      this.expire();
    }
  }

  /**
   * @param {string} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../color.js").Color|string|null} color Color.
   * @return {string} Cache key.
   */
  function getCacheKey$1(src, crossOrigin, color) {
    const colorString = color ? asArray(color) : 'null';
    return crossOrigin + ':' + src + ':' + colorString;
  }

  /**
   * The {@link module:ol/style/IconImageCache~IconImageCache} for
   * {@link module:ol/style/Icon~Icon} images.
   * @api
   */
  const shared = new IconImageCache();

  /**
   * @module ol/style/IconImage
   */


  /**
   * @type {CanvasRenderingContext2D}
   */
  let taintedTestContext = null;

  class IconImage extends Target {
    /**
     * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null} image Image.
     * @param {string|undefined} src Src.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../ImageState.js").default|undefined} imageState Image state.
     * @param {import("../color.js").Color|string|null} color Color.
     */
    constructor(image, src, crossOrigin, imageState, color) {
      super();

      /**
       * @private
       * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap}
       */
      this.hitDetectionImage_ = null;

      /**
       * @private
       * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null}
       */
      this.image_ = image;

      /**
       * @private
       * @type {string|null}
       */
      this.crossOrigin_ = crossOrigin;

      /**
       * @private
       * @type {Object<number, HTMLCanvasElement>}
       */
      this.canvas_ = {};

      /**
       * @private
       * @type {import("../color.js").Color|string|null}
       */
      this.color_ = color;

      /**
       * @private
       * @type {import("../ImageState.js").default}
       */
      this.imageState_ = imageState === undefined ? ImageState.IDLE : imageState;

      /**
       * @private
       * @type {import("../size.js").Size|null}
       */
      this.size_ =
        image && image.width && image.height ? [image.width, image.height] : null;

      /**
       * @private
       * @type {string|undefined}
       */
      this.src_ = src;

      /**
       * @private
       */
      this.tainted_;

      /**
       * @private
       * @type {Promise<void>|null}
       */
      this.ready_ = null;
    }

    /**
     * @private
     */
    initializeImage_() {
      this.image_ = new Image();
      if (this.crossOrigin_ !== null) {
        this.image_.crossOrigin = this.crossOrigin_;
      }
    }

    /**
     * @private
     * @return {boolean} The image canvas is tainted.
     */
    isTainted_() {
      if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {
        if (!taintedTestContext) {
          taintedTestContext = createCanvasContext2D(1, 1, undefined, {
            willReadFrequently: true,
          });
        }
        taintedTestContext.drawImage(this.image_, 0, 0);
        try {
          taintedTestContext.getImageData(0, 0, 1, 1);
          this.tainted_ = false;
        } catch {
          taintedTestContext = null;
          this.tainted_ = true;
        }
      }
      return this.tainted_ === true;
    }

    /**
     * @private
     */
    dispatchChangeEvent_() {
      this.dispatchEvent(EventType.CHANGE);
    }

    /**
     * @private
     */
    handleImageError_() {
      this.imageState_ = ImageState.ERROR;
      this.dispatchChangeEvent_();
    }

    /**
     * @private
     */
    handleImageLoad_() {
      this.imageState_ = ImageState.LOADED;
      this.size_ = [this.image_.width, this.image_.height];
      this.dispatchChangeEvent_();
    }

    /**
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element or image bitmap.
     */
    getImage(pixelRatio) {
      if (!this.image_) {
        this.initializeImage_();
      }
      this.replaceColor_(pixelRatio);
      return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;
    }

    /**
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Image or Canvas element.
     */
    getPixelRatio(pixelRatio) {
      this.replaceColor_(pixelRatio);
      return this.canvas_[pixelRatio] ? pixelRatio : 1;
    }

    /**
     * @return {import("../ImageState.js").default} Image state.
     */
    getImageState() {
      return this.imageState_;
    }

    /**
     * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.
     */
    getHitDetectionImage() {
      if (!this.image_) {
        this.initializeImage_();
      }
      if (!this.hitDetectionImage_) {
        if (this.isTainted_()) {
          const width = this.size_[0];
          const height = this.size_[1];
          const context = createCanvasContext2D(width, height);
          context.fillRect(0, 0, width, height);
          this.hitDetectionImage_ = context.canvas;
        } else {
          this.hitDetectionImage_ = this.image_;
        }
      }
      return this.hitDetectionImage_;
    }

    /**
     * Get the size of the icon (in pixels).
     * @return {import("../size.js").Size} Image size.
     */
    getSize() {
      return this.size_;
    }

    /**
     * @return {string|undefined} Image src.
     */
    getSrc() {
      return this.src_;
    }

    /**
     * Load not yet loaded URI.
     */
    load() {
      if (this.imageState_ !== ImageState.IDLE) {
        return;
      }
      if (!this.image_) {
        this.initializeImage_();
      }

      this.imageState_ = ImageState.LOADING;
      try {
        if (this.src_ !== undefined) {
          /** @type {HTMLImageElement} */ (this.image_).src = this.src_;
        }
      } catch {
        this.handleImageError_();
      }
      if (this.image_ instanceof HTMLImageElement) {
        decodeFallback(this.image_, this.src_)
          .then((image) => {
            this.image_ = image;
            this.handleImageLoad_();
          })
          .catch(this.handleImageError_.bind(this));
      }
    }

    /**
     * @param {number} pixelRatio Pixel ratio.
     * @private
     */
    replaceColor_(pixelRatio) {
      if (
        !this.color_ ||
        this.canvas_[pixelRatio] ||
        this.imageState_ !== ImageState.LOADED
      ) {
        return;
      }

      const image = this.image_;
      const ctx = createCanvasContext2D(
        Math.ceil(image.width * pixelRatio),
        Math.ceil(image.height * pixelRatio),
      );
      const canvas = ctx.canvas;

      ctx.scale(pixelRatio, pixelRatio);
      ctx.drawImage(image, 0, 0);

      ctx.globalCompositeOperation = 'multiply';
      ctx.fillStyle = asString(this.color_);
      ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);

      ctx.globalCompositeOperation = 'destination-in';
      ctx.drawImage(image, 0, 0);

      this.canvas_[pixelRatio] = canvas;
    }

    /**
     * @return {Promise<void>} Promise that resolves when the image is loaded.
     */
    ready() {
      if (!this.ready_) {
        this.ready_ = new Promise((resolve) => {
          if (
            this.imageState_ === ImageState.LOADED ||
            this.imageState_ === ImageState.ERROR
          ) {
            resolve();
          } else {
            const onChange = () => {
              if (
                this.imageState_ === ImageState.LOADED ||
                this.imageState_ === ImageState.ERROR
              ) {
                this.removeEventListener(EventType.CHANGE, onChange);
                resolve();
              }
            };
            this.addEventListener(EventType.CHANGE, onChange);
          }
        });
      }
      return this.ready_;
    }
  }

  /**
   * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null} image Image.
   * @param {string|undefined} cacheKey Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../ImageState.js").default|undefined} imageState Image state.
   * @param {import("../color.js").Color|string|null} color Color.
   * @param {boolean} [pattern] Also cache a `repeat` pattern with the icon image.
   * @return {IconImage} Icon image.
   */
  function get$1(image, cacheKey, crossOrigin, imageState, color, pattern) {
    let iconImage =
      cacheKey === undefined
        ? undefined
        : shared.get(cacheKey, crossOrigin, color);
    if (!iconImage) {
      iconImage = new IconImage(
        image,
        image && 'src' in image ? image.src || undefined : cacheKey,
        crossOrigin,
        imageState,
        color,
      );
      shared.set(cacheKey, crossOrigin, color, iconImage, pattern);
    }
    if (
      pattern &&
      iconImage &&
      !shared.getPattern(cacheKey, crossOrigin, color)
    ) {
      shared.set(cacheKey, crossOrigin, color, iconImage, pattern);
    }
    return iconImage;
  }

  /**
   * @module ol/colorlike
   */

  /**
   * @typedef {Object} PatternDescriptor
   * @property {string} src Pattern image URL
   * @property {import("./color.js").Color|string} [color] Color to tint the pattern with.
   * @property {import("./size.js").Size} [size] Size of the desired slice from the pattern image.
   * Use this together with `offset` when the pattern image is a sprite sheet.
   * @property {import("./size.js").Size} [offset] Offset of the desired slice from the pattern image.
   * Use this together with `size` when the pattern image is a sprite sheet.
   */

  /**
   * A type accepted by CanvasRenderingContext2D.fillStyle
   * or CanvasRenderingContext2D.strokeStyle.
   * Represents a color, [CanvasPattern](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern),
   * or [CanvasGradient](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient). The origin for
   * patterns and gradients as fill style is an increment of 512 css pixels from map coordinate
   * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image
   * must be a factor of two (2, 4, 8, ..., 512).
   *
   * @typedef {string|CanvasPattern|CanvasGradient} ColorLike
   * @api
   */

  /**
   * @param {import("./color.js").Color|ColorLike|PatternDescriptor|null} color Color.
   * @return {ColorLike|null} The color as an {@link ol/colorlike~ColorLike}.
   * @api
   */
  function asColorLike(color) {
    if (!color) {
      return null;
    }
    if (Array.isArray(color)) {
      return toString(color);
    }
    if (typeof color === 'object' && 'src' in color) {
      return asCanvasPattern(color);
    }
    return color;
  }

  /**
   * @param {PatternDescriptor} pattern Pattern descriptor.
   * @return {CanvasPattern|null} Canvas pattern or null if the pattern referenced in the
   * PatternDescriptor was not found in the icon image cache.
   */
  function asCanvasPattern(pattern) {
    if (!pattern.offset || !pattern.size) {
      return shared.getPattern(pattern.src, 'anonymous', pattern.color);
    }

    const cacheKey = pattern.src + ':' + pattern.offset;

    const canvasPattern = shared.getPattern(
      cacheKey,
      undefined,
      pattern.color,
    );
    if (canvasPattern) {
      return canvasPattern;
    }

    const iconImage = shared.get(pattern.src, 'anonymous', null);
    if (iconImage.getImageState() !== ImageState.LOADED) {
      return null;
    }
    const patternCanvasContext = createCanvasContext2D(
      pattern.size[0],
      pattern.size[1],
    );
    patternCanvasContext.drawImage(
      iconImage.getImage(1),
      pattern.offset[0],
      pattern.offset[1],
      pattern.size[0],
      pattern.size[1],
      0,
      0,
      pattern.size[0],
      pattern.size[1],
    );
    get$1(
      patternCanvasContext.canvas,
      cacheKey,
      undefined,
      ImageState.LOADED,
      pattern.color,
      true,
    );
    return shared.getPattern(cacheKey, undefined, pattern.color);
  }

  /**
   * @module ol/render/canvas
   */

  /**
   * @typedef {'Circle' | 'Image' | 'LineString' | 'Polygon' | 'Text' | 'Default'} BuilderType
   */

  /**
   * @typedef {Object} FillState
   * @property {import("../colorlike.js").ColorLike} fillStyle FillStyle.
   */

  /**
   * @typedef Label
   * @property {number} width Width.
   * @property {number} height Height.
   * @property {Array<string|number>} contextInstructions ContextInstructions.
   */

  /**
   * @typedef {Object} FillStrokeState
   * @property {import("../colorlike.js").ColorLike} [currentFillStyle] Current FillStyle.
   * @property {import("../colorlike.js").ColorLike} [currentStrokeStyle] Current StrokeStyle.
   * @property {CanvasLineCap} [currentLineCap] Current LineCap.
   * @property {Array<number>} currentLineDash Current LineDash.
   * @property {number} [currentLineDashOffset] Current LineDashOffset.
   * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.
   * @property {number} [currentLineWidth] Current LineWidth.
   * @property {number} [currentMiterLimit] Current MiterLimit.
   * @property {number} [lastStroke] Last stroke.
   * @property {import("../colorlike.js").ColorLike} [fillStyle] FillStyle.
   * @property {import("../colorlike.js").ColorLike} [strokeStyle] StrokeStyle.
   * @property {CanvasLineCap} [lineCap] LineCap.
   * @property {Array<number>} lineDash LineDash.
   * @property {number} [lineDashOffset] LineDashOffset.
   * @property {CanvasLineJoin} [lineJoin] LineJoin.
   * @property {number} [lineWidth] LineWidth.
   * @property {number} [miterLimit] MiterLimit.
   * @property {number} [fillPatternScale] Fill pattern scale.
   */

  /**
   * @typedef {Object} StrokeState
   * @property {CanvasLineCap} lineCap LineCap.
   * @property {Array<number>} lineDash LineDash.
   * @property {number} lineDashOffset LineDashOffset.
   * @property {CanvasLineJoin} lineJoin LineJoin.
   * @property {number} lineWidth LineWidth.
   * @property {number} miterLimit MiterLimit.
   * @property {import("../colorlike.js").ColorLike} strokeStyle StrokeStyle.
   */

  /**
   * @typedef {Object} TextState
   * @property {string} font Font.
   * @property {CanvasTextAlign} [textAlign] TextAlign.
   * @property {number} [repeat] Repeat.
   * @property {import("../style/Text.js").TextJustify} [justify] Justify.
   * @property {CanvasTextBaseline} textBaseline TextBaseline.
   * @property {import("../style/Text.js").TextPlacement} [placement] Placement.
   * @property {number} [maxAngle] MaxAngle.
   * @property {boolean} [overflow] Overflow.
   * @property {import("../style/Fill.js").default} [backgroundFill] BackgroundFill.
   * @property {import("../style/Stroke.js").default} [backgroundStroke] BackgroundStroke.
   * @property {import("../size.js").Size} [scale] Scale.
   * @property {Array<number>} [padding] Padding.
   */

  /**
   * @typedef {Object} SerializableInstructions
   * @property {Array<*>} instructions The rendering instructions.
   * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.
   * @property {Array<number>} coordinates The array of all coordinates.
   * @property {!Object<string, TextState>} [textStates] The text states (decluttering).
   * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).
   * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).
   */

  /**
   * @typedef {Object<number, import("./canvas/Executor.js").ReplayImageOrLabelArgs>} DeclutterImageWithText
   */

  /**
   * @const
   * @type {string}
   */
  const defaultFont = '10px sans-serif';

  /**
   * @const
   * @type {string}
   */
  const defaultFillStyle = '#000';

  /**
   * @const
   * @type {CanvasLineCap}
   */
  const defaultLineCap = 'round';

  /**
   * @const
   * @type {Array<number>}
   */
  const defaultLineDash = [];

  /**
   * @const
   * @type {number}
   */
  const defaultLineDashOffset = 0;

  /**
   * @const
   * @type {CanvasLineJoin}
   */
  const defaultLineJoin = 'round';

  /**
   * @const
   * @type {number}
   */
  const defaultMiterLimit = 10;

  /**
   * @const
   * @type {import("../colorlike.js").ColorLike}
   */
  const defaultStrokeStyle = '#000';

  /**
   * @const
   * @type {CanvasTextAlign}
   */
  const defaultTextAlign = 'center';

  /**
   * @const
   * @type {CanvasTextBaseline}
   */
  const defaultTextBaseline = 'middle';

  /**
   * @const
   * @type {Array<number>}
   */
  const defaultPadding = [0, 0, 0, 0];

  /**
   * @const
   * @type {number}
   */
  const defaultLineWidth = 1;

  /**
   * @type {BaseObject}
   */
  const checkedFonts = new BaseObject();

  /**
   * @type {CanvasRenderingContext2D}
   */
  let measureContext = null;

  /**
   * @type {string}
   */
  let measureFont;

  /**
   * @type {!Object<string, number>}
   */
  const textHeights = {};

  /**
   * Clears the label cache when a font becomes available.
   * @param {string} fontSpec CSS font spec.
   */
  const registerFont = (function () {
    const retries = 100;
    const size = '32px ';
    const referenceFonts = ['monospace', 'serif'];
    const len = referenceFonts.length;
    const text = 'wmytzilWMYTZIL@#/&?$%10\uF013';
    let interval, referenceWidth;

    /**
     * @param {string} fontStyle Css font-style
     * @param {string} fontWeight Css font-weight
     * @param {*} fontFamily Css font-family
     * @return {boolean} Font with style and weight is available
     */
    function isAvailable(fontStyle, fontWeight, fontFamily) {
      let available = true;
      for (let i = 0; i < len; ++i) {
        const referenceFont = referenceFonts[i];
        referenceWidth = measureTextWidth(
          fontStyle + ' ' + fontWeight + ' ' + size + referenceFont,
          text,
        );
        if (fontFamily != referenceFont) {
          const width = measureTextWidth(
            fontStyle +
              ' ' +
              fontWeight +
              ' ' +
              size +
              fontFamily +
              ',' +
              referenceFont,
            text,
          );
          // If width and referenceWidth are the same, then the fallback was used
          // instead of the font we wanted, so the font is not available.
          available = available && width != referenceWidth;
        }
      }
      if (available) {
        return true;
      }
      return false;
    }

    function check() {
      let done = true;
      const fonts = checkedFonts.getKeys();
      for (let i = 0, ii = fonts.length; i < ii; ++i) {
        const font = fonts[i];
        if (checkedFonts.get(font) < retries) {
          const [style, weight, family] = font.split('\n');
          if (isAvailable(style, weight, family)) {
            clear$2(textHeights);
            // Make sure that loaded fonts are picked up by Safari
            measureContext = null;
            measureFont = undefined;
            checkedFonts.set(font, retries);
          } else {
            checkedFonts.set(font, checkedFonts.get(font) + 1, true);
            done = false;
          }
        }
      }
      if (done) {
        clearInterval(interval);
        interval = undefined;
      }
    }

    return function (fontSpec) {
      const font = getFontParameters(fontSpec);
      if (!font) {
        return;
      }
      const families = font.families;
      for (let i = 0, ii = families.length; i < ii; ++i) {
        const family = families[i];
        const key = font.style + '\n' + font.weight + '\n' + family;
        if (checkedFonts.get(key) === undefined) {
          checkedFonts.set(key, retries, true);
          if (!isAvailable(font.style, font.weight, family)) {
            checkedFonts.set(key, 0, true);
            if (interval === undefined) {
              interval = setInterval(check, 32);
            }
          }
        }
      }
    };
  })();

  /**
   * @param {string} font Font to use for measuring.
   * @return {import("../size.js").Size} Measurement.
   */
  const measureTextHeight = (function () {
    /**
     * @type {HTMLDivElement}
     */
    let measureElement;
    return function (fontSpec) {
      let height = textHeights[fontSpec];
      if (height == undefined) {
        if (WORKER_OFFSCREEN_CANVAS) {
          const font = getFontParameters(fontSpec);
          const metrics = measureText(fontSpec, 'Å½g');
          const lineHeight = isNaN(Number(font.lineHeight))
            ? 1.2
            : Number(font.lineHeight);
          height =
            lineHeight *
            (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);
        } else {
          if (!measureElement) {
            measureElement = document.createElement('div');
            measureElement.innerHTML = 'M';
            measureElement.style.minHeight = '0';
            measureElement.style.maxHeight = 'none';
            measureElement.style.height = 'auto';
            measureElement.style.padding = '0';
            measureElement.style.border = 'none';
            measureElement.style.position = 'absolute';
            measureElement.style.display = 'block';
            measureElement.style.left = '-99999px';
          }
          measureElement.style.font = fontSpec;
          document.body.appendChild(measureElement);
          height = measureElement.offsetHeight;
          document.body.removeChild(measureElement);
        }
        textHeights[fontSpec] = height;
      }
      return height;
    };
  })();

  /**
   * @param {string} font Font.
   * @param {string} text Text.
   * @return {TextMetrics} Text metrics.
   */
  function measureText(font, text) {
    if (!measureContext) {
      measureContext = createCanvasContext2D(1, 1);
    }
    if (font != measureFont) {
      measureContext.font = font;
      measureFont = measureContext.font;
    }
    return measureContext.measureText(text);
  }

  /**
   * @param {string} font Font.
   * @param {string} text Text.
   * @return {number} Width.
   */
  function measureTextWidth(font, text) {
    return measureText(font, text).width;
  }

  /**
   * Measure text width using a cache.
   * @param {string} font The font.
   * @param {string} text The text to measure.
   * @param {Object<string, number>} cache A lookup of cached widths by text.
   * @return {number} The text width.
   */
  function measureAndCacheTextWidth(font, text, cache) {
    if (text in cache) {
      return cache[text];
    }
    const width = text
      .split('\n')
      .reduce((prev, curr) => Math.max(prev, measureTextWidth(font, curr)), 0);
    cache[text] = width;
    return width;
  }

  /**
   * @param {TextState} baseStyle Base style.
   * @param {Array<string>} chunks Text chunks to measure.
   * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.
   */
  function getTextDimensions(baseStyle, chunks) {
    const widths = [];
    const heights = [];
    const lineWidths = [];
    let width = 0;
    let lineWidth = 0;
    let height = 0;
    let lineHeight = 0;
    for (let i = 0, ii = chunks.length; i <= ii; i += 2) {
      const text = chunks[i];
      if (text === '\n' || i === ii) {
        width = Math.max(width, lineWidth);
        lineWidths.push(lineWidth);
        lineWidth = 0;
        height += lineHeight;
        lineHeight = 0;
        continue;
      }
      const font = chunks[i + 1] || baseStyle.font;
      const currentWidth = measureTextWidth(font, text);
      widths.push(currentWidth);
      lineWidth += currentWidth;
      const currentHeight = measureTextHeight(font);
      heights.push(currentHeight);
      lineHeight = Math.max(lineHeight, currentHeight);
    }
    return {width, height, widths, heights, lineWidths};
  }

  /**
   * @param {CanvasRenderingContext2D|import("../render/canvas/ZIndexContext.js").ZIndexContextProxy} context Context.
   * @param {import("../transform.js").Transform|null} transform Transform.
   * @param {number} opacity Opacity.
   * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.
   * @param {number} originX Origin X.
   * @param {number} originY Origin Y.
   * @param {number} w Width.
   * @param {number} h Height.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {import("../size.js").Size} scale Scale.
   */
  function drawImageOrLabel(
    context,
    transform,
    opacity,
    labelOrImage,
    originX,
    originY,
    w,
    h,
    x,
    y,
    scale,
  ) {
    context.save();

    if (opacity !== 1) {
      if (context.globalAlpha === undefined) {
        context.globalAlpha = (context) => (context.globalAlpha *= opacity);
      } else {
        context.globalAlpha *= opacity;
      }
    }
    if (transform) {
      context.transform.apply(context, transform);
    }

    if (/** @type {*} */ (labelOrImage).contextInstructions) {
      // label
      context.translate(x, y);
      context.scale(scale[0], scale[1]);
      executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);
    } else if (scale[0] < 0 || scale[1] < 0) {
      // flipped image
      context.translate(x, y);
      context.scale(scale[0], scale[1]);
      context.drawImage(
        /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (
          labelOrImage
        ),
        originX,
        originY,
        w,
        h,
        0,
        0,
        w,
        h,
      );
    } else {
      // if image not flipped translate and scale can be avoided
      context.drawImage(
        /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (
          labelOrImage
        ),
        originX,
        originY,
        w,
        h,
        x,
        y,
        w * scale[0],
        h * scale[1],
      );
    }

    context.restore();
  }

  /**
   * @param {Label} label Label.
   * @param {CanvasRenderingContext2D} context Context.
   */
  function executeLabelInstructions(label, context) {
    const contextInstructions = label.contextInstructions;
    for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {
      if (Array.isArray(contextInstructions[i + 1])) {
        context[contextInstructions[i]].apply(
          context,
          contextInstructions[i + 1],
        );
      } else {
        context[contextInstructions[i]] = contextInstructions[i + 1];
      }
    }
  }

  /**
   * @module ol/style/Image
   */

  /**
   * @typedef {Object} Options
   * @property {number} opacity Opacity.
   * @property {boolean} rotateWithView If the image should get rotated with the view.
   * @property {number} rotation Rotation.
   * @property {number|import("../size.js").Size} scale Scale.
   * @property {Array<number>} displacement Displacement.
   * @property {import('../style/Style.js').DeclutterMode} declutterMode Declutter mode: `declutter`, `obstacle`, `none`.
   */

  /**
   * @classdesc
   * A base class used for creating subclasses and not instantiated in
   * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
   * {@link module:ol/style/RegularShape~RegularShape}.
   * @abstract
   * @api
   */
  class ImageStyle {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      /**
       * @private
       * @type {number}
       */
      this.opacity_ = options.opacity;

      /**
       * @private
       * @type {boolean}
       */
      this.rotateWithView_ = options.rotateWithView;

      /**
       * @private
       * @type {number}
       */
      this.rotation_ = options.rotation;

      /**
       * @private
       * @type {number|import("../size.js").Size}
       */
      this.scale_ = options.scale;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.scaleArray_ = toSize(options.scale);

      /**
       * @private
       * @type {Array<number>}
       */
      this.displacement_ = options.displacement;

      /**
       * @private
       * @type {import('../style/Style.js').DeclutterMode}
       */
      this.declutterMode_ = options.declutterMode;
    }

    /**
     * Clones the style.
     * @return {ImageStyle} The cloned style.
     * @api
     */
    clone() {
      const scale = this.getScale();
      return new ImageStyle({
        opacity: this.getOpacity(),
        scale: Array.isArray(scale) ? scale.slice() : scale,
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        displacement: this.getDisplacement().slice(),
        declutterMode: this.getDeclutterMode(),
      });
    }

    /**
     * Get the symbolizer opacity.
     * @return {number} Opacity.
     * @api
     */
    getOpacity() {
      return this.opacity_;
    }

    /**
     * Determine whether the symbolizer rotates with the map.
     * @return {boolean} Rotate with map.
     * @api
     */
    getRotateWithView() {
      return this.rotateWithView_;
    }

    /**
     * Get the symoblizer rotation.
     * @return {number} Rotation.
     * @api
     */
    getRotation() {
      return this.rotation_;
    }

    /**
     * Get the symbolizer scale.
     * @return {number|import("../size.js").Size} Scale.
     * @api
     */
    getScale() {
      return this.scale_;
    }

    /**
     * Get the symbolizer scale array.
     * @return {import("../size.js").Size} Scale array.
     */
    getScaleArray() {
      return this.scaleArray_;
    }

    /**
     * Get the displacement of the shape
     * @return {Array<number>} Shape's center displacement
     * @api
     */
    getDisplacement() {
      return this.displacement_;
    }

    /**
     * Get the declutter mode of the shape
     * @return {import("./Style.js").DeclutterMode} Shape's declutter mode
     * @api
     */
    getDeclutterMode() {
      return this.declutterMode_;
    }

    /**
     * Get the anchor point in pixels. The anchor determines the center point for the
     * symbolizer.
     * @abstract
     * @return {Array<number>} Anchor.
     */
    getAnchor() {
      return abstract();
    }

    /**
     * Get the image element for the symbolizer.
     * @abstract
     * @param {number} pixelRatio Pixel ratio.
     * @return {import('../DataTile.js').ImageLike} Image element.
     */
    getImage(pixelRatio) {
      return abstract();
    }

    /**
     * @abstract
     * @return {import('../DataTile.js').ImageLike} Image element.
     */
    getHitDetectionImage() {
      return abstract();
    }

    /**
     * Get the image pixel ratio.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Pixel ratio.
     */
    getPixelRatio(pixelRatio) {
      return 1;
    }

    /**
     * @abstract
     * @return {import("../ImageState.js").default} Image state.
     */
    getImageState() {
      return abstract();
    }

    /**
     * @abstract
     * @return {import("../size.js").Size} Image size.
     */
    getImageSize() {
      return abstract();
    }

    /**
     * Get the origin of the symbolizer.
     * @abstract
     * @return {Array<number>} Origin.
     */
    getOrigin() {
      return abstract();
    }

    /**
     * Get the size of the symbolizer (in pixels).
     * @abstract
     * @return {import("../size.js").Size} Size.
     */
    getSize() {
      return abstract();
    }

    /**
     * Set the displacement.
     *
     * @param {Array<number>} displacement Displacement.
     * @api
     */
    setDisplacement(displacement) {
      this.displacement_ = displacement;
    }

    /**
     * Set the opacity.
     *
     * @param {number} opacity Opacity.
     * @api
     */
    setOpacity(opacity) {
      this.opacity_ = opacity;
    }

    /**
     * Set whether to rotate the style with the view.
     *
     * @param {boolean} rotateWithView Rotate with map.
     * @api
     */
    setRotateWithView(rotateWithView) {
      this.rotateWithView_ = rotateWithView;
    }

    /**
     * Set the rotation.
     *
     * @param {number} rotation Rotation.
     * @api
     */
    setRotation(rotation) {
      this.rotation_ = rotation;
    }

    /**
     * Set the scale.
     *
     * @param {number|import("../size.js").Size} scale Scale.
     * @api
     */
    setScale(scale) {
      this.scale_ = scale;
      this.scaleArray_ = toSize(scale);
    }

    /**
     * @abstract
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */
    listenImageChange(listener) {
      abstract();
    }

    /**
     * Load not yet loaded URI.
     * @abstract
     */
    load() {
      abstract();
    }

    /**
     * @abstract
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */
    unlistenImageChange(listener) {
      abstract();
    }

    /**
     * @return {Promise<void>} `false` or Promise that resolves when the style is ready to use.
     */
    ready() {
      return Promise.resolve();
    }
  }

  /**
   * @module ol/style/RegularShape
   */


  /**
   * Specify radius for regular polygons, or both radius and radius2 for stars.
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
   * is the number of sides.
   * @property {number} radius Radius of a regular polygon.
   * @property {number} [radius2] Second radius to make a star instead of a regular polygon.
   * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.
   * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.
   * Positive values will shift the shape right and up.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
   * @property {number|import("../size.js").Size} [scale=1] Scale. Unless two dimensional scaling is required a better
   * result may be obtained with appropriate settings for `radius` and `radius2`.
   * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode.
   */

  /**
   * @typedef {Object} RenderOptions
   * @property {import("../colorlike.js").ColorLike|undefined} strokeStyle StrokeStyle.
   * @property {number} strokeWidth StrokeWidth.
   * @property {number} size Size.
   * @property {CanvasLineCap} lineCap LineCap.
   * @property {Array<number>|null} lineDash LineDash.
   * @property {number} lineDashOffset LineDashOffset.
   * @property {CanvasLineJoin} lineJoin LineJoin.
   * @property {number} miterLimit MiterLimit.
   */

  /**
   * @classdesc
   * Set regular shape style for vector features. The resulting shape will be
   * a regular polygon when `radius` is provided, or a star when both `radius` and
   * `radius2` are provided.
   * @api
   */
  class RegularShape extends ImageStyle {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      super({
        opacity: 1,
        rotateWithView:
          options.rotateWithView !== undefined ? options.rotateWithView : false,
        rotation: options.rotation !== undefined ? options.rotation : 0,
        scale: options.scale !== undefined ? options.scale : 1,
        displacement:
          options.displacement !== undefined ? options.displacement : [0, 0],
        declutterMode: options.declutterMode,
      });

      /**
       * @private
       * @type {HTMLCanvasElement|null}
       */
      this.hitDetectionCanvas_ = null;

      /**
       * @private
       * @type {import("./Fill.js").default|null}
       */
      this.fill_ = options.fill !== undefined ? options.fill : null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.origin_ = [0, 0];

      /**
       * @private
       * @type {number}
       */
      this.points_ = options.points;

      /**
       * @protected
       * @type {number}
       */
      this.radius = options.radius;

      /**
       * @private
       * @type {number|undefined}
       */
      this.radius2_ = options.radius2;

      /**
       * @private
       * @type {number}
       */
      this.angle_ = options.angle !== undefined ? options.angle : 0;

      /**
       * @private
       * @type {import("./Stroke.js").default|null}
       */
      this.stroke_ = options.stroke !== undefined ? options.stroke : null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.size_;

      /**
       * @private
       * @type {RenderOptions}
       */
      this.renderOptions_;

      /**
       * @private
       */
      this.imageState_ =
        this.fill_ && this.fill_.loading()
          ? ImageState.LOADING
          : ImageState.LOADED;
      if (this.imageState_ === ImageState.LOADING) {
        this.ready().then(() => (this.imageState_ = ImageState.LOADED));
      }
      this.render();
    }

    /**
     * Clones the style.
     * @return {RegularShape} The cloned style.
     * @api
     * @override
     */
    clone() {
      const scale = this.getScale();
      const style = new RegularShape({
        fill: this.getFill() ? this.getFill().clone() : undefined,
        points: this.getPoints(),
        radius: this.getRadius(),
        radius2: this.getRadius2(),
        angle: this.getAngle(),
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        scale: Array.isArray(scale) ? scale.slice() : scale,
        displacement: this.getDisplacement().slice(),
        declutterMode: this.getDeclutterMode(),
      });
      style.setOpacity(this.getOpacity());
      return style;
    }

    /**
     * Get the anchor point in pixels. The anchor determines the center point for the
     * symbolizer.
     * @return {Array<number>} Anchor.
     * @api
     * @override
     */
    getAnchor() {
      const size = this.size_;
      const displacement = this.getDisplacement();
      const scale = this.getScaleArray();
      // anchor is scaled by renderer but displacement should not be scaled
      // so divide by scale here
      return [
        size[0] / 2 - displacement[0] / scale[0],
        size[1] / 2 + displacement[1] / scale[1],
      ];
    }

    /**
     * Get the angle used in generating the shape.
     * @return {number} Shape's rotation in radians.
     * @api
     */
    getAngle() {
      return this.angle_;
    }

    /**
     * Get the fill style for the shape.
     * @return {import("./Fill.js").default|null} Fill style.
     * @api
     */
    getFill() {
      return this.fill_;
    }

    /**
     * Set the fill style.
     * @param {import("./Fill.js").default|null} fill Fill style.
     * @api
     */
    setFill(fill) {
      this.fill_ = fill;
      this.render();
    }

    /**
     * @return {HTMLCanvasElement} Image element.
     * @override
     */
    getHitDetectionImage() {
      if (!this.hitDetectionCanvas_) {
        this.hitDetectionCanvas_ = this.createHitDetectionCanvas_(
          this.renderOptions_,
        );
      }
      return this.hitDetectionCanvas_;
    }

    /**
     * Get the image icon.
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLCanvasElement} Image or Canvas element.
     * @api
     * @override
     */
    getImage(pixelRatio) {
      const fillKey = this.fill_?.getKey();
      const cacheKey =
        `${pixelRatio},${this.angle_},${this.radius},${this.radius2_},${this.points_},${fillKey}` +
        Object.values(this.renderOptions_).join(',');
      let image = /** @type {HTMLCanvasElement} */ (
        shared.get(cacheKey, null, null)?.getImage(1)
      );
      if (!image) {
        const renderOptions = this.renderOptions_;
        const size = Math.ceil(renderOptions.size * pixelRatio);
        const context = createCanvasContext2D(size, size);
        this.draw_(renderOptions, context, pixelRatio);

        image = context.canvas;
        shared.set(
          cacheKey,
          null,
          null,
          new IconImage(image, undefined, null, ImageState.LOADED, null),
        );
      }
      return image;
    }

    /**
     * Get the image pixel ratio.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Pixel ratio.
     * @override
     */
    getPixelRatio(pixelRatio) {
      return pixelRatio;
    }

    /**
     * @return {import("../size.js").Size} Image size.
     * @override
     */
    getImageSize() {
      return this.size_;
    }

    /**
     * @return {import("../ImageState.js").default} Image state.
     * @override
     */
    getImageState() {
      return this.imageState_;
    }

    /**
     * Get the origin of the symbolizer.
     * @return {Array<number>} Origin.
     * @api
     * @override
     */
    getOrigin() {
      return this.origin_;
    }

    /**
     * Get the number of points for generating the shape.
     * @return {number} Number of points for stars and regular polygons.
     * @api
     */
    getPoints() {
      return this.points_;
    }

    /**
     * Get the (primary) radius for the shape.
     * @return {number} Radius.
     * @api
     */
    getRadius() {
      return this.radius;
    }

    /**
     * Get the secondary radius for the shape.
     * @return {number|undefined} Radius2.
     * @api
     */
    getRadius2() {
      return this.radius2_;
    }

    /**
     * Get the size of the symbolizer (in pixels).
     * @return {import("../size.js").Size} Size.
     * @api
     * @override
     */
    getSize() {
      return this.size_;
    }

    /**
     * Get the stroke style for the shape.
     * @return {import("./Stroke.js").default|null} Stroke style.
     * @api
     */
    getStroke() {
      return this.stroke_;
    }

    /**
     * Set the stroke style.
     * @param {import("./Stroke.js").default|null} stroke Stroke style.
     * @api
     */
    setStroke(stroke) {
      this.stroke_ = stroke;
      this.render();
    }

    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     * @override
     */
    listenImageChange(listener) {}

    /**
     * Load not yet loaded URI.
     * @override
     */
    load() {}

    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     * @override
     */
    unlistenImageChange(listener) {}

    /**
     * Calculate additional canvas size needed for the miter.
     * @param {string} lineJoin Line join
     * @param {number} strokeWidth Stroke width
     * @param {number} miterLimit Miter limit
     * @return {number} Additional canvas size needed
     * @private
     */
    calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {
      if (
        strokeWidth === 0 ||
        this.points_ === Infinity ||
        (lineJoin !== 'bevel' && lineJoin !== 'miter')
      ) {
        return strokeWidth;
      }
      // m  | ^
      // i  | |\                  .
      // t >|  #\
      // e  | |\ \              .
      // r      \s\
      //      |  \t\          .                 .
      //          \r\                      .   .
      //      |    \o\      .          .  . . .
      //          e \k\            .  .    . .
      //      |      \e\  .    .  .       . .
      //       d      \ \  .  .          . .
      //      | _ _a_ _\#  .            . .
      //   r1          / `             . .
      //      |                       . .
      //       b     /               . .
      //      |                     . .
      //           / r2            . .
      //      |                        .   .
      //         /                           .   .
      //      |Î±                                   .   .
      //       /                                         .   .
      //      Â° center
      let r1 = this.radius;
      let r2 = this.radius2_ === undefined ? r1 : this.radius2_;
      if (r1 < r2) {
        const tmp = r1;
        r1 = r2;
        r2 = tmp;
      }
      const points =
        this.radius2_ === undefined ? this.points_ : this.points_ * 2;
      const alpha = (2 * Math.PI) / points;
      const a = r2 * Math.sin(alpha);
      const b = Math.sqrt(r2 * r2 - a * a);
      const d = r1 - b;
      const e = Math.sqrt(a * a + d * d);
      const miterRatio = e / a;
      if (lineJoin === 'miter' && miterRatio <= miterLimit) {
        return miterRatio * strokeWidth;
      }
      // Calculate the distance from center to the stroke corner where
      // it was cut short because of the miter limit.
      //              l
      //        ----+---- <= distance from center to here is maxr
      //       /####|k ##\
      //      /#####^#####\
      //     /#### /+\# s #\
      //    /### h/+++\# t #\
      //   /### t/+++++\# r #\
      //  /### a/+++++++\# o #\
      // /### p/++ fill +\# k #\
      ///#### /+++++^+++++\# e #\
      //#####/+++++/+\+++++\#####\
      const k = strokeWidth / 2 / miterRatio;
      const l = (strokeWidth / 2) * (d / e);
      const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);
      const bevelAdd = maxr - r1;
      if (this.radius2_ === undefined || lineJoin === 'bevel') {
        return bevelAdd * 2;
      }
      // If outer miter is over the miter limit the inner miter may reach through the
      // center and be longer than the bevel, same calculation as above but swap r1 / r2.
      const aa = r1 * Math.sin(alpha);
      const bb = Math.sqrt(r1 * r1 - aa * aa);
      const dd = r2 - bb;
      const ee = Math.sqrt(aa * aa + dd * dd);
      const innerMiterRatio = ee / aa;
      if (innerMiterRatio <= miterLimit) {
        const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;
        return 2 * Math.max(bevelAdd, innerLength);
      }
      return bevelAdd * 2;
    }

    /**
     * @return {RenderOptions}  The render options
     * @protected
     */
    createRenderOptions() {
      let lineCap = defaultLineCap;
      let lineJoin = defaultLineJoin;
      let miterLimit = 0;
      let lineDash = null;
      let lineDashOffset = 0;
      let strokeStyle;
      let strokeWidth = 0;

      if (this.stroke_) {
        strokeStyle = asColorLike(this.stroke_.getColor() ?? defaultStrokeStyle);
        strokeWidth = this.stroke_.getWidth() ?? defaultLineWidth;
        lineDash = this.stroke_.getLineDash();
        lineDashOffset = this.stroke_.getLineDashOffset() ?? 0;
        lineJoin = this.stroke_.getLineJoin() ?? defaultLineJoin;
        lineCap = this.stroke_.getLineCap() ?? defaultLineCap;
        miterLimit = this.stroke_.getMiterLimit() ?? defaultMiterLimit;
      }

      const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);
      const maxRadius = Math.max(this.radius, this.radius2_ || 0);
      const size = Math.ceil(2 * maxRadius + add);

      return {
        strokeStyle: strokeStyle,
        strokeWidth: strokeWidth,
        size: size,
        lineCap: lineCap,
        lineDash: lineDash,
        lineDashOffset: lineDashOffset,
        lineJoin: lineJoin,
        miterLimit: miterLimit,
      };
    }

    /**
     * @protected
     */
    render() {
      this.renderOptions_ = this.createRenderOptions();
      const size = this.renderOptions_.size;
      this.hitDetectionCanvas_ = null;
      this.size_ = [size, size];
    }

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The rendering context.
     * @param {number} pixelRatio The pixel ratio.
     */
    draw_(renderOptions, context, pixelRatio) {
      context.scale(pixelRatio, pixelRatio);
      // set origin to canvas center
      context.translate(renderOptions.size / 2, renderOptions.size / 2);

      this.createPath_(context);

      if (this.fill_) {
        let color = this.fill_.getColor();
        if (color === null) {
          color = defaultFillStyle;
        }
        context.fillStyle = asColorLike(color);
        context.fill();
      }
      if (renderOptions.strokeStyle) {
        context.strokeStyle = renderOptions.strokeStyle;
        context.lineWidth = renderOptions.strokeWidth;
        if (renderOptions.lineDash) {
          context.setLineDash(renderOptions.lineDash);
          context.lineDashOffset = renderOptions.lineDashOffset;
        }
        context.lineCap = renderOptions.lineCap;
        context.lineJoin = renderOptions.lineJoin;
        context.miterLimit = renderOptions.miterLimit;
        context.stroke();
      }
    }

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @return {HTMLCanvasElement} Canvas containing the icon
     */
    createHitDetectionCanvas_(renderOptions) {
      let context;
      if (this.fill_) {
        let color = this.fill_.getColor();

        // determine if fill is transparent (or pattern or gradient)
        let opacity = 0;
        if (typeof color === 'string') {
          color = asArray(color);
        }
        if (color === null) {
          opacity = 1;
        } else if (Array.isArray(color)) {
          opacity = color.length === 4 ? color[3] : 1;
        }
        if (opacity === 0) {
          // if a transparent fill style is set, create an extra hit-detection image
          // with a default fill style
          context = createCanvasContext2D(renderOptions.size, renderOptions.size);
          this.drawHitDetectionCanvas_(renderOptions, context);
        }
      }
      return context ? context.canvas : this.getImage(1);
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context The context to draw in.
     */
    createPath_(context) {
      let points = this.points_;
      const radius = this.radius;
      if (points === Infinity) {
        context.arc(0, 0, radius, 0, 2 * Math.PI);
      } else {
        const radius2 = this.radius2_ === undefined ? radius : this.radius2_;
        if (this.radius2_ !== undefined) {
          points *= 2;
        }
        const startAngle = this.angle_ - Math.PI / 2;
        const step = (2 * Math.PI) / points;
        for (let i = 0; i < points; i++) {
          const angle0 = startAngle + i * step;
          const radiusC = i % 2 === 0 ? radius : radius2;
          context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));
        }
        context.closePath();
      }
    }

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The context.
     */
    drawHitDetectionCanvas_(renderOptions, context) {
      // set origin to canvas center
      context.translate(renderOptions.size / 2, renderOptions.size / 2);

      this.createPath_(context);

      context.fillStyle = defaultFillStyle;
      context.fill();
      if (renderOptions.strokeStyle) {
        context.strokeStyle = renderOptions.strokeStyle;
        context.lineWidth = renderOptions.strokeWidth;
        if (renderOptions.lineDash) {
          context.setLineDash(renderOptions.lineDash);
          context.lineDashOffset = renderOptions.lineDashOffset;
        }
        context.lineJoin = renderOptions.lineJoin;
        context.miterLimit = renderOptions.miterLimit;
        context.stroke();
      }
    }

    /**
     * @override
     */
    ready() {
      return this.fill_ ? this.fill_.ready() : Promise.resolve();
    }
  }

  /**
   * @module ol/style/Circle
   */


  /**
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} radius Circle radius.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {Array<number>} [displacement=[0,0]] displacement
   * @property {number|import("../size.js").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.
   * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.
   * @property {number} [rotation=0] Rotation in radians
   * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).
   * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view
   * (meaningful only when used in conjunction with a two dimensional scale).
   * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode
   */

  /**
   * @classdesc
   * Set circle style for vector features.
   * @api
   */
  class CircleStyle extends RegularShape {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {radius: 5};

      super({
        points: Infinity,
        fill: options.fill,
        radius: options.radius,
        stroke: options.stroke,
        scale: options.scale !== undefined ? options.scale : 1,
        rotation: options.rotation !== undefined ? options.rotation : 0,
        rotateWithView:
          options.rotateWithView !== undefined ? options.rotateWithView : false,
        displacement:
          options.displacement !== undefined ? options.displacement : [0, 0],
        declutterMode: options.declutterMode,
      });
    }

    /**
     * Clones the style.
     * @return {CircleStyle} The cloned style.
     * @api
     * @override
     */
    clone() {
      const scale = this.getScale();
      const style = new CircleStyle({
        fill: this.getFill() ? this.getFill().clone() : undefined,
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        radius: this.getRadius(),
        scale: Array.isArray(scale) ? scale.slice() : scale,
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        displacement: this.getDisplacement().slice(),
        declutterMode: this.getDeclutterMode(),
      });
      style.setOpacity(this.getOpacity());
      return style;
    }

    /**
     * Set the circle radius.
     *
     * @param {number} radius Circle radius.
     * @api
     */
    setRadius(radius) {
      this.radius = radius;
      this.render();
    }
  }

  /**
   * @module ol/style/Fill
   */


  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike|import('../colorlike.js').PatternDescriptor|null} [color=null] A color,
   * gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats. For polygon fills (not for {@link import("./RegularShape.js").default} fills),
   * a pattern can also be provided as {@link module:ol/colorlike~PatternDescriptor}.
   * Default null; if null, the Canvas/renderer default black will be used.
   */

  /**
   * @classdesc
   * Set fill style for vector features.
   * @api
   */
  class Fill {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options || {};

      /**
       * @private
       * @type {import("./IconImage.js").default|null}
       */
      this.patternImage_ = null;

      /**
       * @private
       * @type {import("../color.js").Color|import("../colorlike.js").ColorLike|import('../colorlike.js').PatternDescriptor|null}
       */
      this.color_ = null;
      if (options.color !== undefined) {
        this.setColor(options.color);
      }
    }

    /**
     * Clones the style. The color is not cloned if it is a {@link module:ol/colorlike~ColorLike}.
     * @return {Fill} The cloned style.
     * @api
     */
    clone() {
      const color = this.getColor();
      return new Fill({
        color: Array.isArray(color) ? color.slice() : color || undefined,
      });
    }

    /**
     * Get the fill color.
     * @return {import("../color.js").Color|import("../colorlike.js").ColorLike|import('../colorlike.js').PatternDescriptor|null} Color.
     * @api
     */
    getColor() {
      return this.color_;
    }

    /**
     * Set the color.
     *
     * @param {import("../color.js").Color|import("../colorlike.js").ColorLike|import('../colorlike.js').PatternDescriptor|null} color Color.
     * @api
     */
    setColor(color) {
      if (color !== null && typeof color === 'object' && 'src' in color) {
        const patternImage = get$1(
          null,
          color.src,
          'anonymous',
          undefined,
          color.offset ? null : color.color ? color.color : null,
          !(color.offset && color.size),
        );
        patternImage.ready().then(() => {
          this.patternImage_ = null;
        });
        if (patternImage.getImageState() === ImageState.IDLE) {
          patternImage.load();
        }
        if (patternImage.getImageState() === ImageState.LOADING) {
          this.patternImage_ = patternImage;
        }
      }
      this.color_ = color;
    }

    /**
     * @return {string} Key of the fill for cache lookup.
     */
    getKey() {
      const fill = this.getColor();
      if (!fill) {
        return '';
      }
      return fill instanceof CanvasPattern || fill instanceof CanvasGradient
        ? getUid(fill)
        : typeof fill === 'object' && 'src' in fill
          ? fill.src + ':' + fill.offset
          : asArray(fill).toString();
    }

    /**
     * @return {boolean} The fill style is loading an image pattern.
     */
    loading() {
      return !!this.patternImage_;
    }

    /**
     * @return {Promise<void>} `false` or a promise that resolves when the style is ready to use.
     */
    ready() {
      return this.patternImage_ ? this.patternImage_.ready() : Promise.resolve();
    }
  }

  /**
   * @module ol/style/Icon
   */

  /**
   * @typedef {'fraction' | 'pixels'} IconAnchorUnits
   * Anchor unit can be either a fraction of the icon size or in pixels.
   */

  /**
   * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin
   * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.
   */

  /**
   * @typedef {Object} Options
   * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.
   * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,
   * `top-left` or `top-right`.
   * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is
   * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates
   * the x value in pixels.
   * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is
   * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates
   * the y value in pixels.
   * @property {import("../color.js").Color|string} [color] Color to tint the icon. If not specified,
   * the icon will be left as is.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a
   * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.
   * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.
   * Positive values will shift the icon right and up.
   * @property {number} [opacity=1] Opacity of the icon.
   * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.
   * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.
   * @property {number|import("../size.js").Size} [scale=1] Scale.
   * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the
   * sub-rectangle to use from the original (sprite) image.
   * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,
   * `top-left` or `top-right`.
   * @property {import("../size.js").Size} [size] Icon size in pixels. Used together with `offset` to define the
   * sub-rectangle to use from the original (sprite) image.
   * @property {string} [src] Image source URI.
   * @property {import("./Style.js").DeclutterMode} [declutterMode] Declutter mode.
   */

  /**
   * @param {number} width The width.
   * @param {number} height The height.
   * @param {number|undefined} wantedWidth The wanted width.
   * @param {number|undefined} wantedHeight The wanted height.
   * @return {number|Array<number>} The scale.
   */
  function calculateScale(width, height, wantedWidth, wantedHeight) {
    if (wantedWidth !== undefined && wantedHeight !== undefined) {
      return [wantedWidth / width, wantedHeight / height];
    }
    if (wantedWidth !== undefined) {
      return wantedWidth / width;
    }
    if (wantedHeight !== undefined) {
      return wantedHeight / height;
    }
    return 1;
  }

  /**
   * @classdesc
   * Set icon style for vector features.
   * @api
   */
  class Icon extends ImageStyle {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options || {};

      /**
       * @type {number}
       */
      const opacity = options.opacity !== undefined ? options.opacity : 1;

      /**
       * @type {number}
       */
      const rotation = options.rotation !== undefined ? options.rotation : 0;

      /**
       * @type {number|import("../size.js").Size}
       */
      const scale = options.scale !== undefined ? options.scale : 1;

      /**
       * @type {boolean}
       */
      const rotateWithView =
        options.rotateWithView !== undefined ? options.rotateWithView : false;

      super({
        opacity: opacity,
        rotation: rotation,
        scale: scale,
        displacement:
          options.displacement !== undefined ? options.displacement : [0, 0],
        rotateWithView: rotateWithView,
        declutterMode: options.declutterMode,
      });

      /**
       * @private
       * @type {Array<number>}
       */
      this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];

      /**
       * @private
       * @type {Array<number>}
       */
      this.normalizedAnchor_ = null;

      /**
       * @private
       * @type {IconOrigin}
       */
      this.anchorOrigin_ =
        options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';

      /**
       * @private
       * @type {IconAnchorUnits}
       */
      this.anchorXUnits_ =
        options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';

      /**
       * @private
       * @type {IconAnchorUnits}
       */
      this.anchorYUnits_ =
        options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ =
        options.crossOrigin !== undefined ? options.crossOrigin : null;

      const image = options.img !== undefined ? options.img : null;

      let cacheKey = options.src;

      assert$1(
        !(cacheKey !== undefined && image),
        '`image` and `src` cannot be provided at the same time',
      );

      if ((cacheKey === undefined || cacheKey.length === 0) && image) {
        cacheKey = /** @type {HTMLImageElement} */ (image).src || getUid(image);
      }
      assert$1(
        cacheKey !== undefined && cacheKey.length > 0,
        'A defined and non-empty `src` or `image` must be provided',
      );

      assert$1(
        !(
          (options.width !== undefined || options.height !== undefined) &&
          options.scale !== undefined
        ),
        '`width` or `height` cannot be provided together with `scale`',
      );

      let imageState;
      if (options.src !== undefined) {
        imageState = ImageState.IDLE;
      } else if (image !== undefined) {
        if ('complete' in image) {
          if (image.complete) {
            imageState = image.src ? ImageState.LOADED : ImageState.IDLE;
          } else {
            imageState = ImageState.LOADING;
          }
        } else {
          imageState = ImageState.LOADED;
        }
      }

      /**
       * @private
       * @type {import("../color.js").Color}
       */
      this.color_ = options.color !== undefined ? asArray(options.color) : null;

      /**
       * @private
       * @type {import("./IconImage.js").default}
       */
      this.iconImage_ = get$1(
        image,
        /** @type {string} */ (cacheKey),
        this.crossOrigin_,
        imageState,
        this.color_,
      );

      /**
       * @private
       * @type {Array<number>}
       */
      this.offset_ = options.offset !== undefined ? options.offset : [0, 0];
      /**
       * @private
       * @type {IconOrigin}
       */
      this.offsetOrigin_ =
        options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';

      /**
       * @private
       * @type {Array<number>}
       */
      this.origin_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.size_ = options.size !== undefined ? options.size : null;

      /**
       * @private
       */
      this.initialOptions_;

      /**
       * Calculate the scale if width or height were given.
       */
      if (options.width !== undefined || options.height !== undefined) {
        let width, height;
        if (options.size) {
          [width, height] = options.size;
        } else {
          const image = this.getImage(1);
          if (image.width && image.height) {
            width = image.width;
            height = image.height;
          } else if (image instanceof HTMLImageElement) {
            this.initialOptions_ = options;
            const onload = () => {
              this.unlistenImageChange(onload);
              if (!this.initialOptions_) {
                return;
              }
              const imageSize = this.iconImage_.getSize();
              this.setScale(
                calculateScale(
                  imageSize[0],
                  imageSize[1],
                  options.width,
                  options.height,
                ),
              );
            };
            this.listenImageChange(onload);
            return;
          }
        }
        if (width !== undefined) {
          this.setScale(
            calculateScale(width, height, options.width, options.height),
          );
        }
      }
    }

    /**
     * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.
     * @return {Icon} The cloned style.
     * @api
     * @override
     */
    clone() {
      let scale, width, height;
      if (this.initialOptions_) {
        width = this.initialOptions_.width;
        height = this.initialOptions_.height;
      } else {
        scale = this.getScale();
        scale = Array.isArray(scale) ? scale.slice() : scale;
      }
      return new Icon({
        anchor: this.anchor_.slice(),
        anchorOrigin: this.anchorOrigin_,
        anchorXUnits: this.anchorXUnits_,
        anchorYUnits: this.anchorYUnits_,
        color:
          this.color_ && this.color_.slice
            ? this.color_.slice()
            : this.color_ || undefined,
        crossOrigin: this.crossOrigin_,
        offset: this.offset_.slice(),
        offsetOrigin: this.offsetOrigin_,
        opacity: this.getOpacity(),
        rotateWithView: this.getRotateWithView(),
        rotation: this.getRotation(),
        scale,
        width,
        height,
        size: this.size_ !== null ? this.size_.slice() : undefined,
        src: this.getSrc(),
        displacement: this.getDisplacement().slice(),
        declutterMode: this.getDeclutterMode(),
      });
    }

    /**
     * Get the anchor point in pixels. The anchor determines the center point for the
     * symbolizer.
     * @return {Array<number>} Anchor.
     * @api
     * @override
     */
    getAnchor() {
      let anchor = this.normalizedAnchor_;
      if (!anchor) {
        anchor = this.anchor_;
        const size = this.getSize();
        if (
          this.anchorXUnits_ == 'fraction' ||
          this.anchorYUnits_ == 'fraction'
        ) {
          if (!size) {
            return null;
          }
          anchor = this.anchor_.slice();
          if (this.anchorXUnits_ == 'fraction') {
            anchor[0] *= size[0];
          }
          if (this.anchorYUnits_ == 'fraction') {
            anchor[1] *= size[1];
          }
        }

        if (this.anchorOrigin_ != 'top-left') {
          if (!size) {
            return null;
          }
          if (anchor === this.anchor_) {
            anchor = this.anchor_.slice();
          }
          if (
            this.anchorOrigin_ == 'top-right' ||
            this.anchorOrigin_ == 'bottom-right'
          ) {
            anchor[0] = -anchor[0] + size[0];
          }
          if (
            this.anchorOrigin_ == 'bottom-left' ||
            this.anchorOrigin_ == 'bottom-right'
          ) {
            anchor[1] = -anchor[1] + size[1];
          }
        }
        this.normalizedAnchor_ = anchor;
      }
      const displacement = this.getDisplacement();
      const scale = this.getScaleArray();
      // anchor is scaled by renderer but displacement should not be scaled
      // so divide by scale here
      return [
        anchor[0] - displacement[0] / scale[0],
        anchor[1] + displacement[1] / scale[1],
      ];
    }

    /**
     * Set the anchor point. The anchor determines the center point for the
     * symbolizer.
     *
     * @param {Array<number>} anchor Anchor.
     * @api
     */
    setAnchor(anchor) {
      this.anchor_ = anchor;
      this.normalizedAnchor_ = null;
    }

    /**
     * Get the icon color.
     * @return {import("../color.js").Color} Color.
     * @api
     */
    getColor() {
      return this.color_;
    }

    /**
     * Get the image icon.
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon
     * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.
     * @api
     * @override
     */
    getImage(pixelRatio) {
      return this.iconImage_.getImage(pixelRatio);
    }

    /**
     * Get the pixel ratio.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} The pixel ratio of the image.
     * @api
     * @override
     */
    getPixelRatio(pixelRatio) {
      return this.iconImage_.getPixelRatio(pixelRatio);
    }

    /**
     * @return {import("../size.js").Size} Image size.
     * @override
     */
    getImageSize() {
      return this.iconImage_.getSize();
    }

    /**
     * @return {import("../ImageState.js").default} Image state.
     * @override
     */
    getImageState() {
      return this.iconImage_.getImageState();
    }

    /**
     * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.
     * @override
     */
    getHitDetectionImage() {
      return this.iconImage_.getHitDetectionImage();
    }

    /**
     * Get the origin of the symbolizer.
     * @return {Array<number>} Origin.
     * @api
     * @override
     */
    getOrigin() {
      if (this.origin_) {
        return this.origin_;
      }
      let offset = this.offset_;

      if (this.offsetOrigin_ != 'top-left') {
        const size = this.getSize();
        const iconImageSize = this.iconImage_.getSize();
        if (!size || !iconImageSize) {
          return null;
        }
        offset = offset.slice();
        if (
          this.offsetOrigin_ == 'top-right' ||
          this.offsetOrigin_ == 'bottom-right'
        ) {
          offset[0] = iconImageSize[0] - size[0] - offset[0];
        }
        if (
          this.offsetOrigin_ == 'bottom-left' ||
          this.offsetOrigin_ == 'bottom-right'
        ) {
          offset[1] = iconImageSize[1] - size[1] - offset[1];
        }
      }
      this.origin_ = offset;
      return this.origin_;
    }

    /**
     * Get the image URL.
     * @return {string|undefined} Image src.
     * @api
     */
    getSrc() {
      return this.iconImage_.getSrc();
    }

    /**
     * Get the size of the icon (in pixels).
     * @return {import("../size.js").Size} Image size.
     * @api
     * @override
     */
    getSize() {
      return !this.size_ ? this.iconImage_.getSize() : this.size_;
    }

    /**
     * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.
     * @return {number} Icon width (in pixels).
     * @api
     */
    getWidth() {
      const scale = this.getScaleArray();
      if (this.size_) {
        return this.size_[0] * scale[0];
      }
      if (this.iconImage_.getImageState() == ImageState.LOADED) {
        return this.iconImage_.getSize()[0] * scale[0];
      }
      return undefined;
    }

    /**
     * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.
     * @return {number} Icon height (in pixels).
     * @api
     */
    getHeight() {
      const scale = this.getScaleArray();
      if (this.size_) {
        return this.size_[1] * scale[1];
      }
      if (this.iconImage_.getImageState() == ImageState.LOADED) {
        return this.iconImage_.getSize()[1] * scale[1];
      }
      return undefined;
    }

    /**
     * Set the scale.
     *
     * @param {number|import("../size.js").Size} scale Scale.
     * @api
     * @override
     */
    setScale(scale) {
      delete this.initialOptions_;
      super.setScale(scale);
    }

    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     * @override
     */
    listenImageChange(listener) {
      this.iconImage_.addEventListener(EventType.CHANGE, listener);
    }

    /**
     * Load not yet loaded URI.
     * When rendering a feature with an icon style, the vector renderer will
     * automatically call this method. However, you might want to call this
     * method yourself for preloading or other purposes.
     * @api
     * @override
     */
    load() {
      this.iconImage_.load();
    }

    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     * @override
     */
    unlistenImageChange(listener) {
      this.iconImage_.removeEventListener(EventType.CHANGE, listener);
    }

    /**
     * @override
     */
    ready() {
      return this.iconImage_.ready();
    }
  }

  /**
   * @module ol/style/Stroke
   */

  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
   * Default null; if null, the Canvas/renderer default black will be used.
   * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
   * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
   * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).
   * @property {number} [lineDashOffset=0] Line dash offset.
   * @property {number} [miterLimit=10] Miter limit.
   * @property {number} [width] Width.
   */

  /**
   * @classdesc
   * Set stroke style for vector features.
   * Note that the defaults given are the Canvas defaults, which will be used if
   * option is not defined. The `get` functions return whatever was entered in
   * the options; they will not return the default.
   * @api
   */
  class Stroke {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options || {};

      /**
       * @private
       * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
       */
      this.color_ = options.color !== undefined ? options.color : null;

      /**
       * @private
       * @type {CanvasLineCap|undefined}
       */
      this.lineCap_ = options.lineCap;

      /**
       * @private
       * @type {Array<number>|null}
       */
      this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lineDashOffset_ = options.lineDashOffset;

      /**
       * @private
       * @type {CanvasLineJoin|undefined}
       */
      this.lineJoin_ = options.lineJoin;

      /**
       * @private
       * @type {number|undefined}
       */
      this.miterLimit_ = options.miterLimit;

      /**
       * @private
       * @type {number|undefined}
       */
      this.width_ = options.width;
    }

    /**
     * Clones the style.
     * @return {Stroke} The cloned style.
     * @api
     */
    clone() {
      const color = this.getColor();
      return new Stroke({
        color: Array.isArray(color) ? color.slice() : color || undefined,
        lineCap: this.getLineCap(),
        lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
        lineDashOffset: this.getLineDashOffset(),
        lineJoin: this.getLineJoin(),
        miterLimit: this.getMiterLimit(),
        width: this.getWidth(),
      });
    }

    /**
     * Get the stroke color.
     * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
     * @api
     */
    getColor() {
      return this.color_;
    }

    /**
     * Get the line cap type for the stroke.
     * @return {CanvasLineCap|undefined} Line cap.
     * @api
     */
    getLineCap() {
      return this.lineCap_;
    }

    /**
     * Get the line dash style for the stroke.
     * @return {Array<number>|null} Line dash.
     * @api
     */
    getLineDash() {
      return this.lineDash_;
    }

    /**
     * Get the line dash offset for the stroke.
     * @return {number|undefined} Line dash offset.
     * @api
     */
    getLineDashOffset() {
      return this.lineDashOffset_;
    }

    /**
     * Get the line join type for the stroke.
     * @return {CanvasLineJoin|undefined} Line join.
     * @api
     */
    getLineJoin() {
      return this.lineJoin_;
    }

    /**
     * Get the miter limit for the stroke.
     * @return {number|undefined} Miter limit.
     * @api
     */
    getMiterLimit() {
      return this.miterLimit_;
    }

    /**
     * Get the stroke width.
     * @return {number|undefined} Width.
     * @api
     */
    getWidth() {
      return this.width_;
    }

    /**
     * Set the color.
     *
     * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
     * @api
     */
    setColor(color) {
      this.color_ = color;
    }

    /**
     * Set the line cap.
     *
     * @param {CanvasLineCap|undefined} lineCap Line cap.
     * @api
     */
    setLineCap(lineCap) {
      this.lineCap_ = lineCap;
    }

    /**
     * Set the line dash.
     *
     * @param {Array<number>|null} lineDash Line dash.
     * @api
     */
    setLineDash(lineDash) {
      this.lineDash_ = lineDash;
    }

    /**
     * Set the line dash offset.
     *
     * @param {number|undefined} lineDashOffset Line dash offset.
     * @api
     */
    setLineDashOffset(lineDashOffset) {
      this.lineDashOffset_ = lineDashOffset;
    }

    /**
     * Set the line join.
     *
     * @param {CanvasLineJoin|undefined} lineJoin Line join.
     * @api
     */
    setLineJoin(lineJoin) {
      this.lineJoin_ = lineJoin;
    }

    /**
     * Set the miter limit.
     *
     * @param {number|undefined} miterLimit Miter limit.
     * @api
     */
    setMiterLimit(miterLimit) {
      this.miterLimit_ = miterLimit;
    }

    /**
     * Set the width.
     *
     * @param {number|undefined} width Width.
     * @api
     */
    setWidth(width) {
      this.width_ = width;
    }
  }

  /**
   * @module ol/style/Style
   */


  /**
   * Defines how symbols and text are decluttered on layers ith `declutter` set to `true`
   * **declutter**: Overlapping symbols and text are decluttered.
   * **obstacle**: Symbols and text are rendered, but serve as obstacle for subsequent attempts
   *   to place a symbol or text at the same location.
   * **none**: No decluttering is done.
   *
   * @typedef {"declutter"|"obstacle"|"none"} DeclutterMode
   */

  /**
   * A function that takes a {@link module:ol/Feature~Feature} and a `{number}`
   * representing the view's resolution. The function should return a
   * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a
   * vector layer can be styled. If the function returns `undefined`, the
   * feature will not be rendered.
   *
   * @typedef {function(import("../Feature.js").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction
   */

  /**
   * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.
   * @typedef {Style|Array<Style>|StyleFunction} StyleLike
   */

  /**
   * A function that takes a {@link module:ol/Feature~Feature} as argument and returns an
   * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.
   *
   * @typedef {function(import("../Feature.js").FeatureLike):
   *     (import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined)} GeometryFunction
   */

  /**
   * Custom renderer function. Takes two arguments:
   *
   * 1. The pixel coordinates of the geometry in GeoJSON notation.
   * 2. The {@link module:ol/render~State} of the layer renderer.
   *
   * @typedef {function((import("../coordinate.js").Coordinate|Array<import("../coordinate.js").Coordinate>|Array<Array<import("../coordinate.js").Coordinate>>|Array<Array<Array<import("../coordinate.js").Coordinate>>>),import("../render.js").State): void} RenderFunction
   */

  /**
   * @typedef {Object} Options
   * @property {string|import("../geom/Geometry.js").default|GeometryFunction} [geometry] Feature property or geometry
   * or function returning a geometry to render for this style.
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {import("./Image.js").default} [image] Image style.
   * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
   * ignored, and the provided function will be called with each render frame for each geometry.
   * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used
   * in hit detection rendering.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./Text.js").default} [text] Text style.
   * @property {number} [zIndex] Z index.
   */

  /**
   * @classdesc
   * Container for vector feature rendering styles. Any changes made to the style
   * or its children through `set*()` methods will not take effect until the
   * feature or layer that uses the style is re-rendered.
   *
   * ## Feature styles
   *
   * If no style is defined, the following default style is used:
   * ```js
   *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';
   *
   *  const fill = new Fill({
   *    color: 'rgba(255,255,255,0.4)',
   *  });
   *  const stroke = new Stroke({
   *    color: '#3399CC',
   *    width: 1.25,
   *  });
   *  const styles = [
   *    new Style({
   *      image: new Circle({
   *        fill: fill,
   *        stroke: stroke,
   *        radius: 5,
   *      }),
   *      fill: fill,
   *      stroke: stroke,
   *    }),
   *  ];
   * ```
   *
   * A separate editing style has the following defaults:
   * ```js
   *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';
   *
   *  const styles = {};
   *  const white = [255, 255, 255, 1];
   *  const blue = [0, 153, 255, 1];
   *  const width = 3;
   *  styles['Polygon'] = [
   *    new Style({
   *      fill: new Fill({
   *        color: [255, 255, 255, 0.5],
   *      }),
   *    }),
   *  ];
   *  styles['MultiPolygon'] =
   *      styles['Polygon'];
   *  styles['LineString'] = [
   *    new Style({
   *      stroke: new Stroke({
   *        color: white,
   *        width: width + 2,
   *      }),
   *    }),
   *    new Style({
   *      stroke: new Stroke({
   *        color: blue,
   *        width: width,
   *      }),
   *    }),
   *  ];
   *  styles['MultiLineString'] = styles['LineString'];
   *
   *  styles['Circle'] = styles['Polygon'].concat(
   *    styles['LineString']
   *  );
   *
   *  styles['Point'] = [
   *    new Style({
   *      image: new Circle({
   *        radius: width * 2,
   *        fill: new Fill({
   *          color: blue,
   *        }),
   *        stroke: new Stroke({
   *          color: white,
   *          width: width / 2,
   *        }),
   *      }),
   *      zIndex: Infinity,
   *    }),
   *  ];
   *  styles['MultiPoint'] =
   *      styles['Point'];
   *  styles['GeometryCollection'] =
   *      styles['Polygon'].concat(
   *          styles['LineString'],
   *          styles['Point']
   *      );
   * ```
   *
   * @api
   */
  class Style {
    /**
     * @param {Options} [options] Style options.
     */
    constructor(options) {
      options = options || {};

      /**
       * @private
       * @type {string|import("../geom/Geometry.js").default|GeometryFunction|null}
       */
      this.geometry_ = null;

      /**
       * @private
       * @type {!GeometryFunction}
       */
      this.geometryFunction_ = defaultGeometryFunction;

      if (options.geometry !== undefined) {
        this.setGeometry(options.geometry);
      }

      /**
       * @private
       * @type {import("./Fill.js").default|null}
       */
      this.fill_ = options.fill !== undefined ? options.fill : null;

      /**
       * @private
       * @type {import("./Image.js").default|null}
       */
      this.image_ = options.image !== undefined ? options.image : null;

      /**
       * @private
       * @type {RenderFunction|null}
       */
      this.renderer_ = options.renderer !== undefined ? options.renderer : null;

      /**
       * @private
       * @type {RenderFunction|null}
       */
      this.hitDetectionRenderer_ =
        options.hitDetectionRenderer !== undefined
          ? options.hitDetectionRenderer
          : null;

      /**
       * @private
       * @type {import("./Stroke.js").default|null}
       */
      this.stroke_ = options.stroke !== undefined ? options.stroke : null;

      /**
       * @private
       * @type {import("./Text.js").default|null}
       */
      this.text_ = options.text !== undefined ? options.text : null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.zIndex_ = options.zIndex;
    }

    /**
     * Clones the style.
     * @return {Style} The cloned style.
     * @api
     */
    clone() {
      let geometry = this.getGeometry();
      if (geometry && typeof geometry === 'object') {
        geometry = /** @type {import("../geom/Geometry.js").default} */ (
          geometry
        ).clone();
      }
      return new Style({
        geometry: geometry ?? undefined,
        fill: this.getFill() ? this.getFill().clone() : undefined,
        image: this.getImage() ? this.getImage().clone() : undefined,
        renderer: this.getRenderer() ?? undefined,
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        text: this.getText() ? this.getText().clone() : undefined,
        zIndex: this.getZIndex(),
      });
    }

    /**
     * Get the custom renderer function that was configured with
     * {@link #setRenderer} or the `renderer` constructor option.
     * @return {RenderFunction|null} Custom renderer function.
     * @api
     */
    getRenderer() {
      return this.renderer_;
    }

    /**
     * Sets a custom renderer function for this style. When set, `fill`, `stroke`
     * and `image` options of the style will be ignored.
     * @param {RenderFunction|null} renderer Custom renderer function.
     * @api
     */
    setRenderer(renderer) {
      this.renderer_ = renderer;
    }

    /**
     * Sets a custom renderer function for this style used
     * in hit detection.
     * @param {RenderFunction|null} renderer Custom renderer function.
     * @api
     */
    setHitDetectionRenderer(renderer) {
      this.hitDetectionRenderer_ = renderer;
    }

    /**
     * Get the custom renderer function that was configured with
     * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.
     * @return {RenderFunction|null} Custom renderer function.
     * @api
     */
    getHitDetectionRenderer() {
      return this.hitDetectionRenderer_;
    }

    /**
     * Get the geometry to be rendered.
     * @return {string|import("../geom/Geometry.js").default|GeometryFunction|null}
     * Feature property or geometry or function that returns the geometry that will
     * be rendered with this style.
     * @api
     */
    getGeometry() {
      return this.geometry_;
    }

    /**
     * Get the function used to generate a geometry for rendering.
     * @return {!GeometryFunction} Function that is called with a feature
     * and returns the geometry to render instead of the feature's geometry.
     * @api
     */
    getGeometryFunction() {
      return this.geometryFunction_;
    }

    /**
     * Get the fill style.
     * @return {import("./Fill.js").default|null} Fill style.
     * @api
     */
    getFill() {
      return this.fill_;
    }

    /**
     * Set the fill style.
     * @param {import("./Fill.js").default|null} fill Fill style.
     * @api
     */
    setFill(fill) {
      this.fill_ = fill;
    }

    /**
     * Get the image style.
     * @return {import("./Image.js").default|null} Image style.
     * @api
     */
    getImage() {
      return this.image_;
    }

    /**
     * Set the image style.
     * @param {import("./Image.js").default} image Image style.
     * @api
     */
    setImage(image) {
      this.image_ = image;
    }

    /**
     * Get the stroke style.
     * @return {import("./Stroke.js").default|null} Stroke style.
     * @api
     */
    getStroke() {
      return this.stroke_;
    }

    /**
     * Set the stroke style.
     * @param {import("./Stroke.js").default|null} stroke Stroke style.
     * @api
     */
    setStroke(stroke) {
      this.stroke_ = stroke;
    }

    /**
     * Get the text style.
     * @return {import("./Text.js").default|null} Text style.
     * @api
     */
    getText() {
      return this.text_;
    }

    /**
     * Set the text style.
     * @param {import("./Text.js").default} text Text style.
     * @api
     */
    setText(text) {
      this.text_ = text;
    }

    /**
     * Get the z-index for the style.
     * @return {number|undefined} ZIndex.
     * @api
     */
    getZIndex() {
      return this.zIndex_;
    }

    /**
     * Set a geometry that is rendered instead of the feature's geometry.
     *
     * @param {string|import("../geom/Geometry.js").default|GeometryFunction|null} geometry
     *     Feature property or geometry or function returning a geometry to render
     *     for this style.
     * @api
     */
    setGeometry(geometry) {
      if (typeof geometry === 'function') {
        this.geometryFunction_ = geometry;
      } else if (typeof geometry === 'string') {
        this.geometryFunction_ = function (feature) {
          return /** @type {import("../geom/Geometry.js").default} */ (
            feature.get(geometry)
          );
        };
      } else if (!geometry) {
        this.geometryFunction_ = defaultGeometryFunction;
      } else if (geometry !== undefined) {
        this.geometryFunction_ = function () {
          return /** @type {import("../geom/Geometry.js").default} */ (geometry);
        };
      }
      this.geometry_ = geometry;
    }

    /**
     * Set the z-index.
     *
     * @param {number|undefined} zIndex ZIndex.
     * @api
     */
    setZIndex(zIndex) {
      this.zIndex_ = zIndex;
    }
  }

  /**
   * Convert the provided object into a style function.  Functions passed through
   * unchanged.  Arrays of Style or single style objects wrapped in a
   * new style function.
   * @param {StyleFunction|Array<Style>|Style} obj
   *     A style function, a single style, or an array of styles.
   * @return {StyleFunction} A style function.
   */
  function toFunction(obj) {
    let styleFunction;

    if (typeof obj === 'function') {
      styleFunction = obj;
    } else {
      /**
       * @type {Array<Style>}
       */
      let styles;
      if (Array.isArray(obj)) {
        styles = obj;
      } else {
        assert$1(
          typeof (/** @type {?} */ (obj).getZIndex) === 'function',
          'Expected an `Style` or an array of `Style`',
        );
        const style = /** @type {Style} */ (obj);
        styles = [style];
      }
      styleFunction = function () {
        return styles;
      };
    }
    return styleFunction;
  }

  /**
   * @type {Array<Style>|null}
   */
  let defaultStyles = null;

  /**
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} resolution Resolution.
   * @return {Array<Style>} Style.
   */
  function createDefaultStyle(feature, resolution) {
    // We don't use an immediately-invoked function
    // and a closure so we don't get an error at script evaluation time in
    // browsers that do not support Canvas. (import("./Circle.js").CircleStyle does
    // canvas.getContext('2d') at construction time, which will cause an.error
    // in such browsers.)
    if (!defaultStyles) {
      const fill = new Fill({
        color: 'rgba(255,255,255,0.4)',
      });
      const stroke = new Stroke({
        color: '#3399CC',
        width: 1.25,
      });
      defaultStyles = [
        new Style({
          image: new CircleStyle({
            fill: fill,
            stroke: stroke,
            radius: 5,
          }),
          fill: fill,
          stroke: stroke,
        }),
      ];
    }
    return defaultStyles;
  }

  /**
   * Default styles for editing features.
   * @return {Object<import("../geom/Geometry.js").Type, Array<Style>>} Styles
   */
  function createEditingStyle() {
    /** @type {Object<import("../geom/Geometry.js").Type, Array<Style>>} */
    const styles = {};
    const white = [255, 255, 255, 1];
    const blue = [0, 153, 255, 1];
    const width = 3;
    styles['Polygon'] = [
      new Style({
        fill: new Fill({
          color: [255, 255, 255, 0.5],
        }),
      }),
    ];
    styles['MultiPolygon'] = styles['Polygon'];

    styles['LineString'] = [
      new Style({
        stroke: new Stroke({
          color: white,
          width: width + 2,
        }),
      }),
      new Style({
        stroke: new Stroke({
          color: blue,
          width: width,
        }),
      }),
    ];
    styles['MultiLineString'] = styles['LineString'];

    styles['Circle'] = styles['Polygon'].concat(styles['LineString']);

    styles['Point'] = [
      new Style({
        image: new CircleStyle({
          radius: width * 2,
          fill: new Fill({
            color: blue,
          }),
          stroke: new Stroke({
            color: white,
            width: width / 2,
          }),
        }),
        zIndex: Infinity,
      }),
    ];
    styles['MultiPoint'] = styles['Point'];

    styles['GeometryCollection'] = styles['Polygon'].concat(
      styles['LineString'],
      styles['Point'],
    );

    return styles;
  }

  /**
   * Function that is called with a feature and returns its default geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature to get the geometry for.
   * @return {import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined} Geometry to render.
   */
  function defaultGeometryFunction(feature) {
    return feature.getGeometry();
  }

  /**
   * @module ol/style/Text
   */

  /**
   * @typedef {'point' | 'line'} TextPlacement
   * Default text placement is `'point'`. Note that
   * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
   * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
   * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
   */

  /**
   * @typedef {'left' | 'center' | 'right'} TextJustify
   */

  /**
   * The default fill color to use if no fill was set at construction time; a
   * blackish `#333`.
   *
   * @const {string}
   */
  const DEFAULT_FILL_COLOR = '#333';

  /**
   * @typedef {Object} Options
   * @property {string} [font] Font style as CSS `font` value, see:
   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`
   * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.
   * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).
   * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.
   * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.
   * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed
   * the width of the polygon at the label position or the length of the path that it follows.
   * @property {TextPlacement} [placement='point'] Text placement.
   * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies
   * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.
   * @property {number|import("../size.js").Size} [scale] Scale.
   * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.
   * @property {boolean} [keepUpright=true] Whether the text can be rotated 180Â° to prevent being rendered upside down.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can
   * contain line breaks (`\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to
   * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\n', ''`).
   * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield "**foo** *bar* baz".
   * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.
   * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.
   * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a
   * placement where `maxAngle` is not exceeded.
   * @property {TextJustify} [justify] Text justification within the text box.
   * If not set, text is justified towards the `textAlign` anchor.
   * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.
   * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.
   * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,
   * `'hanging'`, `'ideographic'`.
   * @property {import("./Fill.js").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./Fill.js").default} [backgroundFill] Fill style for the text background when `placement` is
   * `'point'`. Default is no fill.
   * @property {import("./Stroke.js").default} [backgroundStroke] Stroke style for the text background  when `placement`
   * is `'point'`. Default is no stroke.
   * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of
   * values in the array is `[top, right, bottom, left]`.
   * @property {import('../style/Style.js').DeclutterMode} [declutterMode] Declutter mode: `declutter`, `obstacle`, `none`
   */

  /**
   * @classdesc
   * Set text style for vector features.
   * @api
   */
  class Text {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options || {};

      /**
       * @private
       * @type {string|undefined}
       */
      this.font_ = options.font;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = options.rotation;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.rotateWithView_ = options.rotateWithView;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.keepUpright_ = options.keepUpright;

      /**
       * @private
       * @type {number|import("../size.js").Size|undefined}
       */
      this.scale_ = options.scale;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);

      /**
       * @private
       * @type {string|Array<string>|undefined}
       */
      this.text_ = options.text;

      /**
       * @private
       * @type {CanvasTextAlign|undefined}
       */
      this.textAlign_ = options.textAlign;

      /**
       * @private
       * @type {TextJustify|undefined}
       */
      this.justify_ = options.justify;

      /**
       * @private
       * @type {number|undefined}
       */
      this.repeat_ = options.repeat;

      /**
       * @private
       * @type {CanvasTextBaseline|undefined}
       */
      this.textBaseline_ = options.textBaseline;

      /**
       * @private
       * @type {import("./Fill.js").default|null}
       */
      this.fill_ =
        options.fill !== undefined
          ? options.fill
          : new Fill({color: DEFAULT_FILL_COLOR});

      /**
       * @private
       * @type {number}
       */
      this.maxAngle_ =
        options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;

      /**
       * @private
       * @type {TextPlacement}
       */
      this.placement_ =
        options.placement !== undefined ? options.placement : 'point';

      /**
       * @private
       * @type {boolean}
       */
      this.overflow_ = !!options.overflow;

      /**
       * @private
       * @type {import("./Stroke.js").default|null}
       */
      this.stroke_ = options.stroke !== undefined ? options.stroke : null;

      /**
       * @private
       * @type {number}
       */
      this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;

      /**
       * @private
       * @type {number}
       */
      this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;

      /**
       * @private
       * @type {import("./Fill.js").default|null}
       */
      this.backgroundFill_ = options.backgroundFill
        ? options.backgroundFill
        : null;

      /**
       * @private
       * @type {import("./Stroke.js").default|null}
       */
      this.backgroundStroke_ = options.backgroundStroke
        ? options.backgroundStroke
        : null;

      /**
       * @private
       * @type {Array<number>|null}
       */
      this.padding_ = options.padding === undefined ? null : options.padding;

      /**
       * @private
       * @type {import('../style/Style.js').DeclutterMode}
       */
      this.declutterMode_ = options.declutterMode;
    }

    /**
     * Clones the style.
     * @return {Text} The cloned style.
     * @api
     */
    clone() {
      const scale = this.getScale();
      return new Text({
        font: this.getFont(),
        placement: this.getPlacement(),
        repeat: this.getRepeat(),
        maxAngle: this.getMaxAngle(),
        overflow: this.getOverflow(),
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        keepUpright: this.getKeepUpright(),
        scale: Array.isArray(scale) ? scale.slice() : scale,
        text: this.getText(),
        textAlign: this.getTextAlign(),
        justify: this.getJustify(),
        textBaseline: this.getTextBaseline(),
        fill: this.getFill() ? this.getFill().clone() : undefined,
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        offsetX: this.getOffsetX(),
        offsetY: this.getOffsetY(),
        backgroundFill: this.getBackgroundFill()
          ? this.getBackgroundFill().clone()
          : undefined,
        backgroundStroke: this.getBackgroundStroke()
          ? this.getBackgroundStroke().clone()
          : undefined,
        padding: this.getPadding() || undefined,
        declutterMode: this.getDeclutterMode(),
      });
    }

    /**
     * Get the `overflow` configuration.
     * @return {boolean} Let text overflow the length of the path they follow.
     * @api
     */
    getOverflow() {
      return this.overflow_;
    }

    /**
     * Get the font name.
     * @return {string|undefined} Font.
     * @api
     */
    getFont() {
      return this.font_;
    }

    /**
     * Get the maximum angle between adjacent characters.
     * @return {number} Angle in radians.
     * @api
     */
    getMaxAngle() {
      return this.maxAngle_;
    }

    /**
     * Get the label placement.
     * @return {TextPlacement} Text placement.
     * @api
     */
    getPlacement() {
      return this.placement_;
    }

    /**
     * Get the repeat interval of the text.
     * @return {number|undefined} Repeat interval in pixels.
     * @api
     */
    getRepeat() {
      return this.repeat_;
    }

    /**
     * Get the x-offset for the text.
     * @return {number} Horizontal text offset.
     * @api
     */
    getOffsetX() {
      return this.offsetX_;
    }

    /**
     * Get the y-offset for the text.
     * @return {number} Vertical text offset.
     * @api
     */
    getOffsetY() {
      return this.offsetY_;
    }

    /**
     * Get the fill style for the text.
     * @return {import("./Fill.js").default|null} Fill style.
     * @api
     */
    getFill() {
      return this.fill_;
    }

    /**
     * Determine whether the text rotates with the map.
     * @return {boolean|undefined} Rotate with map.
     * @api
     */
    getRotateWithView() {
      return this.rotateWithView_;
    }

    /**
     * Determine whether the text can be rendered upside down.
     * @return {boolean|undefined} Keep text upright.
     * @api
     */
    getKeepUpright() {
      return this.keepUpright_;
    }

    /**
     * Get the text rotation.
     * @return {number|undefined} Rotation.
     * @api
     */
    getRotation() {
      return this.rotation_;
    }

    /**
     * Get the text scale.
     * @return {number|import("../size.js").Size|undefined} Scale.
     * @api
     */
    getScale() {
      return this.scale_;
    }

    /**
     * Get the symbolizer scale array.
     * @return {import("../size.js").Size} Scale array.
     */
    getScaleArray() {
      return this.scaleArray_;
    }

    /**
     * Get the stroke style for the text.
     * @return {import("./Stroke.js").default|null} Stroke style.
     * @api
     */
    getStroke() {
      return this.stroke_;
    }

    /**
     * Get the text to be rendered.
     * @return {string|Array<string>|undefined} Text.
     * @api
     */
    getText() {
      return this.text_;
    }

    /**
     * Get the text alignment.
     * @return {CanvasTextAlign|undefined} Text align.
     * @api
     */
    getTextAlign() {
      return this.textAlign_;
    }

    /**
     * Get the justification.
     * @return {TextJustify|undefined} Justification.
     * @api
     */
    getJustify() {
      return this.justify_;
    }

    /**
     * Get the text baseline.
     * @return {CanvasTextBaseline|undefined} Text baseline.
     * @api
     */
    getTextBaseline() {
      return this.textBaseline_;
    }

    /**
     * Get the background fill style for the text.
     * @return {import("./Fill.js").default|null} Fill style.
     * @api
     */
    getBackgroundFill() {
      return this.backgroundFill_;
    }

    /**
     * Get the background stroke style for the text.
     * @return {import("./Stroke.js").default|null} Stroke style.
     * @api
     */
    getBackgroundStroke() {
      return this.backgroundStroke_;
    }

    /**
     * Get the padding for the text.
     * @return {Array<number>|null} Padding.
     * @api
     */
    getPadding() {
      return this.padding_;
    }

    /**
     * Get the declutter mode of the shape
     * @return {import("./Style.js").DeclutterMode} Shape's declutter mode
     * @api
     */
    getDeclutterMode() {
      return this.declutterMode_;
    }

    /**
     * Set the `overflow` property.
     *
     * @param {boolean} overflow Let text overflow the path that it follows.
     * @api
     */
    setOverflow(overflow) {
      this.overflow_ = overflow;
    }

    /**
     * Set the font.
     *
     * @param {string|undefined} font Font.
     * @api
     */
    setFont(font) {
      this.font_ = font;
    }

    /**
     * Set the maximum angle between adjacent characters.
     *
     * @param {number} maxAngle Angle in radians.
     * @api
     */
    setMaxAngle(maxAngle) {
      this.maxAngle_ = maxAngle;
    }

    /**
     * Set the x offset.
     *
     * @param {number} offsetX Horizontal text offset.
     * @api
     */
    setOffsetX(offsetX) {
      this.offsetX_ = offsetX;
    }

    /**
     * Set the y offset.
     *
     * @param {number} offsetY Vertical text offset.
     * @api
     */
    setOffsetY(offsetY) {
      this.offsetY_ = offsetY;
    }

    /**
     * Set the text placement.
     *
     * @param {TextPlacement} placement Placement.
     * @api
     */
    setPlacement(placement) {
      this.placement_ = placement;
    }

    /**
     * Set the repeat interval of the text.
     * @param {number|undefined} [repeat] Repeat interval in pixels.
     * @api
     */
    setRepeat(repeat) {
      this.repeat_ = repeat;
    }

    /**
     * Set whether to rotate the text with the view.
     *
     * @param {boolean} rotateWithView Rotate with map.
     * @api
     */
    setRotateWithView(rotateWithView) {
      this.rotateWithView_ = rotateWithView;
    }

    /**
     * Set whether the text can be rendered upside down.
     *
     * @param {boolean} keepUpright Keep text upright.
     * @api
     */
    setKeepUpright(keepUpright) {
      this.keepUpright_ = keepUpright;
    }

    /**
     * Set the fill.
     *
     * @param {import("./Fill.js").default|null} fill Fill style.
     * @api
     */
    setFill(fill) {
      this.fill_ = fill;
    }

    /**
     * Set the rotation.
     *
     * @param {number|undefined} rotation Rotation.
     * @api
     */
    setRotation(rotation) {
      this.rotation_ = rotation;
    }

    /**
     * Set the scale.
     *
     * @param {number|import("../size.js").Size|undefined} scale Scale.
     * @api
     */
    setScale(scale) {
      this.scale_ = scale;
      this.scaleArray_ = toSize(scale !== undefined ? scale : 1);
    }

    /**
     * Set the stroke.
     *
     * @param {import("./Stroke.js").default|null} stroke Stroke style.
     * @api
     */
    setStroke(stroke) {
      this.stroke_ = stroke;
    }

    /**
     * Set the text.
     *
     * @param {string|Array<string>|undefined} text Text.
     * @api
     */
    setText(text) {
      this.text_ = text;
    }

    /**
     * Set the text alignment.
     *
     * @param {CanvasTextAlign|undefined} textAlign Text align.
     * @api
     */
    setTextAlign(textAlign) {
      this.textAlign_ = textAlign;
    }

    /**
     * Set the justification.
     *
     * @param {TextJustify|undefined} justify Justification.
     * @api
     */
    setJustify(justify) {
      this.justify_ = justify;
    }

    /**
     * Set the text baseline.
     *
     * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.
     * @api
     */
    setTextBaseline(textBaseline) {
      this.textBaseline_ = textBaseline;
    }

    /**
     * Set the background fill.
     *
     * @param {import("./Fill.js").default|null} fill Fill style.
     * @api
     */
    setBackgroundFill(fill) {
      this.backgroundFill_ = fill;
    }

    /**
     * Set the background stroke.
     *
     * @param {import("./Stroke.js").default|null} stroke Stroke style.
     * @api
     */
    setBackgroundStroke(stroke) {
      this.backgroundStroke_ = stroke;
    }

    /**
     * Set the padding (`[top, right, bottom, left]`).
     *
     * @param {Array<number>|null} padding Padding.
     * @api
     */
    setPadding(padding) {
      this.padding_ = padding;
    }
  }

  /**
   * @module ol/render/canvas/style
   */


  /**
   * @fileoverview This module includes functions to build styles for the canvas renderer.  Building
   * is composed of two steps: parsing and compiling.  The parsing step takes an encoded expression
   * and returns an instance of one of the expression classes.  The compiling step takes the
   * expression instance and returns a function that can be evaluated to return a literal value.  The
   * evaluator function should do as little allocation and work as possible.
   */

  /**
   * @typedef {import("../../style/flat.js").FlatStyle} FlatStyle
   */

  /**
   * @typedef {import("../../expr/expression.js").EncodedExpression} EncodedExpression
   */

  /**
   * @typedef {import("../../expr/expression.js").ParsingContext} ParsingContext
   */

  /**
   * @typedef {import("../../expr/expression.js").CallExpression} CallExpression
   */

  /**
   * @typedef {import("../../expr/cpu.js").EvaluationContext} EvaluationContext
   */

  /**
   * @typedef {import("../../expr/cpu.js").ExpressionEvaluator} ExpressionEvaluator
   */

  /**
   * @param {EvaluationContext} context The evaluation context.
   * @return {boolean} Always true.
   */
  function always(context) {
    return true;
  }

  /**
   * This function adapts a rule evaluator to the existing style function interface.
   * After we have deprecated the style function, we can use the compiled rules directly
   * and pass a more complete evaluation context (variables, zoom, time, etc.).
   *
   * @param {Array<import('../../style/flat.js').Rule>} rules The rules.
   * @return {import('../../style/Style.js').StyleFunction} A style function.
   */
  function rulesToStyleFunction(rules) {
    const parsingContext = newParsingContext();
    const evaluator = buildRuleSet(rules, parsingContext);
    const evaluationContext = newEvaluationContext();
    return function (feature, resolution) {
      evaluationContext.properties = feature.getPropertiesInternal();
      evaluationContext.resolution = resolution;
      if (parsingContext.featureId) {
        const id = feature.getId();
        if (id !== undefined) {
          evaluationContext.featureId = id;
        } else {
          evaluationContext.featureId = null;
        }
      }
      if (parsingContext.geometryType) {
        evaluationContext.geometryType = computeGeometryType(
          feature.getGeometry(),
        );
      }
      return evaluator(evaluationContext);
    };
  }

  /**
   * This function adapts a style evaluator to the existing style function interface.
   * After we have deprecated the style function, we can use the compiled rules directly
   * and pass a more complete evaluation context (variables, zoom, time, etc.).
   *
   * @param {Array<import('../../style/flat.js').FlatStyle>} flatStyles The flat styles.
   * @return {import('../../style/Style.js').StyleFunction} A style function.
   */
  function flatStylesToStyleFunction(flatStyles) {
    const parsingContext = newParsingContext();
    const length = flatStyles.length;

    /**
     * @type {Array<StyleEvaluator>}
     */
    const evaluators = new Array(length);
    for (let i = 0; i < length; ++i) {
      evaluators[i] = buildStyle(flatStyles[i], parsingContext);
    }
    const evaluationContext = newEvaluationContext();

    /**
     * @type {Array<Style>}
     */
    const styles = new Array(length);

    return function (feature, resolution) {
      evaluationContext.properties = feature.getPropertiesInternal();
      evaluationContext.resolution = resolution;
      if (parsingContext.featureId) {
        const id = feature.getId();
        if (id !== undefined) {
          evaluationContext.featureId = id;
        } else {
          evaluationContext.featureId = null;
        }
      }
      let nonNullCount = 0;
      for (let i = 0; i < length; ++i) {
        const style = evaluators[i](evaluationContext);
        if (style) {
          styles[nonNullCount] = style;
          nonNullCount += 1;
        }
      }
      styles.length = nonNullCount;
      return styles;
    };
  }

  /**
   * @typedef {function(EvaluationContext):Array<Style>} RuleSetEvaluator
   */

  /**
   * @typedef {Object} CompiledRule
   * @property {ExpressionEvaluator} filter The compiled filter evaluator.
   * @property {Array<StyleEvaluator>} styles The list of compiled style evaluators.
   */

  /**
   * @param {Array<import('../../style/flat.js').Rule>} rules The rules.
   * @param {ParsingContext} context The parsing context.
   * @return {RuleSetEvaluator} The evaluator function.
   */
  function buildRuleSet(rules, context) {
    const length = rules.length;

    /**
     * @type {Array<CompiledRule>}
     */
    const compiledRules = new Array(length);

    for (let i = 0; i < length; ++i) {
      const rule = rules[i];
      const filter =
        'filter' in rule
          ? buildExpression(rule.filter, BooleanType, context)
          : always;

      /**
       * @type {Array<StyleEvaluator>}
       */
      let styles;
      if (Array.isArray(rule.style)) {
        const styleLength = rule.style.length;
        styles = new Array(styleLength);
        for (let j = 0; j < styleLength; ++j) {
          styles[j] = buildStyle(rule.style[j], context);
        }
      } else {
        styles = [buildStyle(rule.style, context)];
      }

      compiledRules[i] = {filter, styles};
    }

    return function (context) {
      /**
       * @type {Array<Style>}
       */
      const styles = [];

      let someMatched = false;
      for (let i = 0; i < length; ++i) {
        const filterEvaluator = compiledRules[i].filter;
        if (!filterEvaluator(context)) {
          continue;
        }
        if (rules[i].else && someMatched) {
          continue;
        }
        someMatched = true;
        for (const styleEvaluator of compiledRules[i].styles) {
          const style = styleEvaluator(context);
          if (!style) {
            continue;
          }
          styles.push(style);
        }
      }

      return styles;
    };
  }

  /**
   * @typedef {function(EvaluationContext):Style|null} StyleEvaluator
   */

  /**
   * @param {FlatStyle} flatStyle A flat style literal.
   * @param {ParsingContext} context The parsing context.
   * @return {StyleEvaluator} A function that evaluates to a style.  The style returned by
   * this function will be reused between invocations.
   */
  function buildStyle(flatStyle, context) {
    const evaluateFill = buildFill(flatStyle, '', context);
    const evaluateStroke = buildStroke(flatStyle, '', context);
    const evaluateText = buildText(flatStyle, context);
    const evaluateImage = buildImage(flatStyle, context);
    const evaluateZIndex = numberEvaluator(flatStyle, 'z-index', context);

    if (
      !evaluateFill &&
      !evaluateStroke &&
      !evaluateText &&
      !evaluateImage &&
      !isEmpty$1(flatStyle)
    ) {
      // assume this is a user error
      // would be nice to check the properties and suggest "did you mean..."
      throw new Error(
        'No fill, stroke, point, or text symbolizer properties in style: ' +
          JSON.stringify(flatStyle),
      );
    }

    const style = new Style();
    return function (context) {
      let empty = true;
      if (evaluateFill) {
        const fill = evaluateFill(context);
        if (fill) {
          empty = false;
        }
        style.setFill(fill);
      }
      if (evaluateStroke) {
        const stroke = evaluateStroke(context);
        if (stroke) {
          empty = false;
        }
        style.setStroke(stroke);
      }
      if (evaluateText) {
        const text = evaluateText(context);
        if (text) {
          empty = false;
        }
        style.setText(text);
      }
      if (evaluateImage) {
        const image = evaluateImage(context);
        if (image) {
          empty = false;
        }
        style.setImage(image);
      }
      if (evaluateZIndex) {
        style.setZIndex(evaluateZIndex(context));
      }
      if (empty) {
        return null;
      }
      return style;
    };
  }

  /**
   * @typedef {function(EvaluationContext):Fill|null} FillEvaluator
   */

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} prefix The property prefix.
   * @param {ParsingContext} context The parsing context.
   * @return {FillEvaluator?} A function that evaluates to a fill.
   */
  function buildFill(flatStyle, prefix, context) {
    let evaluateColor;
    if (prefix + 'fill-pattern-src' in flatStyle) {
      evaluateColor = patternEvaluator(flatStyle, prefix + 'fill-', context);
    } else {
      if (flatStyle[prefix + 'fill-color'] === 'none') {
        // avoids hit detection
        return (context) => null;
      }

      evaluateColor = colorLikeEvaluator(
        flatStyle,
        prefix + 'fill-color',
        context,
      );
    }
    if (!evaluateColor) {
      return null;
    }

    const fill = new Fill();
    return function (context) {
      const color = evaluateColor(context);
      if (color === NO_COLOR) {
        return null;
      }
      fill.setColor(color);
      return fill;
    };
  }

  /**
   * @typedef {function(EvaluationContext):Stroke|null} StrokeEvaluator
   */

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} prefix The property prefix.
   * @param {ParsingContext} context The parsing context.
   * @return {StrokeEvaluator?} A function the evaluates to a stroke.
   */
  function buildStroke(flatStyle, prefix, context) {
    const evaluateWidth = numberEvaluator(
      flatStyle,
      prefix + 'stroke-width',
      context,
    );

    const evaluateColor = colorLikeEvaluator(
      flatStyle,
      prefix + 'stroke-color',
      context,
    );

    if (!evaluateWidth && !evaluateColor) {
      return null;
    }

    const evaluateLineCap = stringEvaluator(
      flatStyle,
      prefix + 'stroke-line-cap',
      context,
    );

    const evaluateLineJoin = stringEvaluator(
      flatStyle,
      prefix + 'stroke-line-join',
      context,
    );

    const evaluateLineDash = numberArrayEvaluator(
      flatStyle,
      prefix + 'stroke-line-dash',
      context,
    );

    const evaluateLineDashOffset = numberEvaluator(
      flatStyle,
      prefix + 'stroke-line-dash-offset',
      context,
    );

    const evaluateMiterLimit = numberEvaluator(
      flatStyle,
      prefix + 'stroke-miter-limit',
      context,
    );

    const stroke = new Stroke();
    return function (context) {
      if (evaluateColor) {
        const color = evaluateColor(context);
        if (color === NO_COLOR) {
          return null;
        }
        stroke.setColor(color);
      }

      if (evaluateWidth) {
        stroke.setWidth(evaluateWidth(context));
      }

      if (evaluateLineCap) {
        const lineCap = evaluateLineCap(context);
        if (lineCap !== 'butt' && lineCap !== 'round' && lineCap !== 'square') {
          throw new Error('Expected butt, round, or square line cap');
        }
        stroke.setLineCap(lineCap);
      }

      if (evaluateLineJoin) {
        const lineJoin = evaluateLineJoin(context);
        if (
          lineJoin !== 'bevel' &&
          lineJoin !== 'round' &&
          lineJoin !== 'miter'
        ) {
          throw new Error('Expected bevel, round, or miter line join');
        }
        stroke.setLineJoin(lineJoin);
      }

      if (evaluateLineDash) {
        stroke.setLineDash(evaluateLineDash(context));
      }

      if (evaluateLineDashOffset) {
        stroke.setLineDashOffset(evaluateLineDashOffset(context));
      }

      if (evaluateMiterLimit) {
        stroke.setMiterLimit(evaluateMiterLimit(context));
      }

      return stroke;
    };
  }

  /**
   * @typedef {function(EvaluationContext):Text} TextEvaluator
   */

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {ParsingContext} context The parsing context.
   * @return {TextEvaluator?} A function that evaluates to a text symbolizer.
   */
  function buildText(flatStyle, context) {
    const prefix = 'text-';

    // Currently, an Array<string> may be used for rich text support.  This doesn't
    // work with our expression syntax where arrays of strings are interpreted as
    // call expressions.  To support rich text, we could add a 'strings' operator
    // where all the following arguments would be string values.
    const evaluateValue = stringEvaluator(flatStyle, prefix + 'value', context);
    if (!evaluateValue) {
      return null;
    }

    const evaluateFill = buildFill(flatStyle, prefix, context);

    const evaluateBackgroundFill = buildFill(
      flatStyle,
      prefix + 'background-',
      context,
    );

    const evaluateStroke = buildStroke(flatStyle, prefix, context);

    const evaluateBackgroundStroke = buildStroke(
      flatStyle,
      prefix + 'background-',
      context,
    );

    const evaluateFont = stringEvaluator(flatStyle, prefix + 'font', context);

    const evaluateMaxAngle = numberEvaluator(
      flatStyle,
      prefix + 'max-angle',
      context,
    );

    const evaluateOffsetX = numberEvaluator(
      flatStyle,
      prefix + 'offset-x',
      context,
    );

    const evaluateOffsetY = numberEvaluator(
      flatStyle,
      prefix + 'offset-y',
      context,
    );

    const evaluateOverflow = booleanEvaluator(
      flatStyle,
      prefix + 'overflow',
      context,
    );

    const evaluatePlacement = stringEvaluator(
      flatStyle,
      prefix + 'placement',
      context,
    );

    const evaluateRepeat = numberEvaluator(flatStyle, prefix + 'repeat', context);

    const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);

    const evaluateRotateWithView = booleanEvaluator(
      flatStyle,
      prefix + 'rotate-with-view',
      context,
    );

    const evaluateRotation = numberEvaluator(
      flatStyle,
      prefix + 'rotation',
      context,
    );

    const evaluateAlign = stringEvaluator(flatStyle, prefix + 'align', context);

    const evaluateJustify = stringEvaluator(
      flatStyle,
      prefix + 'justify',
      context,
    );

    const evaluateBaseline = stringEvaluator(
      flatStyle,
      prefix + 'baseline',
      context,
    );

    const evaluateKeepUpright = booleanEvaluator(
      flatStyle,
      prefix + 'keep-upright',
      context,
    );

    const evaluatePadding = numberArrayEvaluator(
      flatStyle,
      prefix + 'padding',
      context,
    );

    // The following properties are not currently settable
    const declutterMode = optionalDeclutterMode(
      flatStyle,
      prefix + 'declutter-mode',
    );

    const text = new Text({declutterMode});

    return function (context) {
      text.setText(evaluateValue(context));

      if (evaluateFill) {
        text.setFill(evaluateFill(context));
      }

      if (evaluateBackgroundFill) {
        text.setBackgroundFill(evaluateBackgroundFill(context));
      }

      if (evaluateStroke) {
        text.setStroke(evaluateStroke(context));
      }

      if (evaluateBackgroundStroke) {
        text.setBackgroundStroke(evaluateBackgroundStroke(context));
      }

      if (evaluateFont) {
        text.setFont(evaluateFont(context));
      }

      if (evaluateMaxAngle) {
        text.setMaxAngle(evaluateMaxAngle(context));
      }

      if (evaluateOffsetX) {
        text.setOffsetX(evaluateOffsetX(context));
      }

      if (evaluateOffsetY) {
        text.setOffsetY(evaluateOffsetY(context));
      }

      if (evaluateOverflow) {
        text.setOverflow(evaluateOverflow(context));
      }

      if (evaluatePlacement) {
        const placement = evaluatePlacement(context);
        if (placement !== 'point' && placement !== 'line') {
          throw new Error('Expected point or line for text-placement');
        }
        text.setPlacement(placement);
      }

      if (evaluateRepeat) {
        text.setRepeat(evaluateRepeat(context));
      }

      if (evaluateScale) {
        text.setScale(evaluateScale(context));
      }

      if (evaluateRotateWithView) {
        text.setRotateWithView(evaluateRotateWithView(context));
      }

      if (evaluateRotation) {
        text.setRotation(evaluateRotation(context));
      }

      if (evaluateAlign) {
        const textAlign = evaluateAlign(context);
        if (
          textAlign !== 'left' &&
          textAlign !== 'center' &&
          textAlign !== 'right' &&
          textAlign !== 'end' &&
          textAlign !== 'start'
        ) {
          throw new Error(
            'Expected left, right, center, start, or end for text-align',
          );
        }
        text.setTextAlign(textAlign);
      }

      if (evaluateJustify) {
        const justify = evaluateJustify(context);
        if (justify !== 'left' && justify !== 'right' && justify !== 'center') {
          throw new Error('Expected left, right, or center for text-justify');
        }
        text.setJustify(justify);
      }

      if (evaluateBaseline) {
        const textBaseline = evaluateBaseline(context);
        if (
          textBaseline !== 'bottom' &&
          textBaseline !== 'top' &&
          textBaseline !== 'middle' &&
          textBaseline !== 'alphabetic' &&
          textBaseline !== 'hanging'
        ) {
          throw new Error(
            'Expected bottom, top, middle, alphabetic, or hanging for text-baseline',
          );
        }
        text.setTextBaseline(textBaseline);
      }

      if (evaluatePadding) {
        text.setPadding(evaluatePadding(context));
      }

      if (evaluateKeepUpright) {
        text.setKeepUpright(evaluateKeepUpright(context));
      }

      return text;
    };
  }

  /**
   * @typedef {function(EvaluationContext):import("../../style/Image.js").default} ImageEvaluator
   */

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {ParsingContext} context The parsing context.
   * @return {ImageEvaluator?} A function that evaluates to an image symbolizer.
   */
  function buildImage(flatStyle, context) {
    if ('icon-src' in flatStyle) {
      return buildIcon(flatStyle, context);
    }

    if ('shape-points' in flatStyle) {
      return buildShape(flatStyle, context);
    }

    if ('circle-radius' in flatStyle) {
      return buildCircle(flatStyle, context);
    }

    return null;
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {ParsingContext} context The parsing context.
   * @return {ImageEvaluator} A function that evaluates to an image symbolizer.
   */
  function buildIcon(flatStyle, context) {
    const prefix = 'icon-';

    // required property
    const srcName = prefix + 'src';
    const src = requireString(flatStyle[srcName], srcName);

    // settable properties
    const evaluateAnchor = coordinateEvaluator(
      flatStyle,
      prefix + 'anchor',
      context,
    );

    const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);

    const evaluateOpacity = numberEvaluator(
      flatStyle,
      prefix + 'opacity',
      context,
    );

    const evaluateDisplacement = coordinateEvaluator(
      flatStyle,
      prefix + 'displacement',
      context,
    );

    const evaluateRotation = numberEvaluator(
      flatStyle,
      prefix + 'rotation',
      context,
    );

    const evaluateRotateWithView = booleanEvaluator(
      flatStyle,
      prefix + 'rotate-with-view',
      context,
    );

    // the remaining symbolizer properties are not currently settable
    const anchorOrigin = optionalIconOrigin(flatStyle, prefix + 'anchor-origin');
    const anchorXUnits = optionalIconAnchorUnits(
      flatStyle,
      prefix + 'anchor-x-units',
    );
    const anchorYUnits = optionalIconAnchorUnits(
      flatStyle,
      prefix + 'anchor-y-units',
    );
    const color = optionalColorLike(flatStyle, prefix + 'color');
    const crossOrigin = optionalString(flatStyle, prefix + 'cross-origin');
    const offset = optionalNumberArray(flatStyle, prefix + 'offset');
    const offsetOrigin = optionalIconOrigin(flatStyle, prefix + 'offset-origin');
    const width = optionalNumber(flatStyle, prefix + 'width');
    const height = optionalNumber(flatStyle, prefix + 'height');
    const size = optionalSize(flatStyle, prefix + 'size');
    const declutterMode = optionalDeclutterMode(
      flatStyle,
      prefix + 'declutter-mode',
    );

    const icon = new Icon({
      src,
      anchorOrigin,
      anchorXUnits,
      anchorYUnits,
      color,
      crossOrigin,
      offset,
      offsetOrigin,
      height,
      width,
      size,
      declutterMode,
    });

    return function (context) {
      if (evaluateOpacity) {
        icon.setOpacity(evaluateOpacity(context));
      }

      if (evaluateDisplacement) {
        icon.setDisplacement(evaluateDisplacement(context));
      }

      if (evaluateRotation) {
        icon.setRotation(evaluateRotation(context));
      }

      if (evaluateRotateWithView) {
        icon.setRotateWithView(evaluateRotateWithView(context));
      }

      if (evaluateScale) {
        icon.setScale(evaluateScale(context));
      }

      if (evaluateAnchor) {
        icon.setAnchor(evaluateAnchor(context));
      }
      return icon;
    };
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {ParsingContext} context The parsing context.
   * @return {ImageEvaluator} A function that evaluates to an icon symbolizer.
   */
  function buildShape(flatStyle, context) {
    const prefix = 'shape-';

    // required property
    const pointsName = prefix + 'points';
    const radiusName = prefix + 'radius';
    const points = requireNumber(flatStyle[pointsName], pointsName);
    const radius = requireNumber(flatStyle[radiusName], radiusName);

    // settable properties
    const evaluateFill = buildFill(flatStyle, prefix, context);
    const evaluateStroke = buildStroke(flatStyle, prefix, context);
    const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);
    const evaluateDisplacement = coordinateEvaluator(
      flatStyle,
      prefix + 'displacement',
      context,
    );
    const evaluateRotation = numberEvaluator(
      flatStyle,
      prefix + 'rotation',
      context,
    );
    const evaluateRotateWithView = booleanEvaluator(
      flatStyle,
      prefix + 'rotate-with-view',
      context,
    );

    // the remaining properties are not currently settable
    const radius2 = optionalNumber(flatStyle, prefix + 'radius2');
    const angle = optionalNumber(flatStyle, prefix + 'angle');
    const declutterMode = optionalDeclutterMode(
      flatStyle,
      prefix + 'declutter-mode',
    );

    const shape = new RegularShape({
      points,
      radius,
      radius2,
      angle,
      declutterMode,
    });

    return function (context) {
      if (evaluateFill) {
        shape.setFill(evaluateFill(context));
      }
      if (evaluateStroke) {
        shape.setStroke(evaluateStroke(context));
      }
      if (evaluateDisplacement) {
        shape.setDisplacement(evaluateDisplacement(context));
      }
      if (evaluateRotation) {
        shape.setRotation(evaluateRotation(context));
      }
      if (evaluateRotateWithView) {
        shape.setRotateWithView(evaluateRotateWithView(context));
      }
      if (evaluateScale) {
        shape.setScale(evaluateScale(context));
      }

      return shape;
    };
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {ParsingContext} context The parsing context.
   * @return {ImageEvaluator} A function that evaluates to a circle symbolizer.
   */
  function buildCircle(flatStyle, context) {
    const prefix = 'circle-';

    // settable properties
    const evaluateFill = buildFill(flatStyle, prefix, context);
    const evaluateStroke = buildStroke(flatStyle, prefix, context);
    const evaluateRadius = numberEvaluator(flatStyle, prefix + 'radius', context);
    const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);
    const evaluateDisplacement = coordinateEvaluator(
      flatStyle,
      prefix + 'displacement',
      context,
    );
    const evaluateRotation = numberEvaluator(
      flatStyle,
      prefix + 'rotation',
      context,
    );
    const evaluateRotateWithView = booleanEvaluator(
      flatStyle,
      prefix + 'rotate-with-view',
      context,
    );

    // the remaining properties are not currently settable
    const declutterMode = optionalDeclutterMode(
      flatStyle,
      prefix + 'declutter-mode',
    );

    const circle = new CircleStyle({
      radius: 5, // this is arbitrary, but required - the evaluated radius is used below
      declutterMode,
    });

    return function (context) {
      if (evaluateRadius) {
        circle.setRadius(evaluateRadius(context));
      }
      if (evaluateFill) {
        circle.setFill(evaluateFill(context));
      }
      if (evaluateStroke) {
        circle.setStroke(evaluateStroke(context));
      }
      if (evaluateDisplacement) {
        circle.setDisplacement(evaluateDisplacement(context));
      }
      if (evaluateRotation) {
        circle.setRotation(evaluateRotation(context));
      }
      if (evaluateRotateWithView) {
        circle.setRotateWithView(evaluateRotateWithView(context));
      }
      if (evaluateScale) {
        circle.setScale(evaluateScale(context));
      }

      return circle;
    };
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} name The property name.
   * @param {ParsingContext} context The parsing context.
   * @return {import('../../expr/cpu.js').NumberEvaluator|undefined} The expression evaluator or undefined.
   */
  function numberEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
      return undefined;
    }
    const evaluator = buildExpression(flatStyle[name], NumberType, context);
    return function (context) {
      return requireNumber(evaluator(context), name);
    };
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} name The property name.
   * @param {ParsingContext} context The parsing context.
   * @return {import('../../expr/cpu.js').StringEvaluator?} The expression evaluator.
   */
  function stringEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
      return null;
    }
    const evaluator = buildExpression(flatStyle[name], StringType, context);
    return function (context) {
      return requireString(evaluator(context), name);
    };
  }

  function patternEvaluator(flatStyle, prefix, context) {
    const srcEvaluator = stringEvaluator(
      flatStyle,
      prefix + 'pattern-src',
      context,
    );
    const offsetEvaluator = sizeEvaluator(
      flatStyle,
      prefix + 'pattern-offset',
      context,
    );
    const patternSizeEvaluator = sizeEvaluator(
      flatStyle,
      prefix + 'pattern-size',
      context,
    );
    const colorEvaluator = colorLikeEvaluator(
      flatStyle,
      prefix + 'color',
      context,
    );
    return function (context) {
      return {
        src: srcEvaluator(context),
        offset: offsetEvaluator && offsetEvaluator(context),
        size: patternSizeEvaluator && patternSizeEvaluator(context),
        color: colorEvaluator && colorEvaluator(context),
      };
    };
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} name The property name.
   * @param {ParsingContext} context The parsing context.
   * @return {import('../../expr/cpu.js').BooleanEvaluator?} The expression evaluator.
   */
  function booleanEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
      return null;
    }
    const evaluator = buildExpression(flatStyle[name], BooleanType, context);
    return function (context) {
      const value = evaluator(context);
      if (typeof value !== 'boolean') {
        throw new Error(`Expected a boolean for ${name}`);
      }
      return value;
    };
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} name The property name.
   * @param {ParsingContext} context The parsing context.
   * @return {import('../../expr/cpu.js').ColorLikeEvaluator?} The expression evaluator.
   */
  function colorLikeEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
      return null;
    }
    const evaluator = buildExpression(flatStyle[name], ColorType, context);
    return function (context) {
      return requireColorLike(evaluator(context), name);
    };
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} name The property name.
   * @param {ParsingContext} context The parsing context.
   * @return {import('../../expr/cpu.js').NumberArrayEvaluator?} The expression evaluator.
   */
  function numberArrayEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
      return null;
    }
    const evaluator = buildExpression(flatStyle[name], NumberArrayType, context);
    return function (context) {
      return requireNumberArray(evaluator(context), name);
    };
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} name The property name.
   * @param {ParsingContext} context The parsing context.
   * @return {import('../../expr/cpu.js').CoordinateEvaluator?} The expression evaluator.
   */
  function coordinateEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
      return null;
    }
    const evaluator = buildExpression(flatStyle[name], NumberArrayType, context);
    return function (context) {
      const array = requireNumberArray(evaluator(context), name);
      if (array.length !== 2) {
        throw new Error(`Expected two numbers for ${name}`);
      }
      return array;
    };
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} name The property name.
   * @param {ParsingContext} context The parsing context.
   * @return {import('../../expr/cpu.js').SizeEvaluator?} The expression evaluator.
   */
  function sizeEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
      return null;
    }
    const evaluator = buildExpression(flatStyle[name], NumberArrayType, context);
    return function (context) {
      return requireSize(evaluator(context), name);
    };
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} name The property name.
   * @param {ParsingContext} context The parsing context.
   * @return {import('../../expr/cpu.js').SizeLikeEvaluator?} The expression evaluator.
   */
  function sizeLikeEvaluator(flatStyle, name, context) {
    if (!(name in flatStyle)) {
      return null;
    }
    const evaluator = buildExpression(
      flatStyle[name],
      NumberArrayType | NumberType,
      context,
    );
    return function (context) {
      return requireSizeLike(evaluator(context), name);
    };
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} property The symbolizer property.
   * @return {number|undefined} A number or undefined.
   */
  function optionalNumber(flatStyle, property) {
    const value = flatStyle[property];
    if (value === undefined) {
      return undefined;
    }
    if (typeof value !== 'number') {
      throw new Error(`Expected a number for ${property}`);
    }
    return value;
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} property The symbolizer property.
   * @return {import("../../size.js").Size|undefined} A size or undefined.
   */
  function optionalSize(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
      return undefined;
    }
    if (typeof encoded === 'number') {
      return toSize(encoded);
    }
    if (!Array.isArray(encoded)) {
      throw new Error(`Expected a number or size array for ${property}`);
    }
    if (
      encoded.length !== 2 ||
      typeof encoded[0] !== 'number' ||
      typeof encoded[1] !== 'number'
    ) {
      throw new Error(`Expected a number or size array for ${property}`);
    }
    return encoded;
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} property The symbolizer property.
   * @return {string|undefined} A string or undefined.
   */
  function optionalString(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
      return undefined;
    }
    if (typeof encoded !== 'string') {
      throw new Error(`Expected a string for ${property}`);
    }
    return encoded;
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} property The symbolizer property.
   * @return {import("../../style/Icon.js").IconOrigin|undefined} An icon origin or undefined.
   */
  function optionalIconOrigin(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
      return undefined;
    }
    if (
      encoded !== 'bottom-left' &&
      encoded !== 'bottom-right' &&
      encoded !== 'top-left' &&
      encoded !== 'top-right'
    ) {
      throw new Error(
        `Expected bottom-left, bottom-right, top-left, or top-right for ${property}`,
      );
    }
    return encoded;
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} property The symbolizer property.
   * @return {import("../../style/Icon.js").IconAnchorUnits|undefined} Icon anchor units or undefined.
   */
  function optionalIconAnchorUnits(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
      return undefined;
    }
    if (encoded !== 'pixels' && encoded !== 'fraction') {
      throw new Error(`Expected pixels or fraction for ${property}`);
    }
    return encoded;
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} property The symbolizer property.
   * @return {Array<number>|undefined} An array of numbers or undefined.
   */
  function optionalNumberArray(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
      return undefined;
    }
    return requireNumberArray(encoded, property);
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} property The symbolizer property.
   * @return {import('../../style/Style.js').DeclutterMode} Icon declutter mode.
   */
  function optionalDeclutterMode(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
      return undefined;
    }
    if (typeof encoded !== 'string') {
      throw new Error(`Expected a string for ${property}`);
    }
    if (encoded !== 'declutter' && encoded !== 'obstacle' && encoded !== 'none') {
      throw new Error(`Expected declutter, obstacle, or none for ${property}`);
    }
    return encoded;
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} property The symbolizer property.
   * @return {string|Array<number>|undefined} A string or an array of color values or undefined.
   */
  function optionalColorLike(flatStyle, property) {
    const encoded = flatStyle[property];
    if (encoded === undefined) {
      return undefined;
    }
    return requireColorLike(encoded, property);
  }

  /**
   * @param {any} value The value.
   * @param {string} property The property.
   * @return {Array<number>} An array of numbers.
   */
  function requireNumberArray(value, property) {
    if (!Array.isArray(value)) {
      throw new Error(`Expected an array for ${property}`);
    }
    const length = value.length;
    for (let i = 0; i < length; ++i) {
      if (typeof value[i] !== 'number') {
        throw new Error(`Expected an array of numbers for ${property}`);
      }
    }
    return value;
  }

  /**
   * @param {any} value The value.
   * @param {string} property The property.
   * @return {string} A string.
   */
  function requireString(value, property) {
    if (typeof value !== 'string') {
      throw new Error(`Expected a string for ${property}`);
    }
    return value;
  }

  /**
   * @param {any} value The value.
   * @param {string} property The property.
   * @return {number} A number.
   */
  function requireNumber(value, property) {
    if (typeof value !== 'number') {
      throw new Error(`Expected a number for ${property}`);
    }
    return value;
  }

  /**
   * @param {any} value The value.
   * @param {string} property The property.
   * @return {Array<number>|string} A color.
   */
  function requireColorLike(value, property) {
    if (typeof value === 'string') {
      return value;
    }
    const array = requireNumberArray(value, property);
    const length = array.length;
    if (length < 3 || length > 4) {
      throw new Error(`Expected a color with 3 or 4 values for ${property}`);
    }
    return array;
  }

  /**
   * @param {any} value The value.
   * @param {string} property The property.
   * @return {Array<number>} A number or an array of two numbers.
   */
  function requireSize(value, property) {
    const size = requireNumberArray(value, property);
    if (size.length !== 2) {
      throw new Error(`Expected an array of two numbers for ${property}`);
    }
    return size;
  }

  /**
   * @param {any} value The value.
   * @param {string} property The property.
   * @return {number|Array<number>} A number or an array of two numbers.
   */
  function requireSizeLike(value, property) {
    if (typeof value === 'number') {
      return value;
    }
    return requireSize(value, property);
  }

  /**
   * @module ol/layer/BaseVector
   */

  /***
   * @template T
   * @typedef {T extends import("../source/Vector.js").default<infer U extends import("../Feature.js").FeatureLike> ? U : never} ExtractedFeatureType
   */

  /**
   * @template {import('../Feature').FeatureLike} FeatureType
   * @template {import("../source/Vector.js").default<FeatureType>|import("../source/VectorTile.js").default<FeatureType>} VectorSourceType<FeatureType>
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
   * renderer when getting features from the vector source for the rendering or hit-detection.
   * Recommended value: the size of the largest symbol, line width or label.
   * @property {VectorSourceType} [source] Source.
   * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use [map.addLayer()]{@link import("../Map.js").default#addLayer}.
   * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable
   * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the
   * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the
   * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct
   * layers or groups of layers separately, use different truthy values for `declutter`.
   * @property {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike|null} [style] Layer style. When set to `null`, only
   * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style
   * which will be used if this is not set.
   * @property {import("./Base.js").BackgroundColor} [background] Background color for the layer. If not specified, no background
   * will be rendered.
   * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will
   * be recreated during animations. This means that no vectors will be shown clipped, but the
   * setting will have a performance impact for large amounts of vector data. When set to `false`,
   * batches will be recreated when no animation is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will
   * be recreated during interactions. See also `updateWhileAnimating`.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @enum {string}
   * @private
   */
  const Property$1 = {
    RENDER_ORDER: 'renderOrder',
  };

  /**
   * @classdesc
   * Vector data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import('../Feature').FeatureLike} FeatureType
   * @template {import("../source/Vector.js").default<FeatureType>|import("../source/VectorTile.js").default<FeatureType>} VectorSourceType<FeatureType>
   * @extends {Layer<VectorSourceType, RendererType>}
   * @template {import("../renderer/canvas/VectorLayer.js").default|import("../renderer/canvas/VectorTileLayer.js").default|import("../renderer/canvas/VectorImageLayer.js").default|import("../renderer/webgl/VectorLayer.js").default|import("../renderer/webgl/PointsLayer.js").default} RendererType
   * @api
   */
  class BaseVectorLayer extends Layer {
    /**
     * @param {Options<FeatureType, VectorSourceType>} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const baseOptions = Object.assign({}, options);

      delete baseOptions.style;
      delete baseOptions.renderBuffer;
      delete baseOptions.updateWhileAnimating;
      delete baseOptions.updateWhileInteracting;
      super(baseOptions);

      /**
       * @private
       * @type {string}
       */
      this.declutter_ = options.declutter ? String(options.declutter) : undefined;

      /**
       * @type {number}
       * @private
       */
      this.renderBuffer_ =
        options.renderBuffer !== undefined ? options.renderBuffer : 100;

      /**
       * User provided style.
       * @type {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike}
       * @private
       */
      this.style_ = null;

      /**
       * Style function for use within the library.
       * @type {import("../style/Style.js").StyleFunction|undefined}
       * @private
       */
      this.styleFunction_ = undefined;

      this.setStyle(options.style);

      /**
       * @type {boolean}
       * @private
       */
      this.updateWhileAnimating_ =
        options.updateWhileAnimating !== undefined
          ? options.updateWhileAnimating
          : false;

      /**
       * @type {boolean}
       * @private
       */
      this.updateWhileInteracting_ =
        options.updateWhileInteracting !== undefined
          ? options.updateWhileInteracting
          : false;
    }

    /**
     * @return {string} Declutter group.
     * @override
     */
    getDeclutter() {
      return this.declutter_;
    }

    /**
     * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
     * that resolves with an array of features. The array will either contain the topmost feature
     * when a hit was detected, or it will be empty.
     *
     * The hit detection algorithm used for this method is optimized for performance, but is less
     * accurate than the one used in [map.getFeaturesAtPixel()]{@link import("../Map.js").default#getFeaturesAtPixel}.
     * Text is not considered, and icons are only represented by their bounding box instead of the exact
     * image.
     *
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with an array of features.
     * @api
     * @override
     */
    getFeatures(pixel) {
      return super.getFeatures(pixel);
    }

    /**
     * @return {number|undefined} Render buffer.
     */
    getRenderBuffer() {
      return this.renderBuffer_;
    }

    /**
     * @return {import("../render.js").OrderFunction|null|undefined} Render order.
     */
    getRenderOrder() {
      return /** @type {import("../render.js").OrderFunction|null|undefined} */ (
        this.get(Property$1.RENDER_ORDER)
      );
    }

    /**
     * Get the style for features.  This returns whatever was passed to the `style`
     * option at construction or to the `setStyle` method.
     * @return {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike|null|undefined} Layer style.
     * @api
     */
    getStyle() {
      return this.style_;
    }

    /**
     * Get the style function.
     * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
     * @api
     */
    getStyleFunction() {
      return this.styleFunction_;
    }

    /**
     * @return {boolean} Whether the rendered layer should be updated while
     *     animating.
     */
    getUpdateWhileAnimating() {
      return this.updateWhileAnimating_;
    }

    /**
     * @return {boolean} Whether the rendered layer should be updated while
     *     interacting.
     */
    getUpdateWhileInteracting() {
      return this.updateWhileInteracting_;
    }

    /**
     * Render declutter items for this layer
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @param {import("../layer/Layer.js").State} layerState Layer state.
     * @override
     */
    renderDeclutter(frameState, layerState) {
      const declutterGroup = this.getDeclutter();
      if (declutterGroup in frameState.declutter === false) {
        frameState.declutter[declutterGroup] = new RBush$1(9);
      }
      this.getRenderer().renderDeclutter(frameState, layerState);
    }

    /**
     * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
     *     Render order.
     */
    setRenderOrder(renderOrder) {
      this.set(Property$1.RENDER_ORDER, renderOrder);
    }

    /**
     * Set the style for features.  This can be a single style object, an array
     * of styles, or a function that takes a feature and resolution and returns
     * an array of styles. If set to `null`, the layer has no style (a `null` style),
     * so only features that have their own styles will be rendered in the layer. Call
     * `setStyle()` without arguments to reset to the default style. See
     * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.
     *
     * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object
     * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):
     * ```js
     * vectorLayer.setStyle({
     *   "fill-color": "yellow",
     *   "stroke-color": "black",
     *   "stroke-width": 4
     * })
     * ```
     *
     * @param {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike|null} [style] Layer style.
     * @api
     */
    setStyle(style) {
      this.style_ = style === undefined ? createDefaultStyle : style;
      const styleLike = toStyleLike(style);
      this.styleFunction_ =
        style === null ? undefined : toFunction(styleLike);
      this.changed();
    }

    /**
     * @param {boolean|string|number} declutter Declutter images and text.
     * @api
     */
    setDeclutter(declutter) {
      this.declutter_ = declutter ? String(declutter) : undefined;
      this.changed();
    }
  }

  /**
   * Coerce the allowed style types into a shorter list of types.  Flat styles, arrays of flat
   * styles, and arrays of rules are converted into style functions.
   *
   * @param {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike|null} [style] Layer style.
   * @return {import("../style/Style.js").StyleLike|null} The style.
   */
  function toStyleLike(style) {
    if (style === undefined) {
      return createDefaultStyle;
    }
    if (!style) {
      return null;
    }
    if (typeof style === 'function') {
      return style;
    }
    if (style instanceof Style) {
      return style;
    }
    if (!Array.isArray(style)) {
      return flatStylesToStyleFunction([style]);
    }
    if (style.length === 0) {
      return [];
    }

    const length = style.length;
    const first = style[0];

    if (first instanceof Style) {
      /**
       * @type {Array<Style>}
       */
      const styles = new Array(length);
      for (let i = 0; i < length; ++i) {
        const candidate = style[i];
        if (!(candidate instanceof Style)) {
          throw new Error('Expected a list of style instances');
        }
        styles[i] = candidate;
      }
      return styles;
    }

    if ('style' in first) {
      /**
       * @type {Array<import("../style/flat.js").Rule>}
       */
      const rules = new Array(length);
      for (let i = 0; i < length; ++i) {
        const candidate = style[i];
        if (!('style' in candidate)) {
          throw new Error('Expected a list of rules with a style property');
        }
        rules[i] = candidate;
      }
      return rulesToStyleFunction(rules);
    }

    const flatStyles =
      /** @type {Array<import("../style/flat.js").FlatStyle>} */ (style);
    return flatStylesToStyleFunction(flatStyles);
  }

  /**
   * @module ol/render/Event
   */


  class RenderEvent extends BaseEvent {
    /**
     * @param {import("./EventType.js").default} type Type.
     * @param {import("../transform.js").Transform} [inversePixelTransform] Transform for
     *     CSS pixels to rendered pixels.
     * @param {import("../Map.js").FrameState} [frameState] Frame state.
     * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.
     */
    constructor(type, inversePixelTransform, frameState, context) {
      super(type);

      /**
       * Transform from CSS pixels (relative to the top-left corner of the map viewport)
       * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.
       * @type {import("../transform.js").Transform|undefined}
       * @api
       */
      this.inversePixelTransform = inversePixelTransform;

      /**
       * An object representing the current render frame state.
       * @type {import("../Map.js").FrameState|undefined}
       * @api
       */
      this.frameState = frameState;

      /**
       * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,
       * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL
       * context.
       * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}
       * @api
       */
      this.context = context;
    }
  }

  /**
   * @module ol/renderer/Map
   */

  /**
   * @template T
   * @typedef HitMatch
   * @property {import("../Feature.js").FeatureLike} feature Feature.
   * @property {import("../layer/Layer.js").default} layer Layer.
   * @property {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @property {number} distanceSq Squared distance.
   * @property {import("./vector.js").FeatureCallback<T>} callback Callback.
   */

  /**
   * @abstract
   */
  class MapRenderer extends Disposable {
    /**
     * @param {import("../Map.js").default} map Map.
     */
    constructor(map) {
      super();

      /**
       * @private
       * @type {import("../Map.js").default}
       */
      this.map_ = map;
    }

    /**
     * @abstract
     * @param {import("../render/EventType.js").default} type Event type.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     */
    dispatchRenderEvent(type, frameState) {
      abstract();
    }

    /**
     * @param {import("../Map.js").FrameState} frameState FrameState.
     * @protected
     */
    calculateMatrices2D(frameState) {
      const viewState = frameState.viewState;
      const coordinateToPixelTransform = frameState.coordinateToPixelTransform;
      const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;

      compose(
        coordinateToPixelTransform,
        frameState.size[0] / 2,
        frameState.size[1] / 2,
        1 / viewState.resolution,
        -1 / viewState.resolution,
        -viewState.rotation,
        -viewState.center[0],
        -viewState.center[1],
      );

      makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);
    }

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../Map.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {boolean} checkWrapped Check for wrapped geometries.
     * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    forEachFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      checkWrapped,
      callback,
      thisArg,
      layerFilter,
      thisArg2,
    ) {
      let result;
      const viewState = frameState.viewState;

      /**
       * @param {boolean} managed Managed layer.
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       * @param {import("../layer/Layer.js").default} layer Layer.
       * @param {import("../geom/Geometry.js").default} geometry Geometry.
       * @return {T|undefined} Callback result.
       */
      function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {
        return callback.call(thisArg, feature, managed ? layer : null, geometry);
      }

      const projection = viewState.projection;

      const translatedCoordinate = wrapX$1(coordinate.slice(), projection);
      const offsets = [[0, 0]];
      if (projection.canWrapX() && checkWrapped) {
        const projectionExtent = projection.getExtent();
        const worldWidth = getWidth(projectionExtent);
        offsets.push([-worldWidth, 0], [worldWidth, 0]);
      }

      const layerStates = frameState.layerStatesArray;
      const numLayers = layerStates.length;

      const matches = /** @type {Array<HitMatch<T>>} */ ([]);
      const tmpCoord = [];
      for (let i = 0; i < offsets.length; i++) {
        for (let j = numLayers - 1; j >= 0; --j) {
          const layerState = layerStates[j];
          const layer = layerState.layer;
          if (
            layer.hasRenderer() &&
            inView(layerState, viewState) &&
            layerFilter.call(thisArg2, layer)
          ) {
            const layerRenderer = layer.getRenderer();
            const source = layer.getSource();
            if (layerRenderer && source) {
              const coordinates = source.getWrapX()
                ? translatedCoordinate
                : coordinate;
              const callback = forEachFeatureAtCoordinate.bind(
                null,
                layerState.managed,
              );
              tmpCoord[0] = coordinates[0] + offsets[i][0];
              tmpCoord[1] = coordinates[1] + offsets[i][1];
              result = layerRenderer.forEachFeatureAtCoordinate(
                tmpCoord,
                frameState,
                hitTolerance,
                callback,
                matches,
              );
            }
            if (result) {
              return result;
            }
          }
        }
      }
      if (matches.length === 0) {
        return undefined;
      }
      const order = 1 / matches.length;
      matches.forEach((m, i) => (m.distanceSq += i * order));
      matches.sort((a, b) => a.distanceSq - b.distanceSq);
      matches.some((m) => {
        return (result = m.callback(m.feature, m.layer, m.geometry));
      });
      return result;
    }

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../Map.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {boolean} checkWrapped Check for wrapped geometries.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
     * @return {boolean} Is there a feature at the given coordinate?
     * @template U
     */
    hasFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      checkWrapped,
      layerFilter,
      thisArg,
    ) {
      const hasFeature = this.forEachFeatureAtCoordinate(
        coordinate,
        frameState,
        hitTolerance,
        checkWrapped,
        TRUE,
        this,
        layerFilter,
        thisArg,
      );

      return hasFeature !== undefined;
    }

    /**
     * @return {import("../Map.js").default} Map.
     */
    getMap() {
      return this.map_;
    }

    /**
     * Render.
     * @abstract
     * @param {?import("../Map.js").FrameState} frameState Frame state.
     */
    renderFrame(frameState) {
      abstract();
    }

    /**
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @protected
     */
    scheduleExpireIconCache(frameState) {
      if (shared.canExpireCache()) {
        frameState.postRenderFunctions.push(expireIconCache);
      }
    }
  }

  /**
   * @param {import("../Map.js").default} map Map.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */
  function expireIconCache(map, frameState) {
    shared.expire();
  }

  /**
   * @module ol/renderer/Composite
   */

  /**
   * @classdesc
   * Canvas map renderer.
   * @api
   */
  class CompositeMapRenderer extends MapRenderer {
    /**
     * @param {import("../Map.js").default} map Map.
     */
    constructor(map) {
      super(map);

      /**
       * @private
       * @type {import("../events.js").EventsKey}
       */
      this.fontChangeListenerKey_ = listen(
        checkedFonts,
        ObjectEventType.PROPERTYCHANGE,
        map.redrawText,
        map,
      );

      /**
       * @private
       * @type {HTMLDivElement}
       */
      this.element_ = document.createElement('div');
      const style = this.element_.style;
      style.position = 'absolute';
      style.width = '100%';
      style.height = '100%';
      style.zIndex = '0';

      this.element_.className = CLASS_UNSELECTABLE + ' ol-layers';

      const container = map.getViewport();
      container.insertBefore(this.element_, container.firstChild || null);

      /**
       * @private
       * @type {Array<HTMLElement>}
       */
      this.children_ = [];

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;
    }

    /**
     * @param {import("../render/EventType.js").default} type Event type.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @override
     */
    dispatchRenderEvent(type, frameState) {
      const map = this.getMap();
      if (map.hasListener(type)) {
        const event = new RenderEvent(type, undefined, frameState);
        map.dispatchEvent(event);
      }
    }

    /**
     * @override
     */
    disposeInternal() {
      unlistenByKey(this.fontChangeListenerKey_);
      this.element_.remove();
      super.disposeInternal();
    }

    /**
     * Render.
     * @param {?import("../Map.js").FrameState} frameState Frame state.
     * @override
     */
    renderFrame(frameState) {
      if (!frameState) {
        if (this.renderedVisible_) {
          this.element_.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      this.calculateMatrices2D(frameState);
      this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);

      const layerStatesArray = frameState.layerStatesArray.sort(
        (a, b) => a.zIndex - b.zIndex,
      );
      const declutter = layerStatesArray.some(
        (layerState) =>
          layerState.layer instanceof BaseVectorLayer &&
          layerState.layer.getDeclutter(),
      );
      if (declutter) {
        // Some layers need decluttering, turn on deferred rendering hint
        frameState.declutter = {};
      }
      const viewState = frameState.viewState;

      this.children_.length = 0;

      const renderedLayerStates = [];
      let previousElement = null;
      for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        const layerState = layerStatesArray[i];
        frameState.layerIndex = i;

        const layer = layerState.layer;
        const sourceState = layer.getSourceState();
        if (
          !inView(layerState, viewState) ||
          (sourceState != 'ready' && sourceState != 'undefined')
        ) {
          layer.unrender();
          continue;
        }

        const element = layer.render(frameState, previousElement);
        if (!element) {
          continue;
        }
        if (element !== previousElement) {
          this.children_.push(element);
          previousElement = element;
        }

        renderedLayerStates.push(layerState);
      }

      this.declutter(frameState, renderedLayerStates);

      replaceChildren(this.element_, this.children_);

      this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);

      if (!this.renderedVisible_) {
        this.element_.style.display = '';
        this.renderedVisible_ = true;
      }

      this.scheduleExpireIconCache(frameState);
    }

    /**
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @param {Array<import('../layer/Layer.js').State>} layerStates Layers.
     */
    declutter(frameState, layerStates) {
      if (!frameState.declutter) {
        return;
      }
      for (let i = layerStates.length - 1; i >= 0; --i) {
        const layerState = layerStates[i];
        const layer = layerState.layer;
        if (layer.getDeclutter()) {
          layer.renderDeclutter(frameState, layerState);
        }
      }
      layerStates.forEach((layerState) =>
        layerState.layer.renderDeferred(frameState),
      );
    }
  }

  /**
   * @module ol/Map
   */

  /**
   * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
   * be used in applications.
   * @typedef {Object} FrameState
   * @property {number} pixelRatio The pixel ratio of the frame.
   * @property {number} time The time when rendering of the frame was requested.
   * @property {import("./View.js").State} viewState The state of the current view.
   * @property {boolean} animate Animate.
   * @property {import("./transform.js").Transform} coordinateToPixelTransform CoordinateToPixelTransform.
   * @property {Object<string, import("rbush").default<import('./render/canvas/Executor.js').DeclutterEntry>>|null} declutter
   * Declutter trees by declutter group.
   * When null, no decluttering is needed because no layers have decluttering enabled.
   * @property {null|import("./extent.js").Extent} extent Extent (in view projection coordinates).
   * @property {import("./extent.js").Extent} [nextExtent] Next extent during an animation series.
   * @property {number} index Index.
   * @property {Array<import("./layer/Layer.js").State>} layerStatesArray LayerStatesArray.
   * @property {number} layerIndex LayerIndex.
   * @property {import("./transform.js").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.
   * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.
   * @property {import("./size.js").Size} size Size.
   * @property {TileQueue} tileQueue TileQueue.
   * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.
   * @property {Array<number>} viewHints ViewHints.
   * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.
   * @property {string} mapId The id of the map.
   * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.
   */

  /**
   * @typedef {function(Map, FrameState): any} PostRenderFunction
   */

  /**
   * @typedef {Object} AtPixelOptions
   * @property {undefined|function(import("./layer/Layer.js").default<import("./source/Source").default>): boolean} [layerFilter] Layer filter
   * function. The filter function will receive one argument, the
   * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.
   * Only layers which are visible and for which this function returns `true`
   * will be tested for features. By default, all visible layers will be tested.
   * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels
   * inside the radius around the given position will be checked for features.
   * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of
   *   +/- 1 world width. Works only if a projection is used that can be wrapped.
   */

  /**
   * @typedef {Object} MapOptionsInternal
   * @property {Collection<import("./control/Control.js").default>} [controls] Controls.
   * @property {Collection<import("./interaction/Interaction.js").default>} [interactions] Interactions.
   * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.
   * @property {Collection<import("./Overlay.js").default>} overlays Overlays.
   * @property {Object<string, *>} values Values.
   */

  /**
   * @typedef {import("./ObjectEventType").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes
   */

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *    import("./Observable").OnSignature<MapObjectEventTypes, import("./Object").ObjectEvent, Return> &
   *    import("./Observable").OnSignature<import("./MapBrowserEventType").Types, import("./MapBrowserEvent").default, Return> &
   *    import("./Observable").OnSignature<import("./MapEventType").Types, import("./MapEvent").default, Return> &
   *    import("./Observable").OnSignature<import("./render/EventType").MapRenderEventTypes, import("./render/Event").default, Return> &
   *    import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|MapObjectEventTypes|
   *      import("./MapBrowserEventType").Types|import("./MapEventType").Types|
   *      import("./render/EventType").MapRenderEventTypes, Return>} MapEventHandler
   */

  /**
   * Object literal with config options for the map.
   * @typedef {Object} MapOptions
   * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
   * Controls initially added to the map. If not specified,
   * {@link module:ol/control/defaults.defaults} is used.
   * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
   * physical pixels and device-independent pixels (dips) on the device.
   * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
   * Interactions that are initially added to the map. If not specified,
   * {@link module:ol/interaction/defaults.defaults} is used.
   * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
   * listen to keyboard events on. This determines when the `KeyboardPan` and
   * `KeyboardZoom` interactions trigger. For example, if this option is set to
   * `document` the keyboard interactions will always trigger. If this option is
   * not specified, the element the library listens to keyboard events on is the
   * map target (i.e. the user-provided div for the map). If this is not
   * `document`, the target element needs to be focused for key events to be
   * emitted, requiring that the target element has a `tabindex` attribute.
   * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
   * Layers. If this is not defined, a map with no layers will be rendered. Note
   * that layers are rendered in the order supplied, so if you want, for example,
   * a vector layer to appear on top of a tile layer, it must come after the tile
   * layer.
   * @property {number} [maxTilesLoading=16] Maximum number tiles to load
   * simultaneously.
   * @property {number} [moveTolerance=1] The minimum distance in pixels the
   * cursor must move to be detected as a map move event instead of a click.
   * Increasing this value can make it easier to click on the map.
   * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
   * Overlays initially added to the map. By default, no overlays are added.
   * @property {HTMLElement|string} [target] The container for the map, either the
   * element itself or the `id` of the element. If not specified at construction
   * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
   * rendered. If passed by element, the container can be in a secondary document.
   * For accessibility (focus and keyboard events for map navigation), the `target` element must have a
   *  properly configured `tabindex` attribute. If the `target` element is inside a Shadow DOM, the
   *  `tabindex` atribute must be set on the custom element's host element.
   * **Note:** CSS `transform` support for the target element is limited to `scale`.
   * @property {View|Promise<import("./View.js").ViewOptions>} [view] The map's view.  No layer sources will be
   * fetched unless this is specified at construction time or through
   * {@link module:ol/Map~Map#setView}.
   */

  /**
   * @param {import("./layer/Base.js").default} layer Layer.
   */
  function removeLayerMapProperty(layer) {
    if (layer instanceof Layer) {
      layer.setMapInternal(null);
      return;
    }
    if (layer instanceof LayerGroup) {
      layer.getLayers().forEach(removeLayerMapProperty);
    }
  }

  /**
   * @param {import("./layer/Base.js").default} layer Layer.
   * @param {Map} map Map.
   */
  function setLayerMapProperty(layer, map) {
    if (layer instanceof Layer) {
      layer.setMapInternal(map);
      return;
    }
    if (layer instanceof LayerGroup) {
      const layers = layer.getLayers().getArray();
      for (let i = 0, ii = layers.length; i < ii; ++i) {
        setLayerMapProperty(layers[i], map);
      }
    }
  }

  /**
   * @classdesc
   * The map is the core component of OpenLayers. For a map to render, a view,
   * one or more layers, and a target container are needed:
   *
   *     import Map from 'ol/Map.js';
   *     import View from 'ol/View.js';
   *     import TileLayer from 'ol/layer/Tile.js';
   *     import OSM from 'ol/source/OSM.js';
   *
   *     const map = new Map({
   *       view: new View({
   *         center: [0, 0],
   *         zoom: 1,
   *       }),
   *       layers: [
   *         new TileLayer({
   *           source: new OSM(),
   *         }),
   *       ],
   *       target: 'map',
   *     });
   *
   * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to
   * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
   * element with the id `map`.
   *
   * The constructor places a viewport container (with CSS class name
   * `ol-viewport`) in the target element (see `getViewport()`), and then two
   * further elements within the viewport: one with CSS class name
   * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
   * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
   * option of {@link module:ol/Overlay~Overlay} for the difference). The map
   * itself is placed in a further element within the viewport.
   *
   * Layers are stored as a {@link module:ol/Collection~Collection} in
   * layerGroups. A top-level group is provided by the library. This is what is
   * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
   * options are added to this group, and `addLayer` and `removeLayer` change the
   * layer collection in the group. `getLayers` is a convenience function for
   * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}
   * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the
   * options or added with `addLayer` can be groups, which can contain further
   * groups, and so on.
   *
   * @fires import("./MapBrowserEvent.js").MapBrowserEvent
   * @fires import("./MapEvent.js").MapEvent
   * @fires import("./render/Event.js").default#precompose
   * @fires import("./render/Event.js").default#postcompose
   * @fires import("./render/Event.js").default#rendercomplete
   * @api
   */
  class Map extends BaseObject {
    /**
     * @param {MapOptions} [options] Map options.
     */
    constructor(options) {
      super();

      options = options || {};

      /***
       * @type {MapEventHandler<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {MapEventHandler<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {MapEventHandler<void>}
       */
      this.un;

      const optionsInternal = createOptionsInternal(options);

      /**
       * @private
       * @type {boolean}
       */
      this.renderComplete_ = false;

      /**
       * @private
       * @type {boolean}
       */
      this.loaded_ = true;

      /** @private */
      this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);

      /**
       * @type {number}
       * @private
       */
      this.maxTilesLoading_ =
        options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ =
        options.pixelRatio !== undefined
          ? options.pixelRatio
          : DEVICE_PIXEL_RATIO;

      /**
       * @private
       * @type {ReturnType<typeof setTimeout>}
       */
      this.postRenderTimeoutHandle_;

      /**
       * @private
       * @type {number|undefined}
       */
      this.animationDelayKey_;

      /**
       * @private
       */
      this.animationDelay_ = this.animationDelay_.bind(this);

      /**
       * @private
       * @type {import("./transform.js").Transform}
       */
      this.coordinateToPixelTransform_ = create();

      /**
       * @private
       * @type {import("./transform.js").Transform}
       */
      this.pixelToCoordinateTransform_ = create();

      /**
       * @private
       * @type {number}
       */
      this.frameIndex_ = 0;

      /**
       * @private
       * @type {?FrameState}
       */
      this.frameState_ = null;

      /**
       * The extent at the previous 'moveend' event.
       * @private
       * @type {import("./extent.js").Extent}
       */
      this.previousExtent_ = null;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.viewPropertyListenerKey_ = null;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.viewChangeListenerKey_ = null;

      /**
       * @private
       * @type {?Array<import("./events.js").EventsKey>}
       */
      this.layerGroupPropertyListenerKeys_ = null;

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.viewport_ = document.createElement('div');
      this.viewport_.className =
        'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');
      this.viewport_.style.position = 'relative';
      this.viewport_.style.overflow = 'hidden';
      this.viewport_.style.width = '100%';
      this.viewport_.style.height = '100%';

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.overlayContainer_ = document.createElement('div');
      this.overlayContainer_.style.position = 'absolute';
      this.overlayContainer_.style.zIndex = '0';
      this.overlayContainer_.style.width = '100%';
      this.overlayContainer_.style.height = '100%';
      this.overlayContainer_.style.pointerEvents = 'none';
      this.overlayContainer_.className = 'ol-overlaycontainer';
      this.viewport_.appendChild(this.overlayContainer_);

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.overlayContainerStopEvent_ = document.createElement('div');
      this.overlayContainerStopEvent_.style.position = 'absolute';
      this.overlayContainerStopEvent_.style.zIndex = '0';
      this.overlayContainerStopEvent_.style.width = '100%';
      this.overlayContainerStopEvent_.style.height = '100%';
      this.overlayContainerStopEvent_.style.pointerEvents = 'none';
      this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';
      this.viewport_.appendChild(this.overlayContainerStopEvent_);

      /**
       * @private
       * @type {MapBrowserEventHandler}
       */
      this.mapBrowserEventHandler_ = null;

      /**
       * @private
       * @type {number}
       */
      this.moveTolerance_ = options.moveTolerance;

      /**
       * @private
       * @type {HTMLElement|Document}
       */
      this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;

      /**
       * @private
       * @type {?Array<import("./events.js").EventsKey>}
       */
      this.targetChangeHandlerKeys_ = null;

      /**
       * @private
       * @type {HTMLElement|null}
       */
      this.targetElement_ = null;

      /**
       * @private
       * @type {ResizeObserver}
       */
      this.resizeObserver_ = new ResizeObserver(() => this.updateSize());

      /**
       * @type {Collection<import("./control/Control.js").default>}
       * @protected
       */
      this.controls = optionsInternal.controls || defaults$1();

      /**
       * @type {Collection<import("./interaction/Interaction.js").default>}
       * @protected
       */
      this.interactions =
        optionsInternal.interactions ||
        defaults({
          onFocusOnly: true,
        });

      /**
       * @type {Collection<import("./Overlay.js").default>}
       * @private
       */
      this.overlays_ = optionsInternal.overlays;

      /**
       * A lookup of overlays by id.
       * @private
       * @type {Object<string, import("./Overlay.js").default>}
       */
      this.overlayIdIndex_ = {};

      /**
       * @type {import("./renderer/Map.js").default|null}
       * @private
       */
      this.renderer_ = null;

      /**
       * @private
       * @type {!Array<PostRenderFunction>}
       */
      this.postRenderFunctions_ = [];

      /**
       * @private
       * @type {TileQueue}
       */
      this.tileQueue_ = new TileQueue(
        this.getTilePriority.bind(this),
        this.handleTileChange_.bind(this),
      );

      this.addChangeListener(
        MapProperty.LAYERGROUP,
        this.handleLayerGroupChanged_,
      );
      this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);
      this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);
      this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);

      // setProperties will trigger the rendering of the map if the map
      // is "defined" already.
      this.setProperties(optionsInternal.values);

      const map = this;
      if (options.view && !(options.view instanceof View)) {
        options.view.then(function (viewOptions) {
          map.setView(new View(viewOptions));
        });
      }

      this.controls.addEventListener(
        CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./control/Control.js").default>} event CollectionEvent
         */
        (event) => {
          event.element.setMap(this);
        },
      );

      this.controls.addEventListener(
        CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./control/Control.js").default>} event CollectionEvent.
         */
        (event) => {
          event.element.setMap(null);
        },
      );

      this.interactions.addEventListener(
        CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./interaction/Interaction.js").default>} event CollectionEvent.
         */
        (event) => {
          event.element.setMap(this);
        },
      );

      this.interactions.addEventListener(
        CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./interaction/Interaction.js").default>} event CollectionEvent.
         */
        (event) => {
          event.element.setMap(null);
        },
      );

      this.overlays_.addEventListener(
        CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./Overlay.js").default>} event CollectionEvent.
         */
        (event) => {
          this.addOverlayInternal_(event.element);
        },
      );

      this.overlays_.addEventListener(
        CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./Overlay.js").default>} event CollectionEvent.
         */
        (event) => {
          const id = event.element.getId();
          if (id !== undefined) {
            delete this.overlayIdIndex_[id.toString()];
          }
          event.element.setMap(null);
        },
      );

      this.controls.forEach(
        /**
         * @param {import("./control/Control.js").default} control Control.
         */
        (control) => {
          control.setMap(this);
        },
      );

      this.interactions.forEach(
        /**
         * @param {import("./interaction/Interaction.js").default} interaction Interaction.
         */
        (interaction) => {
          interaction.setMap(this);
        },
      );

      this.overlays_.forEach(this.addOverlayInternal_.bind(this));
    }

    /**
     * Add the given control to the map.
     * @param {import("./control/Control.js").default} control Control.
     * @api
     */
    addControl(control) {
      this.getControls().push(control);
    }

    /**
     * Add the given interaction to the map. If you want to add an interaction
     * at another point of the collection use `getInteractions()` and the methods
     * available on {@link module:ol/Collection~Collection}. This can be used to
     * stop the event propagation from the handleEvent function. The interactions
     * get to handle the events in the reverse order of this collection.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
     * @api
     */
    addInteraction(interaction) {
      this.getInteractions().push(interaction);
    }

    /**
     * Adds the given layer to the top of this map. If you want to add a layer
     * elsewhere in the stack, use `getLayers()` and the methods available on
     * {@link module:ol/Collection~Collection}.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @api
     */
    addLayer(layer) {
      const layers = this.getLayerGroup().getLayers();
      layers.push(layer);
    }

    /**
     * @param {import("./layer/Group.js").GroupEvent} event The layer add event.
     * @private
     */
    handleLayerAdd_(event) {
      setLayerMapProperty(event.layer, this);
    }

    /**
     * Add the given overlay to the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @api
     */
    addOverlay(overlay) {
      this.getOverlays().push(overlay);
    }

    /**
     * This deals with map's overlay collection changes.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @private
     */
    addOverlayInternal_(overlay) {
      const id = overlay.getId();
      if (id !== undefined) {
        this.overlayIdIndex_[id.toString()] = overlay;
      }
      overlay.setMap(this);
    }

    /**
     *
     * Clean up.
     * @override
     */
    disposeInternal() {
      this.controls.clear();
      this.interactions.clear();
      this.overlays_.clear();
      this.resizeObserver_.disconnect();
      this.setTarget(null);
      super.disposeInternal();
    }

    /**
     * Detect features that intersect a pixel on the viewport, and execute a
     * callback with each intersecting feature. Layers included in the detection can
     * be configured through the `layerFilter` option in `options`.
     * For polygons without a fill, only the stroke will be used for hit detection.
     * Polygons must have a fill style applied to ensure that pixels inside a polygon are detected.
     * The fill can be transparent.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {function(import("./Feature.js").FeatureLike, import("./layer/Layer.js").default<import("./source/Source").default>, import("./geom/SimpleGeometry.js").default): T} callback Feature callback. The callback will be
     *     called with two arguments. The first argument is one
     *     {@link module:ol/Feature~Feature feature} or
     *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is
     *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for
     *     unmanaged layers. To stop detection, callback functions can return a
     *     truthy value.
     * @param {AtPixelOptions} [options] Optional options.
     * @return {T|undefined} Callback result, i.e. the return value of last
     * callback execution, or the first truthy callback return value.
     * @template T
     * @api
     */
    forEachFeatureAtPixel(pixel, callback, options) {
      if (!this.frameState_ || !this.renderer_) {
        return;
      }
      const coordinate = this.getCoordinateFromPixelInternal(pixel);
      options = options !== undefined ? options : {};
      const hitTolerance =
        options.hitTolerance !== undefined ? options.hitTolerance : 0;
      const layerFilter =
        options.layerFilter !== undefined ? options.layerFilter : TRUE;
      const checkWrapped = options.checkWrapped !== false;
      return this.renderer_.forEachFeatureAtCoordinate(
        coordinate,
        this.frameState_,
        hitTolerance,
        checkWrapped,
        callback,
        null,
        layerFilter,
        null,
      );
    }

    /**
     * Get all features that intersect a pixel on the viewport.
     * For polygons without a fill, only the stroke will be used for hit detection.
     * Polygons must have a fill style applied to ensure that pixels inside a polygon are detected.
     * The fill can be transparent.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions} [options] Optional options.
     * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
     * an empty array if none were found.
     * @api
     */
    getFeaturesAtPixel(pixel, options) {
      const features = [];
      this.forEachFeatureAtPixel(
        pixel,
        function (feature) {
          features.push(feature);
        },
        options,
      );
      return features;
    }

    /**
     * Get all layers from all layer groups.
     * @return {Array<import("./layer/Layer.js").default>} Layers.
     * @api
     */
    getAllLayers() {
      const layers = [];
      function addLayersFrom(layerGroup) {
        layerGroup.forEach(function (layer) {
          if (layer instanceof LayerGroup) {
            addLayersFrom(layer.getLayers());
          } else {
            layers.push(layer);
          }
        });
      }
      addLayersFrom(this.getLayers());
      return layers;
    }

    /**
     * Detect if features intersect a pixel on the viewport. Layers included in the
     * detection can be configured through the `layerFilter` option.
     * For polygons without a fill, only the stroke will be used for hit detection.
     * Polygons must have a fill style applied to ensure that pixels inside a polygon are detected.
     * The fill can be transparent.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions} [options] Optional options.
     * @return {boolean} Is there a feature at the given pixel?
     * @api
     */
    hasFeatureAtPixel(pixel, options) {
      if (!this.frameState_ || !this.renderer_) {
        return false;
      }
      const coordinate = this.getCoordinateFromPixelInternal(pixel);
      options = options !== undefined ? options : {};
      const layerFilter =
        options.layerFilter !== undefined ? options.layerFilter : TRUE;
      const hitTolerance =
        options.hitTolerance !== undefined ? options.hitTolerance : 0;
      const checkWrapped = options.checkWrapped !== false;
      return this.renderer_.hasFeatureAtCoordinate(
        coordinate,
        this.frameState_,
        hitTolerance,
        checkWrapped,
        layerFilter,
        null,
      );
    }

    /**
     * Returns the coordinate in user projection for a browser event.
     * @param {MouseEvent} event Event.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     * @api
     */
    getEventCoordinate(event) {
      return this.getCoordinateFromPixel(this.getEventPixel(event));
    }

    /**
     * Returns the coordinate in view projection for a browser event.
     * @param {MouseEvent} event Event.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     */
    getEventCoordinateInternal(event) {
      return this.getCoordinateFromPixelInternal(this.getEventPixel(event));
    }

    /**
     * Returns the map pixel position for a browser event relative to the viewport.
     * @param {UIEvent|{clientX: number, clientY: number}} event Event.
     * @return {import("./pixel.js").Pixel} Pixel.
     * @api
     */
    getEventPixel(event) {
      const viewport = this.viewport_;
      const viewportPosition = viewport.getBoundingClientRect();
      const viewportSize = this.getSize();
      const scaleX = viewportPosition.width / viewportSize[0];
      const scaleY = viewportPosition.height / viewportSize[1];
      const eventPosition =
        //FIXME Are we really calling this with a TouchEvent anywhere?
        'changedTouches' in event
          ? /** @type {TouchEvent} */ (event).changedTouches[0]
          : /** @type {MouseEvent} */ (event);

      return [
        (eventPosition.clientX - viewportPosition.left) / scaleX,
        (eventPosition.clientY - viewportPosition.top) / scaleY,
      ];
    }

    /**
     * Get the target in which this map is rendered.
     * Note that this returns what is entered as an option or in setTarget:
     * if that was an element, it returns an element; if a string, it returns that.
     * @return {HTMLElement|string|undefined} The Element or id of the Element that the
     *     map is rendered in.
     * @observable
     * @api
     */
    getTarget() {
      return /** @type {HTMLElement|string|undefined} */ (
        this.get(MapProperty.TARGET)
      );
    }

    /**
     * Get the DOM element into which this map is rendered. In contrast to
     * `getTarget` this method always return an `Element`, or `null` if the
     * map has no target.
     * @return {HTMLElement} The element that the map is rendered in.
     * @api
     */
    getTargetElement() {
      return this.targetElement_;
    }

    /**
     * Get the coordinate for a given pixel.  This returns a coordinate in the
     * user projection.
     * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
     * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
     * @api
     */
    getCoordinateFromPixel(pixel) {
      return toUserCoordinate(
        this.getCoordinateFromPixelInternal(pixel),
        this.getView().getProjection(),
      );
    }

    /**
     * Get the coordinate for a given pixel.  This returns a coordinate in the
     * map view projection.
     * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
     * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
     */
    getCoordinateFromPixelInternal(pixel) {
      const frameState = this.frameState_;
      if (!frameState) {
        return null;
      }
      return apply(frameState.pixelToCoordinateTransform, pixel.slice());
    }

    /**
     * Get the map controls. Modifying this collection changes the controls
     * associated with the map.
     * @return {Collection<import("./control/Control.js").default>} Controls.
     * @api
     */
    getControls() {
      return this.controls;
    }

    /**
     * Get the map overlays. Modifying this collection changes the overlays
     * associated with the map.
     * @return {Collection<import("./Overlay.js").default>} Overlays.
     * @api
     */
    getOverlays() {
      return this.overlays_;
    }

    /**
     * Get an overlay by its identifier (the value returned by overlay.getId()).
     * Note that the index treats string and numeric identifiers as the same. So
     * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
     * @param {string|number} id Overlay identifier.
     * @return {import("./Overlay.js").default|null} Overlay.
     * @api
     */
    getOverlayById(id) {
      const overlay = this.overlayIdIndex_[id.toString()];
      return overlay !== undefined ? overlay : null;
    }

    /**
     * Get the map interactions. Modifying this collection changes the interactions
     * associated with the map.
     *
     * Interactions are used for e.g. pan, zoom and rotate.
     * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
     * @api
     */
    getInteractions() {
      return this.interactions;
    }

    /**
     * Get the layergroup associated with this map.
     * @return {LayerGroup} A layer group containing the layers in this map.
     * @observable
     * @api
     */
    getLayerGroup() {
      return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));
    }

    /**
     * Clear any existing layers and add layers to the map.
     * @param {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>} layers The layers to be added to the map.
     * @api
     */
    setLayers(layers) {
      const group = this.getLayerGroup();
      if (layers instanceof Collection) {
        group.setLayers(layers);
        return;
      }

      const collection = group.getLayers();
      collection.clear();
      collection.extend(layers);
    }

    /**
     * Get the collection of layers associated with this map.
     * @return {!Collection<import("./layer/Base.js").default>} Layers.
     * @api
     */
    getLayers() {
      const layers = this.getLayerGroup().getLayers();
      return layers;
    }

    /**
     * @return {boolean} Layers have sources that are still loading.
     */
    getLoadingOrNotReady() {
      const layerStatesArray = this.getLayerGroup().getLayerStatesArray();
      for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        const state = layerStatesArray[i];
        if (!state.visible) {
          continue;
        }
        const renderer = state.layer.getRenderer();
        if (renderer && !renderer.ready) {
          return true;
        }
        const source = state.layer.getSource();
        if (source && source.loading) {
          return true;
        }
      }
      return false;
    }

    /**
     * Get the pixel for a coordinate.  This takes a coordinate in the user
     * projection and returns the corresponding pixel.
     * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
     * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
     * @api
     */
    getPixelFromCoordinate(coordinate) {
      const viewCoordinate = fromUserCoordinate(
        coordinate,
        this.getView().getProjection(),
      );
      return this.getPixelFromCoordinateInternal(viewCoordinate);
    }

    /**
     * Get the pixel for a coordinate.  This takes a coordinate in the map view
     * projection and returns the corresponding pixel.
     * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
     * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
     */
    getPixelFromCoordinateInternal(coordinate) {
      const frameState = this.frameState_;
      if (!frameState) {
        return null;
      }
      return apply(
        frameState.coordinateToPixelTransform,
        coordinate.slice(0, 2),
      );
    }

    /**
     * Get the map renderer.
     * @return {import("./renderer/Map.js").default|null} Renderer
     */
    getRenderer() {
      return this.renderer_;
    }

    /**
     * Get the size of this map.
     * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
     * @observable
     * @api
     */
    getSize() {
      return /** @type {import("./size.js").Size|undefined} */ (
        this.get(MapProperty.SIZE)
      );
    }

    /**
     * Get the view associated with this map. A view manages properties such as
     * center and resolution.
     * @return {View} The view that controls this map.
     * @observable
     * @api
     */
    getView() {
      return /** @type {View} */ (this.get(MapProperty.VIEW));
    }

    /**
     * Get the element that serves as the map viewport.
     * @return {HTMLElement} Viewport.
     * @api
     */
    getViewport() {
      return this.viewport_;
    }

    /**
     * Get the element that serves as the container for overlays.  Elements added to
     * this container will let mousedown and touchstart events through to the map,
     * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
     * events.
     * @return {!HTMLElement} The map's overlay container.
     */
    getOverlayContainer() {
      return this.overlayContainer_;
    }

    /**
     * Get the element that serves as a container for overlays that don't allow
     * event propagation. Elements added to this container won't let mousedown and
     * touchstart events through to the map, so clicks and gestures on an overlay
     * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     * @return {!HTMLElement} The map's overlay container that stops events.
     */
    getOverlayContainerStopEvent() {
      return this.overlayContainerStopEvent_;
    }

    /**
     * @return {!Document} The document where the map is displayed.
     */
    getOwnerDocument() {
      const targetElement = this.getTargetElement();
      return targetElement ? targetElement.ownerDocument : document;
    }

    /**
     * @param {import("./Tile.js").default} tile Tile.
     * @param {string} tileSourceKey Tile source key.
     * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
     * @param {number} tileResolution Tile resolution.
     * @return {number} Tile priority.
     */
    getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {
      return getTilePriority(
        this.frameState_,
        tile,
        tileSourceKey,
        tileCenter,
        tileResolution,
      );
    }

    /**
     * @param {PointerEvent|KeyboardEvent|WheelEvent} browserEvent Browser event.
     * @param {string} [type] Type.
     */
    handleBrowserEvent(browserEvent, type) {
      type = type || browserEvent.type;
      const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);
      this.handleMapBrowserEvent(mapBrowserEvent);
    }

    /**
     * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
     */
    handleMapBrowserEvent(mapBrowserEvent) {
      if (!this.frameState_) {
        // With no view defined, we cannot translate pixels into geographical
        // coordinates so interactions cannot be used.
        return;
      }
      const originalEvent = mapBrowserEvent.originalEvent;
      const eventType = originalEvent.type;
      if (
        eventType === PointerEventType.POINTERDOWN ||
        eventType === EventType.WHEEL ||
        eventType === EventType.KEYDOWN
      ) {
        const doc = this.getOwnerDocument();
        const rootNode = this.viewport_.getRootNode
          ? this.viewport_.getRootNode()
          : doc;
        const target = /** @type {Node} */ (originalEvent.target);

        const currentDoc =
          rootNode instanceof ShadowRoot
            ? rootNode.host === target
              ? rootNode.host.ownerDocument
              : rootNode
            : rootNode === doc
              ? doc.documentElement
              : rootNode;
        if (
          // Abort if the target is a child of the container for elements whose events are not meant
          // to be handled by map interactions.
          this.overlayContainerStopEvent_.contains(target) ||
          // Abort if the event target is a child of the container that is no longer in the page.
          // It's possible for the target to no longer be in the page if it has been removed in an
          // event listener, this might happen in a Control that recreates it's content based on
          // user interaction either manually or via a render in something like https://reactjs.org/
          !currentDoc.contains(target)
        ) {
          return;
        }
      }
      mapBrowserEvent.frameState = this.frameState_;
      if (this.dispatchEvent(mapBrowserEvent) !== false) {
        const interactionsArray = this.getInteractions().getArray().slice();
        for (let i = interactionsArray.length - 1; i >= 0; i--) {
          const interaction = interactionsArray[i];
          if (
            interaction.getMap() !== this ||
            !interaction.getActive() ||
            !this.getTargetElement()
          ) {
            continue;
          }
          const cont = interaction.handleEvent(mapBrowserEvent);
          if (!cont || mapBrowserEvent.propagationStopped) {
            break;
          }
        }
      }
    }

    /**
     * @protected
     */
    handlePostRender() {
      const frameState = this.frameState_;

      // Manage the tile queue
      // Image loads are expensive and a limited resource, so try to use them
      // efficiently:
      // * When the view is static we allow a large number of parallel tile loads
      //   to complete the frame as quickly as possible.
      // * When animating or interacting, image loads can cause janks, so we reduce
      //   the maximum number of loads per frame and limit the number of parallel
      //   tile loads to remain reactive to view changes and to reduce the chance of
      //   loading tiles that will quickly disappear from view.
      const tileQueue = this.tileQueue_;
      if (!tileQueue.isEmpty()) {
        let maxTotalLoading = this.maxTilesLoading_;
        let maxNewLoads = maxTotalLoading;
        if (frameState) {
          const hints = frameState.viewHints;
          if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {
            const lowOnFrameBudget = Date.now() - frameState.time > 8;
            maxTotalLoading = lowOnFrameBudget ? 0 : 8;
            maxNewLoads = lowOnFrameBudget ? 0 : 2;
          }
        }
        if (tileQueue.getTilesLoading() < maxTotalLoading) {
          tileQueue.reprioritize(); // FIXME only call if view has changed
          tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
        }
      }

      if (frameState && this.renderer_ && !frameState.animate) {
        if (this.renderComplete_) {
          if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {
            this.renderer_.dispatchRenderEvent(
              RenderEventType.RENDERCOMPLETE,
              frameState,
            );
          }
          if (this.loaded_ === false) {
            this.loaded_ = true;
            this.dispatchEvent(
              new MapEvent(MapEventType.LOADEND, this, frameState),
            );
          }
        } else if (this.loaded_ === true) {
          this.loaded_ = false;
          this.dispatchEvent(
            new MapEvent(MapEventType.LOADSTART, this, frameState),
          );
        }
      }

      const postRenderFunctions = this.postRenderFunctions_;
      if (frameState) {
        for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {
          postRenderFunctions[i](this, frameState);
        }
      }
      postRenderFunctions.length = 0;
    }

    /**
     * @private
     */
    handleSizeChanged_() {
      if (this.getView() && !this.getView().getAnimating()) {
        this.getView().resolveConstraints(0);
      }

      this.render();
    }

    /**
     * @private
     */
    handleTargetChanged_() {
      if (this.mapBrowserEventHandler_) {
        for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {
          unlistenByKey(this.targetChangeHandlerKeys_[i]);
        }
        this.targetChangeHandlerKeys_ = null;
        this.viewport_.removeEventListener(
          EventType.CONTEXTMENU,
          this.boundHandleBrowserEvent_,
        );
        this.viewport_.removeEventListener(
          EventType.WHEEL,
          this.boundHandleBrowserEvent_,
        );
        this.mapBrowserEventHandler_.dispose();
        this.mapBrowserEventHandler_ = null;
        this.viewport_.remove();
      }

      if (this.targetElement_) {
        this.resizeObserver_.unobserve(this.targetElement_);
        const rootNode = this.targetElement_.getRootNode();
        if (rootNode instanceof ShadowRoot) {
          this.resizeObserver_.unobserve(rootNode.host);
        }
        this.setSize(undefined);
      }

      // target may be undefined, null, a string or an Element.
      // If it's a string we convert it to an Element before proceeding.
      // If it's not now an Element we remove the viewport from the DOM.
      // If it's an Element we append the viewport element to it.

      const target = this.getTarget();
      const targetElement =
        typeof target === 'string' ? document.getElementById(target) : target;
      this.targetElement_ = targetElement;
      if (!targetElement) {
        if (this.renderer_) {
          clearTimeout(this.postRenderTimeoutHandle_);
          this.postRenderTimeoutHandle_ = undefined;
          this.postRenderFunctions_.length = 0;
          this.renderer_.dispose();
          this.renderer_ = null;
        }
        if (this.animationDelayKey_) {
          cancelAnimationFrame(this.animationDelayKey_);
          this.animationDelayKey_ = undefined;
        }
      } else {
        targetElement.appendChild(this.viewport_);
        if (!this.renderer_) {
          this.renderer_ = new CompositeMapRenderer(this);
        }

        this.mapBrowserEventHandler_ = new MapBrowserEventHandler(
          this,
          this.moveTolerance_,
        );
        for (const key in MapBrowserEventType) {
          this.mapBrowserEventHandler_.addEventListener(
            MapBrowserEventType[key],
            this.handleMapBrowserEvent.bind(this),
          );
        }
        this.viewport_.addEventListener(
          EventType.CONTEXTMENU,
          this.boundHandleBrowserEvent_,
          false,
        );
        this.viewport_.addEventListener(
          EventType.WHEEL,
          this.boundHandleBrowserEvent_,
          PASSIVE_EVENT_LISTENERS ? {passive: false} : false,
        );

        let keyboardEventTarget;
        if (!this.keyboardEventTarget_) {
          // check if map target is in shadowDOM, if yes use host element as target
          const targetRoot = targetElement.getRootNode();
          const targetCandidate =
            targetRoot instanceof ShadowRoot ? targetRoot.host : targetElement;
          keyboardEventTarget = targetCandidate;
        } else {
          keyboardEventTarget = this.keyboardEventTarget_;
        }

        this.targetChangeHandlerKeys_ = [
          listen(
            keyboardEventTarget,
            EventType.KEYDOWN,
            this.handleBrowserEvent,
            this,
          ),
          listen(
            keyboardEventTarget,
            EventType.KEYPRESS,
            this.handleBrowserEvent,
            this,
          ),
        ];
        const rootNode = targetElement.getRootNode();
        if (rootNode instanceof ShadowRoot) {
          this.resizeObserver_.observe(rootNode.host);
        }
        this.resizeObserver_.observe(targetElement);
      }

      this.updateSize();
      // updateSize calls setSize, so no need to call this.render
      // ourselves here.
    }

    /**
     * @private
     */
    handleTileChange_() {
      this.render();
    }

    /**
     * @private
     */
    handleViewPropertyChanged_() {
      this.render();
    }

    /**
     * @private
     */
    handleViewChanged_() {
      if (this.viewPropertyListenerKey_) {
        unlistenByKey(this.viewPropertyListenerKey_);
        this.viewPropertyListenerKey_ = null;
      }
      if (this.viewChangeListenerKey_) {
        unlistenByKey(this.viewChangeListenerKey_);
        this.viewChangeListenerKey_ = null;
      }
      const view = this.getView();
      if (view) {
        this.updateViewportSize_(this.getSize());

        this.viewPropertyListenerKey_ = listen(
          view,
          ObjectEventType.PROPERTYCHANGE,
          this.handleViewPropertyChanged_,
          this,
        );
        this.viewChangeListenerKey_ = listen(
          view,
          EventType.CHANGE,
          this.handleViewPropertyChanged_,
          this,
        );

        view.resolveConstraints(0);
      }
      this.render();
    }

    /**
     * @private
     */
    handleLayerGroupChanged_() {
      if (this.layerGroupPropertyListenerKeys_) {
        this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);
        this.layerGroupPropertyListenerKeys_ = null;
      }
      const layerGroup = this.getLayerGroup();
      if (layerGroup) {
        this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));
        this.layerGroupPropertyListenerKeys_ = [
          listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),
          listen(layerGroup, EventType.CHANGE, this.render, this),
          listen(layerGroup, 'addlayer', this.handleLayerAdd_, this),
          listen(layerGroup, 'removelayer', this.handleLayerRemove_, this),
        ];
      }
      this.render();
    }

    /**
     * @return {boolean} Is rendered.
     */
    isRendered() {
      return !!this.frameState_;
    }

    /**
     * @private
     */
    animationDelay_() {
      this.animationDelayKey_ = undefined;
      this.renderFrame_(Date.now());
    }

    /**
     * Requests an immediate render in a synchronous manner.
     * @api
     */
    renderSync() {
      if (this.animationDelayKey_) {
        cancelAnimationFrame(this.animationDelayKey_);
      }
      this.animationDelay_();
    }

    /**
     * Redraws all text after new fonts have loaded
     */
    redrawText() {
      const layerStates = this.getLayerGroup().getLayerStatesArray();
      for (let i = 0, ii = layerStates.length; i < ii; ++i) {
        const layer = layerStates[i].layer;
        if (layer.hasRenderer()) {
          layer.getRenderer().handleFontsChanged();
        }
      }
    }

    /**
     * Request a map rendering (at the next animation frame).
     * @api
     */
    render() {
      if (this.renderer_ && this.animationDelayKey_ === undefined) {
        this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
      }
    }

    /**
     * Remove the given control from the map.
     * @param {import("./control/Control.js").default} control Control.
     * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
     *     if the control was not found).
     * @api
     */
    removeControl(control) {
      return this.getControls().remove(control);
    }

    /**
     * Remove the given interaction from the map.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
     * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
     *     undefined if the interaction was not found).
     * @api
     */
    removeInteraction(interaction) {
      return this.getInteractions().remove(interaction);
    }

    /**
     * Removes the given layer from the map.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
     *     layer was not found).
     * @api
     */
    removeLayer(layer) {
      const layers = this.getLayerGroup().getLayers();
      return layers.remove(layer);
    }

    /**
     * @param {import("./layer/Group.js").GroupEvent} event The layer remove event.
     * @private
     */
    handleLayerRemove_(event) {
      removeLayerMapProperty(event.layer);
    }

    /**
     * Remove the given overlay from the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
     *     if the overlay was not found).
     * @api
     */
    removeOverlay(overlay) {
      return this.getOverlays().remove(overlay);
    }

    /**
     * @param {number} time Time.
     * @private
     */
    renderFrame_(time) {
      const size = this.getSize();
      const view = this.getView();
      const previousFrameState = this.frameState_;
      /** @type {?FrameState} */
      let frameState = null;
      if (size !== undefined && hasArea(size) && view && view.isDef()) {
        const viewHints = view.getHints(
          this.frameState_ ? this.frameState_.viewHints : undefined,
        );
        const viewState = view.getState();
        frameState = {
          animate: false,
          coordinateToPixelTransform: this.coordinateToPixelTransform_,
          declutter: null,
          extent: getForViewAndSize(
            viewState.center,
            viewState.resolution,
            viewState.rotation,
            size,
          ),
          index: this.frameIndex_++,
          layerIndex: 0,
          layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
          pixelRatio: this.pixelRatio_,
          pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
          postRenderFunctions: [],
          size: size,
          tileQueue: this.tileQueue_,
          time: time,
          usedTiles: {},
          viewState: viewState,
          viewHints: viewHints,
          wantedTiles: {},
          mapId: getUid(this),
          renderTargets: {},
        };
        if (viewState.nextCenter && viewState.nextResolution) {
          const rotation = isNaN(viewState.nextRotation)
            ? viewState.rotation
            : viewState.nextRotation;

          frameState.nextExtent = getForViewAndSize(
            viewState.nextCenter,
            viewState.nextResolution,
            rotation,
            size,
          );
        }
      }

      this.frameState_ = frameState;
      this.renderer_.renderFrame(frameState);

      if (frameState) {
        if (frameState.animate) {
          this.render();
        }
        Array.prototype.push.apply(
          this.postRenderFunctions_,
          frameState.postRenderFunctions,
        );

        if (previousFrameState) {
          const moveStart =
            !this.previousExtent_ ||
            (!isEmpty(this.previousExtent_) &&
              !equals$1(frameState.extent, this.previousExtent_));
          if (moveStart) {
            this.dispatchEvent(
              new MapEvent(MapEventType.MOVESTART, this, previousFrameState),
            );
            this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);
          }
        }

        const idle =
          this.previousExtent_ &&
          !frameState.viewHints[ViewHint.ANIMATING] &&
          !frameState.viewHints[ViewHint.INTERACTING] &&
          !equals$1(frameState.extent, this.previousExtent_);

        if (idle) {
          this.dispatchEvent(
            new MapEvent(MapEventType.MOVEEND, this, frameState),
          );
          clone(frameState.extent, this.previousExtent_);
        }
      }

      this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));

      this.renderComplete_ =
        (this.hasListener(MapEventType.LOADSTART) ||
          this.hasListener(MapEventType.LOADEND) ||
          this.hasListener(RenderEventType.RENDERCOMPLETE)) &&
        !this.tileQueue_.getTilesLoading() &&
        !this.tileQueue_.getCount() &&
        !this.getLoadingOrNotReady();

      if (!this.postRenderTimeoutHandle_) {
        this.postRenderTimeoutHandle_ = setTimeout(() => {
          this.postRenderTimeoutHandle_ = undefined;
          this.handlePostRender();
        }, 0);
      }
    }

    /**
     * Sets the layergroup of this map.
     * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
     * @observable
     * @api
     */
    setLayerGroup(layerGroup) {
      const oldLayerGroup = this.getLayerGroup();
      if (oldLayerGroup) {
        this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));
      }
      this.set(MapProperty.LAYERGROUP, layerGroup);
    }

    /**
     * Set the size of this map.
     * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
     * @observable
     * @api
     */
    setSize(size) {
      this.set(MapProperty.SIZE, size);
    }

    /**
     * Set the target element to render this map into.
     * For accessibility (focus and keyboard events for map navigation), the `target` element must have a
     *  properly configured `tabindex` attribute. If the `target` element is inside a Shadow DOM, the
     *  `tabindex` atribute must be set on the custom element's host element.
     * @param {HTMLElement|string} [target] The Element or id of the Element
     *     that the map is rendered in.
     * @observable
     * @api
     */
    setTarget(target) {
      this.set(MapProperty.TARGET, target);
    }

    /**
     * Set the view for this map.
     * @param {View|Promise<import("./View.js").ViewOptions>|null} view The view that controls this map.
     * It is also possible to pass a promise that resolves to options for constructing a view.  This
     * alternative allows view properties to be resolved by sources or other components that load
     * view-related metadata.
     * @observable
     * @api
     */
    setView(view) {
      if (!view || view instanceof View) {
        this.set(MapProperty.VIEW, view);
        return;
      }
      this.set(MapProperty.VIEW, new View());

      const map = this;
      view.then(function (viewOptions) {
        map.setView(new View(viewOptions));
      });
    }

    /**
     * Force a recalculation of the map viewport size.  This should be called when
     * third-party code changes the size of the map viewport.
     * @api
     */
    updateSize() {
      const targetElement = this.getTargetElement();

      let size = undefined;
      if (targetElement) {
        const computedStyle = getComputedStyle(targetElement);
        const width =
          targetElement.offsetWidth -
          parseFloat(computedStyle['borderLeftWidth']) -
          parseFloat(computedStyle['paddingLeft']) -
          parseFloat(computedStyle['paddingRight']) -
          parseFloat(computedStyle['borderRightWidth']);
        const height =
          targetElement.offsetHeight -
          parseFloat(computedStyle['borderTopWidth']) -
          parseFloat(computedStyle['paddingTop']) -
          parseFloat(computedStyle['paddingBottom']) -
          parseFloat(computedStyle['borderBottomWidth']);
        if (!isNaN(width) && !isNaN(height)) {
          size = [Math.max(0, width), Math.max(0, height)];
          if (
            !hasArea(size) &&
            !!(
              targetElement.offsetWidth ||
              targetElement.offsetHeight ||
              targetElement.getClientRects().length
            )
          ) {
            warn(
              "No map visible because the map container's width or height are 0.",
            );
          }
        }
      }

      const oldSize = this.getSize();
      if (size && (!oldSize || !equals$2(size, oldSize))) {
        this.setSize(size);
        this.updateViewportSize_(size);
      }
    }

    /**
     * Recomputes the viewport size and save it on the view object (if any)
     * @param {import("./size.js").Size|undefined} size The size.
     * @private
     */
    updateViewportSize_(size) {
      const view = this.getView();
      if (view) {
        view.setViewportSize(size);
      }
    }
  }

  /**
   * @param {MapOptions} options Map options.
   * @return {MapOptionsInternal} Internal map options.
   */
  function createOptionsInternal(options) {
    /**
     * @type {HTMLElement|Document}
     */
    let keyboardEventTarget = null;
    if (options.keyboardEventTarget !== undefined) {
      keyboardEventTarget =
        typeof options.keyboardEventTarget === 'string'
          ? document.getElementById(options.keyboardEventTarget)
          : options.keyboardEventTarget;
    }

    /**
     * @type {Object<string, *>}
     */
    const values = {};

    const layerGroup =
      options.layers &&
      typeof (/** @type {?} */ (options.layers).getLayers) === 'function'
        ? /** @type {LayerGroup} */ (options.layers)
        : new LayerGroup({
            layers:
              /** @type {Collection<import("./layer/Base.js").default>|Array<import("./layer/Base.js").default>} */ (
                options.layers
              ),
          });
    values[MapProperty.LAYERGROUP] = layerGroup;

    values[MapProperty.TARGET] = options.target;

    values[MapProperty.VIEW] =
      options.view instanceof View ? options.view : new View();

    /** @type {Collection<import("./control/Control.js").default>} */
    let controls;
    if (options.controls !== undefined) {
      if (Array.isArray(options.controls)) {
        controls = new Collection(options.controls.slice());
      } else {
        assert$1(
          typeof (/** @type {?} */ (options.controls).getArray) === 'function',
          'Expected `controls` to be an array or an `ol/Collection.js`',
        );
        controls = options.controls;
      }
    }

    /** @type {Collection<import("./interaction/Interaction").default>} */
    let interactions;
    if (options.interactions !== undefined) {
      if (Array.isArray(options.interactions)) {
        interactions = new Collection(options.interactions.slice());
      } else {
        assert$1(
          typeof (/** @type {?} */ (options.interactions).getArray) ===
            'function',
          'Expected `interactions` to be an array or an `ol/Collection.js`',
        );
        interactions = options.interactions;
      }
    }

    /** @type {Collection<import("./Overlay.js").default>} */
    let overlays;
    if (options.overlays !== undefined) {
      if (Array.isArray(options.overlays)) {
        overlays = new Collection(options.overlays.slice());
      } else {
        assert$1(
          typeof (/** @type {?} */ (options.overlays).getArray) === 'function',
          'Expected `overlays` to be an array or an `ol/Collection.js`',
        );
        overlays = options.overlays;
      }
    } else {
      overlays = new Collection();
    }

    return {
      controls: controls,
      interactions: interactions,
      keyboardEventTarget: keyboardEventTarget,
      overlays: overlays,
      values: values,
    };
  }

  /**
   * @module ol/geom/flat/interpolate
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} fraction Fraction.
   * @param {Array<number>} [dest] Destination.
   * @param {number} [dimension] Destination dimension (default is `2`)
   * @return {Array<number>} Destination.
   */
  function interpolatePoint(
    flatCoordinates,
    offset,
    end,
    stride,
    fraction,
    dest,
    dimension,
  ) {
    let o, t;
    const n = (end - offset) / stride;
    if (n === 1) {
      o = offset;
    } else if (n === 2) {
      o = offset;
      t = fraction;
    } else if (n !== 0) {
      let x1 = flatCoordinates[offset];
      let y1 = flatCoordinates[offset + 1];
      let length = 0;
      const cumulativeLengths = [0];
      for (let i = offset + stride; i < end; i += stride) {
        const x2 = flatCoordinates[i];
        const y2 = flatCoordinates[i + 1];
        length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        cumulativeLengths.push(length);
        x1 = x2;
        y1 = y2;
      }
      const target = fraction * length;
      const index = binarySearch(cumulativeLengths, target);
      if (index < 0) {
        t =
          (target - cumulativeLengths[-index - 2]) /
          (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);
        o = offset + (-index - 2) * stride;
      } else {
        o = offset + index * stride;
      }
    }
    dimension = dimension > 1 ? dimension : 2;
    dest = dest ? dest : new Array(dimension);
    for (let i = 0; i < dimension; ++i) {
      dest[i] =
        o === undefined
          ? NaN
          : t === undefined
            ? flatCoordinates[o + i]
            : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);
    }
    return dest;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @return {import("../../coordinate.js").Coordinate|null} Coordinate.
   */
  function lineStringCoordinateAtM(
    flatCoordinates,
    offset,
    end,
    stride,
    m,
    extrapolate,
  ) {
    if (end == offset) {
      return null;
    }
    let coordinate;
    if (m < flatCoordinates[offset + stride - 1]) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(offset, offset + stride);
        coordinate[stride - 1] = m;
        return coordinate;
      }
      return null;
    }
    if (flatCoordinates[end - 1] < m) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(end - stride, end);
        coordinate[stride - 1] = m;
        return coordinate;
      }
      return null;
    }
    // FIXME use O(1) search
    if (m == flatCoordinates[offset + stride - 1]) {
      return flatCoordinates.slice(offset, offset + stride);
    }
    let lo = offset / stride;
    let hi = end / stride;
    while (lo < hi) {
      const mid = (lo + hi) >> 1;
      if (m < flatCoordinates[(mid + 1) * stride - 1]) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    const m0 = flatCoordinates[lo * stride - 1];
    if (m == m0) {
      return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);
    }
    const m1 = flatCoordinates[(lo + 1) * stride - 1];
    const t = (m - m0) / (m1 - m0);
    coordinate = [];
    for (let i = 0; i < stride - 1; ++i) {
      coordinate.push(
        lerp(
          flatCoordinates[(lo - 1) * stride + i],
          flatCoordinates[lo * stride + i],
          t,
        ),
      );
    }
    coordinate.push(m);
    return coordinate;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @param {boolean} interpolate Interpolate.
   * @return {import("../../coordinate.js").Coordinate|null} Coordinate.
   */
  function lineStringsCoordinateAtM(
    flatCoordinates,
    offset,
    ends,
    stride,
    m,
    extrapolate,
    interpolate,
  ) {
    if (interpolate) {
      return lineStringCoordinateAtM(
        flatCoordinates,
        offset,
        ends[ends.length - 1],
        stride,
        m,
        extrapolate,
      );
    }
    let coordinate;
    if (m < flatCoordinates[stride - 1]) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(0, stride);
        coordinate[stride - 1] = m;
        return coordinate;
      }
      return null;
    }
    if (flatCoordinates[flatCoordinates.length - 1] < m) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(flatCoordinates.length - stride);
        coordinate[stride - 1] = m;
        return coordinate;
      }
      return null;
    }
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      if (offset == end) {
        continue;
      }
      if (m < flatCoordinates[offset + stride - 1]) {
        return null;
      }
      if (m <= flatCoordinates[end - 1]) {
        return lineStringCoordinateAtM(
          flatCoordinates,
          offset,
          end,
          stride,
          m,
          false,
        );
      }
      offset = end;
    }
    return null;
  }

  /**
   * @module ol/geom/flat/length
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Length.
   */
  function lineStringLength(flatCoordinates, offset, end, stride) {
    let x1 = flatCoordinates[offset];
    let y1 = flatCoordinates[offset + 1];
    let length = 0;
    for (let i = offset + stride; i < end; i += stride) {
      const x2 = flatCoordinates[i];
      const y2 = flatCoordinates[i + 1];
      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      x1 = x2;
      y1 = y2;
    }
    return length;
  }

  /**
   * @module ol/geom/LineString
   */

  /**
   * @classdesc
   * Linestring geometry.
   *
   * @api
   */
  class LineString extends SimpleGeometry {
    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `layout` are also accepted.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    constructor(coordinates, layout) {
      super();

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate|null}
       */
      this.flatMidpoint_ = null;

      /**
       * @private
       * @type {number}
       */
      this.flatMidpointRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (layout !== undefined && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates),
        );
      } else {
        this.setCoordinates(
          /** @type {Array<import("../coordinate.js").Coordinate>} */ (
            coordinates
          ),
          layout,
        );
      }
    }

    /**
     * Append the passed coordinate to the coordinates of the linestring.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @api
     */
    appendCoordinate(coordinate) {
      extend$3(this.flatCoordinates, coordinate);
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!LineString} Clone.
     * @api
     * @override
     */
    clone() {
      const lineString = new LineString(
        this.flatCoordinates.slice(),
        this.layout,
      );
      lineString.applyProperties(this);
      return lineString;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     * @override
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(
          maxSquaredDelta(
            this.flatCoordinates,
            0,
            this.flatCoordinates.length,
            this.stride,
            0,
          ),
        );
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestPoint(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        this.maxDelta_,
        false,
        x,
        y,
        closestPoint,
        minSquaredDistance,
      );
    }

    /**
     * Iterate over each segment, calling the provided callback.
     * If the callback returns a truthy value the function returns that
     * value immediately. Otherwise the function returns `false`.
     *
     * @param {function(this: S, import("../coordinate.js").Coordinate, import("../coordinate.js").Coordinate): T} callback Function
     *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.
     * @return {T|boolean} Value.
     * @template T,S
     * @api
     */
    forEachSegment(callback) {
      return forEach(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        callback,
      );
    }

    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * @param {number} m M.
     * @param {boolean} [extrapolate] Extrapolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate|null} Coordinate.
     * @api
     */
    getCoordinateAtM(m, extrapolate) {
      if (this.layout != 'XYM' && this.layout != 'XYZM') {
        return null;
      }
      extrapolate = extrapolate !== undefined ? extrapolate : false;
      return lineStringCoordinateAtM(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        m,
        extrapolate,
      );
    }

    /**
     * Return the coordinates of the linestring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @api
     * @override
     */
    getCoordinates() {
      return inflateCoordinates(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
      );
    }

    /**
     * Return the coordinate at the provided fraction along the linestring.
     * The `fraction` is a number between 0 and 1, where 0 is the start of the
     * linestring and 1 is the end.
     * @param {number} fraction Fraction.
     * @param {import("../coordinate.js").Coordinate} [dest] Optional coordinate whose values will
     *     be modified. If not provided, a new coordinate will be returned.
     * @return {import("../coordinate.js").Coordinate} Coordinate of the interpolated point.
     * @api
     */
    getCoordinateAt(fraction, dest) {
      return interpolatePoint(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        fraction,
        dest,
        this.stride,
      );
    }

    /**
     * Return the length of the linestring on projected plane.
     * @return {number} Length (on projected plane).
     * @api
     */
    getLength() {
      return lineStringLength(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
      );
    }

    /**
     * @return {Array<number>} Flat midpoint.
     */
    getFlatMidpoint() {
      if (this.flatMidpointRevision_ != this.getRevision()) {
        this.flatMidpoint_ = this.getCoordinateAt(
          0.5,
          this.flatMidpoint_ ?? undefined,
        );
        this.flatMidpointRevision_ = this.getRevision();
      }
      return /** @type {Array<number>} */ (this.flatMidpoint_);
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {LineString} Simplified LineString.
     * @protected
     * @override
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      /** @type {Array<number>} */
      const simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = douglasPeucker(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        squaredTolerance,
        simplifiedFlatCoordinates,
        0,
      );
      return new LineString(simplifiedFlatCoordinates, 'XY');
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     * @override
     */
    getType() {
      return 'LineString';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     * @override
     */
    intersectsExtent(extent) {
      return intersectsLineString(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        extent,
        this.getExtent(),
      );
    }

    /**
     * Set the coordinates of the linestring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     * @override
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride,
      );
      this.changed();
    }
  }

  /**
   * @module ol/xml
   */

  /**
   * When using {@link module:ol/xml.makeChildAppender} or
   * {@link module:ol/xml.makeSimpleNodeFactory}, the top `objectStack` item needs
   * to have this structure.
   * @typedef {Object} NodeStackItem
   * @property {Element} node Node.
   */

  /**
   * @typedef {function(Element, Array<*>): void} Parser
   */

  /**
   * @typedef {function(Element, *, Array<*>): void} Serializer
   */

  /**
   * @type {string}
   */
  const XML_SCHEMA_INSTANCE_URI =
    'http://www.w3.org/2001/XMLSchema-instance';

  /**
   * @param {string} namespaceURI Namespace URI.
   * @param {string} qualifiedName Qualified name.
   * @return {Element} Node.
   */
  function createElementNS(namespaceURI, qualifiedName) {
    return getDocument().createElementNS(namespaceURI, qualifiedName);
  }

  /**
   * Recursively grab all text content of child nodes into a single string.
   * @param {Node} node Node.
   * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
   * breaks.
   * @return {string} All text content.
   * @api
   */
  function getAllTextContent(node, normalizeWhitespace) {
    return getAllTextContent_(node, normalizeWhitespace, []).join('');
  }

  /**
   * Recursively grab all text content of child nodes into a single string.
   * @param {Node} node Node.
   * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
   * breaks.
   * @param {Array<string>} accumulator Accumulator.
   * @private
   * @return {Array<string>} Accumulator.
   */
  function getAllTextContent_(node, normalizeWhitespace, accumulator) {
    if (
      node.nodeType == Node.CDATA_SECTION_NODE ||
      node.nodeType == Node.TEXT_NODE
    ) {
      {
        accumulator.push(node.nodeValue);
      }
    } else {
      let n;
      for (n = node.firstChild; n; n = n.nextSibling) {
        getAllTextContent_(n, normalizeWhitespace, accumulator);
      }
    }
    return accumulator;
  }

  /**
   * @param {Object} object Object.
   * @return {boolean} Is a document.
   */
  function isDocument(object) {
    return 'documentElement' in object;
  }

  /**
   * @param {Element} node Node.
   * @param {?string} namespaceURI Namespace URI.
   * @param {string} name Attribute name.
   * @return {string} Value
   */
  function getAttributeNS(node, namespaceURI, name) {
    return node.getAttributeNS(namespaceURI, name) || '';
  }

  /**
   * Parse an XML string to an XML Document.
   * @param {string} xml XML.
   * @return {Document} Document.
   * @api
   */
  function parse$1(xml) {
    return new DOMParser().parseFromString(xml, 'application/xml');
  }

  /**
   * Make an array extender function for extending the array at the top of the
   * object stack.
   * @param {function(this: T, Node, Array<*>): (Array<*>|undefined)} valueReader Value reader.
   * @param {T} [thisArg] The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeArrayExtender(valueReader, thisArg) {
    return (
      /**
       * @param {Node} node Node.
       * @param {Array<*>} objectStack Object stack.
       * @this {*}
       */
      function (node, objectStack) {
        const value = valueReader.call(thisArg ?? this, node, objectStack);
        if (value !== undefined) {
          const array = /** @type {Array<*>} */ (
            objectStack[objectStack.length - 1]
          );
          extend$3(array, value);
        }
      }
    );
  }

  /**
   * Make an array pusher function for pushing to the array at the top of the
   * object stack.
   * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
   * @param {T} [thisArg] The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeArrayPusher(valueReader, thisArg) {
    return (
      /**
       * @param {Element} node Node.
       * @param {Array<*>} objectStack Object stack.
       * @this {*}
       */
      function (node, objectStack) {
        const value = valueReader.call(thisArg ?? this, node, objectStack);
        if (value !== undefined) {
          const array = /** @type {Array<*>} */ (
            objectStack[objectStack.length - 1]
          );
          array.push(value);
        }
      }
    );
  }

  /**
   * Make an object stack replacer function for replacing the object at the
   * top of the stack.
   * @param {function(this: T, Node, Array<*>): *} valueReader Value reader.
   * @param {T} [thisArg] The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeReplacer(valueReader, thisArg) {
    return (
      /**
       * @param {Node} node Node.
       * @param {Array<*>} objectStack Object stack.
       * @this {*}
       */
      function (node, objectStack) {
        const value = valueReader.call(thisArg ?? this, node, objectStack);
        if (value !== undefined) {
          objectStack[objectStack.length - 1] = value;
        }
      }
    );
  }

  /**
   * Make an object property pusher function for adding a property to the
   * object at the top of the stack.
   * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
   * @param {string} [property] Property.
   * @param {T} [thisArg] The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeObjectPropertyPusher(valueReader, property, thisArg) {
    return (
      /**
       * @param {Element} node Node.
       * @param {Array<*>} objectStack Object stack.
       * @this {*}
       */
      function (node, objectStack) {
        const value = valueReader.call(this, node, objectStack);
        if (value !== undefined) {
          const object = /** @type {!Object} */ (
            objectStack[objectStack.length - 1]
          );
          const name = node.localName;
          let array;
          if (name in object) {
            array = object[name];
          } else {
            array = [];
            object[name] = array;
          }
          array.push(value);
        }
      }
    );
  }

  /**
   * Make an object property setter function.
   * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
   * @param {string} [property] Property.
   * @param {T} [thisArg] The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeObjectPropertySetter(valueReader, property, thisArg) {
    return (
      /**
       * @param {Element} node Node.
       * @param {Array<*>} objectStack Object stack.
       * @this {*}
       */
      function (node, objectStack) {
        const value = valueReader.call(this, node, objectStack);
        if (value !== undefined) {
          const object = /** @type {!Object} */ (
            objectStack[objectStack.length - 1]
          );
          const name = property !== undefined ? property : node.localName;
          object[name] = value;
        }
      }
    );
  }

  /**
   * Create a serializer that appends nodes written by its `nodeWriter` to its
   * designated parent. The parent is the `node` of the
   * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.
   * @param {function(this: T, Node, V, Array<*>): void} nodeWriter Node writer.
   * @param {T} [thisArg] The object to use as `this` in `nodeWriter`.
   * @return {Serializer} Serializer.
   * @template T, V
   */
  function makeChildAppender(nodeWriter, thisArg) {
    return (
      /**
       * @param {Element} node Node.
       * @param {*} value Value to be written.
       * @param {Array<*>} objectStack Object stack.
       * @this {*}
       */
      function (node, value, objectStack) {
        nodeWriter.call(thisArg ?? this, node, value, objectStack);
        const parent = /** @type {NodeStackItem} */ (
          objectStack[objectStack.length - 1]
        );
        const parentNode = parent.node;
        parentNode.appendChild(node);
      }
    );
  }

  /**
   * Create a serializer that calls the provided `nodeWriter` from
   * {@link module:ol/xml.serialize}. This can be used by the parent writer to have the
   * `nodeWriter` called with an array of values when the `nodeWriter` was
   * designed to serialize a single item. An example would be a LineString
   * geometry writer, which could be reused for writing MultiLineString
   * geometries.
   * @param {function(this: T, Element, V, Array<*>): void} nodeWriter Node writer.
   * @param {T} [thisArg] The object to use as `this` in `nodeWriter`.
   * @return {Serializer} Serializer.
   * @template T, V
   */
  function makeArraySerializer(nodeWriter, thisArg) {
    let serializersNS, nodeFactory;
    return function (node, value, objectStack) {
      if (serializersNS === undefined) {
        serializersNS = {};
        const serializers = {};
        serializers[node.localName] = nodeWriter;
        serializersNS[node.namespaceURI] = serializers;
        nodeFactory = makeSimpleNodeFactory(node.localName);
      }
      serialize(serializersNS, nodeFactory, value, objectStack);
    };
  }

  /**
   * Create a node factory which can use the `keys` passed to
   * {@link module:ol/xml.serialize} or {@link module:ol/xml.pushSerializeAndPop} as node names,
   * or a fixed node name. The namespace of the created nodes can either be fixed,
   * or the parent namespace will be used.
   * @param {string} [fixedNodeName] Fixed node name which will be used for all
   *     created nodes. If not provided, the 3rd argument to the resulting node
   *     factory needs to be provided and will be the nodeName.
   * @param {string} [fixedNamespaceURI] Fixed namespace URI which will be used for
   *     all created nodes. If not provided, the namespace of the parent node will
   *     be used.
   * @return {function(*, Array<*>, string=): (Node|undefined)} Node factory.
   */
  function makeSimpleNodeFactory(fixedNodeName, fixedNamespaceURI) {
    return (
      /**
       * @param {*} value Value.
       * @param {Array<*>} objectStack Object stack.
       * @param {string} [newNodeName] Node name.
       * @return {Node} Node.
       */
      function (value, objectStack, newNodeName) {
        const context = /** @type {NodeStackItem} */ (
          objectStack[objectStack.length - 1]
        );
        const node = context.node;
        let nodeName = fixedNodeName;
        if (nodeName === undefined) {
          nodeName = newNodeName;
        }

        const namespaceURI =
          fixedNamespaceURI !== undefined ? fixedNamespaceURI : node.namespaceURI;
        return createElementNS(namespaceURI, /** @type {string} */ (nodeName));
      }
    );
  }

  /**
   * A node factory that creates a node using the parent's `namespaceURI` and the
   * `nodeName` passed by {@link module:ol/xml.serialize} or
   * {@link module:ol/xml.pushSerializeAndPop} to the node factory.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();

  /**
   * Create an array of `values` to be used with {@link module:ol/xml.serialize} or
   * {@link module:ol/xml.pushSerializeAndPop}, where `orderedKeys` has to be provided as
   * `key` argument.
   * @param {Object<string, *>} object Key-value pairs for the sequence. Keys can
   *     be a subset of the `orderedKeys`.
   * @param {Array<string>} orderedKeys Keys in the order of the sequence.
   * @return {Array<*>} Values in the order of the sequence. The resulting array
   *     has the same length as the `orderedKeys` array. Values that are not
   *     present in `object` will be `undefined` in the resulting array.
   */
  function makeSequence(object, orderedKeys) {
    const length = orderedKeys.length;
    const sequence = new Array(length);
    for (let i = 0; i < length; ++i) {
      sequence[i] = object[orderedKeys[i]];
    }
    return sequence;
  }

  /**
   * Create a namespaced structure, using the same values for each namespace.
   * This can be used as a starting point for versioned parsers, when only a few
   * values are version specific.
   * @param {Array<string>} namespaceURIs Namespace URIs.
   * @param {T} structure Structure.
   * @param {Object<string, T>} [structureNS] Namespaced structure to add to.
   * @return {Object<string, T>} Namespaced structure.
   * @template T
   */
  function makeStructureNS(namespaceURIs, structure, structureNS) {
    structureNS = structureNS !== undefined ? structureNS : {};
    let i, ii;
    for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {
      structureNS[namespaceURIs[i]] = structure;
    }
    return structureNS;
  }

  /**
   * Parse a node using the parsers and object stack.
   * @param {Object<string, Object<string, Parser>>} parsersNS
   *     Parsers by namespace.
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @param {*} [thisArg] The object to use as `this`.
   */
  function parseNode(parsersNS, node, objectStack, thisArg) {
    let n;
    for (n = node.firstElementChild; n; n = n.nextElementSibling) {
      const parsers = parsersNS[n.namespaceURI];
      if (parsers !== undefined) {
        const parser = parsers[n.localName];
        if (parser !== undefined) {
          parser.call(thisArg, n, objectStack);
        }
      }
    }
  }

  /**
   * Push an object on top of the stack, parse and return the popped object.
   * @param {T} object Object.
   * @param {Object<string, Object<string, Parser>>} parsersNS
   *     Parsers by namespace.
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @param {*} [thisArg] The object to use as `this`.
   * @return {T} Object.
   * @template T
   */
  function pushParseAndPop(object, parsersNS, node, objectStack, thisArg) {
    objectStack.push(object);
    parseNode(parsersNS, node, objectStack, thisArg);
    return /** @type {T} */ (objectStack.pop());
  }

  /**
   * Walk through an array of `values` and call a serializer for each value.
   * @param {Object<string, Object<string, Serializer>>} serializersNS
   *     Namespaced serializers.
   * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory
   *     Node factory. The `nodeFactory` creates the node whose namespace and name
   *     will be used to choose a node writer from `serializersNS`. This
   *     separation allows us to decide what kind of node to create, depending on
   *     the value we want to serialize. An example for this would be different
   *     geometry writers based on the geometry type.
   * @param {Array<*>} values Values to serialize. An example would be an array
   *     of {@link module:ol/Feature~Feature} instances.
   * @param {Array<*>} objectStack Node stack.
   * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the
   *     `nodeFactory`. This is used for serializing object literals where the
   *     node name relates to the property key. The array length of `keys` has
   *     to match the length of `values`. For serializing a sequence, `keys`
   *     determines the order of the sequence.
   * @param {T} [thisArg] The object to use as `this` for the node factory and
   *     serializers.
   * @template T
   */
  function serialize(
    serializersNS,
    nodeFactory,
    values,
    objectStack,
    keys,
    thisArg,
  ) {
    const length = (keys !== undefined ? keys : values).length;
    let value, node;
    for (let i = 0; i < length; ++i) {
      value = values[i];
      if (value !== undefined) {
        node = nodeFactory.call(
          thisArg,
          value,
          objectStack,
          keys !== undefined ? keys[i] : undefined,
        );
        if (node !== undefined) {
          serializersNS[node.namespaceURI][node.localName].call(
            thisArg,
            node,
            value,
            objectStack,
          );
        }
      }
    }
  }

  /**
   * @param {O} object Object.
   * @param {Object<string, Object<string, Serializer>>} serializersNS
   *     Namespaced serializers.
   * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory
   *     Node factory. The `nodeFactory` creates the node whose namespace and name
   *     will be used to choose a node writer from `serializersNS`. This
   *     separation allows us to decide what kind of node to create, depending on
   *     the value we want to serialize. An example for this would be different
   *     geometry writers based on the geometry type.
   * @param {Array<*>} values Values to serialize. An example would be an array
   *     of {@link module:ol/Feature~Feature} instances.
   * @param {Array<*>} objectStack Node stack.
   * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the
   *     `nodeFactory`. This is used for serializing object literals where the
   *     node name relates to the property key. The array length of `keys` has
   *     to match the length of `values`. For serializing a sequence, `keys`
   *     determines the order of the sequence.
   * @param {T} [thisArg] The object to use as `this` for the node factory and
   *     serializers.
   * @return {O|undefined} Object.
   * @template O, T
   */
  function pushSerializeAndPop(
    object,
    serializersNS,
    nodeFactory,
    values,
    objectStack,
    keys,
    thisArg,
  ) {
    objectStack.push(object);
    serialize(serializersNS, nodeFactory, values, objectStack, keys, thisArg);
    return /** @type {O|undefined} */ (objectStack.pop());
  }

  let xmlSerializer_ = undefined;

  /**
   * @return {XMLSerializer} The XMLSerializer.
   */
  function getXMLSerializer() {
    if (xmlSerializer_ === undefined && typeof XMLSerializer !== 'undefined') {
      xmlSerializer_ = new XMLSerializer();
    }
    return xmlSerializer_;
  }

  let document_ = undefined;

  /**
   * Get a document that should be used when creating nodes for XML serializations.
   * @return {Document} The document.
   */
  function getDocument() {
    if (document_ === undefined && typeof document !== 'undefined') {
      document_ = document.implementation.createDocument('', '', null);
    }
    return document_;
  }

  /**
   * @module ol/geom/Circle
   */

  /**
   * @classdesc
   * Circle geometry.
   *
   * @api
   */
  class Circle extends SimpleGeometry {
    /**
     * @param {!import("../coordinate.js").Coordinate} center Center.
     *     For internal use, flat coordinates in combination with `layout` and no
     *     `radius` are also accepted.
     * @param {number} [radius] Radius in units of the projection.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    constructor(center, radius, layout) {
      super();
      if (layout !== undefined && radius === undefined) {
        this.setFlatCoordinates(layout, center);
      } else {
        radius = radius ? radius : 0;
        this.setCenterAndRadius(center, radius, layout);
      }
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!Circle} Clone.
     * @api
     * @override
     */
    clone() {
      const circle = new Circle(
        this.flatCoordinates.slice(),
        undefined,
        this.layout,
      );
      circle.applyProperties(this);
      return circle;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     * @override
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      const flatCoordinates = this.flatCoordinates;
      const dx = x - flatCoordinates[0];
      const dy = y - flatCoordinates[1];
      const squaredDistance = dx * dx + dy * dy;
      if (squaredDistance < minSquaredDistance) {
        if (squaredDistance === 0) {
          for (let i = 0; i < this.stride; ++i) {
            closestPoint[i] = flatCoordinates[i];
          }
        } else {
          const delta = this.getRadius() / Math.sqrt(squaredDistance);
          closestPoint[0] = flatCoordinates[0] + delta * dx;
          closestPoint[1] = flatCoordinates[1] + delta * dy;
          for (let i = 2; i < this.stride; ++i) {
            closestPoint[i] = flatCoordinates[i];
          }
        }
        closestPoint.length = this.stride;
        return squaredDistance;
      }
      return minSquaredDistance;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     * @override
     */
    containsXY(x, y) {
      const flatCoordinates = this.flatCoordinates;
      const dx = x - flatCoordinates[0];
      const dy = y - flatCoordinates[1];
      return dx * dx + dy * dy <= this.getRadiusSquared_();
    }

    /**
     * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @return {import("../coordinate.js").Coordinate} Center.
     * @api
     */
    getCenter() {
      return this.flatCoordinates.slice(0, this.stride);
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     * @override
     */
    computeExtent(extent) {
      const flatCoordinates = this.flatCoordinates;
      const radius = flatCoordinates[this.stride] - flatCoordinates[0];
      return createOrUpdate$2(
        flatCoordinates[0] - radius,
        flatCoordinates[1] - radius,
        flatCoordinates[0] + radius,
        flatCoordinates[1] + radius,
        extent,
      );
    }

    /**
     * Return the radius of the circle.
     * @return {number} Radius.
     * @api
     */
    getRadius() {
      return Math.sqrt(this.getRadiusSquared_());
    }

    /**
     * @private
     * @return {number} Radius squared.
     */
    getRadiusSquared_() {
      const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];
      const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];
      return dx * dx + dy * dy;
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     * @override
     */
    getType() {
      return 'Circle';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     * @override
     */
    intersectsExtent(extent) {
      const circleExtent = this.getExtent();
      if (intersects$1(extent, circleExtent)) {
        const center = this.getCenter();

        if (extent[0] <= center[0] && extent[2] >= center[0]) {
          return true;
        }
        if (extent[1] <= center[1] && extent[3] >= center[1]) {
          return true;
        }

        return forEachCorner(extent, this.intersectsCoordinate.bind(this));
      }
      return false;
    }

    /**
     * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} center Center.
     * @api
     */
    setCenter(center) {
      const stride = this.stride;
      const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];
      const flatCoordinates = center.slice();
      flatCoordinates[stride] = flatCoordinates[0] + radius;
      for (let i = 1; i < stride; ++i) {
        flatCoordinates[stride + i] = center[i];
      }
      this.setFlatCoordinates(this.layout, flatCoordinates);
      this.changed();
    }

    /**
     * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as
     * number) of the circle.
     * @param {!import("../coordinate.js").Coordinate} center Center.
     * @param {number} radius Radius.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     */
    setCenterAndRadius(center, radius, layout) {
      this.setLayout(layout, center, 0);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      /** @type {Array<number>} */
      const flatCoordinates = this.flatCoordinates;
      let offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);
      flatCoordinates[offset++] = flatCoordinates[0] + radius;
      for (let i = 1, ii = this.stride; i < ii; ++i) {
        flatCoordinates[offset++] = flatCoordinates[i];
      }
      flatCoordinates.length = offset;
      this.changed();
    }

    /**
     * @override
     */
    getCoordinates() {
      return null;
    }

    /**
     * @override
     */
    setCoordinates(coordinates, layout) {}

    /**
     * Set the radius of the circle. The radius is in the units of the projection.
     * @param {number} radius Radius.
     * @api
     */
    setRadius(radius) {
      this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;
      this.changed();
    }

    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @param {number} angle Rotation angle in counter-clockwise radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     * @override
     */
    rotate(angle, anchor) {
      const center = this.getCenter();
      const stride = this.getStride();
      this.setCenter(
        rotate(center, 0, center.length, stride, angle, anchor, center),
      );
      this.changed();
    }
  }

  /**
   * Transform each coordinate of the circle from one coordinate reference system
   * to another. The geometry is modified in place.
   * If you do not want the geometry modified in place, first clone() it and
   * then use this function on the clone.
   *
   * Internally a circle is currently represented by two points: the center of
   * the circle `[cx, cy]`, and the point to the right of the circle
   * `[cx + r, cy]`. This `transform` function just transforms these two points.
   * So the resulting geometry is also a circle, and that circle does not
   * correspond to the shape that would be obtained by transforming every point
   * of the original circle.
   *
   * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @return {Circle} This geometry.  Note that original geometry is
   *     modified in place.
   * @function
   * @api
   */
  Circle.prototype.transform;

  /**
   * @module ol/geom/GeometryCollection
   */

  /**
   * @classdesc
   * An array of {@link module:ol/geom/Geometry~Geometry} objects.
   *
   * @api
   */
  class GeometryCollection extends Geometry {
    /**
     * @param {Array<Geometry>} geometries Geometries.
     */
    constructor(geometries) {
      super();

      /**
       * @private
       * @type {Array<Geometry>}
       */
      this.geometries_ = geometries;

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.changeEventsKeys_ = [];

      this.listenGeometriesChange_();
    }

    /**
     * @private
     */
    unlistenGeometriesChange_() {
      this.changeEventsKeys_.forEach(unlistenByKey);
      this.changeEventsKeys_.length = 0;
    }

    /**
     * @private
     */
    listenGeometriesChange_() {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        this.changeEventsKeys_.push(
          listen(geometries[i], EventType.CHANGE, this.changed, this),
        );
      }
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!GeometryCollection} Clone.
     * @api
     * @override
     */
    clone() {
      const geometryCollection = new GeometryCollection(
        cloneGeometries(this.geometries_),
      );
      geometryCollection.applyProperties(this);
      return geometryCollection;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     * @override
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        minSquaredDistance = geometries[i].closestPointXY(
          x,
          y,
          closestPoint,
          minSquaredDistance,
        );
      }
      return minSquaredDistance;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     * @override
     */
    containsXY(x, y) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        if (geometries[i].containsXY(x, y)) {
          return true;
        }
      }
      return false;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     * @override
     */
    computeExtent(extent) {
      createOrUpdateEmpty(extent);
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        extend$2(extent, geometries[i].getExtent());
      }
      return extent;
    }

    /**
     * Return the geometries that make up this geometry collection.
     * @return {Array<Geometry>} Geometries.
     * @api
     */
    getGeometries() {
      return cloneGeometries(this.geometries_);
    }

    /**
     * @return {Array<Geometry>} Geometries.
     */
    getGeometriesArray() {
      return this.geometries_;
    }

    /**
     * @return {Array<Geometry>} Geometries.
     */
    getGeometriesArrayRecursive() {
      /** @type {Array<Geometry>} */
      let geometriesArray = [];
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        if (geometries[i].getType() === this.getType()) {
          geometriesArray = geometriesArray.concat(
            /** @type {GeometryCollection} */ (
              geometries[i]
            ).getGeometriesArrayRecursive(),
          );
        } else {
          geometriesArray.push(geometries[i]);
        }
      }
      return geometriesArray;
    }

    /**
     * Create a simplified version of this geometry using the Douglas Peucker algorithm.
     * @param {number} squaredTolerance Squared tolerance.
     * @return {GeometryCollection} Simplified GeometryCollection.
     * @override
     */
    getSimplifiedGeometry(squaredTolerance) {
      if (this.simplifiedGeometryRevision !== this.getRevision()) {
        this.simplifiedGeometryMaxMinSquaredTolerance = 0;
        this.simplifiedGeometryRevision = this.getRevision();
      }
      if (
        squaredTolerance < 0 ||
        (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
          squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)
      ) {
        return this;
      }

      const simplifiedGeometries = [];
      const geometries = this.geometries_;
      let simplified = false;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        const geometry = geometries[i];
        const simplifiedGeometry =
          geometry.getSimplifiedGeometry(squaredTolerance);
        simplifiedGeometries.push(simplifiedGeometry);
        if (simplifiedGeometry !== geometry) {
          simplified = true;
        }
      }
      if (simplified) {
        const simplifiedGeometryCollection = new GeometryCollection(
          simplifiedGeometries,
        );
        return simplifiedGeometryCollection;
      }
      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
      return this;
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     * @override
     */
    getType() {
      return 'GeometryCollection';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     * @override
     */
    intersectsExtent(extent) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        if (geometries[i].intersectsExtent(extent)) {
          return true;
        }
      }
      return false;
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return this.geometries_.length === 0;
    }

    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @param {number} angle Rotation angle in radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     * @override
     */
    rotate(angle, anchor) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].rotate(angle, anchor);
      }
      this.changed();
    }

    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).
     * @param {import("../coordinate.js").Coordinate} [anchor] The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     * @override
     */
    scale(sx, sy, anchor) {
      if (!anchor) {
        anchor = getCenter(this.getExtent());
      }
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].scale(sx, sy, anchor);
      }
      this.changed();
    }

    /**
     * Set the geometries that make up this geometry collection.
     * @param {Array<Geometry>} geometries Geometries.
     * @api
     */
    setGeometries(geometries) {
      this.setGeometriesArray(cloneGeometries(geometries));
    }

    /**
     * @param {Array<Geometry>} geometries Geometries.
     */
    setGeometriesArray(geometries) {
      this.unlistenGeometriesChange_();
      this.geometries_ = geometries;
      this.listenGeometriesChange_();
      this.changed();
    }

    /**
     * Apply a transform function to the coordinates of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
     * Called with a flat array of geometry coordinates.
     * @api
     * @override
     */
    applyTransform(transformFn) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].applyTransform(transformFn);
      }
      this.changed();
    }

    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     * @override
     */
    translate(deltaX, deltaY) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].translate(deltaX, deltaY);
      }
      this.changed();
    }

    /**
     * Clean up.
     * @override
     */
    disposeInternal() {
      this.unlistenGeometriesChange_();
      super.disposeInternal();
    }
  }

  /**
   * @param {Array<Geometry>} geometries Geometries.
   * @return {Array<Geometry>} Cloned geometries.
   */
  function cloneGeometries(geometries) {
    return geometries.map((geometry) => geometry.clone());
  }

  /**
   * @module ol/geom/MultiLineString
   */

  /**
   * @classdesc
   * Multi-linestring geometry.
   *
   * @api
   */
  class MultiLineString extends SimpleGeometry {
    /**
     * @param {Array<Array<import("../coordinate.js").Coordinate>|LineString>|Array<number>} coordinates
     *     Coordinates or LineString geometries. (For internal use, flat coordinates in
     *     combination with `layout` and `ends` are also accepted.)
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @param {Array<number>} [ends] Flat coordinate ends for internal use.
     */
    constructor(coordinates, layout, ends) {
      super();

      /**
       * @type {Array<number>}
       * @private
       */
      this.ends_ = [];

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (Array.isArray(coordinates[0])) {
        this.setCoordinates(
          /** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (
            coordinates
          ),
          layout,
        );
      } else if (layout !== undefined && ends) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates),
        );
        this.ends_ = ends;
      } else {
        const lineStrings = /** @type {Array<LineString>} */ (coordinates);
        /** @type {Array<number>} */
        const flatCoordinates = [];
        const ends = [];
        for (let i = 0, ii = lineStrings.length; i < ii; ++i) {
          const lineString = lineStrings[i];
          extend$3(flatCoordinates, lineString.getFlatCoordinates());
          ends.push(flatCoordinates.length);
        }
        const layout =
          lineStrings.length === 0
            ? this.getLayout()
            : lineStrings[0].getLayout();
        this.setFlatCoordinates(layout, flatCoordinates);
        this.ends_ = ends;
      }
    }

    /**
     * Append the passed linestring to the multilinestring.
     * @param {LineString} lineString LineString.
     * @api
     */
    appendLineString(lineString) {
      extend$3(this.flatCoordinates, lineString.getFlatCoordinates().slice());
      this.ends_.push(this.flatCoordinates.length);
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiLineString} Clone.
     * @api
     * @override
     */
    clone() {
      const multiLineString = new MultiLineString(
        this.flatCoordinates.slice(),
        this.layout,
        this.ends_.slice(),
      );
      multiLineString.applyProperties(this);
      return multiLineString;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     * @override
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(
          arrayMaxSquaredDelta(
            this.flatCoordinates,
            0,
            this.ends_,
            this.stride,
            0,
          ),
        );
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestArrayPoint(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        this.maxDelta_,
        false,
        x,
        y,
        closestPoint,
        minSquaredDistance,
      );
    }

    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * `interpolate` controls interpolation between consecutive LineStrings
     * within the MultiLineString. If `interpolate` is `true` the coordinates
     * will be linearly interpolated between the last coordinate of one LineString
     * and the first coordinate of the next LineString.  If `interpolate` is
     * `false` then the function will return `null` for Ms falling between
     * LineStrings.
     *
     * @param {number} m M.
     * @param {boolean} [extrapolate] Extrapolate. Default is `false`.
     * @param {boolean} [interpolate] Interpolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate|null} Coordinate.
     * @api
     */
    getCoordinateAtM(m, extrapolate, interpolate) {
      if (
        (this.layout != 'XYM' && this.layout != 'XYZM') ||
        this.flatCoordinates.length === 0
      ) {
        return null;
      }
      extrapolate = extrapolate !== undefined ? extrapolate : false;
      interpolate = interpolate !== undefined ? interpolate : false;
      return lineStringsCoordinateAtM(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        m,
        extrapolate,
        interpolate,
      );
    }

    /**
     * Return the coordinates of the multilinestring.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @api
     * @override
     */
    getCoordinates() {
      return inflateCoordinatesArray(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
      );
    }

    /**
     * @return {Array<number>} Ends.
     */
    getEnds() {
      return this.ends_;
    }

    /**
     * Return the linestring at the specified index.
     * @param {number} index Index.
     * @return {LineString} LineString.
     * @api
     */
    getLineString(index) {
      if (index < 0 || this.ends_.length <= index) {
        return null;
      }
      return new LineString(
        this.flatCoordinates.slice(
          index === 0 ? 0 : this.ends_[index - 1],
          this.ends_[index],
        ),
        this.layout,
      );
    }

    /**
     * Return the linestrings of this multilinestring.
     * @return {Array<LineString>} LineStrings.
     * @api
     */
    getLineStrings() {
      const flatCoordinates = this.flatCoordinates;
      const ends = this.ends_;
      const layout = this.layout;
      /** @type {Array<LineString>} */
      const lineStrings = [];
      let offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const lineString = new LineString(
          flatCoordinates.slice(offset, end),
          layout,
        );
        lineStrings.push(lineString);
        offset = end;
      }
      return lineStrings;
    }

    /**
     * Return the sum of all line string lengths
     * @return {number} Length (on projected plane).
     * @api
     */
    getLength() {
      const ends = this.ends_;
      let start = 0;
      let length = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        length += lineStringLength(
          this.flatCoordinates,
          start,
          ends[i],
          this.stride,
        );
        start = ends[i];
      }
      return length;
    }

    /**
     * @return {Array<number>} Flat midpoints.
     */
    getFlatMidpoints() {
      /** @type {Array<number>} */
      const midpoints = [];
      const flatCoordinates = this.flatCoordinates;
      let offset = 0;
      const ends = this.ends_;
      const stride = this.stride;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const midpoint = interpolatePoint(
          flatCoordinates,
          offset,
          end,
          stride,
          0.5,
        );
        extend$3(midpoints, midpoint);
        offset = end;
      }
      return midpoints;
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {MultiLineString} Simplified MultiLineString.
     * @protected
     * @override
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      /** @type {Array<number>} */
      const simplifiedFlatCoordinates = [];
      /** @type {Array<number>} */
      const simplifiedEnds = [];
      simplifiedFlatCoordinates.length = douglasPeuckerArray(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        squaredTolerance,
        simplifiedFlatCoordinates,
        0,
        simplifiedEnds,
      );
      return new MultiLineString(simplifiedFlatCoordinates, 'XY', simplifiedEnds);
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     * @override
     */
    getType() {
      return 'MultiLineString';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     * @override
     */
    intersectsExtent(extent) {
      return intersectsLineStringArray(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        extent,
      );
    }

    /**
     * Set the coordinates of the multilinestring.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     * @override
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 2);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      const ends = deflateCoordinatesArray(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride,
        this.ends_,
      );
      this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
      this.changed();
    }
  }

  /**
   * @module ol/geom/MultiPoint
   */

  /**
   * @classdesc
   * Multi-point geometry.
   *
   * @api
   */
  class MultiPoint extends SimpleGeometry {
    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `layout` are also accepted.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    constructor(coordinates, layout) {
      super();
      if (layout && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates),
        );
      } else {
        this.setCoordinates(
          /** @type {Array<import("../coordinate.js").Coordinate>} */ (
            coordinates
          ),
          layout,
        );
      }
    }

    /**
     * Append the passed point to this multipoint.
     * @param {Point} point Point.
     * @api
     */
    appendPoint(point) {
      extend$3(this.flatCoordinates, point.getFlatCoordinates());
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPoint} Clone.
     * @api
     * @override
     */
    clone() {
      const multiPoint = new MultiPoint(
        this.flatCoordinates.slice(),
        this.layout,
      );
      multiPoint.applyProperties(this);
      return multiPoint;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     * @override
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      const flatCoordinates = this.flatCoordinates;
      const stride = this.stride;
      for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        const squaredDistance = squaredDistance$1(
          x,
          y,
          flatCoordinates[i],
          flatCoordinates[i + 1],
        );
        if (squaredDistance < minSquaredDistance) {
          minSquaredDistance = squaredDistance;
          for (let j = 0; j < stride; ++j) {
            closestPoint[j] = flatCoordinates[i + j];
          }
          closestPoint.length = stride;
        }
      }
      return minSquaredDistance;
    }

    /**
     * Return the coordinates of the multipoint.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @api
     * @override
     */
    getCoordinates() {
      return inflateCoordinates(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
      );
    }

    /**
     * Return the point at the specified index.
     * @param {number} index Index.
     * @return {Point} Point.
     * @api
     */
    getPoint(index) {
      const n = this.flatCoordinates.length / this.stride;
      if (index < 0 || n <= index) {
        return null;
      }
      return new Point$1(
        this.flatCoordinates.slice(
          index * this.stride,
          (index + 1) * this.stride,
        ),
        this.layout,
      );
    }

    /**
     * Return the points of this multipoint.
     * @return {Array<Point>} Points.
     * @api
     */
    getPoints() {
      const flatCoordinates = this.flatCoordinates;
      const layout = this.layout;
      const stride = this.stride;
      /** @type {Array<Point>} */
      const points = [];
      for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        const point = new Point$1(flatCoordinates.slice(i, i + stride), layout);
        points.push(point);
      }
      return points;
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     * @override
     */
    getType() {
      return 'MultiPoint';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     * @override
     */
    intersectsExtent(extent) {
      const flatCoordinates = this.flatCoordinates;
      const stride = this.stride;
      for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        const x = flatCoordinates[i];
        const y = flatCoordinates[i + 1];
        if (containsXY(extent, x, y)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Set the coordinates of the multipoint.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     * @override
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride,
      );
      this.changed();
    }
  }

  /**
   * @module ol/geom/flat/center
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {Array<number>} Flat centers.
   */
  function linearRingss(flatCoordinates, offset, endss, stride) {
    const flatCenters = [];
    let extent = createEmpty();
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      extent = createOrUpdateFromFlatCoordinates(
        flatCoordinates,
        offset,
        ends[0],
        stride,
      );
      flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);
      offset = ends[ends.length - 1];
    }
    return flatCenters;
  }

  /**
   * @module ol/geom/MultiPolygon
   */

  /**
   * @classdesc
   * Multi-polygon geometry.
   *
   * @api
   */
  class MultiPolygon extends SimpleGeometry {
    /**
     * @param {Array<Array<Array<import("../coordinate.js").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `layout` and `endss` are also accepted.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @param {Array<Array<number>>} [endss] Array of ends for internal use with flat coordinates.
     */
    constructor(coordinates, layout, endss) {
      super();

      /**
       * @type {Array<Array<number>>}
       * @private
       */
      this.endss_ = [];

      /**
       * @private
       * @type {number}
       */
      this.flatInteriorPointsRevision_ = -1;

      /**
       * @private
       * @type {Array<number>|null}
       */
      this.flatInteriorPoints_ = null;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.orientedRevision_ = -1;

      /**
       * @private
       * @type {Array<number>|null}
       */
      this.orientedFlatCoordinates_ = null;

      if (!endss && !Array.isArray(coordinates[0])) {
        const polygons = /** @type {Array<Polygon>} */ (coordinates);
        /** @type {Array<number>} */
        const flatCoordinates = [];
        const thisEndss = [];
        for (let i = 0, ii = polygons.length; i < ii; ++i) {
          const polygon = polygons[i];
          const offset = flatCoordinates.length;
          const ends = polygon.getEnds();
          for (let j = 0, jj = ends.length; j < jj; ++j) {
            ends[j] += offset;
          }
          extend$3(flatCoordinates, polygon.getFlatCoordinates());
          thisEndss.push(ends);
        }
        layout =
          polygons.length === 0 ? this.getLayout() : polygons[0].getLayout();
        coordinates = flatCoordinates;
        endss = thisEndss;
      }
      if (layout !== undefined && endss) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates),
        );
        this.endss_ = endss;
      } else {
        this.setCoordinates(
          /** @type {Array<Array<Array<import("../coordinate.js").Coordinate>>>} */ (
            coordinates
          ),
          layout,
        );
      }
    }

    /**
     * Append the passed polygon to this multipolygon.
     * @param {Polygon} polygon Polygon.
     * @api
     */
    appendPolygon(polygon) {
      /** @type {Array<number>} */
      let ends;
      if (!this.flatCoordinates) {
        this.flatCoordinates = polygon.getFlatCoordinates().slice();
        ends = polygon.getEnds().slice();
        this.endss_.push();
      } else {
        const offset = this.flatCoordinates.length;
        extend$3(this.flatCoordinates, polygon.getFlatCoordinates());
        ends = polygon.getEnds().slice();
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          ends[i] += offset;
        }
      }
      this.endss_.push(ends);
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPolygon} Clone.
     * @api
     * @override
     */
    clone() {
      const len = this.endss_.length;
      const newEndss = new Array(len);
      for (let i = 0; i < len; ++i) {
        newEndss[i] = this.endss_[i].slice();
      }

      const multiPolygon = new MultiPolygon(
        this.flatCoordinates.slice(),
        this.layout,
        newEndss,
      );
      multiPolygon.applyProperties(this);

      return multiPolygon;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     * @override
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(
          multiArrayMaxSquaredDelta(
            this.flatCoordinates,
            0,
            this.endss_,
            this.stride,
            0,
          ),
        );
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestMultiArrayPoint(
        this.getOrientedFlatCoordinates(),
        0,
        this.endss_,
        this.stride,
        this.maxDelta_,
        true,
        x,
        y,
        closestPoint,
        minSquaredDistance,
      );
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     * @override
     */
    containsXY(x, y) {
      return linearRingssContainsXY(
        this.getOrientedFlatCoordinates(),
        0,
        this.endss_,
        this.stride,
        x,
        y,
      );
    }

    /**
     * Return the area of the multipolygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    getArea() {
      return linearRingss$1(
        this.getOrientedFlatCoordinates(),
        0,
        this.endss_,
        this.stride,
      );
    }

    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for multi-polygons.
     *
     * @param {boolean} [right] Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<Array<import("../coordinate.js").Coordinate>>>} Coordinates.
     * @api
     * @override
     */
    getCoordinates(right) {
      let flatCoordinates;
      if (right !== undefined) {
        flatCoordinates = this.getOrientedFlatCoordinates().slice();
        orientLinearRingsArray(
          flatCoordinates,
          0,
          this.endss_,
          this.stride,
          right,
        );
      } else {
        flatCoordinates = this.flatCoordinates;
      }

      return inflateMultiCoordinatesArray(
        flatCoordinates,
        0,
        this.endss_,
        this.stride,
      );
    }

    /**
     * @return {Array<Array<number>>} Endss.
     */
    getEndss() {
      return this.endss_;
    }

    /**
     * @return {Array<number>} Flat interior points.
     */
    getFlatInteriorPoints() {
      if (this.flatInteriorPointsRevision_ != this.getRevision()) {
        const flatCenters = linearRingss(
          this.flatCoordinates,
          0,
          this.endss_,
          this.stride,
        );
        this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(
          this.getOrientedFlatCoordinates(),
          0,
          this.endss_,
          this.stride,
          flatCenters,
        );
        this.flatInteriorPointsRevision_ = this.getRevision();
      }
      return /** @type {Array<number>} */ (this.flatInteriorPoints_);
    }

    /**
     * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.
     * @return {MultiPoint} Interior points as XYM coordinates, where M is
     * the length of the horizontal intersection that the point belongs to.
     * @api
     */
    getInteriorPoints() {
      return new MultiPoint(this.getFlatInteriorPoints().slice(), 'XYM');
    }

    /**
     * @return {Array<number>} Oriented flat coordinates.
     */
    getOrientedFlatCoordinates() {
      if (this.orientedRevision_ != this.getRevision()) {
        const flatCoordinates = this.flatCoordinates;
        if (
          linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)
        ) {
          this.orientedFlatCoordinates_ = flatCoordinates;
        } else {
          this.orientedFlatCoordinates_ = flatCoordinates.slice();
          this.orientedFlatCoordinates_.length = orientLinearRingsArray(
            this.orientedFlatCoordinates_,
            0,
            this.endss_,
            this.stride,
          );
        }
        this.orientedRevision_ = this.getRevision();
      }
      return /** @type {Array<number>} */ (this.orientedFlatCoordinates_);
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {MultiPolygon} Simplified MultiPolygon.
     * @protected
     * @override
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      /** @type {Array<number>} */
      const simplifiedFlatCoordinates = [];
      /** @type {Array<Array<number>>} */
      const simplifiedEndss = [];
      simplifiedFlatCoordinates.length = quantizeMultiArray(
        this.flatCoordinates,
        0,
        this.endss_,
        this.stride,
        Math.sqrt(squaredTolerance),
        simplifiedFlatCoordinates,
        0,
        simplifiedEndss,
      );
      return new MultiPolygon(simplifiedFlatCoordinates, 'XY', simplifiedEndss);
    }

    /**
     * Return the polygon at the specified index.
     * @param {number} index Index.
     * @return {Polygon} Polygon.
     * @api
     */
    getPolygon(index) {
      if (index < 0 || this.endss_.length <= index) {
        return null;
      }
      let offset;
      if (index === 0) {
        offset = 0;
      } else {
        const prevEnds = this.endss_[index - 1];
        offset = prevEnds[prevEnds.length - 1];
      }
      const ends = this.endss_[index].slice();
      const end = ends[ends.length - 1];
      if (offset !== 0) {
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          ends[i] -= offset;
        }
      }
      return new Polygon(
        this.flatCoordinates.slice(offset, end),
        this.layout,
        ends,
      );
    }

    /**
     * Return the polygons of this multipolygon.
     * @return {Array<Polygon>} Polygons.
     * @api
     */
    getPolygons() {
      const layout = this.layout;
      const flatCoordinates = this.flatCoordinates;
      const endss = this.endss_;
      const polygons = [];
      let offset = 0;
      for (let i = 0, ii = endss.length; i < ii; ++i) {
        const ends = endss[i].slice();
        const end = ends[ends.length - 1];
        if (offset !== 0) {
          for (let j = 0, jj = ends.length; j < jj; ++j) {
            ends[j] -= offset;
          }
        }
        const polygon = new Polygon(
          flatCoordinates.slice(offset, end),
          layout,
          ends,
        );
        polygons.push(polygon);
        offset = end;
      }
      return polygons;
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     * @override
     */
    getType() {
      return 'MultiPolygon';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     * @override
     */
    intersectsExtent(extent) {
      return intersectsLinearRingMultiArray(
        this.getOrientedFlatCoordinates(),
        0,
        this.endss_,
        this.stride,
        extent,
      );
    }

    /**
     * Set the coordinates of the multipolygon.
     * @param {!Array<Array<Array<import("../coordinate.js").Coordinate>>>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     * @override
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 3);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      const endss = deflateMultiCoordinatesArray(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride,
        this.endss_,
      );
      if (endss.length === 0) {
        this.flatCoordinates.length = 0;
      } else {
        const lastEnds = endss[endss.length - 1];
        this.flatCoordinates.length =
          lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];
      }
      this.changed();
    }
  }

  /**
   * @module ol/geom
   */

  var geom = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Circle: Circle,
    Geometry: Geometry,
    GeometryCollection: GeometryCollection,
    LineString: LineString,
    LinearRing: LinearRing,
    MultiLineString: MultiLineString,
    MultiPoint: MultiPoint,
    MultiPolygon: MultiPolygon,
    Point: Point$1,
    Polygon: Polygon,
    SimpleGeometry: SimpleGeometry
  });

  /**
   * @module ol/render/Feature
   */

  /**
   * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString'} Type
   * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,
   * `'Polygon'`, `'MultiPoint'` or 'MultiLineString'`.
   */

  /**
   * @type {import("../transform.js").Transform}
   */
  const tmpTransform = create();

  /**
   * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like
   * structure, optimized for vector tile rendering and styling. Geometry access
   * through the API is limited to getting the type and extent of the geometry.
   */
  class RenderFeature {
    /**
     * @param {Type} type Geometry type.
     * @param {Array<number>} flatCoordinates Flat coordinates. These always need
     *     to be right-handed for polygons.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Object<string, *>} properties Properties.
     * @param {number|string|undefined} id Feature id.
     */
    constructor(type, flatCoordinates, ends, stride, properties, id) {
      /**
       * @type {import("../style/Style.js").StyleFunction|undefined}
       */
      this.styleFunction;

      /**
       * @private
       * @type {import("../extent.js").Extent|undefined}
       */
      this.extent_;

      /**
       * @private
       * @type {number|string|undefined}
       */
      this.id_ = id;

      /**
       * @private
       * @type {Type}
       */
      this.type_ = type;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatCoordinates_ = flatCoordinates;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatInteriorPoints_ = null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatMidpoints_ = null;

      /**
       * @private
       * @type {Array<number>|null}
       */
      this.ends_ = ends || null;

      /**
       * @private
       * @type {Object<string, *>}
       */
      this.properties_ = properties;

      /**
       * @private
       * @type {number}
       */
      this.squaredTolerance_;

      /**
       * @private
       * @type {number}
       */
      this.stride_ = stride;

      /**
       * @private
       * @type {RenderFeature}
       */
      this.simplifiedGeometry_;
    }

    /**
     * Get a feature property by its key.
     * @param {string} key Key
     * @return {*} Value for the requested key.
     * @api
     */
    get(key) {
      return this.properties_[key];
    }

    /**
     * Get the extent of this feature's geometry.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent() {
      if (!this.extent_) {
        this.extent_ =
          this.type_ === 'Point'
            ? createOrUpdateFromCoordinate(this.flatCoordinates_)
            : createOrUpdateFromFlatCoordinates(
                this.flatCoordinates_,
                0,
                this.flatCoordinates_.length,
                2,
              );
      }
      return this.extent_;
    }

    /**
     * @return {Array<number>} Flat interior points.
     */
    getFlatInteriorPoint() {
      if (!this.flatInteriorPoints_) {
        const flatCenter = getCenter(this.getExtent());
        this.flatInteriorPoints_ = getInteriorPointOfArray(
          this.flatCoordinates_,
          0,
          this.ends_,
          2,
          flatCenter,
          0,
        );
      }
      return this.flatInteriorPoints_;
    }

    /**
     * @return {Array<number>} Flat interior points.
     */
    getFlatInteriorPoints() {
      if (!this.flatInteriorPoints_) {
        const ends = inflateEnds(this.flatCoordinates_, this.ends_);
        const flatCenters = linearRingss(this.flatCoordinates_, 0, ends, 2);
        this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(
          this.flatCoordinates_,
          0,
          ends,
          2,
          flatCenters,
        );
      }
      return this.flatInteriorPoints_;
    }

    /**
     * @return {Array<number>} Flat midpoint.
     */
    getFlatMidpoint() {
      if (!this.flatMidpoints_) {
        this.flatMidpoints_ = interpolatePoint(
          this.flatCoordinates_,
          0,
          this.flatCoordinates_.length,
          2,
          0.5,
        );
      }
      return this.flatMidpoints_;
    }

    /**
     * @return {Array<number>} Flat midpoints.
     */
    getFlatMidpoints() {
      if (!this.flatMidpoints_) {
        this.flatMidpoints_ = [];
        const flatCoordinates = this.flatCoordinates_;
        let offset = 0;
        const ends = /** @type {Array<number>} */ (this.ends_);
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          const end = ends[i];
          const midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);
          extend$3(this.flatMidpoints_, midpoint);
          offset = end;
        }
      }
      return this.flatMidpoints_;
    }

    /**
     * Get the feature identifier.  This is a stable identifier for the feature and
     * is set when reading data from a remote source.
     * @return {number|string|undefined} Id.
     * @api
     */
    getId() {
      return this.id_;
    }

    /**
     * @return {Array<number>} Flat coordinates.
     */
    getOrientedFlatCoordinates() {
      return this.flatCoordinates_;
    }

    /**
     * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when
     * determining the geometry type in style function (see {@link #getType}).
     * @return {RenderFeature} Feature.
     * @api
     */
    getGeometry() {
      return this;
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {RenderFeature} Simplified geometry.
     */
    getSimplifiedGeometry(squaredTolerance) {
      return this;
    }

    /**
     * Get a transformed and simplified version of the geometry.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
     * @return {RenderFeature} Simplified geometry.
     */
    simplifyTransformed(squaredTolerance, transform) {
      return this;
    }

    /**
     * Get the feature properties.
     * @return {Object<string, *>} Feature properties.
     * @api
     */
    getProperties() {
      return this.properties_;
    }

    /**
     * Get an object of all property names and values.  This has the same behavior as getProperties,
     * but is here to conform with the {@link module:ol/Feature~Feature} interface.
     * @return {Object<string, *>?} Object.
     */
    getPropertiesInternal() {
      return this.properties_;
    }

    /**
     * @return {number} Stride.
     */
    getStride() {
      return this.stride_;
    }

    /**
     * @return {import('../style/Style.js').StyleFunction|undefined} Style
     */
    getStyleFunction() {
      return this.styleFunction;
    }

    /**
     * Get the type of this feature's geometry.
     * @return {Type} Geometry type.
     * @api
     */
    getType() {
      return this.type_;
    }

    /**
     * Transform geometry coordinates from tile pixel space to projected.
     *
     * @param {import("../proj.js").ProjectionLike} projection The data projection
     */
    transform(projection) {
      projection = get$2(projection);
      const pixelExtent = projection.getExtent();
      const projectedExtent = projection.getWorldExtent();
      if (pixelExtent && projectedExtent) {
        const scale = getHeight(projectedExtent) / getHeight(pixelExtent);
        compose(
          tmpTransform,
          projectedExtent[0],
          projectedExtent[3],
          scale,
          -scale,
          0,
          0,
          0,
        );
        transform2D(
          this.flatCoordinates_,
          0,
          this.flatCoordinates_.length,
          2,
          tmpTransform,
          this.flatCoordinates_,
        );
      }
    }

    /**
     * Apply a transform function to the coordinates of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
     */
    applyTransform(transformFn) {
      transformFn(this.flatCoordinates_, this.flatCoordinates_, this.stride_);
    }

    /**
     * @return {RenderFeature} A cloned render feature.
     */
    clone() {
      return new RenderFeature(
        this.type_,
        this.flatCoordinates_.slice(),
        this.ends_?.slice(),
        this.stride_,
        Object.assign({}, this.properties_),
        this.id_,
      );
    }

    /**
     * @return {Array<number>|null} Ends.
     */
    getEnds() {
      return this.ends_;
    }

    /**
     * Add transform and resolution based geometry simplification to this instance.
     * @return {RenderFeature} This render feature.
     */
    enableSimplifyTransformed() {
      this.simplifyTransformed = memoizeOne((squaredTolerance, transform) => {
        if (squaredTolerance === this.squaredTolerance_) {
          return this.simplifiedGeometry_;
        }
        this.simplifiedGeometry_ = this.clone();
        if (transform) {
          this.simplifiedGeometry_.applyTransform(transform);
        }
        const simplifiedFlatCoordinates =
          this.simplifiedGeometry_.getFlatCoordinates();
        let simplifiedEnds;
        switch (this.type_) {
          case 'LineString':
            simplifiedFlatCoordinates.length = douglasPeucker(
              simplifiedFlatCoordinates,
              0,
              this.simplifiedGeometry_.flatCoordinates_.length,
              this.simplifiedGeometry_.stride_,
              squaredTolerance,
              simplifiedFlatCoordinates,
              0,
            );
            simplifiedEnds = [simplifiedFlatCoordinates.length];
            break;
          case 'MultiLineString':
            simplifiedEnds = [];
            simplifiedFlatCoordinates.length = douglasPeuckerArray(
              simplifiedFlatCoordinates,
              0,
              this.simplifiedGeometry_.ends_,
              this.simplifiedGeometry_.stride_,
              squaredTolerance,
              simplifiedFlatCoordinates,
              0,
              simplifiedEnds,
            );
            break;
          case 'Polygon':
            simplifiedEnds = [];
            simplifiedFlatCoordinates.length = quantizeArray(
              simplifiedFlatCoordinates,
              0,
              this.simplifiedGeometry_.ends_,
              this.simplifiedGeometry_.stride_,
              Math.sqrt(squaredTolerance),
              simplifiedFlatCoordinates,
              0,
              simplifiedEnds,
            );
            break;
        }
        if (simplifiedEnds) {
          this.simplifiedGeometry_ = new RenderFeature(
            this.type_,
            simplifiedFlatCoordinates,
            simplifiedEnds,
            2,
            this.properties_,
            this.id_,
          );
        }
        this.squaredTolerance_ = squaredTolerance;
        return this.simplifiedGeometry_;
      });
      return this;
    }
  }

  /**
   * @return {Array<number>} Flat coordinates.
   */
  RenderFeature.prototype.getFlatCoordinates =
    RenderFeature.prototype.getOrientedFlatCoordinates;

  /**
   * @module ol/format/Feature
   */

  /**
   * @typedef {Object} ReadOptions
   * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are reading.
   * If not provided, the projection will be derived from the data (where possible) or
   * the `dataProjection` of the format is assigned (where set). If the projection
   * can not be derived from the data and if no `dataProjection` is set for a format,
   * the features will not be reprojected.
   * @property {import("../extent.js").Extent} [extent] Tile extent in map units of the tile being read.
   * This is only required when reading data with tile pixels as geometry units. When configured,
   * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be
   * provided.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
   * created by the format reader. If not provided, features will be returned in the
   * `dataProjection`.
   */

  /**
   * @typedef {Object} WriteOptions
   * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are writing.
   * If not provided, the `dataProjection` of the format is assigned (where set).
   * If no `dataProjection` is set for a format, the features will be returned
   * in the `featureProjection`.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
   * that will be serialized by the format writer. If not provided, geometries are assumed
   * to be in the `dataProjection` if that is set; in other words, they are not transformed.
   * @property {boolean} [rightHanded] When writing geometries, follow the right-hand
   * rule for linear ring orientation.  This means that polygons will have counter-clockwise
   * exterior rings and clockwise interior rings.  By default, coordinates are serialized
   * as they are provided at construction.  If `true`, the right-hand rule will
   * be applied.  If `false`, the left-hand rule will be applied (clockwise for
   * exterior and counter-clockwise for interior rings).  Note that not all
   * formats support this.  The GeoJSON format does use this property when writing
   * geometries.
   * @property {number} [decimals] Maximum number of decimal places for coordinates.
   * Coordinates are stored internally as floats, but floating-point arithmetic can create
   * coordinates with a large number of decimal places, not generally wanted on output.
   * Set a number here to round coordinates. Can also be used to ensure that
   * coordinates read in can be written back out with the same number of decimals.
   * Default is no rounding.
   */

  /**
   * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type
   */

  /**
   * @typedef {Object} SimpleGeometryObject
   * @property {import('../geom/Geometry.js').Type} type Type.
   * @property {Array<number>} flatCoordinates Flat coordinates.
   * @property {Array<number>|Array<Array<number>>} [ends] Ends or endss.
   * @property {import('../geom/Geometry.js').GeometryLayout} [layout] Layout.
   */

  /**
   * @typedef {Array<GeometryObject>} GeometryCollectionObject
   */

  /**
   * @typedef {SimpleGeometryObject|GeometryCollectionObject} GeometryObject
   */

  /**
   * @typedef {Object} FeatureObject
   * @property {string|number} [id] Id.
   * @property {GeometryObject} [geometry] Geometry.
   * @property {Object<string, *>} [properties] Properties.
   */

  /***
   * @template {import('../Feature.js').FeatureLike} T
   * @typedef {T extends RenderFeature ? typeof RenderFeature : typeof Feature} FeatureToFeatureClass
   */

  /***
   * @template {import("../Feature.js").FeatureClass} T
   * @typedef {T[keyof T] extends RenderFeature ? RenderFeature : Feature} FeatureClassToFeature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for feature formats.
   * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode
   * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial
   * file formats.  See the documentation for each format for more details.
   *
   * @template {import('../Feature.js').FeatureLike} [FeatureType=import("../Feature.js").default]
   * @abstract
   * @api
   */
  class FeatureFormat {
    constructor() {
      /**
       * @protected
       * @type {import("../proj/Projection.js").default|undefined}
       */
      this.dataProjection = undefined;

      /**
       * @protected
       * @type {import("../proj/Projection.js").default|undefined}
       */
      this.defaultFeatureProjection = undefined;

      /**
       * @protected
       * @type {FeatureToFeatureClass<FeatureType>}
       */
      this.featureClass = /** @type {FeatureToFeatureClass<FeatureType>} */ (
        Feature
      );

      /**
       * A list media types supported by the format in descending order of preference.
       * @type {Array<string>}
       */
      this.supportedMediaTypes = null;
    }

    /**
     * Adds the data projection to the read options.
     * @param {Document|Element|Object|string} source Source.
     * @param {ReadOptions} [options] Options.
     * @return {ReadOptions|undefined} Options.
     * @protected
     */
    getReadOptions(source, options) {
      if (options) {
        let dataProjection = options.dataProjection
          ? get$2(options.dataProjection)
          : this.readProjection(source);
        if (
          options.extent &&
          dataProjection &&
          dataProjection.getUnits() === 'tile-pixels'
        ) {
          dataProjection = get$2(dataProjection);
          dataProjection.setWorldExtent(options.extent);
        }
        options = {
          dataProjection: dataProjection,
          featureProjection: options.featureProjection,
        };
      }
      return this.adaptOptions(options);
    }

    /**
     * Sets the `dataProjection` on the options, if no `dataProjection`
     * is set.
     * @param {WriteOptions|ReadOptions|undefined} options
     *     Options.
     * @protected
     * @return {WriteOptions|ReadOptions|undefined}
     *     Updated options.
     */
    adaptOptions(options) {
      return Object.assign(
        {
          dataProjection: this.dataProjection,
          featureProjection: this.defaultFeatureProjection,
          featureClass: this.featureClass,
        },
        options,
      );
    }

    /**
     * @abstract
     * @return {Type} The format type.
     */
    getType() {
      return abstract();
    }

    /**
     * Read a single feature from a source.
     *
     * @abstract
     * @param {Document|Element|Object|string} source Source.
     * @param {ReadOptions} [options] Read options.
     * @return {FeatureType|Array<FeatureType>} Feature.
     */
    readFeature(source, options) {
      return abstract();
    }

    /**
     * Read all features from a source.
     *
     * @abstract
     * @param {Document|Element|ArrayBuffer|Object|string} source Source.
     * @param {ReadOptions} [options] Read options.
     * @return {Array<FeatureType>} Features.
     */
    readFeatures(source, options) {
      return abstract();
    }

    /**
     * Read a single geometry from a source.
     *
     * @abstract
     * @param {Document|Element|Object|string} source Source.
     * @param {ReadOptions} [options] Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometry(source, options) {
      return abstract();
    }

    /**
     * Read the projection from a source.
     *
     * @abstract
     * @param {Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default|undefined} Projection.
     */
    readProjection(source) {
      return abstract();
    }

    /**
     * Encode a feature in this format.
     *
     * @abstract
     * @param {Feature} feature Feature.
     * @param {WriteOptions} [options] Write options.
     * @return {string|ArrayBuffer} Result.
     */
    writeFeature(feature, options) {
      return abstract();
    }

    /**
     * Encode an array of features in this format.
     *
     * @abstract
     * @param {Array<Feature>} features Features.
     * @param {WriteOptions} [options] Write options.
     * @return {string|ArrayBuffer} Result.
     */
    writeFeatures(features, options) {
      return abstract();
    }

    /**
     * Write a single geometry in this format.
     *
     * @abstract
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {WriteOptions} [options] Write options.
     * @return {string|ArrayBuffer} Result.
     */
    writeGeometry(geometry, options) {
      return abstract();
    }
  }

  /**
   * @template {import("../geom/Geometry.js").default|RenderFeature} T
   * @param {T} geometry Geometry.
   * @param {boolean} write Set to true for writing, false for reading.
   * @param {WriteOptions|ReadOptions} [options] Options.
   * @return {T} Transformed geometry.
   */
  function transformGeometryWithOptions(geometry, write, options) {
    const featureProjection = options
      ? get$2(options.featureProjection)
      : null;
    const dataProjection = options ? get$2(options.dataProjection) : null;

    let transformed = geometry;
    if (
      featureProjection &&
      dataProjection &&
      !equivalent$1(featureProjection, dataProjection)
    ) {
      if (write) {
        transformed = /** @type {T} */ (geometry.clone());
      }
      const fromProjection = write ? featureProjection : dataProjection;
      const toProjection = write ? dataProjection : featureProjection;
      if (fromProjection.getUnits() === 'tile-pixels') {
        transformed.transform(fromProjection, toProjection);
      } else {
        transformed.applyTransform(getTransform(fromProjection, toProjection));
      }
    }
    if (
      write &&
      options &&
      /** @type {WriteOptions} */ (options).decimals !== undefined
    ) {
      const power = Math.pow(10, /** @type {WriteOptions} */ (options).decimals);
      // if decimals option on write, round each coordinate appropriately
      /**
       * @param {Array<number>} coordinates Coordinates.
       * @return {Array<number>} Transformed coordinates.
       */
      const transform = function (coordinates) {
        for (let i = 0, ii = coordinates.length; i < ii; ++i) {
          coordinates[i] = Math.round(coordinates[i] * power) / power;
        }
        return coordinates;
      };
      if (transformed === geometry) {
        transformed = /** @type {T} */ (geometry.clone());
      }
      transformed.applyTransform(transform);
    }
    return transformed;
  }

  /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {ReadOptions} [options] Read options.
   * @return {import("../extent.js").Extent} Transformed extent.
   */
  function transformExtentWithOptions(extent, options) {
    const featureProjection = options
      ? get$2(options.featureProjection)
      : null;
    const dataProjection = options ? get$2(options.dataProjection) : null;

    if (
      featureProjection &&
      dataProjection &&
      !equivalent$1(featureProjection, dataProjection)
    ) {
      return transformExtent(extent, dataProjection, featureProjection);
    }
    return extent;
  }

  const GeometryConstructor$1 = {
    Point: Point$1,
    LineString: LineString,
    Polygon: Polygon,
    MultiPoint: MultiPoint,
    MultiLineString: MultiLineString,
    MultiPolygon: MultiPolygon,
  };

  function orientFlatCoordinates(flatCoordinates, ends, stride) {
    if (Array.isArray(ends[0])) {
      // MultiPolagon
      if (!linearRingssAreOriented(flatCoordinates, 0, ends, stride)) {
        flatCoordinates = flatCoordinates.slice();
        orientLinearRingsArray(flatCoordinates, 0, ends, stride);
      }
      return flatCoordinates;
    }
    if (!linearRingsAreOriented(flatCoordinates, 0, ends, stride)) {
      flatCoordinates = flatCoordinates.slice();
      orientLinearRings(flatCoordinates, 0, ends, stride);
    }
    return flatCoordinates;
  }

  /**
   * @param {FeatureObject} object Feature object.
   * @param {WriteOptions|ReadOptions} [options] Options.
   * @return {RenderFeature|Array<RenderFeature>} Render feature.
   */
  function createRenderFeature(object, options) {
    const geometry = object.geometry;
    if (!geometry) {
      return [];
    }
    if (Array.isArray(geometry)) {
      return geometry
        .map((geometry) => createRenderFeature({...object, geometry}))
        .flat();
    }

    const geometryType =
      geometry.type === 'MultiPolygon' ? 'Polygon' : geometry.type;
    if (geometryType === 'GeometryCollection' || geometryType === 'Circle') {
      throw new Error('Unsupported geometry type: ' + geometryType);
    }

    const stride = geometry.layout.length;
    return transformGeometryWithOptions(
      new RenderFeature(
        geometryType,
        geometryType === 'Polygon'
          ? orientFlatCoordinates(geometry.flatCoordinates, geometry.ends, stride)
          : geometry.flatCoordinates,
        geometry.ends?.flat(),
        stride,
        object.properties || {},
        object.id,
      ).enableSimplifyTransformed(),
      false,
      options,
    );
  }

  /**
   * @param {GeometryObject|null} object Geometry object.
   * @param {WriteOptions|ReadOptions} [options] Options.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  function createGeometry(object, options) {
    if (!object) {
      return null;
    }
    if (Array.isArray(object)) {
      const geometries = object.map((geometry) =>
        createGeometry(geometry, options),
      );
      return new GeometryCollection(geometries);
    }
    const Geometry = GeometryConstructor$1[object.type];
    return transformGeometryWithOptions(
      new Geometry(object.flatCoordinates, object.layout || 'XY', object.ends),
      false,
      options,
    );
  }

  /**
   * @module ol/format/XMLFeature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for XML feature formats.
   *
   * @abstract
   */
  class XMLFeature extends FeatureFormat {
    constructor() {
      super();

      /**
       * @type {XMLSerializer}
       * @private
       */
      this.xmlSerializer_ = getXMLSerializer();
    }

    /**
     * @return {import("./Feature.js").Type} Format.
     * @override
     */
    getType() {
      return 'xml';
    }

    /**
     * Read a single feature.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../Feature.js").default} Feature.
     * @api
     * @override
     */
    readFeature(source, options) {
      if (!source) {
        return null;
      }
      if (typeof source === 'string') {
        const doc = parse$1(source);
        return this.readFeatureFromDocument(doc, options);
      }
      if (isDocument(source)) {
        return this.readFeatureFromDocument(
          /** @type {Document} */ (source),
          options,
        );
      }
      return this.readFeatureFromNode(/** @type {Element} */ (source), options);
    }

    /**
     * @param {Document} doc Document.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromDocument(doc, options) {
      const features = this.readFeaturesFromDocument(doc, options);
      if (features.length > 0) {
        return features[0];
      }
      return null;
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromNode(node, options) {
      return null; // not implemented
    }

    /**
     * Read all features from a feature collection.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     * @override
     */
    readFeatures(source, options) {
      if (!source) {
        return [];
      }
      if (typeof source === 'string') {
        const doc = parse$1(source);
        return this.readFeaturesFromDocument(doc, options);
      }
      if (isDocument(source)) {
        return this.readFeaturesFromDocument(
          /** @type {Document} */ (source),
          options,
        );
      }
      return this.readFeaturesFromNode(/** @type {Element} */ (source), options);
    }

    /**
     * @param {Document} doc Document.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromDocument(doc, options) {
      /** @type {Array<import("../Feature.js").default>} */
      const features = [];
      for (let n = doc.firstChild; n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          extend$3(
            features,
            this.readFeaturesFromNode(/** @type {Element} */ (n), options),
          );
        }
      }
      return features;
    }

    /**
     * @abstract
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromNode(node, options) {
      return abstract();
    }

    /**
     * Read a single geometry from a source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @override
     */
    readGeometry(source, options) {
      if (!source) {
        return null;
      }
      if (typeof source === 'string') {
        const doc = parse$1(source);
        return this.readGeometryFromDocument(doc, options);
      }
      if (isDocument(source)) {
        return this.readGeometryFromDocument(
          /** @type {Document} */ (source),
          options,
        );
      }
      return this.readGeometryFromNode(/** @type {Element} */ (source), options);
    }

    /**
     * @param {Document} doc Document.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromDocument(doc, options) {
      return null; // not implemented
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromNode(node, options) {
      return null; // not implemented
    }

    /**
     * Read the projection from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     * @override
     */
    readProjection(source) {
      if (!source) {
        return null;
      }
      if (typeof source === 'string') {
        const doc = parse$1(source);
        return this.readProjectionFromDocument(doc);
      }
      if (isDocument(source)) {
        return this.readProjectionFromDocument(/** @type {Document} */ (source));
      }
      return this.readProjectionFromNode(/** @type {Element} */ (source));
    }

    /**
     * @param {Document} doc Document.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromDocument(doc) {
      return this.dataProjection;
    }

    /**
     * @param {Element} node Node.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromNode(node) {
      return this.dataProjection;
    }

    /**
     * Encode a feature as string.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded feature.
     * @override
     */
    writeFeature(feature, options) {
      const node = this.writeFeatureNode(feature, options);
      return this.xmlSerializer_.serializeToString(node);
    }

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @protected
     * @return {Node} Node.
     */
    writeFeatureNode(feature, options) {
      return null; // not implemented
    }

    /**
     * Encode an array of features as string.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Result.
     * @api
     * @override
     */
    writeFeatures(features, options) {
      const node = this.writeFeaturesNode(features, options);
      return this.xmlSerializer_.serializeToString(node);
    }

    /**
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @return {Node} Node.
     */
    writeFeaturesNode(features, options) {
      return null; // not implemented
    }

    /**
     * Encode a geometry as string.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded geometry.
     * @override
     */
    writeGeometry(geometry, options) {
      const node = this.writeGeometryNode(geometry, options);
      return this.xmlSerializer_.serializeToString(node);
    }

    /**
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @return {Node} Node.
     */
    writeGeometryNode(geometry, options) {
      return null; // not implemented
    }
  }

  /**
   * @module ol/format/OSMXML
   */
  // FIXME add typedef for stack state objects

  /**
   * @const
   * @type {Array<null>}
   */
  const NAMESPACE_URIS$5 = [null];

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const WAY_PARSERS = makeStructureNS(NAMESPACE_URIS$5, {
    'nd': readNd,
    'tag': readTag,
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const PARSERS$3 = makeStructureNS(NAMESPACE_URIS$5, {
    'node': readNode,
    'way': readWay,
  });

  /**
   * @classdesc
   * Feature format for reading data in the
   * [OSMXML format](https://wiki.openstreetmap.org/wiki/OSM_XML).
   *
   * @api
   */
  class OSMXML extends XMLFeature {
    constructor() {
      super();

      /**
       * @type {import("../proj/Projection.js").default}
       */
      this.dataProjection = get$2('EPSG:4326');
    }

    /**
     * @protected
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @override
     */
    readFeaturesFromNode(node, options) {
      options = this.getReadOptions(node, options);
      if (node.localName == 'osm') {
        const state = pushParseAndPop(
          {
            nodes: {},
            ways: [],
            features: [],
          },
          PARSERS$3,
          node,
          [options],
        );
        // parse nodes in ways
        for (let j = 0; j < state.ways.length; j++) {
          const values = /** @type {Object} */ (state.ways[j]);
          /** @type {Array<number>} */
          const flatCoordinates = values.flatCoordinates;
          if (!flatCoordinates.length) {
            for (let i = 0, ii = values.ndrefs.length; i < ii; i++) {
              const point = state.nodes[values.ndrefs[i]];
              extend$3(flatCoordinates, point);
            }
          }
          let geometry;
          if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {
            // closed way
            geometry = new Polygon(flatCoordinates, 'XY', [
              flatCoordinates.length,
            ]);
          } else {
            geometry = new LineString(flatCoordinates, 'XY');
          }
          transformGeometryWithOptions(geometry, false, options);
          const feature = new Feature(geometry);
          if (values.id !== undefined) {
            feature.setId(values.id);
          }
          feature.setProperties(values.tags, true);
          state.features.push(feature);
        }
        if (state.features) {
          return state.features;
        }
      }
      return [];
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const NODE_PARSERS = makeStructureNS(NAMESPACE_URIS$5, {
    'tag': readTag,
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function readNode(node, objectStack) {
    const options = /** @type {import("./Feature.js").ReadOptions} */ (
      objectStack[0]
    );
    const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const id = node.getAttribute('id');
    /** @type {import("../coordinate.js").Coordinate} */
    const coordinates = [
      parseFloat(node.getAttribute('lon')),
      parseFloat(node.getAttribute('lat')),
    ];
    state.nodes[id] = coordinates;

    const values = pushParseAndPop(
      {
        tags: {},
      },
      NODE_PARSERS,
      node,
      objectStack,
    );
    if (!isEmpty$1(values.tags)) {
      const geometry = new Point$1(coordinates);
      transformGeometryWithOptions(geometry, false, options);
      const feature = new Feature(geometry);
      if (id !== undefined) {
        feature.setId(id);
      }
      feature.setProperties(values.tags, true);
      state.features.push(feature);
    }
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function readWay(node, objectStack) {
    const id = node.getAttribute('id');
    const values = pushParseAndPop(
      {
        id: id,
        ndrefs: [],
        flatCoordinates: [],
        tags: {},
      },
      WAY_PARSERS,
      node,
      objectStack,
    );
    const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    state.ways.push(values);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function readNd(node, objectStack) {
    const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    values.ndrefs.push(node.getAttribute('ref'));
    if (node.hasAttribute('lon') && node.hasAttribute('lat')) {
      values.flatCoordinates.push(parseFloat(node.getAttribute('lon')));
      values.flatCoordinates.push(parseFloat(node.getAttribute('lat')));
    }
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function readTag(node, objectStack) {
    const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    values.tags[node.getAttribute('k')] = node.getAttribute('v');
  }

  /**
   * @module ol/TileRange
   */

  /**
   * A representation of a contiguous block of tiles.  A tile range is specified
   * by its min/max tile coordinates and is inclusive of coordinates.
   */
  class TileRange {
    /**
     * @param {number} minX Minimum X.
     * @param {number} maxX Maximum X.
     * @param {number} minY Minimum Y.
     * @param {number} maxY Maximum Y.
     */
    constructor(minX, maxX, minY, maxY) {
      /**
       * @type {number}
       */
      this.minX = minX;

      /**
       * @type {number}
       */
      this.maxX = maxX;

      /**
       * @type {number}
       */
      this.minY = minY;

      /**
       * @type {number}
       */
      this.maxY = maxY;
    }

    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {boolean} Contains tile coordinate.
     */
    contains(tileCoord) {
      return this.containsXY(tileCoord[1], tileCoord[2]);
    }

    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Contains.
     */
    containsTileRange(tileRange) {
      return (
        this.minX <= tileRange.minX &&
        tileRange.maxX <= this.maxX &&
        this.minY <= tileRange.minY &&
        tileRange.maxY <= this.maxY
      );
    }

    /**
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @return {boolean} Contains coordinate.
     */
    containsXY(x, y) {
      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
    }

    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Equals.
     */
    equals(tileRange) {
      return (
        this.minX == tileRange.minX &&
        this.minY == tileRange.minY &&
        this.maxX == tileRange.maxX &&
        this.maxY == tileRange.maxY
      );
    }

    /**
     * @param {TileRange} tileRange Tile range.
     */
    extend(tileRange) {
      if (tileRange.minX < this.minX) {
        this.minX = tileRange.minX;
      }
      if (tileRange.maxX > this.maxX) {
        this.maxX = tileRange.maxX;
      }
      if (tileRange.minY < this.minY) {
        this.minY = tileRange.minY;
      }
      if (tileRange.maxY > this.maxY) {
        this.maxY = tileRange.maxY;
      }
    }

    /**
     * @return {number} Height.
     */
    getHeight() {
      return this.maxY - this.minY + 1;
    }

    /**
     * @return {import("./size.js").Size} Size.
     */
    getSize() {
      return [this.getWidth(), this.getHeight()];
    }

    /**
     * @return {number} Width.
     */
    getWidth() {
      return this.maxX - this.minX + 1;
    }

    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Intersects.
     */
    intersects(tileRange) {
      return (
        this.minX <= tileRange.maxX &&
        this.maxX >= tileRange.minX &&
        this.minY <= tileRange.maxY &&
        this.maxY >= tileRange.minY
      );
    }
  }

  /**
   * @param {number} minX Minimum X.
   * @param {number} maxX Maximum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxY Maximum Y.
   * @param {TileRange} [tileRange] TileRange.
   * @return {TileRange} Tile range.
   */
  function createOrUpdate$1(minX, maxX, minY, maxY, tileRange) {
    if (tileRange !== undefined) {
      tileRange.minX = minX;
      tileRange.maxX = maxX;
      tileRange.minY = minY;
      tileRange.maxY = maxY;
      return tileRange;
    }
    return new TileRange(minX, maxX, minY, maxY);
  }

  /**
   * @module ol/tilecoord
   */

  /**
   * An array of three numbers representing the location of a tile in a tile
   * grid. The order is `z` (zoom level), `x` (column), and `y` (row).
   * @typedef {Array<number>} TileCoord
   * @api
   */

  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {TileCoord} [tileCoord] Tile coordinate.
   * @return {TileCoord} Tile coordinate.
   */
  function createOrUpdate(z, x, y, tileCoord) {
    if (tileCoord !== undefined) {
      tileCoord[0] = z;
      tileCoord[1] = x;
      tileCoord[2] = y;
      return tileCoord;
    }
    return [z, x, y];
  }

  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {string} Key.
   */
  function getKeyZXY(z, x, y) {
    return z + '/' + x + '/' + y;
  }

  /**
   * @param {TileCoord} tileCoord Tile coord.
   * @return {number} Hash.
   */
  function hash(tileCoord) {
    return hashZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
  }

  /**
   * @param {number} z The tile z coordinate.
   * @param {number} x The tile x coordinate.
   * @param {number} y The tile y coordinate.
   * @return {number} Hash.
   */
  function hashZXY(z, x, y) {
    return (x << z) + y;
  }

  /**
   * @param {TileCoord} tileCoord Tile coordinate.
   * @param {!import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {boolean} Tile coordinate is within extent and zoom level range.
   */
  function withinExtentAndZ(tileCoord, tileGrid) {
    const z = tileCoord[0];
    const x = tileCoord[1];
    const y = tileCoord[2];

    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {
      return false;
    }
    const tileRange = tileGrid.getFullTileRange(z);
    if (!tileRange) {
      return true;
    }
    return tileRange.containsXY(x, y);
  }

  /**
   * @module ol/tilegrid/TileGrid
   */

  /**
   * @private
   * @type {import("../tilecoord.js").TileCoord}
   */
  const tmpTileCoord = [0, 0, 0];

  /**
   * Number of decimal digits to consider in integer values when rounding.
   * @type {number}
   */
  const DECIMALS$1 = 5;

  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
   * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or
   * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
   * @property {number} [minZoom=0] Minimum zoom.
   * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
   * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not
   * specified, `extent` or `origins` must be provided.
   * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
   * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or
   * `origin` must be provided.
   * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
   * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
   * array will have a length of `maxZoom + 1`.
   * @property {Array<import("../size.js").Size>} [sizes] Number of tile rows and columns
   * of the grid for each zoom level. If specified the values
   * define each zoom level's extent together with the `origin` or `origins`.
   * A grid `extent` can be configured in addition, and will further limit the extent
   * for which tile requests are made by sources. If the bottom-left corner of
   * an extent is used as `origin` or `origins`, then the `y` value must be
   * negative because OpenLayers tile coordinates use the top left as the origin.
   * @property {number|import("../size.js").Size} [tileSize] Tile size.
   * Default is `[256, 256]`.
   * @property {Array<number|import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * tile size.
   */

  /**
   * @classdesc
   * Base class for setting the grid pattern for sources accessing tiled-image
   * servers.
   * @api
   */
  class TileGrid {
    /**
     * @param {Options} options Tile grid options.
     */
    constructor(options) {
      /**
       * @protected
       * @type {number}
       */
      this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;

      /**
       * @private
       * @type {!Array<number>}
       */
      this.resolutions_ = options.resolutions;
      assert$1(
        isSorted(
          this.resolutions_,
          /**
           * @param {number} a First resolution
           * @param {number} b Second resolution
           * @return {number} Comparison result
           */
          (a, b) => b - a),
        '`resolutions` must be sorted in descending order',
      );

      // check if we've got a consistent zoom factor and origin
      let zoomFactor;
      if (!options.origins) {
        for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {
          if (!zoomFactor) {
            zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
          } else {
            if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
              zoomFactor = undefined;
              break;
            }
          }
        }
      }

      /**
       * @private
       * @type {number|undefined}
       */
      this.zoomFactor_ = zoomFactor;

      /**
       * @protected
       * @type {number}
       */
      this.maxZoom = this.resolutions_.length - 1;

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate|null}
       */
      this.origin_ = options.origin !== undefined ? options.origin : null;

      /**
       * @private
       * @type {Array<import("../coordinate.js").Coordinate>}
       */
      this.origins_ = null;
      if (options.origins !== undefined) {
        this.origins_ = options.origins;
        assert$1(
          this.origins_.length == this.resolutions_.length,
          'Number of `origins` and `resolutions` must be equal',
        );
      }

      const extent = options.extent;

      if (extent !== undefined && !this.origin_ && !this.origins_) {
        this.origin_ = getTopLeft(extent);
      }

      assert$1(
        (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),
        'Either `origin` or `origins` must be configured, never both',
      );

      /**
       * @private
       * @type {Array<number|import("../size.js").Size>}
       */
      this.tileSizes_ = null;
      if (options.tileSizes !== undefined) {
        this.tileSizes_ = options.tileSizes;
        assert$1(
          this.tileSizes_.length == this.resolutions_.length,
          'Number of `tileSizes` and `resolutions` must be equal',
        );
      }

      /**
       * @private
       * @type {number|import("../size.js").Size}
       */
      this.tileSize_ =
        options.tileSize !== undefined
          ? options.tileSize
          : !this.tileSizes_
            ? DEFAULT_TILE_SIZE
            : null;
      assert$1(
        (!this.tileSize_ && this.tileSizes_) ||
          (this.tileSize_ && !this.tileSizes_),
        'Either `tileSize` or `tileSizes` must be configured, never both',
      );

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = extent !== undefined ? extent : null;

      /**
       * @private
       * @type {Array<import("../TileRange.js").default>}
       */
      this.fullTileRanges_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.tmpSize_ = [0, 0];

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.tmpExtent_ = [0, 0, 0, 0];

      if (options.sizes !== undefined) {
        this.fullTileRanges_ = options.sizes.map((size, z) => {
          const tileRange = new TileRange(
            Math.min(0, size[0]),
            Math.max(size[0] - 1, -1),
            Math.min(0, size[1]),
            Math.max(size[1] - 1, -1),
          );
          if (extent) {
            const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);
            tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);
            tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);
            tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);
            tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);
          }
          return tileRange;
        });
      } else if (extent) {
        this.calculateTileRanges_(extent);
      }
    }

    /**
     * Call a function with each tile coordinate for a given extent and zoom level.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} zoom Integer zoom level.
     * @param {function(import("../tilecoord.js").TileCoord): void} callback Function called with each tile coordinate.
     * @api
     */
    forEachTileCoord(extent, zoom, callback) {
      const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
      for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {
        for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {
          callback([zoom, i, j]);
        }
      }
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {function(number, import("../TileRange.js").default): boolean} callback Callback.
     * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
     * @param {import("../extent.js").Extent} [tempExtent] Temporary import("../extent.js").Extent object.
     * @return {boolean} Callback succeeded.
     */
    forEachTileCoordParentTileRange(
      tileCoord,
      callback,
      tempTileRange,
      tempExtent,
    ) {
      let tileRange, x, y;
      let tileCoordExtent = null;
      let z = tileCoord[0] - 1;
      if (this.zoomFactor_ === 2) {
        x = tileCoord[1];
        y = tileCoord[2];
      } else {
        tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);
      }
      while (z >= this.minZoom) {
        if (x !== undefined && y !== undefined) {
          x = Math.floor(x / 2);
          y = Math.floor(y / 2);
          tileRange = createOrUpdate$1(x, x, y, y, tempTileRange);
        } else {
          tileRange = this.getTileRangeForExtentAndZ(
            tileCoordExtent,
            z,
            tempTileRange,
          );
        }
        if (callback(z, tileRange)) {
          return true;
        }
        --z;
      }
      return false;
    }

    /**
     * Get the extent for this tile grid, if it was configured.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent() {
      return this.extent_;
    }

    /**
     * Get the maximum zoom level for the grid.
     * @return {number} Max zoom.
     * @api
     */
    getMaxZoom() {
      return this.maxZoom;
    }

    /**
     * Get the minimum zoom level for the grid.
     * @return {number} Min zoom.
     * @api
     */
    getMinZoom() {
      return this.minZoom;
    }

    /**
     * Get the origin for the grid at the given zoom level.
     * @param {number} z Integer zoom level.
     * @return {import("../coordinate.js").Coordinate} Origin.
     * @api
     */
    getOrigin(z) {
      if (this.origin_) {
        return this.origin_;
      }
      return this.origins_[z];
    }

    /**
     * Get the resolution for the given zoom level.
     * @param {number} z Integer zoom level.
     * @return {number} Resolution.
     * @api
     */
    getResolution(z) {
      return this.resolutions_[z];
    }

    /**
     * Get the list of resolutions for the tile grid.
     * @return {Array<number>} Resolutions.
     * @api
     */
    getResolutions() {
      return this.resolutions_;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
     * @param {import("../extent.js").Extent} [tempExtent] Temporary import("../extent.js").Extent object.
     * @return {import("../TileRange.js").default|null} Tile range.
     */
    getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {
      if (tileCoord[0] < this.maxZoom) {
        if (this.zoomFactor_ === 2) {
          const minX = tileCoord[1] * 2;
          const minY = tileCoord[2] * 2;
          return createOrUpdate$1(
            minX,
            minX + 1,
            minY,
            minY + 1,
            tempTileRange,
          );
        }
        const tileCoordExtent = this.getTileCoordExtent(
          tileCoord,
          tempExtent || this.tmpExtent_,
        );
        return this.getTileRangeForExtentAndZ(
          tileCoordExtent,
          tileCoord[0] + 1,
          tempTileRange,
        );
      }
      return null;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {number} z Integer zoom level.
     * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
     * @return {import("../TileRange.js").default|null} Tile range.
     */
    getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {
      if (z > this.maxZoom || z < this.minZoom) {
        return null;
      }

      const tileCoordZ = tileCoord[0];
      const tileCoordX = tileCoord[1];
      const tileCoordY = tileCoord[2];

      if (z === tileCoordZ) {
        return createOrUpdate$1(
          tileCoordX,
          tileCoordY,
          tileCoordX,
          tileCoordY,
          tempTileRange,
        );
      }

      if (this.zoomFactor_) {
        const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);
        const minX = Math.floor(tileCoordX * factor);
        const minY = Math.floor(tileCoordY * factor);
        if (z < tileCoordZ) {
          return createOrUpdate$1(minX, minX, minY, minY, tempTileRange);
        }

        const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;
        const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;
        return createOrUpdate$1(minX, maxX, minY, maxY, tempTileRange);
      }

      const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);
      return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);
    }

    /**
     * Get a tile range for the given extent and integer zoom level.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} z Integer zoom level.
     * @param {import("../TileRange.js").default} [tempTileRange] Temporary tile range object.
     * @return {import("../TileRange.js").default} Tile range.
     */
    getTileRangeForExtentAndZ(extent, z, tempTileRange) {
      this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);
      const minX = tmpTileCoord[1];
      const minY = tmpTileCoord[2];
      this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);
      const maxX = tmpTileCoord[1];
      const maxY = tmpTileCoord[2];
      return createOrUpdate$1(minX, maxX, minY, maxY, tempTileRange);
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {import("../coordinate.js").Coordinate} Tile center.
     */
    getTileCoordCenter(tileCoord) {
      const origin = this.getOrigin(tileCoord[0]);
      const resolution = this.getResolution(tileCoord[0]);
      const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
      return [
        origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
        origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,
      ];
    }

    /**
     * Get the extent of a tile coordinate.
     *
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../extent.js").Extent} [tempExtent] Temporary extent object.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getTileCoordExtent(tileCoord, tempExtent) {
      const origin = this.getOrigin(tileCoord[0]);
      const resolution = this.getResolution(tileCoord[0]);
      const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
      const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
      const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;
      const maxX = minX + tileSize[0] * resolution;
      const maxY = minY + tileSize[1] * resolution;
      return createOrUpdate$2(minX, minY, maxX, maxY, tempExtent);
    }

    /**
     * Get the tile coordinate for the given map coordinate and resolution.  This
     * method considers that coordinates that intersect tile boundaries should be
     * assigned the higher tile coordinate.
     *
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Destination import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @api
     */
    getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {
      return this.getTileCoordForXYAndResolution_(
        coordinate[0],
        coordinate[1],
        resolution,
        false,
        opt_tileCoord,
      );
    }

    /**
     * Note that this method should not be called for resolutions that correspond
     * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {number} resolution Resolution (for a non-integer zoom level).
     * @param {boolean} reverseIntersectionPolicy Instead of letting edge
     *     intersections go to the higher tile coordinate, let edge intersections
     *     go to the lower tile coordinate.
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Temporary import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @private
     */
    getTileCoordForXYAndResolution_(
      x,
      y,
      resolution,
      reverseIntersectionPolicy,
      opt_tileCoord,
    ) {
      const z = this.getZForResolution(resolution);
      const scale = resolution / this.getResolution(z);
      const origin = this.getOrigin(z);
      const tileSize = toSize(this.getTileSize(z), this.tmpSize_);

      let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];
      let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];

      if (reverseIntersectionPolicy) {
        tileCoordX = ceil(tileCoordX, DECIMALS$1) - 1;
        tileCoordY = ceil(tileCoordY, DECIMALS$1) - 1;
      } else {
        tileCoordX = floor(tileCoordX, DECIMALS$1);
        tileCoordY = floor(tileCoordY, DECIMALS$1);
      }

      return createOrUpdate(z, tileCoordX, tileCoordY, opt_tileCoord);
    }

    /**
     * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
     * they should have separate implementations.  This method is for integer zoom
     * levels.  The other method should only be called for resolutions corresponding
     * to non-integer zoom levels.
     * @param {number} x Map x coordinate.
     * @param {number} y Map y coordinate.
     * @param {number} z Integer zoom level.
     * @param {boolean} reverseIntersectionPolicy Instead of letting edge
     *     intersections go to the higher tile coordinate, let edge intersections
     *     go to the lower tile coordinate.
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Temporary import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @private
     */
    getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
      const origin = this.getOrigin(z);
      const resolution = this.getResolution(z);
      const tileSize = toSize(this.getTileSize(z), this.tmpSize_);

      let tileCoordX = (x - origin[0]) / resolution / tileSize[0];
      let tileCoordY = (origin[1] - y) / resolution / tileSize[1];

      if (reverseIntersectionPolicy) {
        tileCoordX = ceil(tileCoordX, DECIMALS$1) - 1;
        tileCoordY = ceil(tileCoordY, DECIMALS$1) - 1;
      } else {
        tileCoordX = floor(tileCoordX, DECIMALS$1);
        tileCoordY = floor(tileCoordY, DECIMALS$1);
      }

      return createOrUpdate(z, tileCoordX, tileCoordY, opt_tileCoord);
    }

    /**
     * Get a tile coordinate given a map coordinate and zoom level.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} z Integer zoom level, e.g. the result of a `getZForResolution()` method call
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Destination import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @api
     */
    getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {
      return this.getTileCoordForXYAndZ_(
        coordinate[0],
        coordinate[1],
        z,
        false,
        opt_tileCoord,
      );
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {number} Tile resolution.
     */
    getTileCoordResolution(tileCoord) {
      return this.resolutions_[tileCoord[0]];
    }

    /**
     * Get the tile size for a zoom level. The type of the return value matches the
     * `tileSize` or `tileSizes` that the tile grid was configured with. To always
     * get an {@link import("../size.js").Size}, run the result through {@link module:ol/size.toSize}.
     * @param {number} z Z.
     * @return {number|import("../size.js").Size} Tile size.
     * @api
     */
    getTileSize(z) {
      if (this.tileSize_) {
        return this.tileSize_;
      }
      return this.tileSizes_[z];
    }

    /**
     * @param {number} z Zoom level.
     * @return {import("../TileRange.js").default|null} Extent tile range for the specified zoom level.
     */
    getFullTileRange(z) {
      if (!this.fullTileRanges_) {
        return this.extent_
          ? this.getTileRangeForExtentAndZ(this.extent_, z)
          : null;
      }
      return this.fullTileRanges_[z];
    }

    /**
     * @param {number} resolution Resolution.
     * @param {number|import("../array.js").NearestDirectionFunction} [opt_direction]
     *     If 0, the nearest resolution will be used.
     *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the
     *     nearest lower resolution (higher Z) will be used. Default is 0.
     *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.
     *
     * For example to change tile Z at the midpoint of zoom levels
     * ```js
     * function(value, high, low) {
     *   return value - low * Math.sqrt(high / low);
     * }
     * ```
     * @return {number} Z.
     * @api
     */
    getZForResolution(resolution, opt_direction) {
      const z = linearFindNearest(
        this.resolutions_,
        resolution,
        opt_direction || 0,
      );
      return clamp(z, this.minZoom, this.maxZoom);
    }

    /**
     * The tile with the provided tile coordinate intersects the given viewport.
     * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.
     * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.
     * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.
     */
    tileCoordIntersectsViewport(tileCoord, viewport) {
      return intersectsLinearRing(
        viewport,
        0,
        viewport.length,
        2,
        this.getTileCoordExtent(tileCoord),
      );
    }

    /**
     * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
     * @private
     */
    calculateTileRanges_(extent) {
      const length = this.resolutions_.length;
      const fullTileRanges = new Array(length);
      for (let z = this.minZoom; z < length; ++z) {
        fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
      }
      this.fullTileRanges_ = fullTileRanges;
    }
  }

  /**
   * @module ol/tilegrid/WMTS
   */


  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles
   * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.
   * When no `origin` or `origins` are configured, the `origin` will be set to the
   * top-left corner of the extent.
   * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e.
   * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left
   * to right and downwards. If not specified, `extent` or `origins` must be provided.
   * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins,
   * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If
   * given, the array length should match the length of the `resolutions` array, i.e.
   * each resolution can have a different origin. Tile coordinates increase left to
   * right and downwards. If not specified, `extent` or `origin` must be provided.
   * @property {!Array<number>} resolutions Resolutions. The array index of each
   * resolution needs to match the zoom level. This means that even if a `minZoom`
   * is configured, the resolutions array will have a length of `maxZoom + 1`
   * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs
   * to match the length of the `resolutions` array.
   * @property {Array<import("../size.js").Size>} [sizes] Number of tile rows and columns
   * of the grid for each zoom level. The values here are the `TileMatrixWidth` and
   * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and
   * define each zoom level's extent together with the `origin` or `origins`.
   * A grid `extent` can be configured in addition, and will further limit the extent for
   * which tile requests are made by sources. If the bottom-left corner of
   * an extent is used as `origin` or `origins`, then the `y` value must be
   * negative because OpenLayers tile coordinates use the top left as the origin.
   * @property {number|import("../size.js").Size} [tileSize] Tile size.
   * @property {Array<number|import("../size.js").Size>} [tileSizes] Tile sizes. The length of
   * this array needs to match the length of the `resolutions` array.
   */

  /**
   * @classdesc
   * Set the grid pattern for sources accessing WMTS tiled-image servers.
   * @api
   */
  class WMTSTileGrid extends TileGrid {
    /**
     * @param {Options} options WMTS options.
     */
    constructor(options) {
      super({
        extent: options.extent,
        origin: options.origin,
        origins: options.origins,
        resolutions: options.resolutions,
        tileSize: options.tileSize,
        tileSizes: options.tileSizes,
        sizes: options.sizes,
      });

      /**
       * @private
       * @type {!Array<string>}
       */
      this.matrixIds_ = options.matrixIds;
    }

    /**
     * @param {number} z Z.
     * @return {string} MatrixId..
     */
    getMatrixId(z) {
      return this.matrixIds_[z];
    }

    /**
     * Get the list of matrix identifiers.
     * @return {Array<string>} MatrixIds.
     * @api
     */
    getMatrixIds() {
      return this.matrixIds_;
    }
  }

  /**
   * @module ol/control/FullScreen
   */

  const events = ['fullscreenchange', 'webkitfullscreenchange'];

  /**
   * @enum {string}
   */
  const FullScreenEventType = {
    /**
     * Triggered after the map entered fullscreen.
     * @event FullScreenEventType#enterfullscreen
     * @api
     */
    ENTERFULLSCREEN: 'enterfullscreen',

    /**
     * Triggered after the map leave fullscreen.
     * @event FullScreenEventType#leavefullscreen
     * @api
     */
    LEAVEFULLSCREEN: 'leavefullscreen',
  };

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes|
   *     'enterfullscreen'|'leavefullscreen', import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|
   *     'enterfullscreen'|'leavefullscreen'|import("../ObjectEventType").Types, Return>} FullScreenOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-full-screen'] CSS class name.
   * @property {string|Text|HTMLElement} [label='\u2922'] Text label to use for the button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|Text|HTMLElement} [labelActive='\u00d7'] Text label to use for the
   * button when full-screen is active.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [activeClassName=className + '-true'] CSS class name for the button
   * when full-screen is active.
   * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button
   * when full-screen is inactive.
   * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.
   * @property {boolean} [keys=false] Full keyboard access.
   * @property {HTMLElement|string} [target] Specify a target if you want the
   * control to be rendered outside of the map's viewport.
   * @property {HTMLElement|string} [source] The element to be displayed
   * fullscreen. When not provided, the element containing the map viewport will
   * be displayed fullscreen.
   */

  /**
   * @classdesc
   * Provides a button that when clicked fills up the full screen with the map.
   * The full screen source element is by default the element containing the map viewport unless
   * overridden by providing the `source` option. In which case, the dom
   * element introduced using this parameter will be displayed in full screen.
   *
   * When in full screen mode, a close button is shown to exit full screen mode.
   * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to
   * toggle the map in full screen mode.
   *
   * @fires FullScreenEventType#enterfullscreen
   * @fires FullScreenEventType#leavefullscreen
   * @api
   */
  class FullScreen extends Control {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        target: options.target,
      });

      /***
       * @type {FullScreenOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {FullScreenOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {FullScreenOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {boolean}
       */
      this.keys_ = options.keys !== undefined ? options.keys : false;

      /**
       * @private
       * @type {HTMLElement|string|undefined}
       */
      this.source_ = options.source;

      /**
       * @type {boolean}
       * @private
       */
      this.isInFullscreen_ = false;

      /**
       * @private
       */
      this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this);

      /**
       * @private
       * @type {string}
       */
      this.cssClassName_ =
        options.className !== undefined ? options.className : 'ol-full-screen';

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.documentListeners_ = [];

      /**
       * @private
       * @type {Array<string>}
       */
      this.activeClassName_ =
        options.activeClassName !== undefined
          ? options.activeClassName.split(' ')
          : [this.cssClassName_ + '-true'];

      /**
       * @private
       * @type {Array<string>}
       */
      this.inactiveClassName_ =
        options.inactiveClassName !== undefined
          ? options.inactiveClassName.split(' ')
          : [this.cssClassName_ + '-false'];

      const label = options.label !== undefined ? options.label : '\u2922';

      /**
       * @private
       * @type {Text|HTMLElement}
       */
      this.labelNode_ =
        typeof label === 'string' ? document.createTextNode(label) : label;

      const labelActive =
        options.labelActive !== undefined ? options.labelActive : '\u00d7';

      /**
       * @private
       * @type {Text|HTMLElement}
       */
      this.labelActiveNode_ =
        typeof labelActive === 'string'
          ? document.createTextNode(labelActive)
          : labelActive;

      const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';

      /**
       * @private
       * @type {HTMLElement}
       */
      this.button_ = document.createElement('button');
      this.button_.title = tipLabel;
      this.button_.setAttribute('type', 'button');
      this.button_.appendChild(this.labelNode_);
      this.button_.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this),
        false,
      );
      this.setClassName_(this.button_, this.isInFullscreen_);

      this.element.className = `${this.cssClassName_} ${CLASS_UNSELECTABLE} ${CLASS_CONTROL}`;
      this.element.appendChild(this.button_);
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleFullScreen_();
    }

    /**
     * @private
     */
    handleFullScreen_() {
      const map = this.getMap();
      if (!map) {
        return;
      }
      const doc = map.getOwnerDocument();
      if (!isFullScreenSupported(doc)) {
        return;
      }
      if (isFullScreen(doc)) {
        exitFullScreen(doc);
      } else {
        let element;
        if (this.source_) {
          element =
            typeof this.source_ === 'string'
              ? doc.getElementById(this.source_)
              : this.source_;
        } else {
          element = map.getTargetElement();
        }
        if (this.keys_) {
          requestFullScreenWithKeys(element);
        } else {
          requestFullScreen(element);
        }
      }
    }

    /**
     * @private
     */
    handleFullScreenChange_() {
      const map = this.getMap();
      if (!map) {
        return;
      }
      const wasInFullscreen = this.isInFullscreen_;
      this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());
      if (wasInFullscreen !== this.isInFullscreen_) {
        this.setClassName_(this.button_, this.isInFullscreen_);
        if (this.isInFullscreen_) {
          replaceNode(this.labelActiveNode_, this.labelNode_);
          this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);
        } else {
          replaceNode(this.labelNode_, this.labelActiveNode_);
          this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);
        }
        map.updateSize();
      }
    }

    /**
     * @param {HTMLElement} element Target element
     * @param {boolean} fullscreen True if fullscreen class name should be active
     * @private
     */
    setClassName_(element, fullscreen) {
      if (fullscreen) {
        element.classList.remove(...this.inactiveClassName_);
        element.classList.add(...this.activeClassName_);
      } else {
        element.classList.remove(...this.activeClassName_);
        element.classList.add(...this.inactiveClassName_);
      }
    }

    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     * @override
     */
    setMap(map) {
      const oldMap = this.getMap();
      if (oldMap) {
        oldMap.removeChangeListener(
          MapProperty.TARGET,
          this.boundHandleMapTargetChange_,
        );
      }

      super.setMap(map);

      this.handleMapTargetChange_();
      if (map) {
        map.addChangeListener(
          MapProperty.TARGET,
          this.boundHandleMapTargetChange_,
        );
      }
    }

    /**
     * @private
     */
    handleMapTargetChange_() {
      const listeners = this.documentListeners_;
      for (let i = 0, ii = listeners.length; i < ii; ++i) {
        unlistenByKey(listeners[i]);
      }
      listeners.length = 0;

      const map = this.getMap();
      if (map) {
        const doc = map.getOwnerDocument();
        if (isFullScreenSupported(doc)) {
          this.element.classList.remove(CLASS_UNSUPPORTED);
        } else {
          this.element.classList.add(CLASS_UNSUPPORTED);
        }

        for (let i = 0, ii = events.length; i < ii; ++i) {
          listeners.push(
            listen(doc, events[i], this.handleFullScreenChange_, this),
          );
        }
        this.handleFullScreenChange_();
      }
    }
  }

  /**
   * @param {Document} doc The root document to check.
   * @return {boolean} Fullscreen is supported by the current platform.
   */
  function isFullScreenSupported(doc) {
    const body = doc.body;
    return !!(
      body['webkitRequestFullscreen'] ||
      (body.requestFullscreen && doc.fullscreenEnabled)
    );
  }

  /**
   * @param {Document} doc The root document to check.
   * @return {boolean} Element is currently in fullscreen.
   */
  function isFullScreen(doc) {
    return !!(doc['webkitIsFullScreen'] || doc.fullscreenElement);
  }

  /**
   * Request to fullscreen an element.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreen(element) {
    if (element.requestFullscreen) {
      element.requestFullscreen();
    } else if (element['webkitRequestFullscreen']) {
      element['webkitRequestFullscreen']();
    }
  }

  /**
   * Request to fullscreen an element with keyboard input.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreenWithKeys(element) {
    if (element['webkitRequestFullscreen']) {
      element['webkitRequestFullscreen']();
    } else {
      requestFullScreen(element);
    }
  }

  /**
   * Exit fullscreen.
   * @param {Document} doc The document to exit fullscren from
   */
  function exitFullScreen(doc) {
    if (doc.exitFullscreen) {
      doc.exitFullscreen();
    } else if (doc['webkitExitFullscreen']) {
      doc['webkitExitFullscreen']();
    }
  }

  /**
   * @module ol/control/MousePosition
   */


  /**
   * @type {string}
   */
  const PROJECTION = 'projection';

  /**
   * @type {string}
   */
  const COORDINATE_FORMAT = 'coordinateFormat';

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:coordinateFormat'|'change:projection', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-mouse-position'] CSS class name.
   * @property {import("../coordinate.js").CoordinateFormat} [coordinateFormat] Coordinate format.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when the
   * control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the
   * control to be rendered outside of the map's viewport.
   * @property {string} [placeholder] Markup to show when the mouse position is not
   * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space is rendered
   * initially and the last position is retained when the mouse leaves the viewport.
   * When a string is provided (e.g. `'no position'` or `''` for an empty string) it is used as a
   * placeholder.
   * @property {boolean} [wrapX=true] Wrap the world horizontally on the projection's antimeridian, if it
   * is a global projection.
   */

  /**
   * @classdesc
   * A control to show the 2D coordinates of the mouse cursor. By default, these
   * are in the view projection, but can be in any supported projection.
   * By default the control is shown in the top right corner of the map, but this
   * can be changed by using the css selector `.ol-mouse-position`.
   *
   * On touch devices, which usually do not have a mouse cursor, the coordinates
   * of the currently touched position are shown.
   *
   * @api
   */
  class MousePosition extends Control {
    /**
     * @param {Options} [options] Mouse position options.
     */
    constructor(options) {
      options = options ? options : {};

      const element = document.createElement('div');
      element.className =
        options.className !== undefined ? options.className : 'ol-mouse-position';

      super({
        element: element,
        render: options.render,
        target: options.target,
      });

      /***
       * @type {MousePositionOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {MousePositionOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {MousePositionOnSignature<void>}
       */
      this.un;

      this.addChangeListener(PROJECTION, this.handleProjectionChanged_);

      if (options.coordinateFormat) {
        this.setCoordinateFormat(options.coordinateFormat);
      }
      if (options.projection) {
        this.setProjection(options.projection);
      }

      /**
       * @private
       * @type {boolean}
       */
      this.renderOnMouseOut_ = options.placeholder !== undefined;

      /**
       * @private
       * @type {string}
       */
      this.placeholder_ = this.renderOnMouseOut_ ? options.placeholder : '&#160;';

      /**
       * @private
       * @type {string}
       */
      this.renderedHTML_ = element.innerHTML;

      /**
       * @private
       * @type {?import("../proj/Projection.js").default}
       */
      this.mapProjection_ = null;

      /**
       * @private
       * @type {?import("../proj.js").TransformFunction}
       */
      this.transform_ = null;

      /**
       * @private
       * @type {boolean}
       */
      this.wrapX_ = options.wrapX === false ? false : true;
    }

    /**
     * @private
     */
    handleProjectionChanged_() {
      this.transform_ = null;
    }

    /**
     * Return the coordinate format type used to render the current position or
     * undefined.
     * @return {import("../coordinate.js").CoordinateFormat|undefined} The format to render the current
     *     position in.
     * @observable
     * @api
     */
    getCoordinateFormat() {
      return /** @type {import("../coordinate.js").CoordinateFormat|undefined} */ (
        this.get(COORDINATE_FORMAT)
      );
    }

    /**
     * Return the projection that is used to report the mouse position.
     * @return {import("../proj/Projection.js").default|undefined} The projection to report mouse
     *     position in.
     * @observable
     * @api
     */
    getProjection() {
      return /** @type {import("../proj/Projection.js").default|undefined} */ (
        this.get(PROJECTION)
      );
    }

    /**
     * @param {MouseEvent} event Browser event.
     * @protected
     */
    handleMouseMove(event) {
      const map = this.getMap();
      this.updateHTML_(map.getEventPixel(event));
    }

    /**
     * @param {Event} event Browser event.
     * @protected
     */
    handleMouseOut(event) {
      this.updateHTML_(null);
    }

    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     * @override
     */
    setMap(map) {
      super.setMap(map);
      if (map) {
        const viewport = map.getViewport();
        this.listenerKeys.push(
          listen(viewport, PointerEventType.POINTERMOVE, this.handleMouseMove, this),
        );
        if (this.renderOnMouseOut_) {
          this.listenerKeys.push(
            listen(viewport, PointerEventType.POINTEROUT, this.handleMouseOut, this),
          );
        }
        this.updateHTML_(null);
      }
    }

    /**
     * Set the coordinate format type used to render the current position.
     * @param {import("../coordinate.js").CoordinateFormat} format The format to render the current
     *     position in.
     * @observable
     * @api
     */
    setCoordinateFormat(format) {
      this.set(COORDINATE_FORMAT, format);
    }

    /**
     * Set the projection that is used to report the mouse position.
     * @param {import("../proj.js").ProjectionLike} projection The projection to report mouse
     *     position in.
     * @observable
     * @api
     */
    setProjection(projection) {
      this.set(PROJECTION, get$2(projection));
    }

    /**
     * @param {?import("../pixel.js").Pixel} pixel Pixel.
     * @private
     */
    updateHTML_(pixel) {
      let html = this.placeholder_;
      if (pixel && this.mapProjection_) {
        if (!this.transform_) {
          const projection = this.getProjection();
          if (projection) {
            this.transform_ = getTransformFromProjections(
              this.mapProjection_,
              projection,
            );
          } else {
            this.transform_ = identityTransform;
          }
        }
        const map = this.getMap();
        const coordinate = map.getCoordinateFromPixelInternal(pixel);
        if (coordinate) {
          const userProjection = getUserProjection();
          if (userProjection) {
            this.transform_ = getTransformFromProjections(
              this.mapProjection_,
              userProjection,
            );
          }
          this.transform_(coordinate, coordinate);
          if (this.wrapX_) {
            const projection =
              userProjection || this.getProjection() || this.mapProjection_;
            wrapX$1(coordinate, projection);
          }
          const coordinateFormat = this.getCoordinateFormat();
          if (coordinateFormat) {
            html = coordinateFormat(coordinate);
          } else {
            html = coordinate.toString();
          }
        }
      }
      if (!this.renderedHTML_ || html !== this.renderedHTML_) {
        this.element.innerHTML = html;
        this.renderedHTML_ = html;
      }
    }

    /**
     * Update the projection. Rendering of the coordinates is done in
     * `handleMouseMove` and `handleMouseUp`.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      const frameState = mapEvent.frameState;
      if (!frameState) {
        this.mapProjection_ = null;
      } else {
        if (this.mapProjection_ != frameState.viewState.projection) {
          this.mapProjection_ = frameState.viewState.projection;
          this.transform_ = null;
        }
      }
    }
  }

  /**
   * @module ol/Overlay
   */

  /**
   * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning
   * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,
   * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
   * `'top-center'`, or `'top-right'`.
   */

  /**
   * @typedef {Object} Options
   * @property {number|string} [id] Set the overlay id. The overlay id can be used
   * with the {@link module:ol/Map~Map#getOverlayById} method.
   * @property {HTMLElement} [element] The overlay element.
   * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning
   * the overlay. The first element in the
   * array is the horizontal offset. A positive value shifts the overlay right.
   * The second element in the array is the vertical offset. A positive value
   * shifts the overlay down.
   * @property {import("./coordinate.js").Coordinate} [position] The overlay position
   * in map projection.
   * @property {Positioning} [positioning='top-left'] Defines how
   * the overlay is actually positioned with respect to its `position` property.
   * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,
   * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
   * `'top-center'`, and `'top-right'`.
   * @property {boolean} [stopEvent=true] Whether event propagation to the map
   * viewport should be stopped. If `true` the overlay is placed in the same
   * container as that of the controls (CSS class name
   * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container
   * with CSS class name specified by the `className` property.
   * @property {boolean} [insertFirst=true] Whether the overlay is inserted first
   * in the overlay container, or appended. If the overlay is placed in the same
   * container as that of the controls (see the `stopEvent` option) you will
   * probably set `insertFirst` to `true` so the overlay is displayed below the
   * controls.
   * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling
   * `setPosition`, so that the overlay is entirely visible in the current viewport.
   * @property {string} [className='ol-overlay-container ol-selectable'] CSS class
   * name.
   */

  /**
   * @typedef {Object} PanOptions
   * @property {number} [duration=1000] The duration of the animation in
   * milliseconds.
   * @property {function(number):number} [easing] The easing function to use. Can
   * be one from {@link module:ol/easing} or a custom function.
   * Default is {@link module:ol/easing.inAndOut}.
   */

  /**
   * @typedef {Object} PanIntoViewOptions
   * @property {PanOptions} [animation={}] The animation parameters for the pan
   * @property {number} [margin=20] The margin (in pixels) between the
   * overlay and the borders of the map when panning into view.
   */

  /**
   * @enum {string}
   * @protected
   */
  const Property = {
    ELEMENT: 'element',
    MAP: 'map',
    OFFSET: 'offset',
    POSITION: 'position',
    POSITIONING: 'positioning',
  };

  /**
   * @typedef {import("./ObjectEventType").Types|'change:element'|'change:map'|'change:offset'|'change:position'|
   *   'change:positioning'} OverlayObjectEventTypes
   */

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *   import("./Observable").OnSignature<OverlayObjectEventTypes, import("./Object").ObjectEvent, Return> &
   *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature
   */

  /**
   * @classdesc
   * An element to be displayed over the map and attached to a single map
   * location.  Like {@link module:ol/control/Control~Control}, Overlays are
   * visible widgets. Unlike Controls, they are not in a fixed position on the
   * screen, but are tied to a geographical coordinate, so panning the map will
   * move an Overlay but not a Control.
   *
   * Example:
   *
   *     import Overlay from 'ol/Overlay.js';
   *
   *     // ...
   *     const popup = new Overlay({
   *       element: document.getElementById('popup'),
   *     });
   *     popup.setPosition(coordinate);
   *     map.addOverlay(popup);
   *
   * @api
   */
  class Overlay extends BaseObject {
    /**
     * @param {Options} options Overlay options.
     */
    constructor(options) {
      super();

      /***
       * @type {OverlayOnSignature<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {OverlayOnSignature<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {OverlayOnSignature<void>}
       */
      this.un;

      /**
       * @protected
       * @type {Options}
       */
      this.options = options;

      /**
       * @protected
       * @type {number|string|undefined}
       */
      this.id = options.id;

      /**
       * @protected
       * @type {boolean}
       */
      this.insertFirst =
        options.insertFirst !== undefined ? options.insertFirst : true;

      /**
       * @protected
       * @type {boolean}
       */
      this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.element = document.createElement('div');
      this.element.className =
        options.className !== undefined
          ? options.className
          : 'ol-overlay-container ' + CLASS_SELECTABLE;
      this.element.style.position = 'absolute';
      this.element.style.pointerEvents = 'auto';

      /**
       * @protected
       * @type {PanIntoViewOptions|undefined}
       */
      this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;

      /**
       * @protected
       * @type {{transform_: string,
       *         visible: boolean}}
       */
      this.rendered = {
        transform_: '',
        visible: true,
      };

      /**
       * @protected
       * @type {?import("./events.js").EventsKey}
       */
      this.mapPostrenderListenerKey = null;

      this.addChangeListener(Property.ELEMENT, this.handleElementChanged);
      this.addChangeListener(Property.MAP, this.handleMapChanged);
      this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);
      this.addChangeListener(Property.POSITION, this.handlePositionChanged);
      this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);

      if (options.element !== undefined) {
        this.setElement(options.element);
      }

      this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);

      this.setPositioning(options.positioning || 'top-left');

      if (options.position !== undefined) {
        this.setPosition(options.position);
      }
    }

    /**
     * Get the DOM element of this overlay.
     * @return {HTMLElement|undefined} The Element containing the overlay.
     * @observable
     * @api
     */
    getElement() {
      return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));
    }

    /**
     * Get the overlay identifier which is set on constructor.
     * @return {number|string|undefined} Id.
     * @api
     */
    getId() {
      return this.id;
    }

    /**
     * Get the map associated with this overlay.
     * @return {import("./Map.js").default|null} The map that the
     * overlay is part of.
     * @observable
     * @api
     */
    getMap() {
      return /** @type {import("./Map.js").default|null} */ (
        this.get(Property.MAP) || null
      );
    }

    /**
     * Get the offset of this overlay.
     * @return {Array<number>} The offset.
     * @observable
     * @api
     */
    getOffset() {
      return /** @type {Array<number>} */ (this.get(Property.OFFSET));
    }

    /**
     * Get the current position of this overlay.
     * @return {import("./coordinate.js").Coordinate|undefined} The spatial point that the overlay is
     *     anchored at.
     * @observable
     * @api
     */
    getPosition() {
      return /** @type {import("./coordinate.js").Coordinate|undefined} */ (
        this.get(Property.POSITION)
      );
    }

    /**
     * Get the current positioning of this overlay.
     * @return {Positioning} How the overlay is positioned
     *     relative to its point on the map.
     * @observable
     * @api
     */
    getPositioning() {
      return /** @type {Positioning} */ (this.get(Property.POSITIONING));
    }

    /**
     * @protected
     */
    handleElementChanged() {
      removeChildren(this.element);
      const element = this.getElement();
      if (element) {
        this.element.appendChild(element);
      }
    }

    /**
     * @protected
     */
    handleMapChanged() {
      if (this.mapPostrenderListenerKey) {
        this.element?.remove();
        unlistenByKey(this.mapPostrenderListenerKey);
        this.mapPostrenderListenerKey = null;
      }
      const map = this.getMap();
      if (map) {
        this.mapPostrenderListenerKey = listen(
          map,
          MapEventType.POSTRENDER,
          this.render,
          this,
        );
        this.updatePixelPosition();
        const container = this.stopEvent
          ? map.getOverlayContainerStopEvent()
          : map.getOverlayContainer();
        if (this.insertFirst) {
          container.insertBefore(this.element, container.childNodes[0] || null);
        } else {
          container.appendChild(this.element);
        }
        this.performAutoPan();
      }
    }

    /**
     * @protected
     */
    render() {
      this.updatePixelPosition();
    }

    /**
     * @protected
     */
    handleOffsetChanged() {
      this.updatePixelPosition();
    }

    /**
     * @protected
     */
    handlePositionChanged() {
      this.updatePixelPosition();
      this.performAutoPan();
    }

    /**
     * @protected
     */
    handlePositioningChanged() {
      this.updatePixelPosition();
    }

    /**
     * Set the DOM element to be associated with this overlay.
     * @param {HTMLElement|undefined} element The Element containing the overlay.
     * @observable
     * @api
     */
    setElement(element) {
      this.set(Property.ELEMENT, element);
    }

    /**
     * Set the map to be associated with this overlay.
     * @param {import("./Map.js").default|null} map The map that the
     * overlay is part of. Pass `null` to just remove the overlay from the current map.
     * @observable
     * @api
     */
    setMap(map) {
      this.set(Property.MAP, map);
    }

    /**
     * Set the offset for this overlay.
     * @param {Array<number>} offset Offset.
     * @observable
     * @api
     */
    setOffset(offset) {
      this.set(Property.OFFSET, offset);
    }

    /**
     * Set the position for this overlay. If the position is `undefined` the
     * overlay is hidden.
     * @param {import("./coordinate.js").Coordinate|undefined} position The spatial point that the overlay
     *     is anchored at.
     * @observable
     * @api
     */
    setPosition(position) {
      this.set(Property.POSITION, position);
    }

    /**
     * Pan the map so that the overlay is entirely visible in the current viewport
     * (if necessary) using the configured autoPan parameters
     * @protected
     */
    performAutoPan() {
      if (this.autoPan) {
        this.panIntoView(this.autoPan);
      }
    }

    /**
     * Pan the map so that the overlay is entirely visible in the current viewport
     * (if necessary).
     * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action
     * @api
     */
    panIntoView(panIntoViewOptions) {
      const map = this.getMap();

      if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {
        return;
      }

      const mapRect = this.getRect(map.getTargetElement(), map.getSize());
      const element = this.getElement();
      const overlayRect = this.getRect(element, [
        outerWidth(element),
        outerHeight(element),
      ]);

      panIntoViewOptions = panIntoViewOptions || {};

      const myMargin =
        panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;
      if (!containsExtent(mapRect, overlayRect)) {
        // the overlay is not completely inside the viewport, so pan the map
        const offsetLeft = overlayRect[0] - mapRect[0];
        const offsetRight = mapRect[2] - overlayRect[2];
        const offsetTop = overlayRect[1] - mapRect[1];
        const offsetBottom = mapRect[3] - overlayRect[3];

        const delta = [0, 0];
        if (offsetLeft < 0) {
          // move map to the left
          delta[0] = offsetLeft - myMargin;
        } else if (offsetRight < 0) {
          // move map to the right
          delta[0] = Math.abs(offsetRight) + myMargin;
        }
        if (offsetTop < 0) {
          // move map up
          delta[1] = offsetTop - myMargin;
        } else if (offsetBottom < 0) {
          // move map down
          delta[1] = Math.abs(offsetBottom) + myMargin;
        }

        if (delta[0] !== 0 || delta[1] !== 0) {
          const center = /** @type {import("./coordinate.js").Coordinate} */ (
            map.getView().getCenterInternal()
          );
          const centerPx = map.getPixelFromCoordinateInternal(center);
          if (!centerPx) {
            return;
          }
          const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];

          const panOptions = panIntoViewOptions.animation || {};
          map.getView().animateInternal({
            center: map.getCoordinateFromPixelInternal(newCenterPx),
            duration: panOptions.duration,
            easing: panOptions.easing,
          });
        }
      }
    }

    /**
     * Get the extent of an element relative to the document
     * @param {HTMLElement} element The element.
     * @param {import("./size.js").Size} size The size of the element.
     * @return {import("./extent.js").Extent} The extent.
     * @protected
     */
    getRect(element, size) {
      const box = element.getBoundingClientRect();
      const offsetX = box.left + window.pageXOffset;
      const offsetY = box.top + window.pageYOffset;
      return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];
    }

    /**
     * Set the positioning for this overlay.
     * @param {Positioning} positioning how the overlay is
     *     positioned relative to its point on the map.
     * @observable
     * @api
     */
    setPositioning(positioning) {
      this.set(Property.POSITIONING, positioning);
    }

    /**
     * Modify the visibility of the element.
     * @param {boolean} visible Element visibility.
     * @protected
     */
    setVisible(visible) {
      if (this.rendered.visible !== visible) {
        this.element.style.display = visible ? '' : 'none';
        this.rendered.visible = visible;
      }
    }

    /**
     * Update pixel position.
     * @protected
     */
    updatePixelPosition() {
      const map = this.getMap();
      const position = this.getPosition();
      if (!map || !map.isRendered() || !position) {
        this.setVisible(false);
        return;
      }

      const pixel = map.getPixelFromCoordinate(position);
      const mapSize = map.getSize();
      this.updateRenderedPosition(pixel, mapSize);
    }

    /**
     * @param {import("./pixel.js").Pixel} pixel The pixel location.
     * @param {import("./size.js").Size|undefined} mapSize The map size.
     * @protected
     */
    updateRenderedPosition(pixel, mapSize) {
      const style = this.element.style;
      const offset = this.getOffset();

      const positioning = this.getPositioning();

      this.setVisible(true);

      const x = Math.round(pixel[0] + offset[0]) + 'px';
      const y = Math.round(pixel[1] + offset[1]) + 'px';
      let posX = '0%';
      let posY = '0%';
      if (
        positioning == 'bottom-right' ||
        positioning == 'center-right' ||
        positioning == 'top-right'
      ) {
        posX = '-100%';
      } else if (
        positioning == 'bottom-center' ||
        positioning == 'center-center' ||
        positioning == 'top-center'
      ) {
        posX = '-50%';
      }
      if (
        positioning == 'bottom-left' ||
        positioning == 'bottom-center' ||
        positioning == 'bottom-right'
      ) {
        posY = '-100%';
      } else if (
        positioning == 'center-left' ||
        positioning == 'center-center' ||
        positioning == 'center-right'
      ) {
        posY = '-50%';
      }
      const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;
      if (this.rendered.transform_ != transform) {
        this.rendered.transform_ = transform;
        style.transform = transform;
      }
    }

    /**
     * returns the options this Overlay has been created with
     * @return {Options} overlay options
     */
    getOptions() {
      return this.options;
    }
  }

  /**
   * @module ol/control/OverviewMap
   */

  /**
   * Maximum width and/or height extent ratio that determines when the overview
   * map should be zoomed out.
   * @type {number}
   */
  const MAX_RATIO = 0.75;

  /**
   * Minimum width and/or height extent ratio that determines when the overview
   * map should be zoomed in.
   * @type {number}
   */
  const MIN_RATIO = 0.1;

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-overviewmap'] CSS class name.
   * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).
   * @property {string|HTMLElement} [collapseLabel='â¹'] Text label to use for the
   * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.
   * @property {string|HTMLElement} [label='âº'] Text label to use for the collapsed
   * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {Array<import("../layer/Base.js").default>|import("../Collection.js").default<import("../layer/Base.js").default>} [layers]
   * Layers for the overview map.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.
   * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,
   * a default view with the same projection as the main map will be used.
   */

  /**
   * Create a new control with a map acting as an overview map for another
   * defined map.
   *
   * @api
   */
  class OverviewMap extends Control {
    /**
     * @param {Options} [options] OverviewMap options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        render: options.render,
        target: options.target,
      });

      /**
       * @private
       */
      this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);

      /**
       * @type {boolean}
       * @private
       */
      this.collapsed_ =
        options.collapsed !== undefined ? options.collapsed : true;

      /**
       * @private
       * @type {boolean}
       */
      this.collapsible_ =
        options.collapsible !== undefined ? options.collapsible : true;

      if (!this.collapsible_) {
        this.collapsed_ = false;
      }

      /**
       * @private
       * @type {boolean}
       */
      this.rotateWithView_ =
        options.rotateWithView !== undefined ? options.rotateWithView : false;

      /**
       * @private
       * @type {import("../extent.js").Extent|undefined}
       */
      this.viewExtent_ = undefined;

      const className =
        options.className !== undefined ? options.className : 'ol-overviewmap';

      const tipLabel =
        options.tipLabel !== undefined ? options.tipLabel : 'Overview map';

      const collapseLabel =
        options.collapseLabel !== undefined ? options.collapseLabel : '\u2039';

      if (typeof collapseLabel === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.collapseLabel_ = document.createElement('span');
        this.collapseLabel_.textContent = collapseLabel;
      } else {
        this.collapseLabel_ = collapseLabel;
      }

      const label = options.label !== undefined ? options.label : '\u203A';

      if (typeof label === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.label_ = document.createElement('span');
        this.label_.textContent = label;
      } else {
        this.label_ = label;
      }

      const activeLabel =
        this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;
      const button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(activeLabel);

      button.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this),
        false,
      );

      /**
       * @type {HTMLElement}
       * @private
       */
      this.ovmapDiv_ = document.createElement('div');
      this.ovmapDiv_.className = 'ol-overviewmap-map';

      /**
       * Explicitly given view to be used instead of a view derived from the main map.
       * @type {View}
       * @private
       */
      this.view_ = options.view;

      const ovmap = new Map({
        view: options.view,
        controls: new Collection(),
        interactions: new Collection(),
      });

      /**
       * @type {Map}
       * @private
       */
      this.ovmap_ = ovmap;

      if (options.layers) {
        options.layers.forEach(function (layer) {
          ovmap.addLayer(layer);
        });
      }

      const box = document.createElement('div');
      box.className = 'ol-overviewmap-box';
      box.style.boxSizing = 'border-box';

      /**
       * @type {import("../Overlay.js").default}
       * @private
       */
      this.boxOverlay_ = new Overlay({
        position: [0, 0],
        positioning: 'center-center',
        element: box,
      });
      this.ovmap_.addOverlay(this.boxOverlay_);

      const cssClasses =
        className +
        ' ' +
        CLASS_UNSELECTABLE +
        ' ' +
        CLASS_CONTROL +
        (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
        (this.collapsible_ ? '' : ' ol-uncollapsible');
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(this.ovmapDiv_);
      element.appendChild(button);

      /* Interactive map */

      const overlay = this.boxOverlay_;
      const overlayBox = this.boxOverlay_.getElement();

      /* Functions definition */

      const computeDesiredMousePosition = (mousePosition) => {
        return {
          clientX: mousePosition.clientX,
          clientY: mousePosition.clientY,
        };
      };

      const move = function (event) {
        const position = /** @type {?} */ (computeDesiredMousePosition(event));
        const coordinates = ovmap.getEventCoordinate(
          /** @type {MouseEvent} */ (position),
        );

        overlay.setPosition(coordinates);
      };

      const endMoving = (event) => {
        const coordinates = ovmap.getEventCoordinateInternal(event);

        const map = this.getMap();

        map.getView().setCenterInternal(coordinates);

        const ownerDocument = map.getOwnerDocument();
        ownerDocument.removeEventListener('pointermove', move);
        ownerDocument.removeEventListener('pointerup', endMoving);
      };

      /* Binding */

      this.ovmapDiv_.addEventListener('pointerdown', (event) => {
        const ownerDocument = this.getMap().getOwnerDocument();
        if (event.target === overlayBox) {
          ownerDocument.addEventListener('pointermove', move);
        }
        ownerDocument.addEventListener('pointerup', endMoving);
      });
    }

    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     * @override
     */
    setMap(map) {
      const oldMap = this.getMap();
      if (map === oldMap) {
        return;
      }
      if (oldMap) {
        const oldView = oldMap.getView();
        if (oldView) {
          this.unbindView_(oldView);
        }
        this.ovmap_.setTarget(null);
      }
      super.setMap(map);

      if (map) {
        this.ovmap_.setTarget(this.ovmapDiv_);
        this.listenerKeys.push(
          listen(
            map,
            ObjectEventType.PROPERTYCHANGE,
            this.handleMapPropertyChange_,
            this,
          ),
        );

        const view = map.getView();
        if (view) {
          this.bindView_(view);
        }

        if (!this.ovmap_.isRendered()) {
          this.updateBoxAfterOvmapIsRendered_();
        }
      }
    }

    /**
     * Handle map property changes.  This only deals with changes to the map's view.
     * @param {import("../Object.js").ObjectEvent} event The propertychange event.
     * @private
     */
    handleMapPropertyChange_(event) {
      if (event.key === MapProperty.VIEW) {
        const oldView = /** @type {import("../View.js").default} */ (
          event.oldValue
        );
        if (oldView) {
          this.unbindView_(oldView);
        }
        const newView = this.getMap().getView();
        this.bindView_(newView);
      } else if (
        !this.ovmap_.isRendered() &&
        (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)
      ) {
        this.ovmap_.updateSize();
      }
    }

    /**
     * Register listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */
    bindView_(view) {
      if (!this.view_) {
        // Unless an explicit view definition was given, derive default from whatever main map uses.
        const newView = new View({
          projection: view.getProjection(),
        });
        this.ovmap_.setView(newView);
      }

      view.addChangeListener(
        ViewProperty.ROTATION,
        this.boundHandleRotationChanged_,
      );
      // Sync once with the new view
      this.handleRotationChanged_();

      if (view.isDef()) {
        this.ovmap_.updateSize();
        this.resetExtent_();
      }
    }

    /**
     * Unregister listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */
    unbindView_(view) {
      view.removeChangeListener(
        ViewProperty.ROTATION,
        this.boundHandleRotationChanged_,
      );
    }

    /**
     * Handle rotation changes to the main map.
     * @private
     */
    handleRotationChanged_() {
      if (this.rotateWithView_) {
        this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());
      }
    }

    /**
     * Reset the overview map extent if the box size (width or
     * height) is less than the size of the overview map size times minRatio
     * or is greater than the size of the overview size times maxRatio.
     *
     * If the map extent was not reset, the box size can fits in the defined
     * ratio sizes. This method then checks if is contained inside the overview
     * map current extent. If not, recenter the overview map to the current
     * main map center location.
     * @private
     */
    validateExtent_() {
      const map = this.getMap();
      const ovmap = this.ovmap_;

      if (!map.isRendered() || !ovmap.isRendered()) {
        return;
      }

      const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      const view = map.getView();
      const extent = view.calculateExtentInternal(mapSize);

      if (this.viewExtent_ && equals$1(extent, this.viewExtent_)) {
        // repeats of the same extent may indicate constraint conflicts leading to an endless cycle
        return;
      }
      this.viewExtent_ = extent;

      const ovmapSize = /** @type {import("../size.js").Size} */ (
        ovmap.getSize()
      );

      const ovview = ovmap.getView();
      const ovextent = ovview.calculateExtentInternal(ovmapSize);

      const topLeftPixel = ovmap.getPixelFromCoordinateInternal(
        getTopLeft(extent),
      );
      const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(
        getBottomRight(extent),
      );

      const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);
      const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);

      const ovmapWidth = ovmapSize[0];
      const ovmapHeight = ovmapSize[1];

      if (
        boxWidth < ovmapWidth * MIN_RATIO ||
        boxHeight < ovmapHeight * MIN_RATIO ||
        boxWidth > ovmapWidth * MAX_RATIO ||
        boxHeight > ovmapHeight * MAX_RATIO
      ) {
        this.resetExtent_();
      } else if (!containsExtent(ovextent, extent)) {
        this.recenter_();
      }
    }

    /**
     * Reset the overview map extent to half calculated min and max ratio times
     * the extent of the main map.
     * @private
     */
    resetExtent_() {

      const map = this.getMap();
      const ovmap = this.ovmap_;

      const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      const view = map.getView();
      const extent = view.calculateExtentInternal(mapSize);

      const ovview = ovmap.getView();

      // get how many times the current map overview could hold different
      // box sizes using the min and max ratio, pick the step in the middle used
      // to calculate the extent from the main map to set it to the overview map,
      const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;
      const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);
      scaleFromCenter(extent, ratio);
      ovview.fitInternal(fromExtent(extent));
    }

    /**
     * Set the center of the overview map to the map center without changing its
     * resolution.
     * @private
     */
    recenter_() {
      const map = this.getMap();
      const ovmap = this.ovmap_;

      const view = map.getView();

      const ovview = ovmap.getView();

      ovview.setCenterInternal(view.getCenterInternal());
    }

    /**
     * Update the box using the main map extent
     * @private
     */
    updateBox_() {
      const map = this.getMap();
      const ovmap = this.ovmap_;

      if (!map.isRendered() || !ovmap.isRendered()) {
        return;
      }

      const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      const view = map.getView();

      const ovview = ovmap.getView();

      const rotation = this.rotateWithView_ ? 0 : -view.getRotation();

      const overlay = this.boxOverlay_;
      const box = this.boxOverlay_.getElement();
      const center = view.getCenter();
      const resolution = view.getResolution();
      const ovresolution = ovview.getResolution();
      const width = (mapSize[0] * resolution) / ovresolution;
      const height = (mapSize[1] * resolution) / ovresolution;

      // set position using center coordinates
      overlay.setPosition(center);

      // set box size calculated from map extent size and overview map resolution
      if (box) {
        box.style.width = width + 'px';
        box.style.height = height + 'px';
        const transform = 'rotate(' + rotation + 'rad)';
        box.style.transform = transform;
      }
    }

    /**
     * @private
     */
    updateBoxAfterOvmapIsRendered_() {
      if (this.ovmapPostrenderKey_) {
        return;
      }
      this.ovmapPostrenderKey_ = listenOnce(
        this.ovmap_,
        MapEventType.POSTRENDER,
        (event) => {
          delete this.ovmapPostrenderKey_;
          this.updateBox_();
        },
      );
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleToggle_();
    }

    /**
     * @private
     */
    handleToggle_() {
      this.element.classList.toggle(CLASS_COLLAPSED);
      if (this.collapsed_) {
        replaceNode(this.collapseLabel_, this.label_);
      } else {
        replaceNode(this.label_, this.collapseLabel_);
      }
      this.collapsed_ = !this.collapsed_;

      // manage overview map if it had not been rendered before and control
      // is expanded
      const ovmap = this.ovmap_;
      if (!this.collapsed_) {
        if (ovmap.isRendered()) {
          this.viewExtent_ = undefined;
          ovmap.render();
          return;
        }
        ovmap.updateSize();
        this.resetExtent_();
        this.updateBoxAfterOvmapIsRendered_();
      }
    }

    /**
     * Return `true` if the overview map is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */
    getCollapsible() {
      return this.collapsible_;
    }

    /**
     * Set whether the overview map should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */
    setCollapsible(collapsible) {
      if (this.collapsible_ === collapsible) {
        return;
      }
      this.collapsible_ = collapsible;
      this.element.classList.toggle('ol-uncollapsible');
      if (!collapsible && this.collapsed_) {
        this.handleToggle_();
      }
    }

    /**
     * Collapse or expand the overview map according to the passed parameter. Will
     * not do anything if the overview map isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */
    setCollapsed(collapsed) {
      if (!this.collapsible_ || this.collapsed_ === collapsed) {
        return;
      }
      this.handleToggle_();
    }

    /**
     * Determine if the overview map is collapsed.
     * @return {boolean} The overview map is collapsed.
     * @api
     */
    getCollapsed() {
      return this.collapsed_;
    }

    /**
     * Return `true` if the overview map view can rotate, `false` otherwise.
     * @return {boolean} True if the control view can rotate.
     * @api
     */
    getRotateWithView() {
      return this.rotateWithView_;
    }

    /**
     * Set whether the overview map view should rotate with the main map view.
     * @param {boolean} rotateWithView True if the control view should rotate.
     * @api
     */
    setRotateWithView(rotateWithView) {
      if (this.rotateWithView_ === rotateWithView) {
        return;
      }
      this.rotateWithView_ = rotateWithView;
      if (this.getMap().getView().getRotation() !== 0) {
        if (this.rotateWithView_) {
          this.handleRotationChanged_();
        } else {
          this.ovmap_.getView().setRotation(0);
        }
        this.viewExtent_ = undefined;
        this.validateExtent_();
        this.updateBox_();
      }
    }

    /**
     * Return the overview map.
     * @return {import("../Map.js").default} Overview map.
     * @api
     */
    getOverviewMap() {
      return this.ovmap_;
    }

    /**
     * Update the overview map element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      this.validateExtent_();
      this.updateBox_();
    }
  }

  /**
   * @module ol/control/ScaleLine
   */

  /**
   * @type {string}
   */
  const UNITS_PROP = 'units';

  /**
   * @typedef {'degrees' | 'imperial' | 'nautical' | 'metric' | 'us'} Units
   * Units for the scale line.
   */

  /**
   * @const
   * @type {Array<number>}
   */
  const LEADING_DIGITS = [1, 2, 5];

  /**
   * @const
   * @type {number}
   */
  const DEFAULT_DPI = 25.4 / 0.28;

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:units', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types
   *     |'change:units', Return>} ScaleLineOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className] CSS class name. The default is `ol-scale-bar` when configured with
   * `bar: true`. Otherwise the default is `ol-scale-line`.
   * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be
   * adjusted to match the dpi used.
   * @property {number} [maxWidth] Maximum width in pixels at the OGC default dpi. The width will be
   * adjusted to match the dpi used.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {Units} [units='metric'] Units.
   * @property {boolean} [bar=false] Render scalebars instead of a line.
   * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers
   * for best results. Only applies when `bar` is `true`.
   * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies
   * when `bar` is `true`.
   * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies
   * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.
   */

  /**
   * @classdesc
   * A control displaying rough y-axis distances, calculated for the center of the
   * viewport. For conformal projections (e.g. EPSG:3857, the default view
   * projection in OpenLayers), the scale is valid for all directions.
   * No scale line will be shown when the y-axis distance of a pixel at the
   * viewport center cannot be calculated in the view projection.
   * By default the scale line will show in the bottom left portion of the map,
   * but this can be changed by using the css selector `.ol-scale-line`.
   * When specifying `bar` as `true`, a scalebar will be rendered instead
   * of a scaleline.
   * For cartesian measurements of the scaleline, you need to set the
   * `getPointResolution` method of your projection to simply return the input
   * value, e.g. `projection.setGetPointResolution(r => r);`
   *
   * @api
   */
  class ScaleLine extends Control {
    /**
     * @param {Options} [options] Scale line options.
     */
    constructor(options) {
      options = options ? options : {};

      const element = document.createElement('div');
      element.style.pointerEvents = 'none';

      super({
        element: element,
        render: options.render,
        target: options.target,
      });

      /***
       * @type {ScaleLineOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {ScaleLineOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {ScaleLineOnSignature<void>}
       */
      this.un;

      const className =
        options.className !== undefined
          ? options.className
          : options.bar
            ? 'ol-scale-bar'
            : 'ol-scale-line';

      /**
       * @private
       * @type {HTMLElement}
       */
      this.innerElement_ = document.createElement('div');
      this.innerElement_.className = className + '-inner';

      this.element.className = className + ' ' + CLASS_UNSELECTABLE;
      this.element.appendChild(this.innerElement_);

      /**
       * @private
       * @type {?import("../View.js").State}
       */
      this.viewState_ = null;

      /**
       * @private
       * @type {number}
       */
      this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;

      /**
       * @private
       * @type {number|undefined}
       */
      this.maxWidth_ = options.maxWidth;

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = false;

      /**
       * @private
       * @type {number|undefined}
       */
      this.renderedWidth_ = undefined;

      /**
       * @private
       * @type {string}
       */
      this.renderedHTML_ = '';

      this.addChangeListener(UNITS_PROP, this.handleUnitsChanged_);

      this.setUnits(options.units || 'metric');

      /**
       * @private
       * @type {boolean}
       */
      this.scaleBar_ = options.bar || false;

      /**
       * @private
       * @type {number}
       */
      this.scaleBarSteps_ = options.steps || 4;

      /**
       * @private
       * @type {boolean}
       */
      this.scaleBarText_ = options.text || false;

      /**
       * @private
       * @type {number|undefined}
       */
      this.dpi_ = options.dpi || undefined;
    }

    /**
     * Return the units to use in the scale line.
     * @return {Units} The units
     * to use in the scale line.
     * @observable
     * @api
     */
    getUnits() {
      return this.get(UNITS_PROP);
    }

    /**
     * @private
     */
    handleUnitsChanged_() {
      this.updateElement_();
    }

    /**
     * Set the units to use in the scale line.
     * @param {Units} units The units to use in the scale line.
     * @observable
     * @api
     */
    setUnits(units) {
      this.set(UNITS_PROP, units);
    }

    /**
     * Specify the dpi of output device such as printer.
     * @param {number|undefined} dpi The dpi of output device.
     * @api
     */
    setDpi(dpi) {
      this.dpi_ = dpi;
    }

    /**
     * @private
     */
    updateElement_() {
      const viewState = this.viewState_;

      if (!viewState) {
        if (this.renderedVisible_) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      const center = viewState.center;
      const projection = viewState.projection;
      const units = this.getUnits();
      const pointResolutionUnits = units == 'degrees' ? 'degrees' : 'm';
      let pointResolution = getPointResolution(
        projection,
        viewState.resolution,
        center,
        pointResolutionUnits,
      );

      const minWidth =
        (this.minWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI;

      const maxWidth =
        this.maxWidth_ !== undefined
          ? (this.maxWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI
          : undefined;

      let nominalCount = minWidth * pointResolution;
      let suffix = '';
      if (units == 'degrees') {
        const metersPerDegree = METERS_PER_UNIT$1.degrees;
        nominalCount *= metersPerDegree;
        if (nominalCount < metersPerDegree / 60) {
          suffix = '\u2033'; // seconds
          pointResolution *= 3600;
        } else if (nominalCount < metersPerDegree) {
          suffix = '\u2032'; // minutes
          pointResolution *= 60;
        } else {
          suffix = '\u00b0'; // degrees
        }
      } else if (units == 'imperial') {
        if (nominalCount < 0.9144) {
          suffix = 'in';
          pointResolution /= 0.0254;
        } else if (nominalCount < 1609.344) {
          suffix = 'ft';
          pointResolution /= 0.3048;
        } else {
          suffix = 'mi';
          pointResolution /= 1609.344;
        }
      } else if (units == 'nautical') {
        pointResolution /= 1852;
        suffix = 'NM';
      } else if (units == 'metric') {
        if (nominalCount < 1e-6) {
          suffix = 'nm';
          pointResolution *= 1e9;
        } else if (nominalCount < 0.001) {
          suffix = 'Î¼m';
          pointResolution *= 1000000;
        } else if (nominalCount < 1) {
          suffix = 'mm';
          pointResolution *= 1000;
        } else if (nominalCount < 1000) {
          suffix = 'm';
        } else {
          suffix = 'km';
          pointResolution /= 1000;
        }
      } else if (units == 'us') {
        if (nominalCount < 0.9144) {
          suffix = 'in';
          pointResolution *= 39.37;
        } else if (nominalCount < 1609.344) {
          suffix = 'ft';
          pointResolution /= 0.30480061;
        } else {
          suffix = 'mi';
          pointResolution /= 1609.3472;
        }
      } else {
        throw new Error('Invalid units');
      }

      let i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));
      let count, width, decimalCount;
      let previousCount = 0;
      let previousWidth, previousDecimalCount;
      while (true) {
        decimalCount = Math.floor(i / 3);
        const decimal = Math.pow(10, decimalCount);
        count = LEADING_DIGITS[((i % 3) + 3) % 3] * decimal;
        width = Math.round(count / pointResolution);
        if (isNaN(width)) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
          return;
        }
        if (maxWidth !== undefined && width >= maxWidth) {
          count = previousCount;
          width = previousWidth;
          decimalCount = previousDecimalCount;
          break;
        } else if (width >= minWidth) {
          break;
        }
        previousCount = count;
        previousWidth = width;
        previousDecimalCount = decimalCount;
        ++i;
      }
      const html = this.scaleBar_
        ? this.createScaleBar(width, count, suffix)
        : count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;

      if (this.renderedHTML_ != html) {
        this.innerElement_.innerHTML = html;
        this.renderedHTML_ = html;
      }

      if (this.renderedWidth_ != width) {
        this.innerElement_.style.width = width + 'px';
        this.renderedWidth_ = width;
      }

      if (!this.renderedVisible_) {
        this.element.style.display = '';
        this.renderedVisible_ = true;
      }
    }

    /**
     * @private
     * @param {number} width The current width of the scalebar.
     * @param {number} scale The current scale.
     * @param {string} suffix The suffix to append to the scale text.
     * @return {string} The stringified HTML of the scalebar.
     */
    createScaleBar(width, scale, suffix) {
      const resolutionScale = this.getScaleForResolution();
      const mapScale =
        resolutionScale < 1
          ? Math.round(1 / resolutionScale).toLocaleString() + ' : 1'
          : '1 : ' + Math.round(resolutionScale).toLocaleString();
      const steps = this.scaleBarSteps_;
      const stepWidth = width / steps;
      const scaleSteps = [this.createMarker('absolute')];
      for (let i = 0; i < steps; ++i) {
        const cls =
          i % 2 === 0 ? 'ol-scale-singlebar-odd' : 'ol-scale-singlebar-even';
        scaleSteps.push(
          '<div>' +
            '<div ' +
            `class="ol-scale-singlebar ${cls}" ` +
            `style="width: ${stepWidth}px;"` +
            '>' +
            '</div>' +
            this.createMarker('relative') +
            // render text every second step, except when only 2 steps
            (i % 2 === 0 || steps === 2
              ? this.createStepText(i, width, false, scale, suffix)
              : '') +
            '</div>',
        );
      }
      // render text at the end
      scaleSteps.push(this.createStepText(steps, width, true, scale, suffix));

      const scaleBarText = this.scaleBarText_
        ? `<div class="ol-scale-text" style="width: ${width}px;">` +
          mapScale +
          '</div>'
        : '';
      return scaleBarText + scaleSteps.join('');
    }

    /**
     * Creates a marker at given position
     * @param {'absolute'|'relative'} position The position, absolute or relative
     * @return {string} The stringified div containing the marker
     */
    createMarker(position) {
      const top = position === 'absolute' ? 3 : -10;
      return (
        '<div ' +
        'class="ol-scale-step-marker" ' +
        `style="position: ${position}; top: ${top}px;"` +
        '></div>'
      );
    }

    /**
     * Creates the label for a marker marker at given position
     * @param {number} i The iterator
     * @param {number} width The width the scalebar will currently use
     * @param {boolean} isLast Flag indicating if we add the last step text
     * @param {number} scale The current scale for the whole scalebar
     * @param {string} suffix The suffix for the scale
     * @return {string} The stringified div containing the step text
     */
    createStepText(i, width, isLast, scale, suffix) {
      const length =
        i === 0 ? 0 : Math.round((scale / this.scaleBarSteps_) * i * 100) / 100;
      const lengthString = length + (i === 0 ? '' : ' ' + suffix);
      const margin = i === 0 ? -3 : (width / this.scaleBarSteps_) * -1;
      const minWidth = i === 0 ? 0 : (width / this.scaleBarSteps_) * 2;
      return (
        '<div ' +
        'class="ol-scale-step-text" ' +
        'style="' +
        `margin-left: ${margin}px;` +
        `text-align: ${i === 0 ? 'left' : 'center'};` +
        `min-width: ${minWidth}px;` +
        `left: ${isLast ? width + 'px' : 'unset'};` +
        '">' +
        lengthString +
        '</div>'
      );
    }

    /**
     * Returns the appropriate scale for the given resolution and units.
     * @return {number} The appropriate scale.
     */
    getScaleForResolution() {
      const resolution = getPointResolution(
        this.viewState_.projection,
        this.viewState_.resolution,
        this.viewState_.center,
        'm',
      );
      const dpi = this.dpi_ || DEFAULT_DPI;
      const inchesPerMeter = 1000 / 25.4;
      return resolution * inchesPerMeter * dpi;
    }

    /**
     * Update the scale line element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      const frameState = mapEvent.frameState;
      if (!frameState) {
        this.viewState_ = null;
      } else {
        this.viewState_ = frameState.viewState;
      }
      this.updateElement_();
    }
  }

  /**
   * @module ol/control/ZoomSlider
   */


  /**
   * The enum for available directions.
   *
   * @enum {number}
   */
  const Direction = {
    VERTICAL: 0,
    HORIZONTAL: 1,
  };

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-zoomslider'] CSS class name.
   * @property {number} [duration=200] Animation duration in milliseconds.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */

  /**
   * @classdesc
   * A slider type of control for zooming.
   *
   * Example:
   *
   *     map.addControl(new ZoomSlider());
   *
   * @api
   */
  class ZoomSlider extends Control {
    /**
     * @param {Options} [options] Zoom slider options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        target: options.target,
        element: document.createElement('div'),
        render: options.render,
      });

      /**
       * @type {!Array<import("../events.js").EventsKey>}
       * @private
       */
      this.dragListenerKeys_ = [];

      /**
       * Will hold the current resolution of the view.
       *
       * @type {number|undefined}
       * @private
       */
      this.currentResolution_ = undefined;

      /**
       * The direction of the slider. Will be determined from actual display of the
       * container and defaults to Direction.VERTICAL.
       *
       * @type {Direction}
       * @private
       */
      this.direction_ = Direction.VERTICAL;

      /**
       * @type {boolean}
       * @private
       */
      this.dragging_;

      /**
       * @type {number}
       * @private
       */
      this.heightLimit_ = 0;

      /**
       * @type {number}
       * @private
       */
      this.widthLimit_ = 0;

      /**
       * @type {number|undefined}
       * @private
       */
      this.startX_;

      /**
       * @type {number|undefined}
       * @private
       */
      this.startY_;

      /**
       * The calculated thumb size (border box plus margins).  Set when initSlider_
       * is called.
       * @type {import("../size.js").Size}
       * @private
       */
      this.thumbSize_ = null;

      /**
       * Whether the slider is initialized.
       * @type {boolean}
       * @private
       */
      this.sliderInitialized_ = false;

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 200;

      const className =
        options.className !== undefined ? options.className : 'ol-zoomslider';
      const thumbElement = document.createElement('button');
      thumbElement.setAttribute('type', 'button');
      thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;
      const containerElement = this.element;
      containerElement.className =
        className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      containerElement.appendChild(thumbElement);

      containerElement.addEventListener(
        PointerEventType.POINTERDOWN,
        this.handleDraggerStart_.bind(this),
        false,
      );
      containerElement.addEventListener(
        PointerEventType.POINTERMOVE,
        this.handleDraggerDrag_.bind(this),
        false,
      );
      containerElement.addEventListener(
        PointerEventType.POINTERUP,
        this.handleDraggerEnd_.bind(this),
        false,
      );

      containerElement.addEventListener(
        EventType.CLICK,
        this.handleContainerClick_.bind(this),
        false,
      );
      thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);
    }

    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     * @override
     */
    setMap(map) {
      super.setMap(map);
      if (map) {
        map.render();
      }
    }

    /**
     * Initializes the slider element. This will determine and set this controls
     * direction_ and also constrain the dragging of the thumb to always be within
     * the bounds of the container.
     *
     * @return {boolean} Initialization successful
     * @private
     */
    initSlider_() {
      const container = this.element;
      let containerWidth = container.offsetWidth;
      let containerHeight = container.offsetHeight;
      if (containerWidth === 0 && containerHeight === 0) {
        return (this.sliderInitialized_ = false);
      }

      const containerStyle = getComputedStyle(container);
      containerWidth -=
        parseFloat(containerStyle['paddingRight']) +
        parseFloat(containerStyle['paddingLeft']);
      containerHeight -=
        parseFloat(containerStyle['paddingTop']) +
        parseFloat(containerStyle['paddingBottom']);
      const thumb = /** @type {HTMLElement} */ (container.firstElementChild);
      const thumbStyle = getComputedStyle(thumb);
      const thumbWidth =
        thumb.offsetWidth +
        parseFloat(thumbStyle['marginRight']) +
        parseFloat(thumbStyle['marginLeft']);
      const thumbHeight =
        thumb.offsetHeight +
        parseFloat(thumbStyle['marginTop']) +
        parseFloat(thumbStyle['marginBottom']);
      this.thumbSize_ = [thumbWidth, thumbHeight];

      if (containerWidth > containerHeight) {
        this.direction_ = Direction.HORIZONTAL;
        this.widthLimit_ = containerWidth - thumbWidth;
      } else {
        this.direction_ = Direction.VERTICAL;
        this.heightLimit_ = containerHeight - thumbHeight;
      }
      return (this.sliderInitialized_ = true);
    }

    /**
     * @param {PointerEvent} event The browser event to handle.
     * @private
     */
    handleContainerClick_(event) {
      const view = this.getMap().getView();

      const relativePosition = this.getRelativePosition_(
        event.offsetX - this.thumbSize_[0] / 2,
        event.offsetY - this.thumbSize_[1] / 2,
      );

      const resolution = this.getResolutionForPosition_(relativePosition);
      const zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));

      view.animateInternal({
        zoom: zoom,
        duration: this.duration_,
        easing: easeOut,
      });
    }

    /**
     * Handle dragger start events.
     * @param {PointerEvent} event The drag event.
     * @private
     */
    handleDraggerStart_(event) {
      if (!this.dragging_ && event.target === this.element.firstElementChild) {
        const element = /** @type {HTMLElement} */ (
          this.element.firstElementChild
        );
        this.getMap().getView().beginInteraction();
        this.startX_ = event.clientX - parseFloat(element.style.left);
        this.startY_ = event.clientY - parseFloat(element.style.top);
        this.dragging_ = true;

        if (this.dragListenerKeys_.length === 0) {
          const drag = this.handleDraggerDrag_;
          const end = this.handleDraggerEnd_;
          const doc = this.getMap().getOwnerDocument();
          this.dragListenerKeys_.push(
            listen(doc, PointerEventType.POINTERMOVE, drag, this),
            listen(doc, PointerEventType.POINTERUP, end, this),
          );
        }
      }
    }

    /**
     * Handle dragger drag events.
     *
     * @param {PointerEvent} event The drag event.
     * @private
     */
    handleDraggerDrag_(event) {
      if (this.dragging_) {
        const deltaX = event.clientX - this.startX_;
        const deltaY = event.clientY - this.startY_;
        const relativePosition = this.getRelativePosition_(deltaX, deltaY);
        this.currentResolution_ =
          this.getResolutionForPosition_(relativePosition);
        this.getMap().getView().setResolution(this.currentResolution_);
      }
    }

    /**
     * Handle dragger end events.
     * @param {PointerEvent} event The drag event.
     * @private
     */
    handleDraggerEnd_(event) {
      if (this.dragging_) {
        const view = this.getMap().getView();
        view.endInteraction();

        this.dragging_ = false;
        this.startX_ = undefined;
        this.startY_ = undefined;
        this.dragListenerKeys_.forEach(unlistenByKey);
        this.dragListenerKeys_.length = 0;
      }
    }

    /**
     * Positions the thumb inside its container according to the given resolution.
     *
     * @param {number} res The res.
     * @private
     */
    setThumbPosition_(res) {
      const position = this.getPositionForResolution_(res);
      const thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);

      if (this.direction_ == Direction.HORIZONTAL) {
        thumb.style.left = this.widthLimit_ * position + 'px';
      } else {
        thumb.style.top = this.heightLimit_ * position + 'px';
      }
    }

    /**
     * Calculates the relative position of the thumb given x and y offsets.  The
     * relative position scales from 0 to 1.  The x and y offsets are assumed to be
     * in pixel units within the dragger limits.
     *
     * @param {number} x Pixel position relative to the left of the slider.
     * @param {number} y Pixel position relative to the top of the slider.
     * @return {number} The relative position of the thumb.
     * @private
     */
    getRelativePosition_(x, y) {
      let amount;
      if (this.direction_ === Direction.HORIZONTAL) {
        amount = x / this.widthLimit_;
      } else {
        amount = y / this.heightLimit_;
      }
      return clamp(amount, 0, 1);
    }

    /**
     * Calculates the corresponding resolution of the thumb given its relative
     * position (where 0 is the minimum and 1 is the maximum).
     *
     * @param {number} position The relative position of the thumb.
     * @return {number} The corresponding resolution.
     * @private
     */
    getResolutionForPosition_(position) {
      const fn = this.getMap().getView().getResolutionForValueFunction();
      return fn(1 - position);
    }

    /**
     * Determines the relative position of the slider for the given resolution.  A
     * relative position of 0 corresponds to the minimum view resolution.  A
     * relative position of 1 corresponds to the maximum view resolution.
     *
     * @param {number} res The resolution.
     * @return {number} The relative position value (between 0 and 1).
     * @private
     */
    getPositionForResolution_(res) {
      const fn = this.getMap().getView().getValueForResolutionFunction();
      return clamp(1 - fn(res), 0, 1);
    }

    /**
     * Update the zoomslider element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      if (!mapEvent.frameState) {
        return;
      }
      if (!this.sliderInitialized_ && !this.initSlider_()) {
        return;
      }
      const res = mapEvent.frameState.viewState.resolution;
      this.currentResolution_ = res;
      this.setThumbPosition_(res);
    }
  }

  /**
   * @module ol/control/ZoomToExtent
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-zoom-extent'] Class name.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {string|HTMLElement} [label='E'] Text label to use for the button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.
   * @property {import("../extent.js").Extent} [extent] The extent to zoom to. If undefined the validity
   * extent of the view projection is used.
   */

  /**
   * @classdesc
   * A button control which, when pressed, changes the map view to a specific
   * extent. To style this control use the css selector `.ol-zoom-extent`.
   *
   * @api
   */
  class ZoomToExtent extends Control {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        target: options.target,
      });

      /**
       * @type {?import("../extent.js").Extent|null}
       * @protected
       */
      this.extent = options.extent ? options.extent : null;

      const className =
        options.className !== undefined ? options.className : 'ol-zoom-extent';

      const label = options.label !== undefined ? options.label : 'E';
      const tipLabel =
        options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';
      const button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(
        typeof label === 'string' ? document.createTextNode(label) : label,
      );

      button.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this),
        false,
      );

      const cssClasses =
        className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(button);
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleZoomToExtent();
    }

    /**
     * @protected
     */
    handleZoomToExtent() {
      const map = this.getMap();
      const view = map.getView();
      const extent = !this.extent
        ? view.getProjection().getExtent()
        : fromUserExtent(this.extent, view.getProjection());
      view.fitInternal(fromExtent(extent));
    }
  }

  /**
   * @module ol/control
   */

  var control$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Attribution: Attribution,
    Control: Control,
    FullScreen: FullScreen,
    MousePosition: MousePosition,
    OverviewMap: OverviewMap,
    Rotate: Rotate,
    ScaleLine: ScaleLine,
    Zoom: Zoom,
    ZoomSlider: ZoomSlider,
    ZoomToExtent: ZoomToExtent,
    defaults: defaults$1
  });

  /**
   * @module ol/format/JSONFeature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for JSON feature formats.
   *
   * @template {import('../Feature.js').FeatureLike} [FeatureType=import("../Feature.js").default]
   * @extends {FeatureFormat<FeatureType>}
   * @abstract
   */
  class JSONFeature extends FeatureFormat {
    constructor() {
      super();
    }

    /**
     * @return {import("./Feature.js").Type} Format.
     * @override
     */
    getType() {
      return 'json';
    }

    /**
     * Read a feature.  Only works for a single feature. Use `readFeatures` to
     * read a feature collection.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {FeatureType|Array<FeatureType>} Feature.
     * @api
     * @override
     */
    readFeature(source, options) {
      return this.readFeatureFromObject(
        getObject(source),
        this.getReadOptions(source, options),
      );
    }

    /**
     * Read all features.  Works with both a single feature and a feature
     * collection.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {Array<FeatureType>} Features.
     * @api
     * @override
     */
    readFeatures(source, options) {
      return this.readFeaturesFromObject(
        getObject(source),
        this.getReadOptions(source, options),
      );
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {FeatureType|Array<FeatureType>} Feature.
     */
    readFeatureFromObject(object, options) {
      return abstract();
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<FeatureType>} Features.
     */
    readFeaturesFromObject(object, options) {
      return abstract();
    }

    /**
     * Read a geometry.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @api
     * @override
     */
    readGeometry(source, options) {
      return this.readGeometryFromObject(
        getObject(source),
        this.getReadOptions(source, options),
      );
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromObject(object, options) {
      return abstract();
    }

    /**
     * Read the projection.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     * @override
     */
    readProjection(source) {
      return this.readProjectionFromObject(getObject(source));
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromObject(object) {
      return abstract();
    }

    /**
     * Encode a feature as string.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded feature.
     * @api
     * @override
     */
    writeFeature(feature, options) {
      return JSON.stringify(this.writeFeatureObject(feature, options));
    }

    /**
     * @abstract
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {Object} Object.
     */
    writeFeatureObject(feature, options) {
      return abstract();
    }

    /**
     * Encode an array of features as string.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded features.
     * @api
     * @override
     */
    writeFeatures(features, options) {
      return JSON.stringify(this.writeFeaturesObject(features, options));
    }

    /**
     * @abstract
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {Object} Object.
     */
    writeFeaturesObject(features, options) {
      return abstract();
    }

    /**
     * Encode a geometry as string.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded geometry.
     * @api
     * @override
     */
    writeGeometry(geometry, options) {
      return JSON.stringify(this.writeGeometryObject(geometry, options));
    }

    /**
     * @abstract
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {Object} Object.
     */
    writeGeometryObject(geometry, options) {
      return abstract();
    }
  }

  /**
   * @param {Document|Element|Object|string} source Source.
   * @return {Object} Object.
   */
  function getObject(source) {
    if (typeof source === 'string') {
      const object = JSON.parse(source);
      return object ? /** @type {Object} */ (object) : null;
    }
    if (source !== null) {
      return source;
    }
    return null;
  }

  /**
   * @module ol/format/EsriJSON
   */

  /**
   * @typedef {import("arcgis-rest-api").Feature} EsriJSONFeature
   * @typedef {import("arcgis-rest-api").FeatureSet} EsriJSONFeatureSet
   * @typedef {import("arcgis-rest-api").Geometry} EsriJSONGeometry
   * @typedef {import("arcgis-rest-api").Point} EsriJSONPoint
   * @typedef {import("arcgis-rest-api").Polyline} EsriJSONPolyline
   * @typedef {import("arcgis-rest-api").Polygon} EsriJSONPolygon
   * @typedef {import("arcgis-rest-api").Multipoint} EsriJSONMultipoint
   * @typedef {import("arcgis-rest-api").HasZM} EsriJSONHasZM
   * @typedef {import("arcgis-rest-api").Position} EsriJSONPosition
   * @typedef {import("arcgis-rest-api").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid
   */

  /**
   * @typedef {Object} EsriJSONMultiPolygon
   * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.
   * @property {boolean} [hasM] If the polygon coordinates have an M value.
   * @property {boolean} [hasZ] If the polygon coordinates have a Z value.
   * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.
   */

  /**
   * @const
   * @type {Object<import("../geom/Geometry.js").Type, function(EsriJSONGeometry): import("../geom/Geometry.js").default>}
   */
  const GEOMETRY_READERS$1 = {
    Point: readPointGeometry$2,
    LineString: readLineStringGeometry$2,
    Polygon: readPolygonGeometry$2,
    MultiPoint: readMultiPointGeometry$2,
    MultiLineString: readMultiLineStringGeometry$2,
    MultiPolygon: readMultiPolygonGeometry$2,
  };

  /**
   * @const
   * @type {Object<import("../geom/Geometry.js").Type, function(import("../geom/Geometry.js").default, import("./Feature.js").WriteOptions=): (EsriJSONGeometry)>}
   */
  const GEOMETRY_WRITERS = {
    Point: writePointGeometry$1,
    LineString: writeLineStringGeometry$1,
    Polygon: writePolygonGeometry$1,
    MultiPoint: writeMultiPointGeometry$1,
    MultiLineString: writeMultiLineStringGeometry$1,
    MultiPolygon: writeMultiPolygonGeometry$1,
  };

  /**
   * @typedef {Object} Options
   * @property {string} [geometryName] Geometry name to use when creating features.
   */

  /**
   * @classdesc
   * Feature format for reading and writing data in the EsriJSON format.
   *
   * @api
   */
  class EsriJSON extends JSONFeature {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super();

      /**
       * Name of the geometry attribute for features.
       * @type {string|undefined}
       * @private
       */
      this.geometryName_ = options.geometryName;
    }

    /**
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @param {string} [idField] Name of the field where to get the id from.
     * @protected
     * @return {import("../Feature.js").default} Feature.
     * @override
     */
    readFeatureFromObject(object, options, idField) {
      const esriJSONFeature = /** @type {EsriJSONFeature} */ (object);
      const geometry = readGeometry$1(esriJSONFeature.geometry, options);
      const feature = new Feature();
      if (this.geometryName_) {
        feature.setGeometryName(this.geometryName_);
      }
      feature.setGeometry(geometry);
      if (esriJSONFeature.attributes) {
        feature.setProperties(esriJSONFeature.attributes, true);
        const id = esriJSONFeature.attributes[idField];
        if (id !== undefined) {
          feature.setId(/** @type {number} */ (id));
        }
      }
      return feature;
    }

    /**
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<Feature>} Features.
     * @override
     */
    readFeaturesFromObject(object, options) {
      options = options ? options : {};
      if (object['features']) {
        const esriJSONFeatureSet = /** @type {EsriJSONFeatureSet} */ (object);
        /** @type {Array<import("../Feature.js").default>} */
        const features = [];
        const esriJSONFeatures = esriJSONFeatureSet.features;
        for (let i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {
          features.push(
            this.readFeatureFromObject(
              esriJSONFeatures[i],
              options,
              object.objectIdFieldName,
            ),
          );
        }
        return features;
      }
      return [this.readFeatureFromObject(object, options)];
    }

    /**
     * @param {EsriJSONGeometry} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @override
     */
    readGeometryFromObject(object, options) {
      return readGeometry$1(object, options);
    }

    /**
     * @param {Object} object Object.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     * @override
     */
    readProjectionFromObject(object) {
      if (
        object['spatialReference'] &&
        object['spatialReference']['wkid'] !== undefined
      ) {
        const spatialReference = /** @type {EsriJSONSpatialReferenceWkid} */ (
          object['spatialReference']
        );
        const crs = spatialReference.wkid;
        return get$2('EPSG:' + crs);
      }
      return null;
    }

    /**
     * Encode a geometry as a EsriJSON object.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {EsriJSONGeometry} Object.
     * @api
     * @override
     */
    writeGeometryObject(geometry, options) {
      return writeGeometry$1(geometry, this.adaptOptions(options));
    }

    /**
     * Encode a feature as a esriJSON Feature object.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {Object} Object.
     * @api
     * @override
     */
    writeFeatureObject(feature, options) {
      options = this.adaptOptions(options);
      const object = {};
      if (!feature.hasProperties()) {
        object['attributes'] = {};
        return object;
      }
      const properties = feature.getProperties();
      const geometry = feature.getGeometry();
      if (geometry) {
        object['geometry'] = writeGeometry$1(geometry, options);
        const projection =
          options && (options.dataProjection || options.featureProjection);
        if (projection) {
          object['geometry']['spatialReference'] =
            /** @type {EsriJSONSpatialReferenceWkid} */ ({
              wkid: Number(get$2(projection).getCode().split(':').pop()),
            });
        }
        delete properties[feature.getGeometryName()];
      }
      if (!isEmpty$1(properties)) {
        object['attributes'] = properties;
      } else {
        object['attributes'] = {};
      }
      return object;
    }

    /**
     * Encode an array of features as a EsriJSON object.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {EsriJSONFeatureSet} EsriJSON Object.
     * @api
     * @override
     */
    writeFeaturesObject(features, options) {
      options = this.adaptOptions(options);
      const objects = [];
      for (let i = 0, ii = features.length; i < ii; ++i) {
        objects.push(this.writeFeatureObject(features[i], options));
      }
      return {
        'features': objects,
      };
    }
  }

  /**
   * @param {EsriJSONGeometry} object Object.
   * @param {import("./Feature.js").ReadOptions} [options] Read options.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  function readGeometry$1(object, options) {
    if (!object) {
      return null;
    }
    /** @type {import("../geom/Geometry.js").Type} */
    let type;
    if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {
      type = 'Point';
    } else if (object['points']) {
      type = 'MultiPoint';
    } else if (object['paths']) {
      const esriJSONPolyline = /** @type {EsriJSONPolyline} */ (object);
      if (esriJSONPolyline.paths.length === 1) {
        type = 'LineString';
      } else {
        type = 'MultiLineString';
      }
    } else if (object['rings']) {
      const esriJSONPolygon = /** @type {EsriJSONPolygon} */ (object);
      const layout = getGeometryLayout(esriJSONPolygon);
      const rings = convertRings(esriJSONPolygon.rings, layout);
      if (rings.length === 1) {
        type = 'Polygon';
        object = Object.assign({}, object, {['rings']: rings[0]});
      } else {
        type = 'MultiPolygon';
        object = Object.assign({}, object, {['rings']: rings});
      }
    }
    const geometryReader = GEOMETRY_READERS$1[type];
    return transformGeometryWithOptions(geometryReader(object), false, options);
  }

  /**
   * Determines inner and outer rings.
   * Checks if any polygons in this array contain any other polygons in this
   * array. It is used for checking for holes.
   * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser
   * @param {Array<!Array<!Array<number>>>} rings Rings.
   * @param {import("../geom/Geometry.js").GeometryLayout} layout Geometry layout.
   * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.
   */
  function convertRings(rings, layout) {
    const flatRing = [];
    const outerRings = [];
    const holes = [];
    let i, ii;
    for (i = 0, ii = rings.length; i < ii; ++i) {
      flatRing.length = 0;
      deflateCoordinates(flatRing, 0, rings[i], layout.length);
      // is this ring an outer ring? is it clockwise?
      const clockwise = linearRingIsClockwise(
        flatRing,
        0,
        flatRing.length,
        layout.length,
      );
      if (clockwise) {
        outerRings.push([rings[i]]);
      } else {
        holes.push(rings[i]);
      }
    }
    while (holes.length) {
      const hole = holes.shift();
      let matched = false;
      // loop over all outer rings and see if they contain our hole.
      for (i = outerRings.length - 1; i >= 0; i--) {
        const outerRing = outerRings[i][0];
        const containsHole = containsExtent(
          new LinearRing(outerRing).getExtent(),
          new LinearRing(hole).getExtent(),
        );
        if (containsHole) {
          // the hole is contained push it into our polygon
          outerRings[i].push(hole);
          matched = true;
          break;
        }
      }
      if (!matched) {
        // no outer rings contain this hole turn it into and outer
        // ring (reverse it)
        outerRings.push([hole.reverse()]);
      }
    }
    return outerRings;
  }

  /**
   * @param {EsriJSONPoint} object Object.
   * @return {import("../geom/Geometry.js").default} Point.
   */
  function readPointGeometry$2(object) {
    let point;
    if (object.m !== undefined && object.z !== undefined) {
      point = new Point$1([object.x, object.y, object.z, object.m], 'XYZM');
    } else if (object.z !== undefined) {
      point = new Point$1([object.x, object.y, object.z], 'XYZ');
    } else if (object.m !== undefined) {
      point = new Point$1([object.x, object.y, object.m], 'XYM');
    } else {
      point = new Point$1([object.x, object.y]);
    }
    return point;
  }

  /**
   * @param {EsriJSONPolyline} object Object.
   * @return {import("../geom/Geometry.js").default} LineString.
   */
  function readLineStringGeometry$2(object) {
    const layout = getGeometryLayout(object);
    return new LineString(object.paths[0], layout);
  }

  /**
   * @param {EsriJSONPolyline} object Object.
   * @return {import("../geom/Geometry.js").default} MultiLineString.
   */
  function readMultiLineStringGeometry$2(object) {
    const layout = getGeometryLayout(object);
    return new MultiLineString(object.paths, layout);
  }

  /**
   * @param {EsriJSONHasZM} object Object.
   * @return {import("../geom/Geometry.js").GeometryLayout} The geometry layout to use.
   */
  function getGeometryLayout(object) {
    /** @type {import("../geom/Geometry.js").GeometryLayout} */
    let layout = 'XY';
    if (object.hasZ === true && object.hasM === true) {
      layout = 'XYZM';
    } else if (object.hasZ === true) {
      layout = 'XYZ';
    } else if (object.hasM === true) {
      layout = 'XYM';
    }
    return layout;
  }

  /**
   * @param {EsriJSONMultipoint} object Object.
   * @return {import("../geom/Geometry.js").default} MultiPoint.
   */
  function readMultiPointGeometry$2(object) {
    const layout = getGeometryLayout(object);
    return new MultiPoint(object.points, layout);
  }

  /**
   * @param {EsriJSONMultiPolygon} object Object.
   * @return {import("../geom/Geometry.js").default} MultiPolygon.
   */
  function readMultiPolygonGeometry$2(object) {
    const layout = getGeometryLayout(object);
    return new MultiPolygon(object.rings, layout);
  }

  /**
   * @param {EsriJSONPolygon} object Object.
   * @return {import("../geom/Geometry.js").default} Polygon.
   */
  function readPolygonGeometry$2(object) {
    const layout = getGeometryLayout(object);
    return new Polygon(object.rings, layout);
  }

  /**
   * @param {import("../geom/Point.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {EsriJSONPoint} EsriJSON geometry.
   */
  function writePointGeometry$1(geometry, options) {
    const coordinates = geometry.getCoordinates();
    /** @type {EsriJSONPoint} */
    let esriJSON;
    const layout = geometry.getLayout();
    if (layout === 'XYZ') {
      esriJSON = {
        x: coordinates[0],
        y: coordinates[1],
        z: coordinates[2],
      };
    } else if (layout === 'XYM') {
      esriJSON = {
        x: coordinates[0],
        y: coordinates[1],
        m: coordinates[2],
      };
    } else if (layout === 'XYZM') {
      esriJSON = {
        x: coordinates[0],
        y: coordinates[1],
        z: coordinates[2],
        m: coordinates[3],
      };
    } else if (layout === 'XY') {
      esriJSON = {
        x: coordinates[0],
        y: coordinates[1],
      };
    } else {
      throw new Error('Invalid geometry layout');
    }
    return esriJSON;
  }

  /**
   * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @return {Object} Object with boolean hasZ and hasM keys.
   */
  function getHasZM(geometry) {
    const layout = geometry.getLayout();
    return {
      hasZ: layout === 'XYZ' || layout === 'XYZM',
      hasM: layout === 'XYM' || layout === 'XYZM',
    };
  }

  /**
   * @param {import("../geom/LineString.js").default} lineString Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {EsriJSONPolyline} EsriJSON geometry.
   */
  function writeLineStringGeometry$1(lineString, options) {
    const hasZM = getHasZM(lineString);
    return {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      paths: [
        /** @type {Array<EsriJSONPosition>} */ (lineString.getCoordinates()),
      ],
    };
  }

  /**
   * @param {import("../geom/Polygon.js").default} polygon Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {EsriJSONPolygon} EsriJSON geometry.
   */
  function writePolygonGeometry$1(polygon, options) {
    // Esri geometries use the left-hand rule
    const hasZM = getHasZM(polygon);
    return {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      rings: /** @type {Array<Array<EsriJSONPosition>>} */ (
        polygon.getCoordinates(false)
      ),
    };
  }

  /**
   * @param {import("../geom/MultiLineString.js").default} multiLineString Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {EsriJSONPolyline} EsriJSON geometry.
   */
  function writeMultiLineStringGeometry$1(multiLineString, options) {
    const hasZM = getHasZM(multiLineString);
    return {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      paths: /** @type {Array<Array<EsriJSONPosition>>} */ (
        multiLineString.getCoordinates()
      ),
    };
  }

  /**
   * @param {import("../geom/MultiPoint.js").default} multiPoint Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {EsriJSONMultipoint} EsriJSON geometry.
   */
  function writeMultiPointGeometry$1(multiPoint, options) {
    const hasZM = getHasZM(multiPoint);
    return {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      points: /** @type {Array<EsriJSONPosition>} */ (
        multiPoint.getCoordinates()
      ),
    };
  }

  /**
   * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {EsriJSONPolygon} EsriJSON geometry.
   */
  function writeMultiPolygonGeometry$1(geometry, options) {
    const hasZM = getHasZM(geometry);
    const coordinates = geometry.getCoordinates(false);
    const output = [];
    for (let i = 0; i < coordinates.length; i++) {
      for (let x = coordinates[i].length - 1; x >= 0; x--) {
        output.push(coordinates[i][x]);
      }
    }
    return {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      rings: /** @type {Array<Array<EsriJSONPosition>>} */ (output),
    };
  }

  /**
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {EsriJSONGeometry} EsriJSON geometry.
   */
  function writeGeometry$1(geometry, options) {
    const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];
    return geometryWriter(
      transformGeometryWithOptions(geometry, true, options),
      options,
    );
  }

  /**
   * @module ol/format/GeoJSON
   */


  /**
   * @typedef {import("geojson").GeoJSON} GeoJSONObject
   * @typedef {import("geojson").Feature} GeoJSONFeature
   * @typedef {import("geojson").FeatureCollection} GeoJSONFeatureCollection
   * @typedef {import("geojson").Geometry} GeoJSONGeometry
   * @typedef {import("geojson").Point} GeoJSONPoint
   * @typedef {import("geojson").LineString} GeoJSONLineString
   * @typedef {import("geojson").Polygon} GeoJSONPolygon
   * @typedef {import("geojson").MultiPoint} GeoJSONMultiPoint
   * @typedef {import("geojson").MultiLineString} GeoJSONMultiLineString
   * @typedef {import("geojson").MultiPolygon} GeoJSONMultiPolygon
   * @typedef {import("geojson").GeometryCollection} GeoJSONGeometryCollection
   */

  /**
   * @template {import("../Feature.js").FeatureLike} [FeatureType=import("../Feature.js").default]
   * @typedef {Object} Options
   *
   * @property {import("../proj.js").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection for features read or
   * written by the format.  Options passed to read or write methods will take precedence.
   * @property {string} [geometryName] Geometry name to use when creating features.
   * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include
   * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader
   * will look for that field to set the geometry name. If both this field is set to `true`
   * and a `geometryName` is provided, the `geometryName` will take precedence.
   * @property {import('./Feature.js').FeatureToFeatureClass<FeatureType>} [featureClass] Feature class
   * to be used when reading features. The default is {@link module:ol/Feature~Feature}. If performance is
   * the primary concern, and features are not going to be modified or round-tripped through the format,
   * consider using {@link module:ol/render/Feature~RenderFeature}
   */

  /**
   * @classdesc
   * Feature format for reading and writing data in the GeoJSON format.
   *
   * @template {import('../Feature.js').FeatureLike} [FeatureType=import("../Feature.js").default]
   * @extends {JSONFeature<FeatureType>}
   * @api
   */
  class GeoJSON extends JSONFeature {
    /**
     * @param {Options<FeatureType>} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super();

      /**
       * @type {import("../proj/Projection.js").default}
       */
      this.dataProjection = get$2(
        options.dataProjection ? options.dataProjection : 'EPSG:4326',
      );

      if (options.featureProjection) {
        /**
         * @type {import("../proj/Projection.js").default}
         */
        this.defaultFeatureProjection = get$2(options.featureProjection);
      }

      if (options.featureClass) {
        this.featureClass = options.featureClass;
      }

      /**
       * Name of the geometry attribute for features.
       * @type {string|undefined}
       * @private
       */
      this.geometryName_ = options.geometryName;

      /**
       * Look for the `geometry_name` in the feature GeoJSON
       * @type {boolean|undefined}
       * @private
       */
      this.extractGeometryName_ = options.extractGeometryName;

      this.supportedMediaTypes = [
        'application/geo+json',
        'application/vnd.geo+json',
      ];
    }

    /**
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {FeatureType|Array<FeatureType>} Feature.
     * @override
     */
    readFeatureFromObject(object, options) {
      /**
       * @type {GeoJSONFeature}
       */
      let geoJSONFeature = null;
      if (object['type'] === 'Feature') {
        geoJSONFeature = /** @type {GeoJSONFeature} */ (object);
      } else {
        geoJSONFeature = {
          'type': 'Feature',
          'geometry': /** @type {GeoJSONGeometry} */ (object),
          'properties': null,
        };
      }

      const geometry = readGeometryInternal(geoJSONFeature['geometry']);
      if (this.featureClass === RenderFeature) {
        return /** @type {FeatureType|Array<FeatureType>} */ (
          createRenderFeature(
            {
              geometry,
              id: geoJSONFeature['id'],
              properties: geoJSONFeature['properties'],
            },
            options,
          )
        );
      }

      const feature = new Feature();
      if (this.geometryName_) {
        feature.setGeometryName(this.geometryName_);
      } else if (this.extractGeometryName_ && geoJSONFeature['geometry_name']) {
        feature.setGeometryName(geoJSONFeature['geometry_name']);
      }
      feature.setGeometry(createGeometry(geometry, options));

      if ('id' in geoJSONFeature) {
        feature.setId(geoJSONFeature['id']);
      }

      if (geoJSONFeature['properties']) {
        feature.setProperties(geoJSONFeature['properties'], true);
      }
      return /** @type {FeatureType|Array<FeatureType>} */ (feature);
    }

    /**
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<FeatureType>} Features.
     * @override
     */
    readFeaturesFromObject(object, options) {
      const geoJSONObject = /** @type {GeoJSONObject} */ (object);
      let features = null;
      if (geoJSONObject['type'] === 'FeatureCollection') {
        const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (
          object
        );
        features = [];
        const geoJSONFeatures = geoJSONFeatureCollection['features'];
        for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {
          const featureObject = this.readFeatureFromObject(
            geoJSONFeatures[i],
            options,
          );
          if (!featureObject) {
            continue;
          }
          features.push(featureObject);
        }
      } else {
        features = [this.readFeatureFromObject(object, options)];
      }
      return /** @type {Array<FeatureType>} */ (features.flat());
    }

    /**
     * @param {GeoJSONGeometry} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @override
     */
    readGeometryFromObject(object, options) {
      return readGeometry(object, options);
    }

    /**
     * @param {Object} object Object.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     * @override
     */
    readProjectionFromObject(object) {
      const crs = object['crs'];
      let projection;
      if (crs) {
        if (crs['type'] == 'name') {
          projection = get$2(crs['properties']['name']);
        } else if (crs['type'] === 'EPSG') {
          projection = get$2('EPSG:' + crs['properties']['code']);
        } else {
          throw new Error('Unknown SRS type');
        }
      } else {
        projection = this.dataProjection;
      }
      return /** @type {import("../proj/Projection.js").default} */ (projection);
    }

    /**
     * Encode a feature as a GeoJSON Feature object.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {GeoJSONFeature} Object.
     * @api
     * @override
     */
    writeFeatureObject(feature, options) {
      options = this.adaptOptions(options);

      /** @type {GeoJSONFeature} */
      const object = {
        'type': 'Feature',
        geometry: null,
        properties: null,
      };

      const id = feature.getId();
      if (id !== undefined) {
        object.id = id;
      }

      if (!feature.hasProperties()) {
        return object;
      }

      const properties = feature.getProperties();
      const geometry = feature.getGeometry();
      if (geometry) {
        object.geometry = writeGeometry(geometry, options);

        delete properties[feature.getGeometryName()];
      }

      if (!isEmpty$1(properties)) {
        object.properties = properties;
      }

      return object;
    }

    /**
     * Encode an array of features as a GeoJSON object.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {GeoJSONFeatureCollection} GeoJSON Object.
     * @api
     * @override
     */
    writeFeaturesObject(features, options) {
      options = this.adaptOptions(options);
      const objects = [];
      for (let i = 0, ii = features.length; i < ii; ++i) {
        objects.push(this.writeFeatureObject(features[i], options));
      }
      return {
        type: 'FeatureCollection',
        features: objects,
      };
    }

    /**
     * Encode a geometry as a GeoJSON object.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.
     * @api
     * @override
     */
    writeGeometryObject(geometry, options) {
      return writeGeometry(geometry, this.adaptOptions(options));
    }
  }

  /**
   * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.
   * @param {import("./Feature.js").ReadOptions} [options] Read options.
   * @return {import("./Feature.js").GeometryObject} Geometry.
   */
  function readGeometryInternal(object, options) {
    if (!object) {
      return null;
    }

    /** @type {import("./Feature.js").GeometryObject} */
    let geometry;
    switch (object['type']) {
      case 'Point': {
        geometry = readPointGeometry$1(/** @type {GeoJSONPoint} */ (object));
        break;
      }
      case 'LineString': {
        geometry = readLineStringGeometry$1(
          /** @type {GeoJSONLineString} */ (object),
        );
        break;
      }
      case 'Polygon': {
        geometry = readPolygonGeometry$1(/** @type {GeoJSONPolygon} */ (object));
        break;
      }
      case 'MultiPoint': {
        geometry = readMultiPointGeometry$1(
          /** @type {GeoJSONMultiPoint} */ (object),
        );
        break;
      }
      case 'MultiLineString': {
        geometry = readMultiLineStringGeometry$1(
          /** @type {GeoJSONMultiLineString} */ (object),
        );
        break;
      }
      case 'MultiPolygon': {
        geometry = readMultiPolygonGeometry$1(
          /** @type {GeoJSONMultiPolygon} */ (object),
        );
        break;
      }
      case 'GeometryCollection': {
        geometry = readGeometryCollectionGeometry(
          /** @type {GeoJSONGeometryCollection} */ (object),
        );
        break;
      }
      default: {
        throw new Error('Unsupported GeoJSON type: ' + object['type']);
      }
    }
    return geometry;
  }

  /**
   * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.
   * @param {import("./Feature.js").ReadOptions} [options] Read options.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  function readGeometry(object, options) {
    const geometryObject = readGeometryInternal(object);
    return createGeometry(geometryObject, options);
  }

  /**
   * @param {GeoJSONGeometryCollection} object Object.
   * @param {import("./Feature.js").ReadOptions} [options] Read options.
   * @return {import("./Feature.js").GeometryCollectionObject} Geometry collection.
   */
  function readGeometryCollectionGeometry(object, options) {
    const geometries = object['geometries'].map(
      /**
       * @param {GeoJSONGeometry} geometry Geometry.
       * @return {import("./Feature.js").GeometryObject} geometry Geometry.
       */
      function (geometry) {
        return readGeometryInternal(geometry);
      },
    );
    return geometries;
  }

  /**
   * @param {GeoJSONPoint} object Input object.
   * @return {import("./Feature.js").GeometryObject} Point geometry.
   */
  function readPointGeometry$1(object) {
    const flatCoordinates = object['coordinates'];
    return {
      type: 'Point',
      flatCoordinates,
      layout: getLayoutForStride(flatCoordinates.length),
    };
  }

  /**
   * @param {GeoJSONLineString} object Object.
   * @return {import("./Feature.js").GeometryObject} LineString geometry.
   */
  function readLineStringGeometry$1(object) {
    const coordinates = object['coordinates'];
    const flatCoordinates = coordinates.flat();
    return {
      type: 'LineString',
      flatCoordinates,
      ends: [flatCoordinates.length],
      layout: getLayoutForStride(coordinates[0]?.length || 2),
    };
  }

  /**
   * @param {GeoJSONMultiLineString} object Object.
   * @return {import("./Feature.js").GeometryObject} MultiLineString geometry.
   */
  function readMultiLineStringGeometry$1(object) {
    const coordinates = object['coordinates'];
    const stride = coordinates[0]?.[0]?.length || 2;
    const flatCoordinates = [];
    const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);
    return {
      type: 'MultiLineString',
      flatCoordinates,
      ends,
      layout: getLayoutForStride(stride),
    };
  }

  /**
   * @param {GeoJSONMultiPoint} object Object.
   * @return {import("./Feature.js").GeometryObject} MultiPoint geometry.
   */
  function readMultiPointGeometry$1(object) {
    const coordinates = object['coordinates'];
    return {
      type: 'MultiPoint',
      flatCoordinates: coordinates.flat(),
      layout: getLayoutForStride(coordinates[0]?.length || 2),
    };
  }

  /**
   * @param {GeoJSONMultiPolygon} object Object.
   * @return {import("./Feature.js").GeometryObject} MultiPolygon geometry.
   */
  function readMultiPolygonGeometry$1(object) {
    const coordinates = object['coordinates'];
    const flatCoordinates = [];
    const stride = coordinates[0]?.[0]?.[0].length || 2;
    const endss = deflateMultiCoordinatesArray(
      flatCoordinates,
      0,
      coordinates,
      stride,
    );
    return {
      type: 'MultiPolygon',
      flatCoordinates,
      ends: endss,
      layout: getLayoutForStride(stride),
    };
  }

  /**
   * @param {GeoJSONPolygon} object Object.
   * @return {import("./Feature.js").GeometryObject} Polygon.
   */
  function readPolygonGeometry$1(object) {
    const coordinates = object['coordinates'];
    const flatCoordinates = [];
    const stride = coordinates[0]?.[0]?.length;
    const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);
    return {
      type: 'Polygon',
      flatCoordinates,
      ends,
      layout: getLayoutForStride(stride),
    };
  }

  /**
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeGeometry(geometry, options) {
    geometry = transformGeometryWithOptions(geometry, true, options);

    const type = geometry.getType();

    /** @type {GeoJSONGeometry} */
    let geoJSON;
    switch (type) {
      case 'Point': {
        geoJSON = writePointGeometry(
          /** @type {import("../geom/Point.js").default} */ (geometry));
        break;
      }
      case 'LineString': {
        geoJSON = writeLineStringGeometry(
          /** @type {import("../geom/LineString.js").default} */ (geometry));
        break;
      }
      case 'Polygon': {
        geoJSON = writePolygonGeometry(
          /** @type {import("../geom/Polygon.js").default} */ (geometry),
          options,
        );
        break;
      }
      case 'MultiPoint': {
        geoJSON = writeMultiPointGeometry(
          /** @type {import("../geom/MultiPoint.js").default} */ (geometry));
        break;
      }
      case 'MultiLineString': {
        geoJSON = writeMultiLineStringGeometry(
          /** @type {import("../geom/MultiLineString.js").default} */ (geometry));
        break;
      }
      case 'MultiPolygon': {
        geoJSON = writeMultiPolygonGeometry(
          /** @type {import("../geom/MultiPolygon.js").default} */ (geometry),
          options,
        );
        break;
      }
      case 'GeometryCollection': {
        geoJSON = writeGeometryCollectionGeometry(
          /** @type {import("../geom/GeometryCollection.js").default} */ (
            geometry
          ),
          options,
        );
        break;
      }
      case 'Circle': {
        geoJSON = {
          type: 'GeometryCollection',
          geometries: [],
        };
        break;
      }
      default: {
        throw new Error('Unsupported geometry type: ' + type);
      }
    }
    return geoJSON;
  }

  /**
   * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.
   */
  function writeGeometryCollectionGeometry(geometry, options) {
    options = Object.assign({}, options);
    delete options.featureProjection;
    const geometries = geometry.getGeometriesArray().map(function (geometry) {
      return writeGeometry(geometry, options);
    });
    return {
      type: 'GeometryCollection',
      geometries: geometries,
    };
  }

  /**
   * @param {import("../geom/LineString.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeLineStringGeometry(geometry, options) {
    return {
      type: 'LineString',
      coordinates: geometry.getCoordinates(),
    };
  }

  /**
   * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiLineStringGeometry(geometry, options) {
    return {
      type: 'MultiLineString',
      coordinates: geometry.getCoordinates(),
    };
  }

  /**
   * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiPointGeometry(geometry, options) {
    return {
      type: 'MultiPoint',
      coordinates: geometry.getCoordinates(),
    };
  }

  /**
   * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiPolygonGeometry(geometry, options) {
    let right;
    if (options) {
      right = options.rightHanded;
    }
    return {
      type: 'MultiPolygon',
      coordinates: geometry.getCoordinates(right),
    };
  }

  /**
   * @param {import("../geom/Point.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writePointGeometry(geometry, options) {
    return {
      type: 'Point',
      coordinates: geometry.getCoordinates(),
    };
  }

  /**
   * @param {import("../geom/Polygon.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writePolygonGeometry(geometry, options) {
    let right;
    if (options) {
      right = options.rightHanded;
    }
    return {
      type: 'Polygon',
      coordinates: geometry.getCoordinates(right),
    };
  }

  /**
   * @module ol/format/GMLBase
   */
  // FIXME Envelopes should not be treated as geometries! readEnvelope_ is part
  // of GEOMETRY_PARSERS_ and methods using GEOMETRY_PARSERS_ do not expect
  // envelopes/extents, only geometries!

  /**
   * @const
   * @type {string}
   */
  const GMLNS = 'http://www.opengis.net/gml';

  /**
   * A regular expression that matches if a string only contains whitespace
   * characters. It will e.g. match `''`, `' '`, `'\n'` etc.
   *
   * @const
   * @type {RegExp}
   */
  const ONLY_WHITESPACE_RE = /^\s*$/;

  /**
   * @typedef {Object} Options
   * @property {Object<string, string>|string} [featureNS] Feature
   * namespace. If not defined will be derived from GML. If multiple
   * feature types have been configured which come from different feature
   * namespaces, this will be an object with the keys being the prefixes used
   * in the entries of featureType array. The values of the object will be the
   * feature namespaces themselves. So for instance there might be a featureType
   * item `topp:states` in the `featureType` array and then there will be a key
   * `topp` in the featureNS object with value `http://www.openplans.org/topp`.
   * @property {Array<string>|string} [featureType] Feature type(s) to parse.
   * If multiple feature types need to be configured
   * which come from different feature namespaces, `featureNS` will be an object
   * with the keys being the prefixes used in the entries of featureType array.
   * The values of the object will be the feature namespaces themselves.
   * So for instance there might be a featureType item `topp:states` and then
   * there will be a key named `topp` in the featureNS object with value
   * `http://www.openplans.org/topp`.
   * @property {string} [srsName] srsName to use when writing geometries.
   * @property {boolean} [surface=false] Write gml:Surface instead of gml:Polygon
   * elements. This also affects the elements in multi-part geometries.
   * @property {boolean} [curve=false] Write gml:Curve instead of gml:LineString
   * elements. This also affects the elements in multi-part geometries.
   * @property {boolean} [multiCurve=true] Write gml:MultiCurve instead of gml:MultiLineString.
   * Since the latter is deprecated in GML 3.
   * @property {boolean} [multiSurface=true] Write gml:multiSurface instead of
   * gml:MultiPolygon. Since the latter is deprecated in GML 3.
   * @property {string} [schemaLocation] Optional schemaLocation to use when
   * writing out the GML, this will override the default provided.
   * @property {boolean} [hasZ=false] If coordinates have a Z value.
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Feature base format for reading and writing data in the GML format.
   * This class cannot be instantiated, it contains only base content that
   * is shared with versioned format classes GML2 and GML3.
   *
   * @abstract
   * @api
   */
  class GMLBase extends XMLFeature {
    /**
     * @param {Options} [options] Optional configuration object.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @protected
       * @type {Array<string>|string|undefined}
       */
      this.featureType = options.featureType;

      /**
       * @protected
       * @type {Object<string, string>|string|undefined}
       */
      this.featureNS = options.featureNS;

      /**
       * @protected
       * @type {string|undefined}
       */
      this.srsName = options.srsName;

      /**
       * @protected
       * @type {string}
       */
      this.schemaLocation = '';

      /**
       * @type {Object<string, Object<string, Object>>}
       */
      this.FEATURE_COLLECTION_PARSERS = {};
      this.FEATURE_COLLECTION_PARSERS[this.namespace] = {
        'featureMember': makeArrayPusher(this.readFeaturesInternal),
        'featureMembers': makeReplacer(this.readFeaturesInternal),
      };

      this.supportedMediaTypes = ['application/gml+xml'];
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<Feature> | undefined} Features.
     */
    readFeaturesInternal(node, objectStack) {
      const localName = node.localName;
      let features = null;
      if (localName == 'FeatureCollection') {
        features = pushParseAndPop(
          [],
          this.FEATURE_COLLECTION_PARSERS,
          node,
          objectStack,
          this,
        );
      } else if (
        localName == 'featureMembers' ||
        localName == 'featureMember' ||
        localName == 'member'
      ) {
        const context = objectStack[0];
        let featureType = context['featureType'];
        let featureNS = context['featureNS'];
        const prefix = 'p';
        const defaultPrefix = 'p0';
        if (!featureType && node.childNodes) {
          (featureType = []), (featureNS = {});
          for (let i = 0, ii = node.childNodes.length; i < ii; ++i) {
            const child = /** @type {Element} */ (node.childNodes[i]);
            if (child.nodeType === 1) {
              const ft = child.nodeName.split(':').pop();
              if (!featureType.includes(ft)) {
                let key = '';
                let count = 0;
                const uri = child.namespaceURI;
                for (const candidate in featureNS) {
                  if (featureNS[candidate] === uri) {
                    key = candidate;
                    break;
                  }
                  ++count;
                }
                if (!key) {
                  key = prefix + count;
                  featureNS[key] = uri;
                }
                featureType.push(key + ':' + ft);
              }
            }
          }
          if (localName != 'featureMember') {
            // recheck featureType for each featureMember
            context['featureType'] = featureType;
            context['featureNS'] = featureNS;
          }
        }
        if (typeof featureNS === 'string') {
          const ns = featureNS;
          featureNS = {};
          featureNS[defaultPrefix] = ns;
        }
        /** @type {Object<string, Object<string, import("../xml.js").Parser>>} */
        const parsersNS = {};
        const featureTypes = Array.isArray(featureType)
          ? featureType
          : [featureType];
        for (const p in featureNS) {
          /** @type {Object<string, import("../xml.js").Parser>} */
          const parsers = {};
          for (let i = 0, ii = featureTypes.length; i < ii; ++i) {
            const featurePrefix = featureTypes[i].includes(':')
              ? featureTypes[i].split(':')[0]
              : defaultPrefix;
            if (featurePrefix === p) {
              parsers[featureTypes[i].split(':').pop()] =
                localName == 'featureMembers'
                  ? makeArrayPusher(this.readFeatureElement, this)
                  : makeReplacer(this.readFeatureElement, this);
            }
          }
          parsersNS[featureNS[p]] = parsers;
        }
        if (localName == 'featureMember' || localName == 'member') {
          features = pushParseAndPop(undefined, parsersNS, node, objectStack);
        } else {
          features = pushParseAndPop([], parsersNS, node, objectStack);
        }
      }
      if (features === null) {
        features = [];
      }
      return features;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../geom/Geometry.js").default|import("../extent.js").Extent|undefined} Geometry.
     */
    readGeometryOrExtent(node, objectStack) {
      const context = /** @type {Object} */ (objectStack[0]);
      context['srsName'] = node.firstElementChild.getAttribute('srsName');
      context['srsDimension'] =
        node.firstElementChild.getAttribute('srsDimension');
      return pushParseAndPop(
        null,
        this.GEOMETRY_PARSERS,
        node,
        objectStack,
        this,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../extent.js").Extent|undefined} Geometry.
     */
    readExtentElement(node, objectStack) {
      const context = /** @type {Object} */ (objectStack[0]);
      const extent = /** @type {import("../extent.js").Extent} */ (
        this.readGeometryOrExtent(node, objectStack)
      );
      return extent ? transformExtentWithOptions(extent, context) : undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../geom/Geometry.js").default|undefined} Geometry.
     */
    readGeometryElement(node, objectStack) {
      const context = /** @type {Object} */ (objectStack[0]);
      const geometry = /** @type {import("../geom/Geometry.js").default} */ (
        this.readGeometryOrExtent(node, objectStack)
      );
      return geometry
        ? transformGeometryWithOptions(geometry, false, context)
        : undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @param {boolean} asFeature whether result should be wrapped as a feature.
     * @return {Feature|Object} Feature
     */
    readFeatureElementInternal(node, objectStack, asFeature) {
      let geometryName;
      const values = {};
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        let value;
        const localName = n.localName;
        // first, check if it is simple attribute
        if (
          n.childNodes.length === 0 ||
          (n.childNodes.length === 1 &&
            (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4))
        ) {
          value = getAllTextContent(n, false);
          if (ONLY_WHITESPACE_RE.test(value)) {
            value = undefined;
          }
        } else {
          if (asFeature) {
            //if feature, try it as a geometry or extent
            value =
              localName === 'boundedBy'
                ? this.readExtentElement(n, objectStack)
                : this.readGeometryElement(n, objectStack);
          }
          if (!value) {
            //if not a geometry or not a feature, treat it as a complex attribute
            value = this.readFeatureElementInternal(n, objectStack, false);
          } else if (localName !== 'boundedBy') {
            // boundedBy is an extent and must not be considered as a geometry
            geometryName = localName;
          }
        }

        const len = n.attributes.length;
        if (len > 0 && !(value instanceof Geometry)) {
          value = {_content_: value};
          for (let i = 0; i < len; i++) {
            const attName = n.attributes[i].name;
            value[attName] = n.attributes[i].value;
          }
        }

        if (values[localName]) {
          if (!(values[localName] instanceof Array)) {
            values[localName] = [values[localName]];
          }
          values[localName].push(value);
        } else {
          values[localName] = value;
        }
      }
      if (!asFeature) {
        return values;
      }
      const feature = new Feature(values);
      if (geometryName) {
        feature.setGeometryName(geometryName);
      }
      const fid =
        node.getAttribute('fid') || getAttributeNS(node, this.namespace, 'id');
      if (fid) {
        feature.setId(fid);
      }
      return feature;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Feature} Feature.
     */
    readFeatureElement(node, objectStack) {
      return this.readFeatureElementInternal(node, objectStack, true);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Point|undefined} Point.
     */
    readPoint(node, objectStack) {
      const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);
      if (flatCoordinates) {
        return new Point$1(flatCoordinates, 'XYZ');
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiPoint|undefined} MultiPoint.
     */
    readMultiPoint(node, objectStack) {
      /** @type {Array<Array<number>>} */
      const coordinates = pushParseAndPop(
        [],
        this.MULTIPOINT_PARSERS,
        node,
        objectStack,
        this,
      );
      if (coordinates) {
        return new MultiPoint(coordinates);
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiLineString|undefined} MultiLineString.
     */
    readMultiLineString(node, objectStack) {
      /** @type {Array<LineString>} */
      const lineStrings = pushParseAndPop(
        [],
        this.MULTILINESTRING_PARSERS,
        node,
        objectStack,
        this,
      );
      if (lineStrings) {
        return new MultiLineString(lineStrings);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiPolygon|undefined} MultiPolygon.
     */
    readMultiPolygon(node, objectStack) {
      /** @type {Array<Polygon>} */
      const polygons = pushParseAndPop(
        [],
        this.MULTIPOLYGON_PARSERS,
        node,
        objectStack,
        this,
      );
      if (polygons) {
        return new MultiPolygon(polygons);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    pointMemberParser(node, objectStack) {
      parseNode(this.POINTMEMBER_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    lineStringMemberParser(node, objectStack) {
      parseNode(this.LINESTRINGMEMBER_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    polygonMemberParser(node, objectStack) {
      parseNode(this.POLYGONMEMBER_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {LineString|undefined} LineString.
     */
    readLineString(node, objectStack) {
      const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);
      if (flatCoordinates) {
        const lineString = new LineString(flatCoordinates, 'XYZ');
        return lineString;
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} LinearRing flat coordinates.
     */
    readFlatLinearRing(node, objectStack) {
      const ring = pushParseAndPop(
        null,
        this.GEOMETRY_FLAT_COORDINATES_PARSERS,
        node,
        objectStack,
        this,
      );
      if (ring) {
        return ring;
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {LinearRing|undefined} LinearRing.
     */
    readLinearRing(node, objectStack) {
      const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);
      if (flatCoordinates) {
        return new LinearRing(flatCoordinates, 'XYZ');
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Polygon|undefined} Polygon.
     */
    readPolygon(node, objectStack) {
      /** @type {Array<Array<number>>} */
      const flatLinearRings = pushParseAndPop(
        [null],
        this.FLAT_LINEAR_RINGS_PARSERS,
        node,
        objectStack,
        this,
      );
      if (flatLinearRings && flatLinearRings[0]) {
        const flatCoordinates = flatLinearRings[0];
        const ends = [flatCoordinates.length];
        let i, ii;
        for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {
          extend$3(flatCoordinates, flatLinearRings[i]);
          ends.push(flatCoordinates.length);
        }
        return new Polygon(flatCoordinates, 'XYZ', ends);
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>} Flat coordinates.
     */
    readFlatCoordinatesFromNode(node, objectStack) {
      return pushParseAndPop(
        null,
        this.GEOMETRY_FLAT_COORDINATES_PARSERS,
        node,
        objectStack,
        this,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @override
     */
    readGeometryFromNode(node, options) {
      const geometry = this.readGeometryElement(node, [
        this.getReadOptions(node, options ? options : {}),
      ]);
      return geometry ? geometry : null;
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @override
     */
    readFeaturesFromNode(node, options) {
      const internalOptions = {
        featureType: this.featureType,
        featureNS: this.featureNS,
      };
      if (internalOptions) {
        Object.assign(internalOptions, this.getReadOptions(node, options));
      }
      const features = this.readFeaturesInternal(node, [internalOptions]);
      return features || [];
    }

    /**
     * @param {Element} node Node.
     * @return {import("../proj/Projection.js").default} Projection.
     * @override
     */
    readProjectionFromNode(node) {
      return get$2(
        this.srsName
          ? this.srsName
          : node.firstElementChild.getAttribute('srsName'),
      );
    }
  }

  GMLBase.prototype.namespace = GMLNS;

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS = {
    'http://www.opengis.net/gml': {},
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
    'http://www.opengis.net/gml': {},
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.GEOMETRY_PARSERS = {
    'http://www.opengis.net/gml': {},
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.MULTIPOINT_PARSERS = {
    'http://www.opengis.net/gml': {
      'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),
      'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.MULTILINESTRING_PARSERS = {
    'http://www.opengis.net/gml': {
      'lineStringMember': makeArrayPusher(
        GMLBase.prototype.lineStringMemberParser,
      ),
      'lineStringMembers': makeArrayPusher(
        GMLBase.prototype.lineStringMemberParser,
      ),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.MULTIPOLYGON_PARSERS = {
    'http://www.opengis.net/gml': {
      'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),
      'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.POINTMEMBER_PARSERS = {
    'http://www.opengis.net/gml': {
      'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.LINESTRINGMEMBER_PARSERS = {
    'http://www.opengis.net/gml': {
      'LineString': makeArrayPusher(GMLBase.prototype.readLineString),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.POLYGONMEMBER_PARSERS = {
    'http://www.opengis.net/gml': {
      'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.RING_PARSERS = {
    'http://www.opengis.net/gml': {
      'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),
    },
  };

  /**
   * @module ol/format/xsd
   */

  /**
   * @param {Node} node Node.
   * @return {boolean|undefined} Boolean.
   */
  function readBoolean(node) {
    const s = getAllTextContent(node, false);
    return readBooleanString(s);
  }

  /**
   * @param {string} string String.
   * @return {boolean|undefined} Boolean.
   */
  function readBooleanString(string) {
    const m = /^\s*(true|1)|(false|0)\s*$/.exec(string);
    if (m) {
      return m[1] !== undefined || false;
    }
    return undefined;
  }

  /**
   * @param {Node} node Node.
   * @return {number|undefined} DateTime in seconds.
   */
  function readDateTime(node) {
    const s = getAllTextContent(node, false);
    const dateTime = Date.parse(s);
    return isNaN(dateTime) ? undefined : dateTime / 1000;
  }

  /**
   * @param {Node} node Node.
   * @return {number|undefined} Decimal.
   */
  function readDecimal(node) {
    const s = getAllTextContent(node, false);
    return readDecimalString(s);
  }

  /**
   * @param {string} string String.
   * @return {number|undefined} Decimal.
   */
  function readDecimalString(string) {
    // FIXME check spec
    const m = /^\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)\s*$/i.exec(string);
    if (m) {
      return parseFloat(m[1]);
    }
    return undefined;
  }

  /**
   * @param {Node} node Node.
   * @return {number|undefined} Non negative integer.
   */
  function readPositiveInteger(node) {
    const s = getAllTextContent(node, false);
    return readNonNegativeIntegerString(s);
  }

  /**
   * @param {string} string String.
   * @return {number|undefined} Non negative integer.
   */
  function readNonNegativeIntegerString(string) {
    const m = /^\s*(\d+)\s*$/.exec(string);
    if (m) {
      return parseInt(m[1], 10);
    }
    return undefined;
  }

  /**
   * @param {Node} node Node.
   * @return {string|undefined} String.
   */
  function readString(node) {
    return getAllTextContent(node, false).trim();
  }

  /**
   * @param {Node} node Node to append a TextNode with the boolean to.
   * @param {boolean} bool Boolean.
   */
  function writeBooleanTextNode(node, bool) {
    writeStringTextNode(node, bool ? '1' : '0');
  }

  /**
   * @param {Node} node Node to append a CDATA Section with the string to.
   * @param {string} string String.
   */
  function writeCDATASection(node, string) {
    node.appendChild(getDocument().createCDATASection(string));
  }

  /**
   * @param {Node} node Node to append a TextNode with the dateTime to.
   * @param {number} dateTime DateTime in seconds.
   */
  function writeDateTimeTextNode(node, dateTime) {
    const date = new Date(dateTime * 1000);
    const string =
      date.getUTCFullYear() +
      '-' +
      padNumber(date.getUTCMonth() + 1, 2) +
      '-' +
      padNumber(date.getUTCDate(), 2) +
      'T' +
      padNumber(date.getUTCHours(), 2) +
      ':' +
      padNumber(date.getUTCMinutes(), 2) +
      ':' +
      padNumber(date.getUTCSeconds(), 2) +
      'Z';
    node.appendChild(getDocument().createTextNode(string));
  }

  /**
   * @param {Node} node Node to append a TextNode with the decimal to.
   * @param {number} decimal Decimal.
   */
  function writeDecimalTextNode(node, decimal) {
    const string = decimal.toPrecision();
    node.appendChild(getDocument().createTextNode(string));
  }

  /**
   * @param {Node} node Node to append a TextNode with the decimal to.
   * @param {number} nonNegativeInteger Non negative integer.
   */
  function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {
    const string = nonNegativeInteger.toString();
    node.appendChild(getDocument().createTextNode(string));
  }

  const whiteSpaceStart = /^\s/;
  const whiteSpaceEnd = /\s$/;
  const cdataCharacters = /(\n|\t|\r|<|&| {2})/;

  /**
   * @param {Node} node Node to append a TextNode with the string to.
   * @param {string} string String.
   */
  function writeStringTextNode(node, string) {
    if (
      typeof string === 'string' &&
      (whiteSpaceStart.test(string) ||
        whiteSpaceEnd.test(string) ||
        cdataCharacters.test(string))
    ) {
      string.split(']]>').forEach((part, i, a) => {
        if (i < a.length - 1) {
          part += ']]';
        }
        if (i > 0) {
          part = '>' + part;
        }
        writeCDATASection(node, part);
      });
    } else {
      node.appendChild(getDocument().createTextNode(string));
    }
  }

  /**
   * @module ol/format/GML2
   */

  /**
   * @const
   * @type {string}
   */
  const schemaLocation$1 =
    GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';

  /**
   * @const
   * @type {Object<string, string>}
   */
  const MULTIGEOMETRY_TO_MEMBER_NODENAME$1 = {
    'MultiLineString': 'lineStringMember',
    'MultiCurve': 'curveMember',
    'MultiPolygon': 'polygonMember',
    'MultiSurface': 'surfaceMember',
  };

  /**
   * @classdesc
   * Feature format for reading and writing data in the GML format,
   * version 2.1.2.
   *
   * @api
   */
  class GML2 extends GMLBase {
    /**
     * @param {import("./GMLBase.js").Options} [options] Optional configuration object.
     */
    constructor(options) {
      options = options ? options : {};

      super(options);

      this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(
        this.readFeaturesInternal,
      );

      /**
       * @type {string}
       */
      this.schemaLocation = options.schemaLocation
        ? options.schemaLocation
        : schemaLocation$1;
    }

    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} Flat coordinates.
     */
    readFlatCoordinates(node, objectStack) {
      const s = getAllTextContent(node, false).replace(/^\s*|\s*$/g, '');
      const context = /** @type {import("../xml.js").NodeStackItem} */ (
        objectStack[0]
      );
      const containerSrs = context['srsName'];
      let axisOrientation = 'enu';
      if (containerSrs) {
        const proj = get$2(containerSrs);
        if (proj) {
          axisOrientation = proj.getAxisOrientation();
        }
      }
      const coordsGroups = s.trim().split(/\s+/);
      const flatCoordinates = [];
      for (let i = 0, ii = coordsGroups.length; i < ii; i++) {
        const coords = coordsGroups[i].split(/,+/);
        const x = parseFloat(coords[0]);
        const y = parseFloat(coords[1]);
        const z = coords.length === 3 ? parseFloat(coords[2]) : 0;
        if (axisOrientation.startsWith('en')) {
          flatCoordinates.push(x, y, z);
        } else {
          flatCoordinates.push(y, x, z);
        }
      }
      return flatCoordinates;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../extent.js").Extent|undefined} Envelope.
     */
    readBox(node, objectStack) {
      /** @type {Array<number>} */
      const flatCoordinates = pushParseAndPop(
        [null],
        this.BOX_PARSERS_,
        node,
        objectStack,
        this,
      );
      return createOrUpdate$2(
        flatCoordinates[1][0],
        flatCoordinates[1][1],
        flatCoordinates[1][3],
        flatCoordinates[1][4],
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    innerBoundaryIsParser(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(
        undefined,
        this.RING_PARSERS,
        node,
        objectStack,
        this,
      );
      if (flatLinearRing) {
        const flatLinearRings =
          /** @type {Array<Array<number>>} */
          (objectStack[objectStack.length - 1]);
        flatLinearRings.push(flatLinearRing);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    outerBoundaryIsParser(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(
        undefined,
        this.RING_PARSERS,
        node,
        objectStack,
        this,
      );
      if (flatLinearRing) {
        const flatLinearRings =
          /** @type {Array<Array<number>>} */
          (objectStack[objectStack.length - 1]);
        flatLinearRings[0] = flatLinearRing;
      }
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Element|undefined} Node.
     * @private
     */
    GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {
      const context = objectStack[objectStack.length - 1];
      const multiSurface = context['multiSurface'];
      const surface = context['surface'];
      const multiCurve = context['multiCurve'];
      if (!Array.isArray(value)) {
        nodeName = /** @type {import("../geom/Geometry.js").default} */ (
          value
        ).getType();
        if (nodeName === 'MultiPolygon' && multiSurface === true) {
          nodeName = 'MultiSurface';
        } else if (nodeName === 'Polygon' && surface === true) {
          nodeName = 'Surface';
        } else if (nodeName === 'MultiLineString' && multiCurve === true) {
          nodeName = 'MultiCurve';
        }
      } else {
        nodeName = 'Envelope';
      }
      return createElementNS('http://www.opengis.net/gml', nodeName);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {Array<*>} objectStack Node stack.
     */
    writeFeatureElement(node, feature, objectStack) {
      const fid = feature.getId();
      if (fid) {
        node.setAttribute('fid', /** @type {string} */ (fid));
      }
      const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
      const featureNS = context['featureNS'];
      const geometryName = feature.getGeometryName();
      if (!context.serializers) {
        context.serializers = {};
        context.serializers[featureNS] = {};
      }
      const keys = [];
      const values = [];
      if (feature.hasProperties()) {
        const properties = feature.getProperties();
        for (const key in properties) {
          const value = properties[key];
          if (value !== null && value !== undefined) {
            keys.push(key);
            values.push(value);
            if (
              key == geometryName ||
              typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===
                'function'
            ) {
              if (!(key in context.serializers[featureNS])) {
                context.serializers[featureNS][key] = makeChildAppender(
                  this.writeGeometryElement,
                  this,
                );
              }
            } else {
              if (!(key in context.serializers[featureNS])) {
                context.serializers[featureNS][key] =
                  makeChildAppender(writeStringTextNode);
              }
            }
          }
        }
      }
      const item = Object.assign({}, context);
      item.node = node;
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        (item),
        context.serializers,
        makeSimpleNodeFactory(undefined, featureNS),
        values,
        objectStack,
        keys,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LineString.js").default} geometry LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeCurveOrLineString(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (node.nodeName !== 'LineStringSegment' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (
        node.nodeName === 'LineString' ||
        node.nodeName === 'LineStringSegment'
      ) {
        const coordinates = this.createCoordinatesNode_(node.namespaceURI);
        node.appendChild(coordinates);
        this.writeCoordinates_(coordinates, geometry, objectStack);
      } else if (node.nodeName === 'Curve') {
        const segments = createElementNS(node.namespaceURI, 'segments');
        node.appendChild(segments);
        this.writeCurveSegments_(segments, geometry, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LineString.js").default} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeLineStringOrCurveMember(node, line, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeCurveOrLineString(child, line, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiLineString.js").default} geometry MultiLineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiCurveOrLineString(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const curve = context['curve'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const lines = geometry.getLineStrings();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName, curve: curve},
        this.LINESTRINGORCURVEMEMBER_SERIALIZERS,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,
        lines,
        objectStack,
        undefined,
        this,
      );
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Geometry.js").default|import("../extent.js").Extent} geometry Geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeGeometryElement(node, geometry, objectStack) {
      const context = /** @type {import("./Feature.js").WriteOptions} */ (
        objectStack[objectStack.length - 1]
      );
      const item = Object.assign({}, context);
      item['node'] = node;
      let value;
      if (Array.isArray(geometry)) {
        value = transformExtentWithOptions(
          /** @type {import("../extent.js").Extent} */ (geometry),
          context,
        );
      } else {
        value = transformGeometryWithOptions(
          /** @type {import("../geom/Geometry.js").default} */ (geometry),
          true,
          context,
        );
      }
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        (item),
        this.GEOMETRY_SERIALIZERS,
        this.GEOMETRY_NODE_FACTORY_,
        [value],
        objectStack,
        undefined,
        this,
      );
    }

    /**
     * @param {string} namespaceURI XML namespace.
     * @return {Element} coordinates node.
     * @private
     */
    createCoordinatesNode_(namespaceURI) {
      const coordinates = createElementNS(namespaceURI, 'coordinates');
      coordinates.setAttribute('decimal', '.');
      coordinates.setAttribute('cs', ',');
      coordinates.setAttribute('ts', ' ');

      return coordinates;
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/LineString.js").default|import("../geom/LinearRing.js").default} value Geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeCoordinates_(node, value, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      // only 2d for simple features profile
      const points = value.getCoordinates();
      const len = points.length;
      const parts = new Array(len);
      for (let i = 0; i < len; ++i) {
        const point = points[i];
        parts[i] = this.getCoords_(point, srsName, hasZ);
      }
      writeStringTextNode(node, parts.join(' '));
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LineString.js").default} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeCurveSegments_(node, line, objectStack) {
      const child = createElementNS(node.namespaceURI, 'LineStringSegment');
      node.appendChild(child);
      this.writeCurveOrLineString(child, line, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Polygon.js").default} geometry Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeSurfaceOrPolygon(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (node.nodeName !== 'PolygonPatch' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {
        const rings = geometry.getLinearRings();
        pushSerializeAndPop(
          {node: node, hasZ: hasZ, srsName: srsName},
          this.RING_SERIALIZERS,
          this.RING_NODE_FACTORY_,
          rings,
          objectStack,
          undefined,
          this,
        );
      } else if (node.nodeName === 'Surface') {
        const patches = createElementNS(node.namespaceURI, 'patches');
        node.appendChild(patches);
        this.writeSurfacePatches_(patches, geometry, objectStack);
      }
    }

    /**
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Node} Node.
     * @private
     */
    RING_NODE_FACTORY_(value, objectStack, nodeName) {
      const context = objectStack[objectStack.length - 1];
      const parentNode = context.node;
      const exteriorWritten = context['exteriorWritten'];
      if (exteriorWritten === undefined) {
        context['exteriorWritten'] = true;
      }
      return createElementNS(
        parentNode.namespaceURI,
        exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs',
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Polygon.js").default} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeSurfacePatches_(node, polygon, objectStack) {
      const child = createElementNS(node.namespaceURI, 'PolygonPatch');
      node.appendChild(child);
      this.writeSurfaceOrPolygon(child, polygon, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LinearRing.js").default} ring LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeRing(node, ring, objectStack) {
      const linearRing = createElementNS(node.namespaceURI, 'LinearRing');
      node.appendChild(linearRing);
      this.writeLinearRing(linearRing, ring, objectStack);
    }

    /**
     * @param {Array<number>} point Point geometry.
     * @param {string} [srsName] Optional srsName
     * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.
     * @return {string} The coords string.
     * @private
     */
    getCoords_(point, srsName, hasZ) {
      const axisOrientation = srsName
        ? get$2(srsName).getAxisOrientation()
        : 'enu';
      let coords = axisOrientation.startsWith('en')
        ? point[0] + ',' + point[1]
        : point[1] + ',' + point[0];
      if (hasZ) {
        // For newly created points, Z can be undefined.
        const z = point[2] || 0;
        coords += ',' + z;
      }

      return coords;
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} geometry Point geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writePoint(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const coordinates = this.createCoordinatesNode_(node.namespaceURI);
      node.appendChild(coordinates);
      const point = geometry.getCoordinates();
      const coord = this.getCoords_(point, srsName, hasZ);
      writeStringTextNode(coordinates, coord);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiPoint.js").default} geometry MultiPoint geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiPoint(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const points = geometry.getPoints();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName},
        this.POINTMEMBER_SERIALIZERS,
        makeSimpleNodeFactory('pointMember'),
        points,
        objectStack,
        undefined,
        this,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} point Point geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writePointMember(node, point, objectStack) {
      const child = createElementNS(node.namespaceURI, 'Point');
      node.appendChild(child);
      this.writePoint(child, point, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LinearRing.js").default} geometry LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeLinearRing(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const coordinates = this.createCoordinatesNode_(node.namespaceURI);
      node.appendChild(coordinates);
      this.writeCoordinates_(coordinates, geometry, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiSurfaceOrPolygon(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const surface = context['surface'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const polygons = geometry.getPolygons();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName, surface: surface},
        this.SURFACEORPOLYGONMEMBER_SERIALIZERS,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,
        polygons,
        objectStack,
        undefined,
        this,
      );
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Polygon.js").default} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeSurfaceOrPolygonMember(node, polygon, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeSurfaceOrPolygon(child, polygon, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {Array<*>} objectStack Node stack.
     */
    writeEnvelope(node, extent, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const keys = ['lowerCorner', 'upperCorner'];
      const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        ({node: node}),
        this.ENVELOPE_SERIALIZERS,
        OBJECT_PROPERTY_NODE_FACTORY,
        values,
        objectStack,
        keys,
        this,
      );
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Node|undefined} Node.
     * @private
     */
    MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {
      const parentNode = objectStack[objectStack.length - 1].node;
      return createElementNS(
        'http://www.opengis.net/gml',
        MULTIGEOMETRY_TO_MEMBER_NODENAME$1[parentNode.nodeName],
      );
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
    'http://www.opengis.net/gml': {
      'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {
    'http://www.opengis.net/gml': {
      'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,
      'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser,
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML2.prototype.BOX_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML2.prototype.GEOMETRY_PARSERS = {
    'http://www.opengis.net/gml': {
      'Point': makeReplacer(GMLBase.prototype.readPoint),
      'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),
      'LineString': makeReplacer(GMLBase.prototype.readLineString),
      'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),
      'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),
      'Polygon': makeReplacer(GMLBase.prototype.readPolygon),
      'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),
      'Box': makeReplacer(GML2.prototype.readBox),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.GEOMETRY_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),
      'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),
      'Point': makeChildAppender(GML2.prototype.writePoint),
      'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),
      'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),
      'MultiLineString': makeChildAppender(
        GML2.prototype.writeMultiCurveOrLineString,
      ),
      'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),
      'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),
      'MultiPolygon': makeChildAppender(
        GML2.prototype.writeMultiSurfaceOrPolygon,
      ),
      'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),
      'MultiSurface': makeChildAppender(
        GML2.prototype.writeMultiSurfaceOrPolygon,
      ),
      'Envelope': makeChildAppender(GML2.prototype.writeEnvelope),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'lineStringMember': makeChildAppender(
        GML2.prototype.writeLineStringOrCurveMember,
      ),
      'curveMember': makeChildAppender(
        GML2.prototype.writeLineStringOrCurveMember,
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.RING_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),
      'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.POINTMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'pointMember': makeChildAppender(GML2.prototype.writePointMember),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'surfaceMember': makeChildAppender(
        GML2.prototype.writeSurfaceOrPolygonMember,
      ),
      'polygonMember': makeChildAppender(
        GML2.prototype.writeSurfaceOrPolygonMember,
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.ENVELOPE_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'lowerCorner': makeChildAppender(writeStringTextNode),
      'upperCorner': makeChildAppender(writeStringTextNode),
    },
  };

  /**
   * @module ol/format/GML3
   */

  /**
   * @const
   * @type {string}
   * @private
   */
  const schemaLocation =
    GMLNS +
    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +
    '1.0.0/gmlsf.xsd';

  /**
   * @const
   * @type {Object<string, string>}
   */
  const MULTIGEOMETRY_TO_MEMBER_NODENAME = {
    'MultiLineString': 'lineStringMember',
    'MultiCurve': 'curveMember',
    'MultiPolygon': 'polygonMember',
    'MultiSurface': 'surfaceMember',
  };

  /**
   * @classdesc
   * Feature format for reading and writing data in the GML format
   * version 3.1.1.
   * Currently only supports GML 3.1.1 Simple Features profile.
   *
   * @api
   */
  class GML3 extends GMLBase {
    /**
     * @param {import("./GMLBase.js").Options} [options] Optional configuration object.
     */
    constructor(options) {
      options = options ? options : {};

      super(options);

      /**
       * @private
       * @type {boolean}
       */
      this.surface_ = options.surface !== undefined ? options.surface : false;

      /**
       * @private
       * @type {boolean}
       */
      this.curve_ = options.curve !== undefined ? options.curve : false;

      /**
       * @private
       * @type {boolean}
       */
      this.multiCurve_ =
        options.multiCurve !== undefined ? options.multiCurve : true;

      /**
       * @private
       * @type {boolean}
       */
      this.multiSurface_ =
        options.multiSurface !== undefined ? options.multiSurface : true;

      /**
       * @type {string}
       */
      this.schemaLocation = options.schemaLocation
        ? options.schemaLocation
        : schemaLocation;

      /**
       * @private
       * @type {boolean}
       */
      this.hasZ = options.hasZ !== undefined ? options.hasZ : false;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiLineString|undefined} MultiLineString.
     */
    readMultiCurve(node, objectStack) {
      /** @type {Array<LineString>} */
      const lineStrings = pushParseAndPop(
        [],
        this.MULTICURVE_PARSERS,
        node,
        objectStack,
        this,
      );
      if (lineStrings) {
        const multiLineString = new MultiLineString(lineStrings);
        return multiLineString;
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} Polygon.
     */
    readFlatCurveRing(node, objectStack) {
      /** @type {Array<LineString>} */
      const lineStrings = pushParseAndPop(
        [],
        this.MULTICURVE_PARSERS,
        node,
        objectStack,
        this,
      );
      const flatCoordinates = [];
      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {
        extend$3(flatCoordinates, lineStrings[i].getFlatCoordinates());
      }
      return flatCoordinates;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiPolygon|undefined} MultiPolygon.
     */
    readMultiSurface(node, objectStack) {
      /** @type {Array<Polygon>} */
      const polygons = pushParseAndPop(
        [],
        this.MULTISURFACE_PARSERS,
        node,
        objectStack,
        this,
      );
      if (polygons) {
        return new MultiPolygon(polygons);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    curveMemberParser(node, objectStack) {
      parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    surfaceMemberParser(node, objectStack) {
      parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<(Array<number>)>|undefined} flat coordinates.
     */
    readPatch(node, objectStack) {
      return pushParseAndPop(
        [null],
        this.PATCHES_PARSERS,
        node,
        objectStack,
        this,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} flat coordinates.
     */
    readSegment(node, objectStack) {
      return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<(Array<number>)>|undefined} flat coordinates.
     */
    readPolygonPatch(node, objectStack) {
      return pushParseAndPop(
        [null],
        this.FLAT_LINEAR_RINGS_PARSERS,
        node,
        objectStack,
        this,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} flat coordinates.
     */
    readLineStringSegment(node, objectStack) {
      return pushParseAndPop(
        [null],
        this.GEOMETRY_FLAT_COORDINATES_PARSERS,
        node,
        objectStack,
        this,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    interiorParser(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(
        undefined,
        this.RING_PARSERS,
        node,
        objectStack,
        this,
      );
      if (flatLinearRing) {
        const flatLinearRings =
          /** @type {Array<Array<number>>} */
          (objectStack[objectStack.length - 1]);
        flatLinearRings.push(flatLinearRing);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    exteriorParser(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(
        undefined,
        this.RING_PARSERS,
        node,
        objectStack,
        this,
      );
      if (flatLinearRing) {
        const flatLinearRings =
          /** @type {Array<Array<number>>} */
          (objectStack[objectStack.length - 1]);
        flatLinearRings[0] = flatLinearRing;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Polygon|undefined} Polygon.
     */
    readSurface(node, objectStack) {
      /** @type {Array<Array<number>>} */
      const flatLinearRings = pushParseAndPop(
        [null],
        this.SURFACE_PARSERS,
        node,
        objectStack,
        this,
      );
      if (flatLinearRings && flatLinearRings[0]) {
        const flatCoordinates = flatLinearRings[0];
        const ends = [flatCoordinates.length];
        let i, ii;
        for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {
          extend$3(flatCoordinates, flatLinearRings[i]);
          ends.push(flatCoordinates.length);
        }
        return new Polygon(flatCoordinates, 'XYZ', ends);
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {LineString|undefined} LineString.
     */
    readCurve(node, objectStack) {
      /** @type {Array<number>} */
      const flatCoordinates = pushParseAndPop(
        [null],
        this.CURVE_PARSERS,
        node,
        objectStack,
        this,
      );
      if (flatCoordinates) {
        const lineString = new LineString(flatCoordinates, 'XYZ');
        return lineString;
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../extent.js").Extent|undefined} Envelope.
     */
    readEnvelope(node, objectStack) {
      /** @type {Array<number>} */
      const flatCoordinates = pushParseAndPop(
        [null],
        this.ENVELOPE_PARSERS,
        node,
        objectStack,
        this,
      );
      return createOrUpdate$2(
        flatCoordinates[1][0],
        flatCoordinates[1][1],
        flatCoordinates[2][0],
        flatCoordinates[2][1],
      );
    }

    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} Flat coordinates.
     */
    readFlatPos(node, objectStack) {
      let s = getAllTextContent(node, false);
      const re = /^\s*([+\-]?\d*\.?\d+(?:[eE][+\-]?\d+)?)\s*/;
      /** @type {Array<number>} */
      const flatCoordinates = [];
      let m;
      while ((m = re.exec(s))) {
        flatCoordinates.push(parseFloat(m[1]));
        s = s.substr(m[0].length);
      }
      if (s !== '') {
        return undefined;
      }
      const context = objectStack[0];
      const containerSrs = context['srsName'];
      const axisOrientation = containerSrs
        ? get$2(containerSrs).getAxisOrientation()
        : 'enu';
      if (axisOrientation === 'neu') {
        for (let i = 0, ii = flatCoordinates.length; i < ii; i += 3) {
          const y = flatCoordinates[i];
          const x = flatCoordinates[i + 1];
          flatCoordinates[i] = x;
          flatCoordinates[i + 1] = y;
        }
      }
      const len = flatCoordinates.length;
      if (len == 2) {
        flatCoordinates.push(0);
      }
      if (len === 0) {
        return undefined;
      }
      return flatCoordinates;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} Flat coordinates.
     */
    readFlatPosList(node, objectStack) {
      const s = getAllTextContent(node, false).replace(/^\s*|\s*$/g, '');
      const context = objectStack[0];
      const containerSrs = context['srsName'];
      const contextDimension = context['srsDimension'];
      const axisOrientation = containerSrs
        ? get$2(containerSrs).getAxisOrientation()
        : 'enu';
      const coords = s.split(/\s+/);
      // The "dimension" attribute is from the GML 3.0.1 spec.
      let dim = 2;
      if (node.getAttribute('srsDimension')) {
        dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));
      } else if (node.getAttribute('dimension')) {
        dim = readNonNegativeIntegerString(node.getAttribute('dimension'));
      } else if (
        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')
      ) {
        dim = readNonNegativeIntegerString(
          /** @type {Element} */ (node.parentNode).getAttribute('srsDimension'),
        );
      } else if (contextDimension) {
        dim = readNonNegativeIntegerString(contextDimension);
      }
      const asXYZ = axisOrientation.startsWith('en');
      let x, y, z;
      const flatCoordinates = [];
      for (let i = 0, ii = coords.length; i < ii; i += dim) {
        x = parseFloat(coords[i]);
        y = parseFloat(coords[i + 1]);
        z = dim === 3 ? parseFloat(coords[i + 2]) : 0;
        if (asXYZ) {
          flatCoordinates.push(x, y, z);
        } else {
          flatCoordinates.push(y, x, z);
        }
      }
      return flatCoordinates;
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} value Point geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writePos_(node, value, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsDimension = hasZ ? '3' : '2';
      node.setAttribute('srsDimension', srsDimension);
      const srsName = context['srsName'];
      const axisOrientation = srsName
        ? get$2(srsName).getAxisOrientation()
        : 'enu';
      const point = value.getCoordinates();
      // only 2d for simple features profile
      let coords = axisOrientation.startsWith('en')
        ? point[0] + ' ' + point[1]
        : point[1] + ' ' + point[0];
      if (hasZ) {
        // For newly created points, Z can be undefined.
        const z = point[2] || 0;
        coords += ' ' + z;
      }
      writeStringTextNode(node, coords);
    }

    /**
     * @param {Array<number>} point Point geometry.
     * @param {string} [srsName] Optional srsName
     * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.
     * @return {string} The coords string.
     * @private
     */
    getCoords_(point, srsName, hasZ) {
      const axisOrientation = srsName
        ? get$2(srsName).getAxisOrientation()
        : 'enu';
      let coords = axisOrientation.startsWith('en')
        ? point[0] + ' ' + point[1]
        : point[1] + ' ' + point[0];
      if (hasZ) {
        // For newly created points, Z can be undefined.
        const z = point[2] || 0;
        coords += ' ' + z;
      }

      return coords;
    }

    /**
     * @param {Element} node Node.
     * @param {LineString|import("../geom/LinearRing.js").default} value Geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writePosList_(node, value, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsDimension = hasZ ? '3' : '2';
      node.setAttribute('srsDimension', srsDimension);
      const srsName = context['srsName'];
      // only 2d for simple features profile
      const points = value.getCoordinates();
      const len = points.length;
      const parts = new Array(len);
      let point;
      for (let i = 0; i < len; ++i) {
        point = points[i];
        parts[i] = this.getCoords_(point, srsName, hasZ);
      }
      writeStringTextNode(node, parts.join(' '));
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} geometry Point geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writePoint(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const pos = createElementNS(node.namespaceURI, 'pos');
      node.appendChild(pos);
      this.writePos_(pos, geometry, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {Array<*>} objectStack Node stack.
     */
    writeEnvelope(node, extent, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const keys = ['lowerCorner', 'upperCorner'];
      const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        ({node: node}),
        this.ENVELOPE_SERIALIZERS,
        OBJECT_PROPERTY_NODE_FACTORY,
        values,
        objectStack,
        keys,
        this,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LinearRing.js").default} geometry LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeLinearRing(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const posList = createElementNS(node.namespaceURI, 'posList');
      node.appendChild(posList);
      this.writePosList_(posList, geometry, objectStack);
    }

    /**
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Node} Node.
     * @private
     */
    RING_NODE_FACTORY_(value, objectStack, nodeName) {
      const context = objectStack[objectStack.length - 1];
      const parentNode = context.node;
      const exteriorWritten = context['exteriorWritten'];
      if (exteriorWritten === undefined) {
        context['exteriorWritten'] = true;
      }
      return createElementNS(
        parentNode.namespaceURI,
        exteriorWritten !== undefined ? 'interior' : 'exterior',
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Polygon} geometry Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeSurfaceOrPolygon(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (node.nodeName !== 'PolygonPatch' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {
        const rings = geometry.getLinearRings();
        pushSerializeAndPop(
          {node: node, hasZ: hasZ, srsName: srsName},
          this.RING_SERIALIZERS,
          this.RING_NODE_FACTORY_,
          rings,
          objectStack,
          undefined,
          this,
        );
      } else if (node.nodeName === 'Surface') {
        const patches = createElementNS(node.namespaceURI, 'patches');
        node.appendChild(patches);
        this.writeSurfacePatches_(patches, geometry, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {LineString} geometry LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeCurveOrLineString(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (node.nodeName !== 'LineStringSegment' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (
        node.nodeName === 'LineString' ||
        node.nodeName === 'LineStringSegment'
      ) {
        const posList = createElementNS(node.namespaceURI, 'posList');
        node.appendChild(posList);
        this.writePosList_(posList, geometry, objectStack);
      } else if (node.nodeName === 'Curve') {
        const segments = createElementNS(node.namespaceURI, 'segments');
        node.appendChild(segments);
        this.writeCurveSegments_(segments, geometry, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {MultiPolygon} geometry MultiPolygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiSurfaceOrPolygon(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const surface = context['surface'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const polygons = geometry.getPolygons();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName, surface: surface},
        this.SURFACEORPOLYGONMEMBER_SERIALIZERS,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,
        polygons,
        objectStack,
        undefined,
        this,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiPoint.js").default} geometry MultiPoint geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiPoint(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      const hasZ = context['hasZ'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const points = geometry.getPoints();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName},
        this.POINTMEMBER_SERIALIZERS,
        makeSimpleNodeFactory('pointMember'),
        points,
        objectStack,
        undefined,
        this,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {MultiLineString} geometry MultiLineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiCurveOrLineString(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const curve = context['curve'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const lines = geometry.getLineStrings();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName, curve: curve},
        this.LINESTRINGORCURVEMEMBER_SERIALIZERS,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,
        lines,
        objectStack,
        undefined,
        this,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LinearRing.js").default} ring LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeRing(node, ring, objectStack) {
      const linearRing = createElementNS(node.namespaceURI, 'LinearRing');
      node.appendChild(linearRing);
      this.writeLinearRing(linearRing, ring, objectStack);
    }

    /**
     * @param {Node} node Node.
     * @param {Polygon} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeSurfaceOrPolygonMember(node, polygon, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeSurfaceOrPolygon(child, polygon, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} point Point geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writePointMember(node, point, objectStack) {
      const child = createElementNS(node.namespaceURI, 'Point');
      node.appendChild(child);
      this.writePoint(child, point, objectStack);
    }

    /**
     * @param {Node} node Node.
     * @param {LineString} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeLineStringOrCurveMember(node, line, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeCurveOrLineString(child, line, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Polygon} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeSurfacePatches_(node, polygon, objectStack) {
      const child = createElementNS(node.namespaceURI, 'PolygonPatch');
      node.appendChild(child);
      this.writeSurfaceOrPolygon(child, polygon, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {LineString} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeCurveSegments_(node, line, objectStack) {
      const child = createElementNS(node.namespaceURI, 'LineStringSegment');
      node.appendChild(child);
      this.writeCurveOrLineString(child, line, objectStack);
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Geometry.js").default|import("../extent.js").Extent} geometry Geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeGeometryElement(node, geometry, objectStack) {
      const context = /** @type {import("./Feature.js").WriteOptions} */ (
        objectStack[objectStack.length - 1]
      );
      const item = Object.assign({}, context);
      item['node'] = node;
      let value;
      if (Array.isArray(geometry)) {
        value = transformExtentWithOptions(
          /** @type {import("../extent.js").Extent} */ (geometry),
          context,
        );
      } else {
        value = transformGeometryWithOptions(
          /** @type {import("../geom/Geometry.js").default} */ (geometry),
          true,
          context,
        );
      }
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        (item),
        this.GEOMETRY_SERIALIZERS,
        this.GEOMETRY_NODE_FACTORY_,
        [value],
        objectStack,
        undefined,
        this,
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {Array<*>} objectStack Node stack.
     */
    writeFeatureElement(node, feature, objectStack) {
      const fid = feature.getId();
      if (fid) {
        node.setAttribute('fid', /** @type {string} */ (fid));
      }
      const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
      const featureNS = context['featureNS'];
      const geometryName = feature.getGeometryName();
      if (!context.serializers) {
        context.serializers = {};
        context.serializers[featureNS] = {};
      }
      const keys = [];
      const values = [];
      if (feature.hasProperties()) {
        const properties = feature.getProperties();
        for (const key in properties) {
          const value = properties[key];
          if (value !== null && value !== undefined) {
            keys.push(key);
            values.push(value);
            if (
              key == geometryName ||
              typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===
                'function'
            ) {
              if (!(key in context.serializers[featureNS])) {
                context.serializers[featureNS][key] = makeChildAppender(
                  this.writeGeometryElement,
                  this,
                );
              }
            } else {
              if (!(key in context.serializers[featureNS])) {
                context.serializers[featureNS][key] =
                  makeChildAppender(writeStringTextNode);
              }
            }
          }
        }
      }
      const item = Object.assign({}, context);
      item.node = node;
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        (item),
        context.serializers,
        makeSimpleNodeFactory(undefined, featureNS),
        values,
        objectStack,
        keys,
      );
    }

    /**
     * @param {Node} node Node.
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeFeatureMembers_(node, features, objectStack) {
      const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
      const featureType = context['featureType'];
      const featureNS = context['featureNS'];
      /** @type {Object<string, Object<string, import("../xml.js").Serializer>>} */
      const serializers = {};
      serializers[featureNS] = {};
      serializers[featureNS][featureType] = makeChildAppender(
        this.writeFeatureElement,
        this,
      );
      const item = Object.assign({}, context);
      item.node = node;
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        (item),
        serializers,
        makeSimpleNodeFactory(featureType, featureNS),
        features,
        objectStack,
      );
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Node|undefined} Node.
     * @private
     */
    MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {
      const parentNode = objectStack[objectStack.length - 1].node;
      return createElementNS(
        this.namespace,
        MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName],
      );
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Element|undefined} Node.
     * @private
     */
    GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {
      const context = objectStack[objectStack.length - 1];
      const multiSurface = context['multiSurface'];
      const surface = context['surface'];
      const curve = context['curve'];
      const multiCurve = context['multiCurve'];
      if (!Array.isArray(value)) {
        nodeName = /** @type {import("../geom/Geometry.js").default} */ (
          value
        ).getType();
        if (nodeName === 'MultiPolygon' && multiSurface === true) {
          nodeName = 'MultiSurface';
        } else if (nodeName === 'Polygon' && surface === true) {
          nodeName = 'Surface';
        } else if (nodeName === 'LineString' && curve === true) {
          nodeName = 'Curve';
        } else if (nodeName === 'MultiLineString' && multiCurve === true) {
          nodeName = 'MultiCurve';
        }
      } else {
        nodeName = 'Envelope';
      }
      return createElementNS(this.namespace, nodeName);
    }

    /**
     * Encode a geometry in GML 3.1.1 Simple Features.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @return {Node} Node.
     * @api
     * @override
     */
    writeGeometryNode(geometry, options) {
      options = this.adaptOptions(options);
      const geom = createElementNS(this.namespace, 'geom');
      const context = {
        node: geom,
        hasZ: this.hasZ,
        srsName: this.srsName,
        curve: this.curve_,
        surface: this.surface_,
        multiSurface: this.multiSurface_,
        multiCurve: this.multiCurve_,
      };
      if (options) {
        Object.assign(context, options);
      }
      this.writeGeometryElement(geom, geometry, [context]);
      return geom;
    }

    /**
     * Encode an array of features in the GML 3.1.1 format as an XML node.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @return {Element} Node.
     * @api
     * @override
     */
    writeFeaturesNode(features, options) {
      options = this.adaptOptions(options);
      const node = createElementNS(this.namespace, 'featureMembers');
      node.setAttributeNS(
        XML_SCHEMA_INSTANCE_URI,
        'xsi:schemaLocation',
        this.schemaLocation,
      );
      const context = {
        srsName: this.srsName,
        hasZ: this.hasZ,
        curve: this.curve_,
        surface: this.surface_,
        multiSurface: this.multiSurface_,
        multiCurve: this.multiCurve_,
        featureNS: this.featureNS,
        featureType: this.featureType,
      };
      if (options) {
        Object.assign(context, options);
      }
      this.writeFeatureMembers_(node, features, [context]);
      return node;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
    'http://www.opengis.net/gml': {
      'pos': makeReplacer(GML3.prototype.readFlatPos),
      'posList': makeReplacer(GML3.prototype.readFlatPosList),
      'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {
    'http://www.opengis.net/gml': {
      'interior': GML3.prototype.interiorParser,
      'exterior': GML3.prototype.exteriorParser,
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.GEOMETRY_PARSERS = {
    'http://www.opengis.net/gml': {
      'Point': makeReplacer(GMLBase.prototype.readPoint),
      'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),
      'LineString': makeReplacer(GMLBase.prototype.readLineString),
      'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),
      'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),
      'Polygon': makeReplacer(GMLBase.prototype.readPolygon),
      'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),
      'Surface': makeReplacer(GML3.prototype.readSurface),
      'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),
      'Curve': makeReplacer(GML3.prototype.readCurve),
      'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),
      'Envelope': makeReplacer(GML3.prototype.readEnvelope),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.MULTICURVE_PARSERS = {
    'http://www.opengis.net/gml': {
      'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),
      'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.MULTISURFACE_PARSERS = {
    'http://www.opengis.net/gml': {
      'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),
      'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.CURVEMEMBER_PARSERS = {
    'http://www.opengis.net/gml': {
      'LineString': makeArrayPusher(GMLBase.prototype.readLineString),
      'Curve': makeArrayPusher(GML3.prototype.readCurve),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.SURFACEMEMBER_PARSERS = {
    'http://www.opengis.net/gml': {
      'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),
      'Surface': makeArrayPusher(GML3.prototype.readSurface),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.SURFACE_PARSERS = {
    'http://www.opengis.net/gml': {
      'patches': makeReplacer(GML3.prototype.readPatch),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.CURVE_PARSERS = {
    'http://www.opengis.net/gml': {
      'segments': makeReplacer(GML3.prototype.readSegment),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.ENVELOPE_PARSERS = {
    'http://www.opengis.net/gml': {
      'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),
      'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.PATCHES_PARSERS = {
    'http://www.opengis.net/gml': {
      'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.SEGMENTS_PARSERS = {
    'http://www.opengis.net/gml': {
      'LineStringSegment': makeArrayExtender(
        GML3.prototype.readLineStringSegment,
      ),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.RING_PARSERS = {
    'http://www.opengis.net/gml': {
      'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),
      'Ring': makeReplacer(GML3.prototype.readFlatCurveRing),
    },
  };

  /**
   * Encode an array of features in GML 3.1.1 Simple Features.
   *
   * @function
   * @param {Array<import("../Feature.js").default>} features Features.
   * @param {import("./Feature.js").WriteOptions} [options] Options.
   * @return {string} Result.
   * @api
   */
  GML3.prototype.writeFeatures;

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.RING_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'exterior': makeChildAppender(GML3.prototype.writeRing),
      'interior': makeChildAppender(GML3.prototype.writeRing),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.ENVELOPE_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'lowerCorner': makeChildAppender(writeStringTextNode),
      'upperCorner': makeChildAppender(writeStringTextNode),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'surfaceMember': makeChildAppender(
        GML3.prototype.writeSurfaceOrPolygonMember,
      ),
      'polygonMember': makeChildAppender(
        GML3.prototype.writeSurfaceOrPolygonMember,
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.POINTMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'pointMember': makeChildAppender(GML3.prototype.writePointMember),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'lineStringMember': makeChildAppender(
        GML3.prototype.writeLineStringOrCurveMember,
      ),
      'curveMember': makeChildAppender(
        GML3.prototype.writeLineStringOrCurveMember,
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.GEOMETRY_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),
      'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),
      'Point': makeChildAppender(GML3.prototype.writePoint),
      'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),
      'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),
      'MultiLineString': makeChildAppender(
        GML3.prototype.writeMultiCurveOrLineString,
      ),
      'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),
      'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),
      'MultiPolygon': makeChildAppender(
        GML3.prototype.writeMultiSurfaceOrPolygon,
      ),
      'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),
      'MultiSurface': makeChildAppender(
        GML3.prototype.writeMultiSurfaceOrPolygon,
      ),
      'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),
    },
  };

  /**
   * @module ol/format/GML
   */

  /**
   * Feature format for reading and writing data in the GML format
   * version 3.1.1.
   * Currently only supports GML 3.1.1 Simple Features profile.
   *
   * @class
   * @param {import("./GMLBase.js").Options} [options]
   *     Optional configuration object.
   * @api
   */
  const GML = GML3;

  /**
   * Encode an array of features in GML 3.1.1 Simple Features.
   *
   * @function
   * @param {Array<import("../Feature.js").default>} features Features.
   * @param {import("./Feature.js").WriteOptions} [options] Options.
   * @return {string} Result.
   * @api
   */
  GML.prototype.writeFeatures;

  /**
   * Encode an array of features in the GML 3.1.1 format as an XML node.
   *
   * @function
   * @param {Array<import("../Feature.js").default>} features Features.
   * @param {import("./Feature.js").WriteOptions} [options] Options.
   * @return {Node} Node.
   * @api
   */
  GML.prototype.writeFeaturesNode;

  /**
   * @module ol/format/GPX
   */

  /**
   * @const
   * @type {Array<null|string>}
   */
  const NAMESPACE_URIS$4 = [
    null,
    'http://www.topografix.com/GPX/1/0',
    'http://www.topografix.com/GPX/1/1',
  ];

  /**
   * @const
   * @type {string}
   */
  const SCHEMA_LOCATION$1 =
    'http://www.topografix.com/GPX/1/1 ' +
    'http://www.topografix.com/GPX/1/1/gpx.xsd';

  /**
   * @const
   * @type {Object<string, function(Node, Array<*>): (Feature|undefined)>}
   */
  const FEATURE_READER = {
    'rte': readRte,
    'trk': readTrk,
    'wpt': readWpt,
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const GPX_PARSERS = makeStructureNS(NAMESPACE_URIS$4, {
    'rte': makeArrayPusher(readRte),
    'trk': makeArrayPusher(readTrk),
    'wpt': makeArrayPusher(readWpt),
  });

  /**
   * @typedef {Object} GPXLink
   * @property {string} [text] text
   * @property {string} [type] type
   */

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LINK_PARSERS$1 = makeStructureNS(NAMESPACE_URIS$4, {
    'text': makeObjectPropertySetter(readString, 'linkText'),
    'type': makeObjectPropertySetter(readString, 'linkType'),
  });

  /**
   * @typedef {Object} GPXAuthor
   * @property {string} [name] name
   * @property {string} [email] email
   * @property {GPXLink} [link] link
   */

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const AUTHOR_PARSERS = makeStructureNS(NAMESPACE_URIS$4, {
    'name': makeObjectPropertySetter(readString),
    'email': parseEmail,
    'link': parseLink,
  });

  /**
   * @typedef {Object} GPXMetadata
   * @property {string} [name] name
   * @property {string} [desc] desc
   * @property {GPXAuthor} [author] author
   * @property {GPXLink} [link] link
   * @property {number} [time] time
   * @property {string} [keywords] keywords
   * @property {Array<number>} [bounds] bounds
   * @property {Object} [extensions] extensions
   *
   */

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const METADATA_PARSERS = makeStructureNS(NAMESPACE_URIS$4, {
    'name': makeObjectPropertySetter(readString),
    'desc': makeObjectPropertySetter(readString),
    'author': makeObjectPropertySetter(readAuthor),
    'copyright': makeObjectPropertySetter(readCopyright),
    'link': parseLink,
    'time': makeObjectPropertySetter(readDateTime),
    'keywords': makeObjectPropertySetter(readString),
    'bounds': parseBounds,
    'extensions': parseExtensions,
  });

  /**
   * @typedef {Object} GPXCopyright
   * @property {string} [author] author
   * @property {number} [year] year
   * @property {string} [license] license
   */

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const COPYRIGHT_PARSERS = makeStructureNS(NAMESPACE_URIS$4, {
    'year': makeObjectPropertySetter(readPositiveInteger),
    'license': makeObjectPropertySetter(readString),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const GPX_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$4, {
    'rte': makeChildAppender(writeRte),
    'trk': makeChildAppender(writeTrk),
    'wpt': makeChildAppender(writeWpt),
  });

  /**
   * @typedef {Object} Options
   * @property {function(Feature, Node):void} [readExtensions] Callback function
   * to process `extensions` nodes. To prevent memory leaks, this callback function must
   * not store any references to the node. Note that the `extensions`
   * node is not allowed in GPX 1.0. Moreover, only `extensions`
   * nodes from `wpt`, `rte` and `trk` can be processed, as those are
   * directly mapped to a feature.
   */

  /**
   * @typedef {Object} LayoutOptions
   * @property {boolean} [hasZ] HasZ.
   * @property {boolean} [hasM] HasM.
   */

  /**
   * @typedef {function(Feature, Node): void} ReadExtensions
   */

  /**
   * @classdesc
   * Feature format for reading and writing data in the GPX format.
   *
   * Note that {@link module:ol/format/GPX~GPX#readFeature} only reads the first
   * feature of the source.
   *
   * When reading, routes (`<rte>`) are converted into LineString geometries, and
   * tracks (`<trk>`) into MultiLineString. Any properties on route and track
   * waypoints are ignored.
   *
   * When writing, LineString geometries are output as routes (`<rte>`), and
   * MultiLineString as tracks (`<trk>`).
   *
   * @api
   */
  class GPX extends XMLFeature {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @type {import("../proj/Projection.js").default}
       */
      this.dataProjection = get$2('EPSG:4326');

      /**
       * @type {ReadExtensions|undefined}
       * @private
       */
      this.readExtensions_ = options.readExtensions;
    }

    /**
     * @param {Array<Feature>} features List of features.
     * @private
     */
    handleReadExtensions_(features) {
      if (!features) {
        features = [];
      }
      for (let i = 0, ii = features.length; i < ii; ++i) {
        const feature = features[i];
        if (this.readExtensions_) {
          const extensionsNode = feature.get('extensionsNode_') || null;
          this.readExtensions_(feature, extensionsNode);
        }
        feature.set('extensionsNode_', undefined);
      }
    }

    /**
     * Reads a GPX file's metadata tag, reading among other things:
     *   - the name and description of this GPX
     *   - its author
     *   - the copyright associated with this GPX file
     *
     * Will return null if no metadata tag is present (or no valid source is given).
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {GPXMetadata | null} Metadata
     * @api
     */
    readMetadata(source) {
      if (!source) {
        return null;
      }
      if (typeof source === 'string') {
        return this.readMetadataFromDocument(parse$1(source));
      }
      if (isDocument(source)) {
        return this.readMetadataFromDocument(/** @type {Document} */ (source));
      }
      return this.readMetadataFromNode(source);
    }

    /**
     * @param {Document} doc Document.
     * @return {GPXMetadata | null} Metadata
     */
    readMetadataFromDocument(doc) {
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType === Node.ELEMENT_NODE) {
          const metadata = this.readMetadataFromNode(/** @type {Element} */ (n));
          if (metadata) {
            return metadata;
          }
        }
      }
      return null;
    }

    /**
     * @param {Element} node Node.
     * @return {Object} Metadata
     */
    readMetadataFromNode(node) {
      if (!NAMESPACE_URIS$4.includes(node.namespaceURI)) {
        return null;
      }
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        if (
          NAMESPACE_URIS$4.includes(n.namespaceURI) &&
          n.localName === 'metadata'
        ) {
          return pushParseAndPop({}, METADATA_PARSERS, n, []);
        }
      }
      return null;
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {import("../Feature.js").default} Feature.
     * @override
     */
    readFeatureFromNode(node, options) {
      if (!NAMESPACE_URIS$4.includes(node.namespaceURI)) {
        return null;
      }
      const featureReader = FEATURE_READER[node.localName];
      if (!featureReader) {
        return null;
      }
      const feature = featureReader(node, [this.getReadOptions(node, options)]);
      if (!feature) {
        return null;
      }
      this.handleReadExtensions_([feature]);
      return feature;
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @override
     */
    readFeaturesFromNode(node, options) {
      if (!NAMESPACE_URIS$4.includes(node.namespaceURI)) {
        return [];
      }
      if (node.localName == 'gpx') {
        /** @type {Array<Feature>} */
        const features = pushParseAndPop([], GPX_PARSERS, node, [
          this.getReadOptions(node, options),
        ]);
        if (features) {
          this.handleReadExtensions_(features);
          return features;
        }
        return [];
      }
      return [];
    }

    /**
     * Encode an array of features in the GPX format as an XML node.
     * LineString geometries are output as routes (`<rte>`), and MultiLineString
     * as tracks (`<trk>`).
     *
     * @param {Array<Feature>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @return {Node} Node.
     * @api
     * @override
     */
    writeFeaturesNode(features, options) {
      options = this.adaptOptions(options);
      //FIXME Serialize metadata
      const gpx = createElementNS('http://www.topografix.com/GPX/1/1', 'gpx');
      const xmlnsUri = 'http://www.w3.org/2000/xmlns/';
      gpx.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);
      gpx.setAttributeNS(
        XML_SCHEMA_INSTANCE_URI,
        'xsi:schemaLocation',
        SCHEMA_LOCATION$1,
      );
      gpx.setAttribute('version', '1.1');
      gpx.setAttribute('creator', 'OpenLayers');

      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        ({node: gpx}),
        GPX_SERIALIZERS,
        GPX_NODE_FACTORY,
        features,
        [options],
      );
      return gpx;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const RTE_PARSERS = makeStructureNS(NAMESPACE_URIS$4, {
    'name': makeObjectPropertySetter(readString),
    'cmt': makeObjectPropertySetter(readString),
    'desc': makeObjectPropertySetter(readString),
    'src': makeObjectPropertySetter(readString),
    'link': parseLink,
    'number': makeObjectPropertySetter(readPositiveInteger),
    'extensions': parseExtensions,
    'type': makeObjectPropertySetter(readString),
    'rtept': parseRtePt,
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const RTEPT_PARSERS = makeStructureNS(NAMESPACE_URIS$4, {
    'ele': makeObjectPropertySetter(readDecimal),
    'time': makeObjectPropertySetter(readDateTime),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const TRK_PARSERS = makeStructureNS(NAMESPACE_URIS$4, {
    'name': makeObjectPropertySetter(readString),
    'cmt': makeObjectPropertySetter(readString),
    'desc': makeObjectPropertySetter(readString),
    'src': makeObjectPropertySetter(readString),
    'link': parseLink,
    'number': makeObjectPropertySetter(readPositiveInteger),
    'type': makeObjectPropertySetter(readString),
    'extensions': parseExtensions,
    'trkseg': parseTrkSeg,
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const TRKSEG_PARSERS = makeStructureNS(NAMESPACE_URIS$4, {
    'trkpt': parseTrkPt,
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const TRKPT_PARSERS = makeStructureNS(NAMESPACE_URIS$4, {
    'ele': makeObjectPropertySetter(readDecimal),
    'time': makeObjectPropertySetter(readDateTime),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const WPT_PARSERS = makeStructureNS(NAMESPACE_URIS$4, {
    'ele': makeObjectPropertySetter(readDecimal),
    'time': makeObjectPropertySetter(readDateTime),
    'magvar': makeObjectPropertySetter(readDecimal),
    'geoidheight': makeObjectPropertySetter(readDecimal),
    'name': makeObjectPropertySetter(readString),
    'cmt': makeObjectPropertySetter(readString),
    'desc': makeObjectPropertySetter(readString),
    'src': makeObjectPropertySetter(readString),
    'link': parseLink,
    'sym': makeObjectPropertySetter(readString),
    'type': makeObjectPropertySetter(readString),
    'fix': makeObjectPropertySetter(readString),
    'sat': makeObjectPropertySetter(readPositiveInteger),
    'hdop': makeObjectPropertySetter(readDecimal),
    'vdop': makeObjectPropertySetter(readDecimal),
    'pdop': makeObjectPropertySetter(readDecimal),
    'ageofdgpsdata': makeObjectPropertySetter(readDecimal),
    'dgpsid': makeObjectPropertySetter(readPositiveInteger),
    'extensions': parseExtensions,
  });

  /**
   * @const
   * @type {Array<string>}
   */
  const LINK_SEQUENCE = ['text', 'type'];

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const LINK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$4, {
    'text': makeChildAppender(writeStringTextNode),
    'type': makeChildAppender(writeStringTextNode),
  });

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const RTE_SEQUENCE = makeStructureNS(NAMESPACE_URIS$4, [
    'name',
    'cmt',
    'desc',
    'src',
    'link',
    'number',
    'type',
    'rtept',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const RTE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$4, {
    'name': makeChildAppender(writeStringTextNode),
    'cmt': makeChildAppender(writeStringTextNode),
    'desc': makeChildAppender(writeStringTextNode),
    'src': makeChildAppender(writeStringTextNode),
    'link': makeChildAppender(writeLink),
    'number': makeChildAppender(writeNonNegativeIntegerTextNode),
    'type': makeChildAppender(writeStringTextNode),
    'rtept': makeArraySerializer(makeChildAppender(writeWptType)),
  });

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const RTEPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS$4, ['ele', 'time']);

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const TRK_SEQUENCE = makeStructureNS(NAMESPACE_URIS$4, [
    'name',
    'cmt',
    'desc',
    'src',
    'link',
    'number',
    'type',
    'trkseg',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const TRK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$4, {
    'name': makeChildAppender(writeStringTextNode),
    'cmt': makeChildAppender(writeStringTextNode),
    'desc': makeChildAppender(writeStringTextNode),
    'src': makeChildAppender(writeStringTextNode),
    'link': makeChildAppender(writeLink),
    'number': makeChildAppender(writeNonNegativeIntegerTextNode),
    'type': makeChildAppender(writeStringTextNode),
    'trkseg': makeArraySerializer(makeChildAppender(writeTrkSeg)),
  });

  /**
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const TRKSEG_NODE_FACTORY = makeSimpleNodeFactory('trkpt');

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const TRKSEG_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$4, {
    'trkpt': makeChildAppender(writeWptType),
  });

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const WPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS$4, [
    'ele',
    'time',
    'magvar',
    'geoidheight',
    'name',
    'cmt',
    'desc',
    'src',
    'link',
    'sym',
    'type',
    'fix',
    'sat',
    'hdop',
    'vdop',
    'pdop',
    'ageofdgpsdata',
    'dgpsid',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const WPT_TYPE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$4, {
    'ele': makeChildAppender(writeDecimalTextNode),
    'time': makeChildAppender(writeDateTimeTextNode),
    'magvar': makeChildAppender(writeDecimalTextNode),
    'geoidheight': makeChildAppender(writeDecimalTextNode),
    'name': makeChildAppender(writeStringTextNode),
    'cmt': makeChildAppender(writeStringTextNode),
    'desc': makeChildAppender(writeStringTextNode),
    'src': makeChildAppender(writeStringTextNode),
    'link': makeChildAppender(writeLink),
    'sym': makeChildAppender(writeStringTextNode),
    'type': makeChildAppender(writeStringTextNode),
    'fix': makeChildAppender(writeStringTextNode),
    'sat': makeChildAppender(writeNonNegativeIntegerTextNode),
    'hdop': makeChildAppender(writeDecimalTextNode),
    'vdop': makeChildAppender(writeDecimalTextNode),
    'pdop': makeChildAppender(writeDecimalTextNode),
    'ageofdgpsdata': makeChildAppender(writeDecimalTextNode),
    'dgpsid': makeChildAppender(writeNonNegativeIntegerTextNode),
  });

  /**
   * @const
   * @type {Object<string, string>}
   */
  const GEOMETRY_TYPE_TO_NODENAME$1 = {
    'Point': 'wpt',
    'LineString': 'rte',
    'MultiLineString': 'trk',
  };

  /**
   * @param {*} value Value.
   * @param {Array<*>} objectStack Object stack.
   * @param {string} [nodeName] Node name.
   * @return {Node|undefined} Node.
   */
  function GPX_NODE_FACTORY(value, objectStack, nodeName) {
    const geometry = /** @type {Feature} */ (value).getGeometry();
    if (geometry) {
      const nodeName = GEOMETRY_TYPE_TO_NODENAME$1[geometry.getType()];
      if (nodeName) {
        const parentNode = objectStack[objectStack.length - 1].node;
        return createElementNS(parentNode.namespaceURI, nodeName);
      }
    }
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {LayoutOptions} layoutOptions Layout options.
   * @param {Element} node Node.
   * @param {!Object} values Values.
   * @return {Array<number>} Flat coordinates.
   */
  function appendCoordinate(flatCoordinates, layoutOptions, node, values) {
    flatCoordinates.push(
      parseFloat(node.getAttribute('lon')),
      parseFloat(node.getAttribute('lat')),
    );
    if ('ele' in values) {
      flatCoordinates.push(/** @type {number} */ (values['ele']));
      delete values['ele'];
      layoutOptions.hasZ = true;
    } else {
      flatCoordinates.push(0);
    }
    if ('time' in values) {
      flatCoordinates.push(/** @type {number} */ (values['time']));
      delete values['time'];
      layoutOptions.hasM = true;
    } else {
      flatCoordinates.push(0);
    }
    return flatCoordinates;
  }

  /**
   * Choose GeometryLayout based on flags in layoutOptions and adjust flatCoordinates
   * and ends arrays by shrinking them accordingly (removing unused zero entries).
   *
   * @param {LayoutOptions} layoutOptions Layout options.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {Array<number>} [ends] Ends.
   * @return {import("../geom/Geometry.js").GeometryLayout} Layout.
   */
  function applyLayoutOptions(layoutOptions, flatCoordinates, ends) {
    /** @type {import("../geom/Geometry.js").GeometryLayout} */
    let layout = 'XY';
    let stride = 2;
    if (layoutOptions.hasZ && layoutOptions.hasM) {
      layout = 'XYZM';
      stride = 4;
    } else if (layoutOptions.hasZ) {
      layout = 'XYZ';
      stride = 3;
    } else if (layoutOptions.hasM) {
      layout = 'XYM';
      stride = 3;
    }
    if (stride !== 4) {
      for (let i = 0, ii = flatCoordinates.length / 4; i < ii; i++) {
        flatCoordinates[i * stride] = flatCoordinates[i * 4];
        flatCoordinates[i * stride + 1] = flatCoordinates[i * 4 + 1];
        if (layoutOptions.hasZ) {
          flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 2];
        }
        if (layoutOptions.hasM) {
          flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 3];
        }
      }
      flatCoordinates.length = (flatCoordinates.length / 4) * stride;
      if (ends) {
        for (let i = 0, ii = ends.length; i < ii; i++) {
          ends[i] = (ends[i] / 4) * stride;
        }
      }
    }
    return layout;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<any>} objectStack Object stack.
   * @return {GPXAuthor | undefined} Person object.
   */
  function readAuthor(node, objectStack) {
    const values = pushParseAndPop({}, AUTHOR_PARSERS, node, objectStack);
    if (values) {
      return values;
    }
    return undefined;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<any>} objectStack Object stack.
   * @return {GPXCopyright | undefined} Person object.
   */
  function readCopyright(node, objectStack) {
    const values = pushParseAndPop({}, COPYRIGHT_PARSERS, node, objectStack);
    if (values) {
      const author = node.getAttribute('author');
      if (author !== null) {
        values['author'] = author;
      }
      return values;
    }
    return undefined;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseBounds(node, objectStack) {
    const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const minlat = node.getAttribute('minlat');
    const minlon = node.getAttribute('minlon');
    const maxlat = node.getAttribute('maxlat');
    const maxlon = node.getAttribute('maxlon');
    if (
      minlon !== null &&
      minlat !== null &&
      maxlon !== null &&
      maxlat !== null
    ) {
      values['bounds'] = [
        [parseFloat(minlon), parseFloat(minlat)],
        [parseFloat(maxlon), parseFloat(maxlat)],
      ];
    }
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseEmail(node, objectStack) {
    const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const id = node.getAttribute('id');
    const domain = node.getAttribute('domain');
    if (id !== null && domain !== null) {
      values['email'] = `${id}@${domain}`;
    }
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseLink(node, objectStack) {
    const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const href = node.getAttribute('href');
    if (href !== null) {
      values['link'] = href;
    }
    parseNode(LINK_PARSERS$1, node, objectStack);
  }

  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseExtensions(node, objectStack) {
    const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    values['extensionsNode_'] = node;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseRtePt(node, objectStack) {
    const values = pushParseAndPop({}, RTEPT_PARSERS, node, objectStack);
    if (values) {
      const rteValues = /** @type {!Object} */ (
        objectStack[objectStack.length - 1]
      );
      const flatCoordinates = /** @type {Array<number>} */ (
        rteValues['flatCoordinates']
      );
      const layoutOptions = /** @type {LayoutOptions} */ (
        rteValues['layoutOptions']
      );
      appendCoordinate(flatCoordinates, layoutOptions, node, values);
    }
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseTrkPt(node, objectStack) {
    const values = pushParseAndPop({}, TRKPT_PARSERS, node, objectStack);
    if (values) {
      const trkValues = /** @type {!Object} */ (
        objectStack[objectStack.length - 1]
      );
      const flatCoordinates = /** @type {Array<number>} */ (
        trkValues['flatCoordinates']
      );
      const layoutOptions = /** @type {LayoutOptions} */ (
        trkValues['layoutOptions']
      );
      appendCoordinate(flatCoordinates, layoutOptions, node, values);
    }
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseTrkSeg(node, objectStack) {
    const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    parseNode(TRKSEG_PARSERS, node, objectStack);
    const flatCoordinates =
      /** @type {Array<number>} */
      (values['flatCoordinates']);
    const ends = /** @type {Array<number>} */ (values['ends']);
    ends.push(flatCoordinates.length);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Feature|undefined} Track.
   */
  function readRte(node, objectStack) {
    const options = /** @type {import("./Feature.js").ReadOptions} */ (
      objectStack[0]
    );
    const values = pushParseAndPop(
      {
        'flatCoordinates': [],
        'layoutOptions': {},
      },
      RTE_PARSERS,
      node,
      objectStack,
    );
    if (!values) {
      return undefined;
    }
    const flatCoordinates =
      /** @type {Array<number>} */
      (values['flatCoordinates']);
    delete values['flatCoordinates'];
    const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);
    delete values['layoutOptions'];
    const layout = applyLayoutOptions(layoutOptions, flatCoordinates);
    const geometry = new LineString(flatCoordinates, layout);
    transformGeometryWithOptions(geometry, false, options);
    const feature = new Feature(geometry);
    feature.setProperties(values, true);
    return feature;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Feature|undefined} Track.
   */
  function readTrk(node, objectStack) {
    const options = /** @type {import("./Feature.js").ReadOptions} */ (
      objectStack[0]
    );
    const values = pushParseAndPop(
      {
        'flatCoordinates': [],
        'ends': [],
        'layoutOptions': {},
      },
      TRK_PARSERS,
      node,
      objectStack,
    );
    if (!values) {
      return undefined;
    }
    const flatCoordinates =
      /** @type {Array<number>} */
      (values['flatCoordinates']);
    delete values['flatCoordinates'];
    const ends = /** @type {Array<number>} */ (values['ends']);
    delete values['ends'];
    const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);
    delete values['layoutOptions'];
    const layout = applyLayoutOptions(layoutOptions, flatCoordinates, ends);
    const geometry = new MultiLineString(flatCoordinates, layout, ends);
    transformGeometryWithOptions(geometry, false, options);
    const feature = new Feature(geometry);
    feature.setProperties(values, true);
    return feature;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Feature|undefined} Waypoint.
   */
  function readWpt(node, objectStack) {
    const options = /** @type {import("./Feature.js").ReadOptions} */ (
      objectStack[0]
    );
    const values = pushParseAndPop({}, WPT_PARSERS, node, objectStack);
    if (!values) {
      return undefined;
    }
    const layoutOptions = /** @type {LayoutOptions} */ ({});
    const coordinates = appendCoordinate([], layoutOptions, node, values);
    const layout = applyLayoutOptions(layoutOptions, coordinates);
    const geometry = new Point$1(coordinates, layout);
    transformGeometryWithOptions(geometry, false, options);
    const feature = new Feature(geometry);
    feature.setProperties(values, true);
    return feature;
  }

  /**
   * @param {Element} node Node.
   * @param {string} value Value for the link's `href` attribute.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeLink(node, value, objectStack) {
    node.setAttribute('href', value);
    const context = objectStack[objectStack.length - 1];
    const properties = context['properties'];
    const link = [properties['linkText'], properties['linkType']];
    pushSerializeAndPop(
      /** @type {import("../xml.js").NodeStackItem} */ ({node: node}),
      LINK_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      link,
      objectStack,
      LINK_SEQUENCE,
    );
  }

  /**
   * @param {Element} node Node.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeWptType(node, coordinate, objectStack) {
    const context = objectStack[objectStack.length - 1];
    const parentNode = context.node;
    const namespaceURI = parentNode.namespaceURI;
    const properties = context['properties'];
    //FIXME Projection handling
    node.setAttributeNS(null, 'lat', String(coordinate[1]));
    node.setAttributeNS(null, 'lon', String(coordinate[0]));
    const geometryLayout = context['geometryLayout'];
    switch (geometryLayout) {
      case 'XYZM':
        if (coordinate[3] !== 0) {
          properties['time'] = coordinate[3];
        }
      // fall through
      case 'XYZ':
        if (coordinate[2] !== 0) {
          properties['ele'] = coordinate[2];
        }
        break;
      case 'XYM':
        if (coordinate[2] !== 0) {
          properties['time'] = coordinate[2];
        }
        break;
      // pass
    }
    const orderedKeys =
      node.nodeName == 'rtept'
        ? RTEPT_TYPE_SEQUENCE[namespaceURI]
        : WPT_TYPE_SEQUENCE[namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      /** @type {import("../xml.js").NodeStackItem} */
      ({node: node, 'properties': properties}),
      WPT_TYPE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );
  }

  /**
   * @param {Node} node Node.
   * @param {Feature} feature Feature.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeRte(node, feature, objectStack) {
    const options = /** @type {import("./Feature.js").WriteOptions} */ (
      objectStack[0]
    );
    const properties = feature.getProperties();
    const context = {node: node};
    context['properties'] = properties;
    const geometry = feature.getGeometry();
    if (geometry.getType() == 'LineString') {
      const lineString = /** @type {LineString} */ (
        transformGeometryWithOptions(geometry, true, options)
      );
      context['geometryLayout'] = lineString.getLayout();
      properties['rtept'] = lineString.getCoordinates();
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = RTE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      RTE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );
  }

  /**
   * @param {Element} node Node.
   * @param {Feature} feature Feature.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeTrk(node, feature, objectStack) {
    const options = /** @type {import("./Feature.js").WriteOptions} */ (
      objectStack[0]
    );
    const properties = feature.getProperties();
    /** @type {import("../xml.js").NodeStackItem} */
    const context = {node: node};
    context['properties'] = properties;
    const geometry = feature.getGeometry();
    if (geometry.getType() == 'MultiLineString') {
      const multiLineString = /** @type {MultiLineString} */ (
        transformGeometryWithOptions(geometry, true, options)
      );
      properties['trkseg'] = multiLineString.getLineStrings();
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = TRK_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      TRK_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );
  }

  /**
   * @param {Element} node Node.
   * @param {LineString} lineString LineString.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeTrkSeg(node, lineString, objectStack) {
    /** @type {import("../xml.js").NodeStackItem} */
    const context = {node: node};
    context['geometryLayout'] = lineString.getLayout();
    context['properties'] = {};
    pushSerializeAndPop(
      context,
      TRKSEG_SERIALIZERS,
      TRKSEG_NODE_FACTORY,
      lineString.getCoordinates(),
      objectStack,
    );
  }

  /**
   * @param {Element} node Node.
   * @param {Feature} feature Feature.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeWpt(node, feature, objectStack) {
    const options = /** @type {import("./Feature.js").WriteOptions} */ (
      objectStack[0]
    );
    const context = objectStack[objectStack.length - 1];
    context['properties'] = feature.getProperties();
    const geometry = feature.getGeometry();
    if (geometry.getType() == 'Point') {
      const point = /** @type {Point} */ (
        transformGeometryWithOptions(geometry, true, options)
      );
      context['geometryLayout'] = point.getLayout();
      writeWptType(node, point.getCoordinates(), objectStack);
    }
  }

  /**
   * @module ol/format/TextFeature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for text feature formats.
   *
   * @abstract
   */
  class TextFeature extends FeatureFormat {
    constructor() {
      super();
    }

    /**
     * @return {import("./Feature.js").Type} Format.
     * @override
     */
    getType() {
      return 'text';
    }

    /**
     * Read the feature from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../Feature.js").default} Feature.
     * @api
     * @override
     */
    readFeature(source, options) {
      return this.readFeatureFromText(
        getText(source),
        this.adaptOptions(options),
      );
    }

    /**
     * @abstract
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromText(text, options) {
      return abstract();
    }

    /**
     * Read the features from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     * @override
     */
    readFeatures(source, options) {
      return this.readFeaturesFromText(
        getText(source),
        this.adaptOptions(options),
      );
    }

    /**
     * @abstract
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromText(text, options) {
      return abstract();
    }

    /**
     * Read the geometry from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @api
     * @override
     */
    readGeometry(source, options) {
      return this.readGeometryFromText(
        getText(source),
        this.adaptOptions(options),
      );
    }

    /**
     * @abstract
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromText(text, options) {
      return abstract();
    }

    /**
     * Read the projection from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default|undefined} Projection.
     * @api
     * @override
     */
    readProjection(source) {
      return this.readProjectionFromText(getText(source));
    }

    /**
     * @param {string} text Text.
     * @protected
     * @return {import("../proj/Projection.js").default|undefined} Projection.
     */
    readProjectionFromText(text) {
      return this.dataProjection;
    }

    /**
     * Encode a feature as a string.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded feature.
     * @api
     * @override
     */
    writeFeature(feature, options) {
      return this.writeFeatureText(feature, this.adaptOptions(options));
    }

    /**
     * @abstract
     * @param {import("../Feature.js").default} feature Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     */
    writeFeatureText(feature, options) {
      return abstract();
    }

    /**
     * Encode an array of features as string.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded features.
     * @api
     * @override
     */
    writeFeatures(features, options) {
      return this.writeFeaturesText(features, this.adaptOptions(options));
    }

    /**
     * @abstract
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     */
    writeFeaturesText(features, options) {
      return abstract();
    }

    /**
     * Write a single geometry.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Geometry.
     * @api
     * @override
     */
    writeGeometry(geometry, options) {
      return this.writeGeometryText(geometry, this.adaptOptions(options));
    }

    /**
     * @abstract
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     */
    writeGeometryText(geometry, options) {
      return abstract();
    }
  }

  /**
   * @param {Document|Element|Object|string} source Source.
   * @return {string} Text.
   */
  function getText(source) {
    if (typeof source === 'string') {
      return source;
    }
    return '';
  }

  /**
   * @module ol/format/IGC
   */

  /**
   * @typedef {'barometric' | 'gps' | 'none'} IGCZ
   * IGC altitude/z. One of 'barometric', 'gps', 'none'.
   */

  /**
   * @const
   * @type {RegExp}
   */
  const B_RECORD_RE =
    /^B(\d{2})(\d{2})(\d{2})(\d{2})(\d{5})([NS])(\d{3})(\d{5})([EW])([AV])(\d{5})(\d{5})/;

  /**
   * @const
   * @type {RegExp}
   */
  const H_RECORD_RE = /^H.([A-Z]{3}).*?:(.*)/;

  /**
   * @const
   * @type {RegExp}
   */
  const HFDTE_RECORD_RE = /^HFDTE(\d{2})(\d{2})(\d{2})/;

  /**
   * @const
   * @type {RegExp}
   */
  const HFDTEDATE_RECORD_RE = /^HFDTEDATE:(\d{2})(\d{2})(\d{2}),(\d{2})/;

  /**
   * A regular expression matching the newline characters `\r\n`, `\r` and `\n`.
   *
   * @const
   * @type {RegExp}
   */
  const NEWLINE_RE = /\r\n|\r|\n/;

  /**
   * @typedef {Object} Options
   * @property {IGCZ} [altitudeMode='none'] Altitude mode. Possible
   * values are `'barometric'`, `'gps'`, and `'none'`.
   */

  /**
   * @classdesc
   * Feature format for `*.igc` flight recording files.
   *
   * As IGC sources contain a single feature,
   * {@link module:ol/format/IGC~IGC#readFeatures} will return the feature in an
   * array
   *
   * @api
   */
  class IGC extends TextFeature {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @type {import("../proj/Projection.js").default}
       */
      this.dataProjection = get$2('EPSG:4326');

      /**
       * @private
       * @type {IGCZ}
       */
      this.altitudeMode_ = options.altitudeMode ? options.altitudeMode : 'none';

      /**
       * @private
       * @type {boolean}
       */
      this.lad_ = false;

      /**
       * @private
       * @type {boolean}
       */
      this.lod_ = false;

      /**
       * @private
       * @type {number}
       */
      this.ladStart_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.ladStop_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.lodStart_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.lodStop_ = 0;
    }

    /**
     * @protected
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../Feature.js").default} Feature.
     * @override
     */
    readFeatureFromText(text, options) {
      const altitudeMode = this.altitudeMode_;
      const lines = text.split(NEWLINE_RE);
      /** @type {Object<string, string>} */
      const properties = {};
      const flatCoordinates = [];
      let year = 2000;
      let month = 0;
      let day = 1;
      let lastDateTime = -1;
      let i, ii;
      for (i = 0, ii = lines.length; i < ii; ++i) {
        const line = lines[i];
        let m;
        if (line.charAt(0) == 'B') {
          m = B_RECORD_RE.exec(line);
          if (m) {
            const hour = parseInt(m[1], 10);
            const minute = parseInt(m[2], 10);
            const second = parseInt(m[3], 10);
            let y = parseInt(m[4], 10) + parseInt(m[5], 10) / 60000;
            if (this.lad_) {
              y +=
                parseInt(line.slice(this.ladStart_, this.ladStop_), 10) /
                60000 /
                10 ** (this.ladStop_ - this.ladStart_);
            }
            if (m[6] == 'S') {
              y = -y;
            }
            let x = parseInt(m[7], 10) + parseInt(m[8], 10) / 60000;
            if (this.lod_) {
              x +=
                parseInt(line.slice(this.lodStart_, this.lodStop_), 10) /
                60000 /
                10 ** (this.lodStop_ - this.lodStart_);
            }
            if (m[9] == 'W') {
              x = -x;
            }
            flatCoordinates.push(x, y);
            if (altitudeMode != 'none') {
              let z;
              if (altitudeMode == 'gps') {
                z = parseInt(m[11], 10);
              } else if (altitudeMode == 'barometric') {
                z = parseInt(m[12], 10);
              } else {
                z = 0;
              }
              flatCoordinates.push(z);
            }
            let dateTime = Date.UTC(year, month, day, hour, minute, second);
            // Detect UTC midnight wrap around.
            if (dateTime < lastDateTime) {
              dateTime = Date.UTC(year, month, day + 1, hour, minute, second);
            }
            flatCoordinates.push(dateTime / 1000);
            lastDateTime = dateTime;
          }
        } else if (line.charAt(0) == 'H') {
          m = HFDTEDATE_RECORD_RE.exec(line);
          if (m) {
            day = parseInt(m[1], 10);
            month = parseInt(m[2], 10) - 1;
            year = 2000 + parseInt(m[3], 10);
          } else {
            m = HFDTE_RECORD_RE.exec(line);
            if (m) {
              day = parseInt(m[1], 10);
              month = parseInt(m[2], 10) - 1;
              year = 2000 + parseInt(m[3], 10);
            } else {
              m = H_RECORD_RE.exec(line);
              if (m) {
                properties[m[1]] = m[2].trim();
              }
            }
          }
        } else if (line.charAt(0) == 'I') {
          const numberAdds = parseInt(line.slice(1, 3), 10);
          for (let i = 0; i < numberAdds; i++) {
            const addCode = line.slice(7 + i * 7, 10 + i * 7);
            if (addCode === 'LAD' || addCode === 'LOD') {
              // in IGC format, columns are numbered from 1
              const addStart = parseInt(line.slice(3 + i * 7, 5 + i * 7), 10) - 1;
              const addStop = parseInt(line.slice(5 + i * 7, 7 + i * 7), 10);
              if (addCode === 'LAD') {
                this.lad_ = true;
                this.ladStart_ = addStart;
                this.ladStop_ = addStop;
              } else if (addCode === 'LOD') {
                this.lod_ = true;
                this.lodStart_ = addStart;
                this.lodStop_ = addStop;
              }
            }
          }
        }
      }
      if (flatCoordinates.length === 0) {
        return null;
      }
      const layout = altitudeMode == 'none' ? 'XYM' : 'XYZM';
      const lineString = new LineString(flatCoordinates, layout);
      const feature = new Feature(
        transformGeometryWithOptions(lineString, false, options),
      );
      feature.setProperties(properties, true);
      return feature;
    }

    /**
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<Feature>} Features.
     * @override
     */
    readFeaturesFromText(text, options) {
      const feature = this.readFeatureFromText(text, options);
      if (feature) {
        return [feature];
      }
      return [];
    }
  }

  /**
   * @module ol/format/IIIFInfo
   */


  /**
   * @typedef {Object} PreferredOptions
   * @property {string} [format] Preferred image format. Will be used if the image information
   * indicates support for that format.
   * @property {string} [quality] IIIF image qualitiy.  Will be used if the image information
   * indicates support for that quality.
   */

  /**
   * @typedef {Object} SupportedFeatures
   * @property {Array<string>} [supports] Supported IIIF image size and region
   * calculation features.
   * @property {Array<string>} [formats] Supported image formats.
   * @property {Array<string>} [qualities] Supported IIIF image qualities.
   */

  /**
   * @typedef {Object} TileInfo
   * @property {Array<number>} scaleFactors Supported resolution scaling factors.
   * @property {number} width Tile width in pixels.
   * @property {number} [height] Tile height in pixels. Same as tile width if height is
   * not given.
   */

  /**
   * @typedef {Object} IiifProfile
   * @property {Array<string>} [formats] Supported image formats for the image service.
   * @property {Array<string>} [qualities] Supported IIIF image qualities.
   * @property {Array<string>} [supports] Supported features.
   * @property {number} [maxArea] Maximum area (pixels) available for this image service.
   * @property {number} [maxHeight] Maximum height.
   * @property {number} [maxWidth] Maximum width.
   */

  /**
   * @typedef {Object<string,string|number|Array<number|string|IiifProfile|Object<string, number>|TileInfo>>}
   *    ImageInformationResponse
   */

  /**
   * Enum representing the major IIIF Image API versions
   * @enum {string}
   */
  const Versions = {
    VERSION1: 'version1',
    VERSION2: 'version2',
    VERSION3: 'version3',
  };

  /**
   * Supported image formats, qualities and supported region / size calculation features
   * for different image API versions and compliance levels
   * @const
   * @type {Object<string, Object<string, SupportedFeatures>>}
   */
  const IIIF_PROFILE_VALUES = {};
  IIIF_PROFILE_VALUES[Versions.VERSION1] = {
    'level0': {
      supports: [],
      formats: [],
      qualities: ['native'],
    },
    'level1': {
      supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],
      formats: ['jpg'],
      qualities: ['native'],
    },
    'level2': {
      supports: [
        'regionByPx',
        'regionByPct',
        'sizeByW',
        'sizeByH',
        'sizeByPct',
        'sizeByConfinedWh',
        'sizeByWh',
      ],
      formats: ['jpg', 'png'],
      qualities: ['native', 'color', 'grey', 'bitonal'],
    },
  };
  IIIF_PROFILE_VALUES[Versions.VERSION2] = {
    'level0': {
      supports: [],
      formats: ['jpg'],
      qualities: ['default'],
    },
    'level1': {
      supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],
      formats: ['jpg'],
      qualities: ['default'],
    },
    'level2': {
      supports: [
        'regionByPx',
        'regionByPct',
        'sizeByW',
        'sizeByH',
        'sizeByPct',
        'sizeByConfinedWh',
        'sizeByDistortedWh',
        'sizeByWh',
      ],
      formats: ['jpg', 'png'],
      qualities: ['default', 'bitonal'],
    },
  };
  IIIF_PROFILE_VALUES[Versions.VERSION3] = {
    'level0': {
      supports: [],
      formats: ['jpg'],
      qualities: ['default'],
    },
    'level1': {
      supports: ['regionByPx', 'regionSquare', 'sizeByW', 'sizeByH', 'sizeByWh'],
      formats: ['jpg'],
      qualities: ['default'],
    },
    'level2': {
      supports: [
        'regionByPx',
        'regionSquare',
        'regionByPct',
        'sizeByW',
        'sizeByH',
        'sizeByPct',
        'sizeByConfinedWh',
        'sizeByWh',
      ],
      formats: ['jpg', 'png'],
      qualities: ['default'],
    },
  };
  IIIF_PROFILE_VALUES['none'] = {
    'none': {
      supports: [],
      formats: [],
      qualities: [],
    },
  };

  const COMPLIANCE_VERSION1 =
    /^https?:\/\/library\.stanford\.edu\/iiif\/image-api\/(?:1\.1\/)?compliance\.html#level[0-2]$/;
  const COMPLIANCE_VERSION2 =
    /^https?:\/\/iiif\.io\/api\/image\/2\/level[0-2](?:\.json)?$/;
  const COMPLIANCE_VERSION3 =
    /(^https?:\/\/iiif\.io\/api\/image\/3\/level[0-2](?:\.json)?$)|(^level[0-2]$)/;

  function generateVersion1Options(iiifInfo) {
    let levelProfile = iiifInfo.getComplianceLevelSupportedFeatures();
    // Version 1.0 and 1.1 do not require a profile.
    if (levelProfile === undefined) {
      levelProfile = IIIF_PROFILE_VALUES[Versions.VERSION1]['level0'];
    }
    return {
      url:
        iiifInfo.imageInfo['@id'] === undefined
          ? undefined
          : iiifInfo.imageInfo['@id'].replace(/\/?(?:info\.json)?$/g, ''),
      supports: levelProfile.supports,
      formats: [
        ...levelProfile.formats,
        iiifInfo.imageInfo.formats === undefined
          ? []
          : iiifInfo.imageInfo.formats,
      ],
      qualities: [
        ...levelProfile.qualities,
        iiifInfo.imageInfo.qualities === undefined
          ? []
          : iiifInfo.imageInfo.qualities,
      ],
      resolutions: iiifInfo.imageInfo.scale_factors,
      tileSize:
        iiifInfo.imageInfo.tile_width !== undefined
          ? iiifInfo.imageInfo.tile_height !== undefined
            ? [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_height]
            : [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_width]
          : iiifInfo.imageInfo.tile_height != undefined
            ? [iiifInfo.imageInfo.tile_height, iiifInfo.imageInfo.tile_height]
            : undefined,
    };
  }

  function generateVersion2Options(iiifInfo) {
    const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),
      additionalProfile =
        Array.isArray(iiifInfo.imageInfo.profile) &&
        iiifInfo.imageInfo.profile.length > 1,
      profileSupports =
        additionalProfile && iiifInfo.imageInfo.profile[1].supports
          ? iiifInfo.imageInfo.profile[1].supports
          : [],
      profileFormats =
        additionalProfile && iiifInfo.imageInfo.profile[1].formats
          ? iiifInfo.imageInfo.profile[1].formats
          : [],
      profileQualities =
        additionalProfile && iiifInfo.imageInfo.profile[1].qualities
          ? iiifInfo.imageInfo.profile[1].qualities
          : [];
    return {
      url: iiifInfo.imageInfo['@id'].replace(/\/?(?:info\.json)?$/g, ''),
      sizes:
        iiifInfo.imageInfo.sizes === undefined
          ? undefined
          : iiifInfo.imageInfo.sizes.map(function (size) {
              return [size.width, size.height];
            }),
      tileSize:
        iiifInfo.imageInfo.tiles === undefined
          ? undefined
          : [
              iiifInfo.imageInfo.tiles.map(function (tile) {
                return tile.width;
              })[0],
              iiifInfo.imageInfo.tiles.map(function (tile) {
                return tile.height === undefined ? tile.width : tile.height;
              })[0],
            ],
      resolutions:
        iiifInfo.imageInfo.tiles === undefined
          ? undefined
          : iiifInfo.imageInfo.tiles.map(function (tile) {
              return tile.scaleFactors;
            })[0],
      supports: [...levelProfile.supports, ...profileSupports],
      formats: [...levelProfile.formats, ...profileFormats],
      qualities: [...levelProfile.qualities, ...profileQualities],
    };
  }

  function generateVersion3Options(iiifInfo) {
    const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),
      formats =
        iiifInfo.imageInfo.extraFormats === undefined
          ? levelProfile.formats
          : [...levelProfile.formats, ...iiifInfo.imageInfo.extraFormats],
      preferredFormat =
        iiifInfo.imageInfo.preferredFormats !== undefined &&
        Array.isArray(iiifInfo.imageInfo.preferredFormats) &&
        iiifInfo.imageInfo.preferredFormats.length > 0
          ? iiifInfo.imageInfo.preferredFormats
              .filter(function (format) {
                return ['jpg', 'png', 'gif'].includes(format);
              })
              .reduce(function (acc, format) {
                return acc === undefined && formats.includes(format)
                  ? format
                  : acc;
              }, undefined)
          : undefined;
    return {
      url: iiifInfo.imageInfo['id'],
      sizes:
        iiifInfo.imageInfo.sizes === undefined
          ? undefined
          : iiifInfo.imageInfo.sizes.map(function (size) {
              return [size.width, size.height];
            }),
      tileSize:
        iiifInfo.imageInfo.tiles === undefined
          ? undefined
          : [
              iiifInfo.imageInfo.tiles.map(function (tile) {
                return tile.width;
              })[0],
              iiifInfo.imageInfo.tiles.map(function (tile) {
                return tile.height;
              })[0],
            ],
      resolutions:
        iiifInfo.imageInfo.tiles === undefined
          ? undefined
          : iiifInfo.imageInfo.tiles.map(function (tile) {
              return tile.scaleFactors;
            })[0],
      supports:
        iiifInfo.imageInfo.extraFeatures === undefined
          ? levelProfile.supports
          : [...levelProfile.supports, ...iiifInfo.imageInfo.extraFeatures],
      formats: formats,
      qualities:
        iiifInfo.imageInfo.extraQualities === undefined
          ? levelProfile.qualities
          : [...levelProfile.qualities, ...iiifInfo.imageInfo.extraQualities],
      preferredFormat: preferredFormat,
    };
  }

  const versionFunctions = {};
  versionFunctions[Versions.VERSION1] = generateVersion1Options;
  versionFunctions[Versions.VERSION2] = generateVersion2Options;
  versionFunctions[Versions.VERSION3] = generateVersion3Options;

  /**
   * @classdesc
   * Format for transforming IIIF Image API image information responses into
   * IIIF tile source ready options
   *
   * @api
   */
  class IIIFInfo {
    /**
     * @param {string|ImageInformationResponse} imageInfo
     * Deserialized image information JSON response object or JSON response as string
     */
    constructor(imageInfo) {
      this.setImageInfo(imageInfo);
    }

    /**
     * @param {string|ImageInformationResponse} imageInfo
     * Deserialized image information JSON response object or JSON response as string
     * @api
     */
    setImageInfo(imageInfo) {
      if (typeof imageInfo == 'string') {
        this.imageInfo = JSON.parse(imageInfo);
      } else {
        this.imageInfo = imageInfo;
      }
    }

    /**
     * @return {Versions|undefined} Major IIIF version.
     * @api
     */
    getImageApiVersion() {
      if (this.imageInfo === undefined) {
        return undefined;
      }
      let context = this.imageInfo['@context'] || 'ol-no-context';
      if (typeof context == 'string') {
        context = [context];
      }
      for (let i = 0; i < context.length; i++) {
        switch (context[i]) {
          case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':
          case 'http://iiif.io/api/image/1/context.json':
            return Versions.VERSION1;
          case 'http://iiif.io/api/image/2/context.json':
            return Versions.VERSION2;
          case 'http://iiif.io/api/image/3/context.json':
            return Versions.VERSION3;
          case 'ol-no-context':
            // Image API 1.0 has no '@context'
            if (
              this.getComplianceLevelEntryFromProfile(Versions.VERSION1) &&
              this.imageInfo.identifier
            ) {
              return Versions.VERSION1;
            }
            break;
        }
      }
      assert$1(
        false,
        'Cannot determine IIIF Image API version from provided image information JSON',
      );
    }

    /**
     * @param {Versions} version Optional IIIF image API version
     * @return {string|undefined} Compliance level as it appears in the IIIF image information
     * response.
     */
    getComplianceLevelEntryFromProfile(version) {
      if (this.imageInfo === undefined || this.imageInfo.profile === undefined) {
        return undefined;
      }
      if (version === undefined) {
        version = this.getImageApiVersion();
      }
      switch (version) {
        case Versions.VERSION1:
          if (COMPLIANCE_VERSION1.test(this.imageInfo.profile)) {
            return this.imageInfo.profile;
          }
          break;
        case Versions.VERSION3:
          if (COMPLIANCE_VERSION3.test(this.imageInfo.profile)) {
            return this.imageInfo.profile;
          }
          break;
        case Versions.VERSION2:
          if (
            typeof this.imageInfo.profile === 'string' &&
            COMPLIANCE_VERSION2.test(this.imageInfo.profile)
          ) {
            return this.imageInfo.profile;
          }
          if (
            Array.isArray(this.imageInfo.profile) &&
            this.imageInfo.profile.length > 0 &&
            typeof this.imageInfo.profile[0] === 'string' &&
            COMPLIANCE_VERSION2.test(this.imageInfo.profile[0])
          ) {
            return this.imageInfo.profile[0];
          }
          break;
      }
      return undefined;
    }

    /**
     * @param {Versions} version Optional IIIF image API version
     * @return {string} Compliance level, on of 'level0', 'level1' or 'level2' or undefined
     */
    getComplianceLevelFromProfile(version) {
      const complianceLevel = this.getComplianceLevelEntryFromProfile(version);
      if (complianceLevel === undefined) {
        return undefined;
      }
      const level = complianceLevel.match(/level[0-2](?:\.json)?$/g);
      return Array.isArray(level) ? level[0].replace('.json', '') : undefined;
    }

    /**
     * @return {SupportedFeatures|undefined} Image formats, qualities and region / size calculation
     * methods that are supported by the IIIF service.
     */
    getComplianceLevelSupportedFeatures() {
      if (this.imageInfo === undefined) {
        return undefined;
      }
      const version = this.getImageApiVersion();
      const level = this.getComplianceLevelFromProfile(version);
      if (level === undefined) {
        return IIIF_PROFILE_VALUES['none']['none'];
      }
      return IIIF_PROFILE_VALUES[version][level];
    }

    /**
     * @param {PreferredOptions} [preferredOptions] Optional options for preferred format and quality.
     * @return {import("../source/IIIF.js").Options|undefined} IIIF tile source ready constructor options.
     * @api
     */
    getTileSourceOptions(preferredOptions) {
      const options = preferredOptions || {},
        version = this.getImageApiVersion();
      if (version === undefined) {
        return undefined;
      }
      const imageOptions =
        version === undefined ? undefined : versionFunctions[version](this);
      if (imageOptions === undefined) {
        return undefined;
      }
      return {
        url: imageOptions.url,
        version: version,
        size: [this.imageInfo.width, this.imageInfo.height],
        sizes: imageOptions.sizes,
        format:
          options.format !== undefined &&
          imageOptions.formats.includes(options.format)
            ? options.format
            : imageOptions.preferredFormat !== undefined
              ? imageOptions.preferredFormat
              : 'jpg',
        supports: imageOptions.supports,
        quality:
          options.quality && imageOptions.qualities.includes(options.quality)
            ? options.quality
            : imageOptions.qualities.includes('native')
              ? 'native'
              : 'default',
        resolutions: Array.isArray(imageOptions.resolutions)
          ? imageOptions.resolutions.sort(function (a, b) {
              return b - a;
            })
          : undefined,
        tileSize: imageOptions.tileSize,
      };
    }
  }

  /**
   * @module ol/format/KML
   */

  /**
   * @typedef {Object} Vec2
   * @property {number} x X coordinate.
   * @property {import("../style/Icon.js").IconAnchorUnits} xunits Units of x.
   * @property {number} y Y coordinate.
   * @property {import("../style/Icon.js").IconAnchorUnits} yunits Units of Y.
   * @property {import("../style/Icon.js").IconOrigin} [origin] Origin.
   */

  /**
   * @typedef {Object} GxTrackObject
   * @property {Array<Array<number>>} coordinates Coordinates.
   * @property {Array<number>} whens Whens.
   */

  /**
   * @const
   * @type {Array<string>}
   */
  const GX_NAMESPACE_URIS = ['http://www.google.com/kml/ext/2.2'];

  /**
   * @const
   * @type {Array<null|string>}
   */
  const NAMESPACE_URIS$3 = [
    null,
    'http://earth.google.com/kml/2.0',
    'http://earth.google.com/kml/2.1',
    'http://earth.google.com/kml/2.2',
    'http://www.opengis.net/kml/2.2',
  ];

  /**
   * @const
   * @type {string}
   */
  const SCHEMA_LOCATION =
    'http://www.opengis.net/kml/2.2 ' +
    'https://developers.google.com/kml/schema/kml22gx.xsd';

  /**
   * @type {Object<string, import("../style/Icon.js").IconAnchorUnits>}
   */
  const ICON_ANCHOR_UNITS_MAP = {
    'fraction': 'fraction',
    'pixels': 'pixels',
    'insetPixels': 'pixels',
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const PLACEMARK_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3,
    {
      'ExtendedData': extendedDataParser,
      'Region': regionParser,
      'MultiGeometry': makeObjectPropertySetter(readMultiGeometry, 'geometry'),
      'LineString': makeObjectPropertySetter(readLineString, 'geometry'),
      'LinearRing': makeObjectPropertySetter(readLinearRing, 'geometry'),
      'Point': makeObjectPropertySetter(readPoint, 'geometry'),
      'Polygon': makeObjectPropertySetter(readPolygon, 'geometry'),
      'Style': makeObjectPropertySetter(readStyle$2),
      'StyleMap': placemarkStyleMapParser,
      'address': makeObjectPropertySetter(readString),
      'description': makeObjectPropertySetter(readString),
      'name': makeObjectPropertySetter(readString),
      'open': makeObjectPropertySetter(readBoolean),
      'phoneNumber': makeObjectPropertySetter(readString),
      'styleUrl': makeObjectPropertySetter(readStyleURL),
      'visibility': makeObjectPropertySetter(readBoolean),
    },
    makeStructureNS(GX_NAMESPACE_URIS, {
      'MultiTrack': makeObjectPropertySetter(readGxMultiTrack, 'geometry'),
      'Track': makeObjectPropertySetter(readGxTrack, 'geometry'),
    }),
  );

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const NETWORK_LINK_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'ExtendedData': extendedDataParser,
    'Region': regionParser,
    'Link': linkParser,
    'address': makeObjectPropertySetter(readString),
    'description': makeObjectPropertySetter(readString),
    'name': makeObjectPropertySetter(readString),
    'open': makeObjectPropertySetter(readBoolean),
    'phoneNumber': makeObjectPropertySetter(readString),
    'visibility': makeObjectPropertySetter(readBoolean),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LINK_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'href': makeObjectPropertySetter(readURI),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const CAMERA_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    Altitude: makeObjectPropertySetter(readDecimal),
    Longitude: makeObjectPropertySetter(readDecimal),
    Latitude: makeObjectPropertySetter(readDecimal),
    Tilt: makeObjectPropertySetter(readDecimal),
    AltitudeMode: makeObjectPropertySetter(readString),
    Heading: makeObjectPropertySetter(readDecimal),
    Roll: makeObjectPropertySetter(readDecimal),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const REGION_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'LatLonAltBox': latLonAltBoxParser,
    'Lod': lodParser,
  });

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const KML_SEQUENCE = makeStructureNS(NAMESPACE_URIS$3, ['Document', 'Placemark']);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const KML_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'Document': makeChildAppender(writeDocument),
    'Placemark': makeChildAppender(writePlacemark),
  });

  /**
   * @type {import("../color.js").Color}
   */
  let DEFAULT_COLOR;

  /**
   * @type {Fill|null}
   */
  let DEFAULT_FILL_STYLE = null;

  /**
   * @type {import("../size.js").Size}
   */
  let DEFAULT_IMAGE_STYLE_ANCHOR;

  /**
   * @type {import("../style/Icon.js").IconAnchorUnits}
   */
  let DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;

  /**
   * @type {import("../style/Icon.js").IconAnchorUnits}
   */
  let DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;

  /**
   * @type {import("../size.js").Size}
   */
  let DEFAULT_IMAGE_STYLE_SIZE;

  /**
   * @type {string}
   */
  let DEFAULT_IMAGE_STYLE_SRC;

  /**
   * @type {import("../style/Image.js").default|null}
   */
  let DEFAULT_IMAGE_STYLE = null;

  /**
   * @type {string}
   */
  let DEFAULT_NO_IMAGE_STYLE;

  /**
   * @type {Stroke|null}
   */
  let DEFAULT_STROKE_STYLE = null;

  /**
   * @type {Stroke}
   */
  let DEFAULT_TEXT_STROKE_STYLE;

  /**
   * @type {Text|null}
   */
  let DEFAULT_TEXT_STYLE = null;

  /**
   * @type {Style|null}
   */
  let DEFAULT_STYLE = null;

  /**
   * @type {Array<Style>|null}
   */
  let DEFAULT_STYLE_ARRAY = null;

  /**
   * Function that returns the scale needed to normalize an icon image to 32 pixels.
   * @param {import("../size.js").Size} size Image size.
   * @return {number} Scale.
   */
  function scaleForSize(size) {
    return 32 / Math.min(size[0], size[1]);
  }

  function createStyleDefaults() {
    DEFAULT_COLOR = [255, 255, 255, 1];

    DEFAULT_FILL_STYLE = new Fill({
      color: DEFAULT_COLOR,
    });

    DEFAULT_IMAGE_STYLE_ANCHOR = [20, 2];

    DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS = 'pixels';

    DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS = 'pixels';

    DEFAULT_IMAGE_STYLE_SIZE = [64, 64];

    DEFAULT_IMAGE_STYLE_SRC =
      'https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png';

    DEFAULT_IMAGE_STYLE = new Icon({
      anchor: DEFAULT_IMAGE_STYLE_ANCHOR,
      anchorOrigin: 'bottom-left',
      anchorXUnits: DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS,
      anchorYUnits: DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS,
      crossOrigin: 'anonymous',
      rotation: 0,
      scale: scaleForSize(DEFAULT_IMAGE_STYLE_SIZE),
      size: DEFAULT_IMAGE_STYLE_SIZE,
      src: DEFAULT_IMAGE_STYLE_SRC,
    });

    DEFAULT_NO_IMAGE_STYLE = 'NO_IMAGE';

    DEFAULT_STROKE_STYLE = new Stroke({
      color: DEFAULT_COLOR,
      width: 1,
    });

    DEFAULT_TEXT_STROKE_STYLE = new Stroke({
      color: [51, 51, 51, 1],
      width: 2,
    });

    DEFAULT_TEXT_STYLE = new Text({
      font: 'bold 16px Helvetica',
      fill: DEFAULT_FILL_STYLE,
      stroke: DEFAULT_TEXT_STROKE_STYLE,
      scale: 0.8,
    });

    DEFAULT_STYLE = new Style({
      fill: DEFAULT_FILL_STYLE,
      image: DEFAULT_IMAGE_STYLE,
      text: DEFAULT_TEXT_STYLE,
      stroke: DEFAULT_STROKE_STYLE,
      zIndex: 0,
    });

    DEFAULT_STYLE_ARRAY = [DEFAULT_STYLE];
  }

  /**
   * @type {HTMLTextAreaElement}
   */
  let TEXTAREA;

  /**
   * A function that takes a url `{string}` and returns a url `{string}`.
   * Might be used to change an icon path or to substitute a
   * data url obtained from a KMZ array buffer.
   *
   * @typedef {function(string):string} IconUrlFunction
   * @api
   */

  /**
   * Function that returns a url unchanged.
   * @param {string} href Input url.
   * @return {string} Output url.
   */
  function defaultIconUrlFunction(href) {
    return href;
  }

  /**
   * @typedef {Object} Options
   * @property {boolean} [extractStyles=true] Extract styles from the KML.
   * @property {boolean} [showPointNames=true] Show names as labels for placemarks which contain points.
   * @property {Array<Style>} [defaultStyle] Default style. The
   * default default style is the same as Google Earth.
   * @property {boolean} [writeStyles=true] Write styles into KML.
   * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images. Note that you must provide a
   * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * @property {IconUrlFunction} [iconUrlFunction] Function that takes a url string and returns a url string.
   * Might be used to change an icon path or to substitute a data url obtained from a KMZ array buffer.
   */

  /**
   * @classdesc
   * Feature format for reading and writing data in the KML format.
   *
   * {@link module:ol/format/KML~KML#readFeature} will read the first feature from
   * a KML source.
   *
   * MultiGeometries are converted into GeometryCollections if they are a mix of
   * geometry types, and into MultiPoint/MultiLineString/MultiPolygon if they are
   * all of the same type.
   *
   * @api
   */
  class KML extends XMLFeature {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      if (!DEFAULT_STYLE_ARRAY) {
        createStyleDefaults();
      }

      /**
       * @type {import("../proj/Projection.js").default}
       */
      this.dataProjection = get$2('EPSG:4326');

      /**
       * @private
       * @type {Array<Style>}
       */
      this.defaultStyle_ = options.defaultStyle
        ? options.defaultStyle
        : DEFAULT_STYLE_ARRAY;

      /**
       * @private
       * @type {boolean}
       */
      this.extractStyles_ =
        options.extractStyles !== undefined ? options.extractStyles : true;

      /**
       * @type {boolean}
       */
      this.writeStyles_ =
        options.writeStyles !== undefined ? options.writeStyles : true;

      /**
       * @private
       * @type {!Object<string, (Array<Style>|string)>}
       */
      this.sharedStyles_ = {};

      /**
       * @private
       * @type {boolean}
       */
      this.showPointNames_ =
        options.showPointNames !== undefined ? options.showPointNames : true;

      /**
       * @type {null|string}
       */
      this.crossOrigin_ =
        options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';

      /**
       * @type {IconUrlFunction}
       */
      this.iconUrlFunction_ = options.iconUrlFunction
        ? options.iconUrlFunction
        : defaultIconUrlFunction;

      this.supportedMediaTypes = ['application/vnd.google-earth.kml+xml'];
    }

    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<Feature>|undefined} Features.
     */
    readDocumentOrFolder_(node, objectStack) {
      // FIXME use scope somehow
      const parsersNS = makeStructureNS(NAMESPACE_URIS$3, {
        'Document': makeArrayExtender(this.readDocumentOrFolder_, this),
        'Folder': makeArrayExtender(this.readDocumentOrFolder_, this),
        'Placemark': makeArrayPusher(this.readPlacemark_, this),
        'Style': this.readSharedStyle_.bind(this),
        'StyleMap': this.readSharedStyleMap_.bind(this),
      });
      /** @type {Array<Feature>} */
      // @ts-ignore
      const features = pushParseAndPop([], parsersNS, node, objectStack, this);
      if (features) {
        return features;
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Feature|undefined} Feature.
     */
    readPlacemark_(node, objectStack) {
      const object = pushParseAndPop(
        {'geometry': null},
        PLACEMARK_PARSERS,
        node,
        objectStack,
        this,
      );
      if (!object) {
        return undefined;
      }
      const feature = new Feature();
      const id = node.getAttribute('id');
      if (id !== null) {
        feature.setId(id);
      }
      const options = /** @type {import("./Feature.js").ReadOptions} */ (
        objectStack[0]
      );

      const geometry = object['geometry'];
      if (geometry) {
        transformGeometryWithOptions(geometry, false, options);
      }
      feature.setGeometry(geometry);
      delete object['geometry'];

      if (this.extractStyles_) {
        const style = object['Style'];
        const styleUrl = object['styleUrl'];
        const styleFunction = createFeatureStyleFunction(
          style,
          styleUrl,
          this.defaultStyle_,
          this.sharedStyles_,
          this.showPointNames_,
        );
        feature.setStyle(styleFunction);
      }
      delete object['Style'];
      // we do not remove the styleUrl property from the object, so it
      // gets stored on feature when setProperties is called

      feature.setProperties(object, true);

      return feature;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    readSharedStyle_(node, objectStack) {
      const id = node.getAttribute('id');
      if (id !== null) {
        const style = readStyle$2.call(this, node, objectStack);
        if (style) {
          let styleUri;
          let baseURI = node.baseURI;
          if (!baseURI || baseURI == 'about:blank') {
            baseURI = window.location.href;
          }
          if (baseURI) {
            const url = new URL('#' + id, baseURI);
            styleUri = url.href;
          } else {
            styleUri = '#' + id;
          }
          this.sharedStyles_[styleUri] = style;
        }
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    readSharedStyleMap_(node, objectStack) {
      const id = node.getAttribute('id');
      if (id === null) {
        return;
      }
      const styleMapValue = readStyleMapValue.call(this, node, objectStack);
      if (!styleMapValue) {
        return;
      }
      let styleUri;
      let baseURI = node.baseURI;
      if (!baseURI || baseURI == 'about:blank') {
        baseURI = window.location.href;
      }
      if (baseURI) {
        const url = new URL('#' + id, baseURI);
        styleUri = url.href;
      } else {
        styleUri = '#' + id;
      }
      this.sharedStyles_[styleUri] = styleMapValue;
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {import("../Feature.js").default} Feature.
     * @override
     */
    readFeatureFromNode(node, options) {
      if (!NAMESPACE_URIS$3.includes(node.namespaceURI)) {
        return null;
      }
      const feature = this.readPlacemark_(node, [
        this.getReadOptions(node, options),
      ]);
      if (feature) {
        return feature;
      }
      return null;
    }

    /**
     * @protected
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @override
     */
    readFeaturesFromNode(node, options) {
      if (!NAMESPACE_URIS$3.includes(node.namespaceURI)) {
        return [];
      }
      let features;
      const localName = node.localName;
      if (localName == 'Document' || localName == 'Folder') {
        features = this.readDocumentOrFolder_(node, [
          this.getReadOptions(node, options),
        ]);
        if (features) {
          return features;
        }
        return [];
      }
      if (localName == 'Placemark') {
        const feature = this.readPlacemark_(node, [
          this.getReadOptions(node, options),
        ]);
        if (feature) {
          return [feature];
        }
        return [];
      }
      if (localName == 'kml') {
        features = [];
        for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
          const fs = this.readFeaturesFromNode(n, options);
          if (fs) {
            extend$3(features, fs);
          }
        }
        return features;
      }
      return [];
    }

    /**
     * Read the name of the KML.
     *
     * @param {Document|Element|string} source Source.
     * @return {string|undefined} Name.
     * @api
     */
    readName(source) {
      if (!source) {
        return undefined;
      }
      if (typeof source === 'string') {
        const doc = parse$1(source);
        return this.readNameFromDocument(doc);
      }
      if (isDocument(source)) {
        return this.readNameFromDocument(/** @type {Document} */ (source));
      }
      return this.readNameFromNode(/** @type {Element} */ (source));
    }

    /**
     * @param {Document} doc Document.
     * @return {string|undefined} Name.
     */
    readNameFromDocument(doc) {
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          const name = this.readNameFromNode(/** @type {Element} */ (n));
          if (name) {
            return name;
          }
        }
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @return {string|undefined} Name.
     */
    readNameFromNode(node) {
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        if (NAMESPACE_URIS$3.includes(n.namespaceURI) && n.localName == 'name') {
          return readString(n);
        }
      }
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        const localName = n.localName;
        if (
          NAMESPACE_URIS$3.includes(n.namespaceURI) &&
          (localName == 'Document' ||
            localName == 'Folder' ||
            localName == 'Placemark' ||
            localName == 'kml')
        ) {
          const name = this.readNameFromNode(n);
          if (name) {
            return name;
          }
        }
      }
      return undefined;
    }

    /**
     * Read the network links of the KML.
     *
     * @param {Document|Element|string} source Source.
     * @return {Array<Object>} Network links.
     * @api
     */
    readNetworkLinks(source) {
      const networkLinks = [];
      if (typeof source === 'string') {
        const doc = parse$1(source);
        extend$3(networkLinks, this.readNetworkLinksFromDocument(doc));
      } else if (isDocument(source)) {
        extend$3(
          networkLinks,
          this.readNetworkLinksFromDocument(/** @type {Document} */ (source)),
        );
      } else {
        extend$3(
          networkLinks,
          this.readNetworkLinksFromNode(/** @type {Element} */ (source)),
        );
      }
      return networkLinks;
    }

    /**
     * @param {Document} doc Document.
     * @return {Array<Object>} Network links.
     */
    readNetworkLinksFromDocument(doc) {
      const networkLinks = [];
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          extend$3(
            networkLinks,
            this.readNetworkLinksFromNode(/** @type {Element} */ (n)),
          );
        }
      }
      return networkLinks;
    }

    /**
     * @param {Element} node Node.
     * @return {Array<Object>} Network links.
     */
    readNetworkLinksFromNode(node) {
      const networkLinks = [];
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        if (
          NAMESPACE_URIS$3.includes(n.namespaceURI) &&
          n.localName == 'NetworkLink'
        ) {
          const obj = pushParseAndPop({}, NETWORK_LINK_PARSERS, n, []);
          networkLinks.push(obj);
        }
      }
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        const localName = n.localName;
        if (
          NAMESPACE_URIS$3.includes(n.namespaceURI) &&
          (localName == 'Document' || localName == 'Folder' || localName == 'kml')
        ) {
          extend$3(networkLinks, this.readNetworkLinksFromNode(n));
        }
      }
      return networkLinks;
    }

    /**
     * Read the regions of the KML.
     *
     * @param {Document|Element|string} source Source.
     * @return {Array<Object>} Regions.
     * @api
     */
    readRegion(source) {
      const regions = [];
      if (typeof source === 'string') {
        const doc = parse$1(source);
        extend$3(regions, this.readRegionFromDocument(doc));
      } else if (isDocument(source)) {
        extend$3(
          regions,
          this.readRegionFromDocument(/** @type {Document} */ (source)),
        );
      } else {
        extend$3(regions, this.readRegionFromNode(/** @type {Element} */ (source)));
      }
      return regions;
    }

    /**
     * @param {Document} doc Document.
     * @return {Array<Object>} Region.
     */
    readRegionFromDocument(doc) {
      const regions = [];
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          extend$3(regions, this.readRegionFromNode(/** @type {Element} */ (n)));
        }
      }
      return regions;
    }

    /**
     * @param {Element} node Node.
     * @return {Array<Object>} Region.
     * @api
     */
    readRegionFromNode(node) {
      const regions = [];
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        if (NAMESPACE_URIS$3.includes(n.namespaceURI) && n.localName == 'Region') {
          const obj = pushParseAndPop({}, REGION_PARSERS, n, []);
          regions.push(obj);
        }
      }
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        const localName = n.localName;
        if (
          NAMESPACE_URIS$3.includes(n.namespaceURI) &&
          (localName == 'Document' || localName == 'Folder' || localName == 'kml')
        ) {
          extend$3(regions, this.readRegionFromNode(n));
        }
      }
      return regions;
    }

    /**
     * @typedef {Object} KMLCamera Specifies the observer's viewpoint and associated view parameters.
     * @property {number} [Latitude] Latitude of the camera.
     * @property {number} [Longitude] Longitude of the camera.
     * @property {number} [Altitude] Altitude of the camera.
     * @property {string} [AltitudeMode] Floor-related altitude mode.
     * @property {number} [Heading] Horizontal camera rotation.
     * @property {number} [Tilt] Lateral camera rotation.
     * @property {number} [Roll] Vertical camera rotation.
     */

    /**
     * Read the cameras of the KML.
     *
     * @param {Document|Element|string} source Source.
     * @return {Array<KMLCamera>} Cameras.
     * @api
     */
    readCamera(source) {
      const cameras = [];
      if (typeof source === 'string') {
        const doc = parse$1(source);
        extend$3(cameras, this.readCameraFromDocument(doc));
      } else if (isDocument(source)) {
        extend$3(
          cameras,
          this.readCameraFromDocument(/** @type {Document} */ (source)),
        );
      } else {
        extend$3(cameras, this.readCameraFromNode(/** @type {Element} */ (source)));
      }
      return cameras;
    }

    /**
     * @param {Document} doc Document.
     * @return {Array<KMLCamera>} Cameras.
     */
    readCameraFromDocument(doc) {
      const cameras = [];
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType === Node.ELEMENT_NODE) {
          extend$3(cameras, this.readCameraFromNode(/** @type {Element} */ (n)));
        }
      }
      return cameras;
    }

    /**
     * @param {Element} node Node.
     * @return {Array<KMLCamera>} Cameras.
     * @api
     */
    readCameraFromNode(node) {
      const cameras = [];
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        if (NAMESPACE_URIS$3.includes(n.namespaceURI) && n.localName === 'Camera') {
          const obj = pushParseAndPop({}, CAMERA_PARSERS, n, []);
          cameras.push(obj);
        }
      }
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        const localName = n.localName;
        if (
          NAMESPACE_URIS$3.includes(n.namespaceURI) &&
          (localName === 'Document' ||
            localName === 'Folder' ||
            localName === 'Placemark' ||
            localName === 'kml')
        ) {
          extend$3(cameras, this.readCameraFromNode(n));
        }
      }
      return cameras;
    }

    /**
     * Encode an array of features in the KML format as an XML node. GeometryCollections,
     * MultiPoints, MultiLineStrings, and MultiPolygons are output as MultiGeometries.
     *
     * @param {Array<Feature>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @return {Node} Node.
     * @api
     * @override
     */
    writeFeaturesNode(features, options) {
      options = this.adaptOptions(options);
      const kml = createElementNS(NAMESPACE_URIS$3[4], 'kml');
      const xmlnsUri = 'http://www.w3.org/2000/xmlns/';
      kml.setAttributeNS(xmlnsUri, 'xmlns:gx', GX_NAMESPACE_URIS[0]);
      kml.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);
      kml.setAttributeNS(
        XML_SCHEMA_INSTANCE_URI,
        'xsi:schemaLocation',
        SCHEMA_LOCATION,
      );

      const /** @type {import("../xml.js").NodeStackItem} */ context = {
          node: kml,
        };
      /** @type {!Object<string, (Array<Feature>|Feature|undefined)>} */
      const properties = {};
      if (features.length > 1) {
        properties['Document'] = features;
      } else if (features.length == 1) {
        properties['Placemark'] = features[0];
      }
      const orderedKeys = KML_SEQUENCE[kml.namespaceURI];
      const values = makeSequence(properties, orderedKeys);
      pushSerializeAndPop(
        context,
        KML_SERIALIZERS,
        OBJECT_PROPERTY_NODE_FACTORY,
        values,
        [options],
        orderedKeys,
        this,
      );
      return kml;
    }
  }

  /**
   * @param {Style|undefined} foundStyle Style.
   * @param {string} name Name.
   * @return {Style} style Style.
   */
  function createNameStyleFunction(foundStyle, name) {
    const textOffset = [0, 0];
    /** @type {CanvasTextAlign} */
    let textAlign = 'start';
    const imageStyle = foundStyle.getImage();
    if (imageStyle) {
      const imageSize = imageStyle.getSize();
      if (imageSize && imageSize.length == 2) {
        const imageScale = imageStyle.getScaleArray();
        const anchor = imageStyle.getAnchor();
        // Offset the label to be centered to the right of the icon,
        // if there is one.
        textOffset[0] = imageScale[0] * (imageSize[0] - anchor[0]);
        textOffset[1] = imageScale[1] * (imageSize[1] / 2 - anchor[1]);
        textAlign = 'left';
      }
    }
    let textStyle = foundStyle.getText();
    if (textStyle) {
      // clone the text style, customizing it with name, alignments and offset.
      // Note that kml does not support many text options that OpenLayers does (rotation, textBaseline).
      textStyle = textStyle.clone();
      textStyle.setFont(textStyle.getFont() || DEFAULT_TEXT_STYLE.getFont());
      textStyle.setScale(textStyle.getScale() || DEFAULT_TEXT_STYLE.getScale());
      textStyle.setFill(textStyle.getFill() || DEFAULT_TEXT_STYLE.getFill());
      textStyle.setStroke(textStyle.getStroke() || DEFAULT_TEXT_STROKE_STYLE);
    } else {
      textStyle = DEFAULT_TEXT_STYLE.clone();
    }
    textStyle.setText(name);
    textStyle.setOffsetX(textOffset[0]);
    textStyle.setOffsetY(textOffset[1]);
    textStyle.setTextAlign(textAlign);

    const nameStyle = new Style({
      image: imageStyle,
      text: textStyle,
    });
    return nameStyle;
  }

  /**
   * @param {Array<Style>|undefined} style Style.
   * @param {string} styleUrl Style URL.
   * @param {Array<Style>} defaultStyle Default style.
   * @param {!Object<string, (Array<Style>|string)>} sharedStyles Shared styles.
   * @param {boolean|undefined} showPointNames true to show names for point placemarks.
   * @return {import("../style/Style.js").StyleFunction} Feature style function.
   */
  function createFeatureStyleFunction(
    style,
    styleUrl,
    defaultStyle,
    sharedStyles,
    showPointNames,
  ) {
    return (
      /**
       * @param {Feature} feature feature.
       * @param {number} resolution Resolution.
       * @return {Array<Style>|Style} Style.
       */
      function (feature, resolution) {
        let drawName = showPointNames;
        let name = '';
        let multiGeometryPoints = [];
        if (drawName) {
          const geometry = feature.getGeometry();
          if (geometry) {
            if (geometry instanceof GeometryCollection) {
              multiGeometryPoints = geometry
                .getGeometriesArrayRecursive()
                .filter(function (geometry) {
                  const type = geometry.getType();
                  return type === 'Point' || type === 'MultiPoint';
                });
              drawName = multiGeometryPoints.length > 0;
            } else {
              const type = geometry.getType();
              drawName = type === 'Point' || type === 'MultiPoint';
            }
          }
        }

        if (drawName) {
          name = /** @type {string} */ (feature.get('name'));
          drawName = drawName && !!name;
          // convert any html character codes
          if (drawName && /&[^&]+;/.test(name)) {
            if (!TEXTAREA) {
              TEXTAREA = document.createElement('textarea');
            }
            TEXTAREA.innerHTML = name;
            name = TEXTAREA.value;
          }
        }

        let featureStyle = defaultStyle;
        if (style) {
          featureStyle = style;
        } else if (styleUrl) {
          featureStyle = findStyle(styleUrl, defaultStyle, sharedStyles);
        }
        if (drawName) {
          const nameStyle = createNameStyleFunction(featureStyle[0], name);
          if (multiGeometryPoints.length > 0) {
            // in multigeometries restrict the name style to points and create a
            // style without image or text for geometries requiring fill or stroke
            // including any polygon specific style if there is one
            nameStyle.setGeometry(new GeometryCollection(multiGeometryPoints));
            const baseStyle = new Style({
              geometry: featureStyle[0].getGeometry(),
              image: null,
              fill: featureStyle[0].getFill(),
              stroke: featureStyle[0].getStroke(),
              text: null,
            });
            return [nameStyle, baseStyle].concat(featureStyle.slice(1));
          }
          return nameStyle;
        }
        return featureStyle;
      }
    );
  }

  /**
   * @param {Array<Style>|string|undefined} styleValue Style value.
   * @param {Array<Style>} defaultStyle Default style.
   * @param {!Object<string, (Array<Style>|string)>} sharedStyles
   * Shared styles.
   * @return {Array<Style>} Style.
   */
  function findStyle(styleValue, defaultStyle, sharedStyles) {
    if (Array.isArray(styleValue)) {
      return styleValue;
    }
    if (typeof styleValue === 'string') {
      return findStyle(sharedStyles[styleValue], defaultStyle, sharedStyles);
    }
    return defaultStyle;
  }

  /**
   * @param {Node} node Node.
   * @return {import("../color.js").Color|undefined} Color.
   */
  function readColor(node) {
    const s = getAllTextContent(node, false);
    // The KML specification states that colors should not include a leading `#`
    // but we tolerate them.
    const m = /^\s*#?\s*([0-9A-Fa-f]{8})\s*$/.exec(s);
    if (m) {
      const hexColor = m[1];
      return [
        parseInt(hexColor.substr(6, 2), 16),
        parseInt(hexColor.substr(4, 2), 16),
        parseInt(hexColor.substr(2, 2), 16),
        parseInt(hexColor.substr(0, 2), 16) / 255,
      ];
    }
    return undefined;
  }

  /**
   * @param {Node} node Node.
   * @return {Array<number>|undefined} Flat coordinates.
   */
  function readFlatCoordinates(node) {
    let s = getAllTextContent(node, false);
    const flatCoordinates = [];
    // The KML specification states that coordinate tuples should not include
    // spaces, but we tolerate them.
    s = s.replace(/\s*,\s*/g, ',');
    const re =
      /^\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?),([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)(?:\s+|,|$)(?:([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)(?:\s+|$))?\s*/i;
    let m;
    while ((m = re.exec(s))) {
      const x = parseFloat(m[1]);
      const y = parseFloat(m[2]);
      const z = m[3] ? parseFloat(m[3]) : 0;
      flatCoordinates.push(x, y, z);
      s = s.substr(m[0].length);
    }
    if (s !== '') {
      return undefined;
    }
    return flatCoordinates;
  }

  /**
   * @param {Node} node Node.
   * @return {string} URI.
   */
  function readURI(node) {
    const s = getAllTextContent(node, false).trim();
    let baseURI = node.baseURI;
    if (!baseURI || baseURI == 'about:blank') {
      baseURI = window.location.href;
    }
    if (baseURI) {
      const url = new URL(s, baseURI);
      return url.href;
    }
    return s;
  }

  /**
   * @param {Node} node Node.
   * @return {string} URI.
   */
  function readStyleURL(node) {
    // KML files in the wild occasionally forget the leading
    // `#` on styleUrlsdefined in the same document.
    const s = getAllTextContent(node, false)
      .trim()
      .replace(/^(?!.*#)/, '#');
    let baseURI = node.baseURI;
    if (!baseURI || baseURI == 'about:blank') {
      baseURI = window.location.href;
    }
    if (baseURI) {
      const url = new URL(s, baseURI);
      return url.href;
    }
    return s;
  }

  /**
   * @param {Element} node Node.
   * @return {Vec2} Vec2.
   */
  function readVec2(node) {
    const xunits = node.getAttribute('xunits');
    const yunits = node.getAttribute('yunits');
    /** @type {import('../style/Icon.js').IconOrigin} */
    let origin;
    if (xunits !== 'insetPixels') {
      if (yunits !== 'insetPixels') {
        origin = 'bottom-left';
      } else {
        origin = 'top-left';
      }
    } else {
      if (yunits !== 'insetPixels') {
        origin = 'bottom-right';
      } else {
        origin = 'top-right';
      }
    }
    return {
      x: parseFloat(node.getAttribute('x')),
      xunits: ICON_ANCHOR_UNITS_MAP[xunits],
      y: parseFloat(node.getAttribute('y')),
      yunits: ICON_ANCHOR_UNITS_MAP[yunits],
      origin: origin,
    };
  }

  /**
   * @param {Node} node Node.
   * @return {number|undefined} Scale.
   */
  function readScale(node) {
    return readDecimal(node);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const STYLE_MAP_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'Pair': pairDataParser,
  });

  /**
   * @this {KML}
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<Style>|string|undefined} StyleMap.
   */
  function readStyleMapValue(node, objectStack) {
    return pushParseAndPop(undefined, STYLE_MAP_PARSERS, node, objectStack, this);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const ICON_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'Icon': makeObjectPropertySetter(readIcon),
    'color': makeObjectPropertySetter(readColor),
    'heading': makeObjectPropertySetter(readDecimal),
    'hotSpot': makeObjectPropertySetter(readVec2),
    'scale': makeObjectPropertySetter(readScale),
  });

  /**
   * @this {KML}
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function iconStyleParser(node, objectStack) {
    // FIXME refreshMode
    // FIXME refreshInterval
    // FIXME viewRefreshTime
    // FIXME viewBoundScale
    // FIXME viewFormat
    // FIXME httpQuery
    const object = pushParseAndPop({}, ICON_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = /** @type {Object} */ (
      objectStack[objectStack.length - 1]
    );
    const IconObject = 'Icon' in object ? object['Icon'] : {};
    const drawIcon = !('Icon' in object) || Object.keys(IconObject).length > 0;
    let src;
    const href = /** @type {string|undefined} */ (IconObject['href']);
    if (href) {
      src = href;
    } else if (drawIcon) {
      src = DEFAULT_IMAGE_STYLE_SRC;
    }
    let anchor, anchorXUnits, anchorYUnits;
    /** @type {import('../style/Icon.js').IconOrigin|undefined} */
    let anchorOrigin = 'bottom-left';
    const hotSpot = /** @type {Vec2|undefined} */ (object['hotSpot']);
    if (hotSpot) {
      anchor = [hotSpot.x, hotSpot.y];
      anchorXUnits = hotSpot.xunits;
      anchorYUnits = hotSpot.yunits;
      anchorOrigin = hotSpot.origin;
    } else if (/^https?:\/\/maps\.(?:google|gstatic)\.com\//.test(src)) {
      // Google hotspots from https://kml4earth.appspot.com/icons.html#notes
      if (src.includes('pushpin')) {
        anchor = DEFAULT_IMAGE_STYLE_ANCHOR;
        anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;
        anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;
      } else if (src.includes('arrow-reverse')) {
        anchor = [54, 42];
        anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;
        anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;
      } else if (src.includes('paddle')) {
        anchor = [32, 1];
        anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;
        anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;
      }
    }

    let offset;
    const x = /** @type {number|undefined} */ (IconObject['x']);
    const y = /** @type {number|undefined} */ (IconObject['y']);
    if (x !== undefined && y !== undefined) {
      offset = [x, y];
    }

    let size;
    const w = /** @type {number|undefined} */ (IconObject['w']);
    const h = /** @type {number|undefined} */ (IconObject['h']);
    if (w !== undefined && h !== undefined) {
      size = [w, h];
    }

    let rotation;
    const heading = /** @type {number} */ (object['heading']);
    if (heading !== undefined) {
      rotation = toRadians(heading);
    }

    const scale = /** @type {number|undefined} */ (object['scale']);

    const color = /** @type {Array<number>|undefined} */ (object['color']);

    if (drawIcon) {
      if (src == DEFAULT_IMAGE_STYLE_SRC) {
        size = DEFAULT_IMAGE_STYLE_SIZE;
      }

      const imageStyle = new Icon({
        anchor: anchor,
        anchorOrigin: anchorOrigin,
        anchorXUnits: anchorXUnits,
        anchorYUnits: anchorYUnits,
        crossOrigin: this.crossOrigin_,
        offset: offset,
        offsetOrigin: 'bottom-left',
        rotation: rotation,
        scale: scale,
        size: size,
        src: this.iconUrlFunction_(src),
        color: color,
      });

      const imageScale = imageStyle.getScaleArray()[0];
      const imageSize = imageStyle.getSize();
      if (imageSize === null) {
        const imageState = imageStyle.getImageState();
        if (imageState === ImageState.IDLE || imageState === ImageState.LOADING) {
          const listener = function () {
            const imageState = imageStyle.getImageState();
            if (
              !(
                imageState === ImageState.IDLE ||
                imageState === ImageState.LOADING
              )
            ) {
              const imageSize = imageStyle.getSize();
              if (imageSize && imageSize.length == 2) {
                const resizeScale = scaleForSize(imageSize);
                imageStyle.setScale(imageScale * resizeScale);
              }
              imageStyle.unlistenImageChange(listener);
            }
          };
          imageStyle.listenImageChange(listener);
          if (imageState === ImageState.IDLE) {
            imageStyle.load();
          }
        }
      } else if (imageSize.length == 2) {
        const resizeScale = scaleForSize(imageSize);
        imageStyle.setScale(imageScale * resizeScale);
      }
      styleObject['imageStyle'] = imageStyle;
    } else {
      // handle the case when we explicitly want to draw no icon.
      styleObject['imageStyle'] = DEFAULT_NO_IMAGE_STYLE;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LABEL_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'color': makeObjectPropertySetter(readColor),
    'scale': makeObjectPropertySetter(readScale),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function labelStyleParser(node, objectStack) {
    // FIXME colorMode
    const object = pushParseAndPop({}, LABEL_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = objectStack[objectStack.length - 1];
    const textStyle = new Text({
      fill: new Fill({
        color:
          /** @type {import("../color.js").Color} */
          ('color' in object ? object['color'] : DEFAULT_COLOR),
      }),
      scale: /** @type {number|undefined} */ (object['scale']),
    });
    styleObject['textStyle'] = textStyle;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LINE_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'color': makeObjectPropertySetter(readColor),
    'width': makeObjectPropertySetter(readDecimal),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function lineStyleParser(node, objectStack) {
    // FIXME colorMode
    // FIXME gx:outerColor
    // FIXME gx:outerWidth
    // FIXME gx:physicalWidth
    // FIXME gx:labelVisibility
    const object = pushParseAndPop({}, LINE_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = objectStack[objectStack.length - 1];
    const strokeStyle = new Stroke({
      color:
        /** @type {import("../color.js").Color} */
        ('color' in object ? object['color'] : DEFAULT_COLOR),
      width: /** @type {number} */ ('width' in object ? object['width'] : 1),
    });
    styleObject['strokeStyle'] = strokeStyle;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const POLY_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'color': makeObjectPropertySetter(readColor),
    'fill': makeObjectPropertySetter(readBoolean),
    'outline': makeObjectPropertySetter(readBoolean),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function polyStyleParser(node, objectStack) {
    // FIXME colorMode
    const object = pushParseAndPop({}, POLY_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = objectStack[objectStack.length - 1];
    const fillStyle = new Fill({
      color:
        /** @type {import("../color.js").Color} */
        ('color' in object ? object['color'] : DEFAULT_COLOR),
    });
    styleObject['fillStyle'] = fillStyle;
    const fill = /** @type {boolean|undefined} */ (object['fill']);
    if (fill !== undefined) {
      styleObject['fill'] = fill;
    }
    const outline = /** @type {boolean|undefined} */ (object['outline']);
    if (outline !== undefined) {
      styleObject['outline'] = outline;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const FLAT_LINEAR_RING_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'coordinates': makeReplacer(readFlatCoordinates),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<number>} LinearRing flat coordinates.
   */
  function readFlatLinearRing(node, objectStack) {
    return pushParseAndPop(null, FLAT_LINEAR_RING_PARSERS, node, objectStack);
  }

  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function gxCoordParser(node, objectStack) {
    const gxTrackObject =
      /** @type {GxTrackObject} */
      (objectStack[objectStack.length - 1]);
    const coordinates = gxTrackObject.coordinates;
    const s = getAllTextContent(node, false);
    const re =
      /^\s*([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s+([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s+([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s*$/i;
    const m = re.exec(s);
    if (m) {
      const x = parseFloat(m[1]);
      const y = parseFloat(m[2]);
      const z = parseFloat(m[3]);
      coordinates.push([x, y, z]);
    } else {
      coordinates.push([]);
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const GX_MULTITRACK_GEOMETRY_PARSERS = makeStructureNS(GX_NAMESPACE_URIS, {
    'Track': makeArrayPusher(readGxTrack),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {MultiLineString|undefined} MultiLineString.
   */
  function readGxMultiTrack(node, objectStack) {
    const lineStrings = pushParseAndPop(
      [],
      GX_MULTITRACK_GEOMETRY_PARSERS,
      node,
      objectStack,
    );
    if (!lineStrings) {
      return undefined;
    }
    return new MultiLineString(lineStrings);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const GX_TRACK_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3,
    {
      'when': whenParser,
    },
    makeStructureNS(GX_NAMESPACE_URIS, {
      'coord': gxCoordParser,
    }),
  );

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {LineString|undefined} LineString.
   */
  function readGxTrack(node, objectStack) {
    const gxTrackObject = pushParseAndPop(
      /** @type {GxTrackObject} */ ({
        coordinates: [],
        whens: [],
      }),
      GX_TRACK_PARSERS,
      node,
      objectStack,
    );
    if (!gxTrackObject) {
      return undefined;
    }
    const flatCoordinates = [];
    const coordinates = gxTrackObject.coordinates;
    const whens = gxTrackObject.whens;
    for (
      let i = 0, ii = Math.min(coordinates.length, whens.length);
      i < ii;
      ++i
    ) {
      if (coordinates[i].length == 3) {
        flatCoordinates.push(
          coordinates[i][0],
          coordinates[i][1],
          coordinates[i][2],
          whens[i],
        );
      }
    }
    return new LineString(flatCoordinates, 'XYZM');
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const ICON_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3,
    {
      'href': makeObjectPropertySetter(readURI),
    },
    makeStructureNS(GX_NAMESPACE_URIS, {
      'x': makeObjectPropertySetter(readDecimal),
      'y': makeObjectPropertySetter(readDecimal),
      'w': makeObjectPropertySetter(readDecimal),
      'h': makeObjectPropertySetter(readDecimal),
    }),
  );

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object} Icon object.
   */
  function readIcon(node, objectStack) {
    const iconObject = pushParseAndPop({}, ICON_PARSERS, node, objectStack);
    if (iconObject) {
      return iconObject;
    }
    return null;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const GEOMETRY_FLAT_COORDINATES_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'coordinates': makeReplacer(readFlatCoordinates),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<number>} Flat coordinates.
   */
  function readFlatCoordinatesFromNode(node, objectStack) {
    return pushParseAndPop(
      null,
      GEOMETRY_FLAT_COORDINATES_PARSERS,
      node,
      objectStack,
    );
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const EXTRUDE_AND_ALTITUDE_MODE_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'extrude': makeObjectPropertySetter(readBoolean),
    'tessellate': makeObjectPropertySetter(readBoolean),
    'altitudeMode': makeObjectPropertySetter(readString),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {LineString|undefined} LineString.
   */
  function readLineString(node, objectStack) {
    const properties = pushParseAndPop(
      {},
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS,
      node,
      objectStack,
    );
    const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);
    if (flatCoordinates) {
      const lineString = new LineString(flatCoordinates, 'XYZ');
      lineString.setProperties(properties, true);
      return lineString;
    }
    return undefined;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Polygon|undefined} Polygon.
   */
  function readLinearRing(node, objectStack) {
    const properties = pushParseAndPop(
      {},
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS,
      node,
      objectStack,
    );
    const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);
    if (flatCoordinates) {
      const polygon = new Polygon(flatCoordinates, 'XYZ', [
        flatCoordinates.length,
      ]);
      polygon.setProperties(properties, true);
      return polygon;
    }
    return undefined;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const MULTI_GEOMETRY_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'LineString': makeArrayPusher(readLineString),
    'LinearRing': makeArrayPusher(readLinearRing),
    'MultiGeometry': makeArrayPusher(readMultiGeometry),
    'Point': makeArrayPusher(readPoint),
    'Polygon': makeArrayPusher(readPolygon),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  function readMultiGeometry(node, objectStack) {
    const geometries = pushParseAndPop(
      [],
      MULTI_GEOMETRY_PARSERS,
      node,
      objectStack,
    );
    if (!geometries) {
      return null;
    }
    if (geometries.length === 0) {
      return new GeometryCollection(geometries);
    }
    let multiGeometry;
    let homogeneous = true;
    const type = geometries[0].getType();
    let geometry;
    for (let i = 1, ii = geometries.length; i < ii; ++i) {
      geometry = geometries[i];
      if (geometry.getType() != type) {
        homogeneous = false;
        break;
      }
    }
    if (homogeneous) {
      let layout;
      let flatCoordinates;
      if (type == 'Point') {
        const point = geometries[0];
        layout = point.getLayout();
        flatCoordinates = point.getFlatCoordinates();
        for (let i = 1, ii = geometries.length; i < ii; ++i) {
          geometry = geometries[i];
          extend$3(flatCoordinates, geometry.getFlatCoordinates());
        }
        multiGeometry = new MultiPoint(flatCoordinates, layout);
        setCommonGeometryProperties(multiGeometry, geometries);
      } else if (type == 'LineString') {
        multiGeometry = new MultiLineString(geometries);
        setCommonGeometryProperties(multiGeometry, geometries);
      } else if (type == 'Polygon') {
        multiGeometry = new MultiPolygon(geometries);
        setCommonGeometryProperties(multiGeometry, geometries);
      } else if (type == 'GeometryCollection' || type.startsWith('Multi')) {
        multiGeometry = new GeometryCollection(geometries);
      } else {
        throw new Error('Unknown geometry type found');
      }
    } else {
      multiGeometry = new GeometryCollection(geometries);
    }
    return /** @type {import("../geom/Geometry.js").default} */ (multiGeometry);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Point|undefined} Point.
   */
  function readPoint(node, objectStack) {
    const properties = pushParseAndPop(
      {},
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS,
      node,
      objectStack,
    );
    const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);
    if (flatCoordinates) {
      const point = new Point$1(flatCoordinates, 'XYZ');
      point.setProperties(properties, true);
      return point;
    }
    return undefined;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const FLAT_LINEAR_RINGS_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'innerBoundaryIs': innerBoundaryIsParser,
    'outerBoundaryIs': outerBoundaryIsParser,
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Polygon|undefined} Polygon.
   */
  function readPolygon(node, objectStack) {
    const properties = pushParseAndPop(
      /** @type {Object<string,*>} */ ({}),
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS,
      node,
      objectStack,
    );
    const flatLinearRings = pushParseAndPop(
      [null],
      FLAT_LINEAR_RINGS_PARSERS,
      node,
      objectStack,
    );
    if (flatLinearRings && flatLinearRings[0]) {
      const flatCoordinates = flatLinearRings[0];
      const ends = [flatCoordinates.length];
      for (let i = 1, ii = flatLinearRings.length; i < ii; ++i) {
        extend$3(flatCoordinates, flatLinearRings[i]);
        ends.push(flatCoordinates.length);
      }
      const polygon = new Polygon(flatCoordinates, 'XYZ', ends);
      polygon.setProperties(properties, true);
      return polygon;
    }
    return undefined;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const STYLE_PARSERS$2 = makeStructureNS(NAMESPACE_URIS$3, {
    'IconStyle': iconStyleParser,
    'LabelStyle': labelStyleParser,
    'LineStyle': lineStyleParser,
    'PolyStyle': polyStyleParser,
  });

  /**
   * @this {KML}
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<Style>} Style.
   */
  function readStyle$2(node, objectStack) {
    const styleObject = pushParseAndPop(
      {},
      STYLE_PARSERS$2,
      node,
      objectStack,
      this,
    );
    if (!styleObject) {
      return null;
    }
    let fillStyle =
      /** @type {Fill} */
      (
        'fillStyle' in styleObject ? styleObject['fillStyle'] : DEFAULT_FILL_STYLE
      );
    const fill = /** @type {boolean|undefined} */ (styleObject['fill']);
    if (fill !== undefined && !fill) {
      fillStyle = null;
    }
    let imageStyle;
    if ('imageStyle' in styleObject) {
      if (styleObject['imageStyle'] != DEFAULT_NO_IMAGE_STYLE) {
        imageStyle = /** @type {import("../style/Image.js").default} */ (
          styleObject['imageStyle']
        );
      }
    } else {
      imageStyle = DEFAULT_IMAGE_STYLE;
    }
    const textStyle =
      /** @type {Text} */
      (
        'textStyle' in styleObject ? styleObject['textStyle'] : DEFAULT_TEXT_STYLE
      );
    const strokeStyle =
      /** @type {Stroke} */
      (
        'strokeStyle' in styleObject
          ? styleObject['strokeStyle']
          : DEFAULT_STROKE_STYLE
      );
    const outline = /** @type {boolean|undefined} */ (styleObject['outline']);
    if (outline !== undefined && !outline) {
      // if the polystyle specifies no outline two styles are needed,
      // one for non-polygon geometries where linestrings require a stroke
      // and one for polygons where there should be no stroke
      return [
        new Style({
          geometry: function (feature) {
            const geometry = feature.getGeometry();
            const type = geometry.getType();
            if (type === 'GeometryCollection') {
              const collection =
                /** @type {import("../geom/GeometryCollection").default} */ (
                  geometry
                );
              return new GeometryCollection(
                collection
                  .getGeometriesArrayRecursive()
                  .filter(function (geometry) {
                    const type = geometry.getType();
                    return type !== 'Polygon' && type !== 'MultiPolygon';
                  }),
              );
            }
            if (type !== 'Polygon' && type !== 'MultiPolygon') {
              return geometry;
            }
          },
          fill: fillStyle,
          image: imageStyle,
          stroke: strokeStyle,
          text: textStyle,
          zIndex: undefined, // FIXME
        }),
        new Style({
          geometry: function (feature) {
            const geometry = feature.getGeometry();
            const type = geometry.getType();
            if (type === 'GeometryCollection') {
              const collection =
                /** @type {import("../geom/GeometryCollection").default} */ (
                  geometry
                );
              return new GeometryCollection(
                collection
                  .getGeometriesArrayRecursive()
                  .filter(function (geometry) {
                    const type = geometry.getType();
                    return type === 'Polygon' || type === 'MultiPolygon';
                  }),
              );
            }
            if (type === 'Polygon' || type === 'MultiPolygon') {
              return geometry;
            }
          },
          fill: fillStyle,
          stroke: null,
          zIndex: undefined, // FIXME
        }),
      ];
    }
    return [
      new Style({
        fill: fillStyle,
        image: imageStyle,
        stroke: strokeStyle,
        text: textStyle,
        zIndex: undefined, // FIXME
      }),
    ];
  }

  /**
   * Reads an array of geometries and creates arrays for common geometry
   * properties. Then sets them to the multi geometry.
   * @param {MultiPoint|MultiLineString|MultiPolygon} multiGeometry A multi-geometry.
   * @param {Array<import("../geom/Geometry.js").default>} geometries List of geometries.
   */
  function setCommonGeometryProperties(multiGeometry, geometries) {
    const ii = geometries.length;
    const extrudes = new Array(geometries.length);
    const tessellates = new Array(geometries.length);
    const altitudeModes = new Array(geometries.length);
    let hasExtrude, hasTessellate, hasAltitudeMode;
    hasExtrude = false;
    hasTessellate = false;
    hasAltitudeMode = false;
    for (let i = 0; i < ii; ++i) {
      const geometry = geometries[i];
      extrudes[i] = geometry.get('extrude');
      tessellates[i] = geometry.get('tessellate');
      altitudeModes[i] = geometry.get('altitudeMode');
      hasExtrude = hasExtrude || extrudes[i] !== undefined;
      hasTessellate = hasTessellate || tessellates[i] !== undefined;
      hasAltitudeMode = hasAltitudeMode || altitudeModes[i];
    }
    if (hasExtrude) {
      multiGeometry.set('extrude', extrudes);
    }
    if (hasTessellate) {
      multiGeometry.set('tessellate', tessellates);
    }
    if (hasAltitudeMode) {
      multiGeometry.set('altitudeMode', altitudeModes);
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const DATA_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'displayName': makeObjectPropertySetter(readString),
    'value': makeObjectPropertySetter(readString),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function dataParser(node, objectStack) {
    const name = node.getAttribute('name');
    parseNode(DATA_PARSERS, node, objectStack);
    const featureObject = /** @type {Object} */ (
      objectStack[objectStack.length - 1]
    );
    if (name && featureObject.displayName) {
      featureObject[name] = {
        value: featureObject.value,
        displayName: featureObject.displayName,
        toString: function () {
          return featureObject.value;
        },
      };
    } else if (name !== null) {
      featureObject[name] = featureObject.value;
    } else if (featureObject.displayName !== null) {
      featureObject[featureObject.displayName] = featureObject.value;
    }
    delete featureObject['value'];
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const EXTENDED_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'Data': dataParser,
    'SchemaData': schemaDataParser,
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function extendedDataParser(node, objectStack) {
    parseNode(EXTENDED_DATA_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function regionParser(node, objectStack) {
    parseNode(REGION_PARSERS, node, objectStack);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const PAIR_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'Style': makeObjectPropertySetter(readStyle$2),
    'key': makeObjectPropertySetter(readString),
    'styleUrl': makeObjectPropertySetter(readStyleURL),
  });

  /**
   * @this {KML}
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function pairDataParser(node, objectStack) {
    const pairObject = pushParseAndPop({}, PAIR_PARSERS, node, objectStack, this);
    if (!pairObject) {
      return;
    }
    const key = /** @type {string|undefined} */ (pairObject['key']);
    if (key && key == 'normal') {
      const styleUrl = /** @type {string|undefined} */ (pairObject['styleUrl']);
      if (styleUrl) {
        objectStack[objectStack.length - 1] = styleUrl;
      }
      const style = /** @type {Style} */ (pairObject['Style']);
      if (style) {
        objectStack[objectStack.length - 1] = style;
      }
    }
  }

  /**
   * @this {KML}
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function placemarkStyleMapParser(node, objectStack) {
    const styleMapValue = readStyleMapValue.call(this, node, objectStack);
    if (!styleMapValue) {
      return;
    }
    const placemarkObject = objectStack[objectStack.length - 1];
    if (Array.isArray(styleMapValue)) {
      placemarkObject['Style'] = styleMapValue;
    } else if (typeof styleMapValue === 'string') {
      placemarkObject['styleUrl'] = styleMapValue;
    } else {
      throw new Error('`styleMapValue` has an unknown type');
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const SCHEMA_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'SimpleData': simpleDataParser,
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function schemaDataParser(node, objectStack) {
    parseNode(SCHEMA_DATA_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function simpleDataParser(node, objectStack) {
    const name = node.getAttribute('name');
    if (name !== null) {
      const data = readString(node);
      const featureObject = /** @type {Object} */ (
        objectStack[objectStack.length - 1]
      );
      featureObject[name] = data;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LAT_LON_ALT_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'altitudeMode': makeObjectPropertySetter(readString),
    'minAltitude': makeObjectPropertySetter(readDecimal),
    'maxAltitude': makeObjectPropertySetter(readDecimal),
    'north': makeObjectPropertySetter(readDecimal),
    'south': makeObjectPropertySetter(readDecimal),
    'east': makeObjectPropertySetter(readDecimal),
    'west': makeObjectPropertySetter(readDecimal),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function latLonAltBoxParser(node, objectStack) {
    const object = pushParseAndPop(
      {},
      LAT_LON_ALT_BOX_PARSERS,
      node,
      objectStack,
    );
    if (!object) {
      return;
    }
    const regionObject = /** @type {Object} */ (
      objectStack[objectStack.length - 1]
    );
    const extent = [
      parseFloat(object['west']),
      parseFloat(object['south']),
      parseFloat(object['east']),
      parseFloat(object['north']),
    ];
    regionObject['extent'] = extent;
    regionObject['altitudeMode'] = object['altitudeMode'];
    regionObject['minAltitude'] = parseFloat(object['minAltitude']);
    regionObject['maxAltitude'] = parseFloat(object['maxAltitude']);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LOD_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'minLodPixels': makeObjectPropertySetter(readDecimal),
    'maxLodPixels': makeObjectPropertySetter(readDecimal),
    'minFadeExtent': makeObjectPropertySetter(readDecimal),
    'maxFadeExtent': makeObjectPropertySetter(readDecimal),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function lodParser(node, objectStack) {
    const object = pushParseAndPop({}, LOD_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const lodObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    lodObject['minLodPixels'] = parseFloat(object['minLodPixels']);
    lodObject['maxLodPixels'] = parseFloat(object['maxLodPixels']);
    lodObject['minFadeExtent'] = parseFloat(object['minFadeExtent']);
    lodObject['maxFadeExtent'] = parseFloat(object['maxFadeExtent']);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const INNER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    // KML spec only allows one LinearRing  per innerBoundaryIs, but Google Earth
    // allows multiple, so we parse multiple here too.
    'LinearRing': makeArrayPusher(readFlatLinearRing),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function innerBoundaryIsParser(node, objectStack) {
    const innerBoundaryFlatLinearRings = pushParseAndPop(
      /** @type {Array<Array<number>>} */ ([]),
      INNER_BOUNDARY_IS_PARSERS,
      node,
      objectStack,
    );
    if (innerBoundaryFlatLinearRings.length > 0) {
      const flatLinearRings =
        /** @type {Array<Array<number>>} */
        (objectStack[objectStack.length - 1]);
      flatLinearRings.push(...innerBoundaryFlatLinearRings);
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const OUTER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS$3, {
    'LinearRing': makeReplacer(readFlatLinearRing),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function outerBoundaryIsParser(node, objectStack) {
    /** @type {Array<number>|undefined} */
    const flatLinearRing = pushParseAndPop(
      undefined,
      OUTER_BOUNDARY_IS_PARSERS,
      node,
      objectStack,
    );
    if (flatLinearRing) {
      const flatLinearRings =
        /** @type {Array<Array<number>>} */
        (objectStack[objectStack.length - 1]);
      flatLinearRings[0] = flatLinearRing;
    }
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function linkParser(node, objectStack) {
    parseNode(LINK_PARSERS, node, objectStack);
  }

  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function whenParser(node, objectStack) {
    const gxTrackObject =
      /** @type {GxTrackObject} */
      (objectStack[objectStack.length - 1]);
    const whens = gxTrackObject.whens;
    const s = getAllTextContent(node, false);
    const when = Date.parse(s);
    whens.push(isNaN(when) ? 0 : when);
  }

  /**
   * @param {Node} node Node to append a TextNode with the color to.
   * @param {import("../color.js").Color|string} color Color.
   */
  function writeColorTextNode(node, color) {
    const rgba = asArray(color);
    const opacity = rgba.length == 4 ? rgba[3] : 1;
    /** @type {Array<string|number>} */
    const abgr = [opacity * 255, rgba[2], rgba[1], rgba[0]];
    for (let i = 0; i < 4; ++i) {
      const hex = Math.floor(/** @type {number} */ (abgr[i])).toString(16);
      abgr[i] = hex.length == 1 ? '0' + hex : hex;
    }
    writeStringTextNode(node, abgr.join(''));
  }

  /**
   * @param {Node} node Node to append a TextNode with the coordinates to.
   * @param {Array<number>} coordinates Coordinates.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeCoordinatesTextNode(node, coordinates, objectStack) {
    const context = objectStack[objectStack.length - 1];

    const layout = context['layout'];
    const stride = context['stride'];

    let dimension;
    if (layout == 'XY' || layout == 'XYM') {
      dimension = 2;
    } else if (layout == 'XYZ' || layout == 'XYZM') {
      dimension = 3;
    } else {
      throw new Error('Invalid geometry layout');
    }

    const ii = coordinates.length;
    let text = '';
    if (ii > 0) {
      text += coordinates[0];
      for (let d = 1; d < dimension; ++d) {
        text += ',' + coordinates[d];
      }
      for (let i = stride; i < ii; i += stride) {
        text += ' ' + coordinates[i];
        for (let d = 1; d < dimension; ++d) {
          text += ',' + coordinates[i + d];
        }
      }
    }
    writeStringTextNode(node, text);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const EXTENDEDDATA_NODE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'Data': makeChildAppender(writeDataNode),
    'value': makeChildAppender(writeDataNodeValue),
    'displayName': makeChildAppender(writeDataNodeName),
  });

  /**
   * @param {Element} node Node.
   * @param {{name: *, value: *}} pair Name value pair.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeDataNode(node, pair, objectStack) {
    node.setAttribute('name', pair.name);
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const value = pair.value;

    if (typeof value == 'object') {
      if (value !== null && value.displayName) {
        pushSerializeAndPop(
          context,
          EXTENDEDDATA_NODE_SERIALIZERS,
          OBJECT_PROPERTY_NODE_FACTORY,
          [value.displayName],
          objectStack,
          ['displayName'],
        );
      }

      if (value !== null && value.value) {
        pushSerializeAndPop(
          context,
          EXTENDEDDATA_NODE_SERIALIZERS,
          OBJECT_PROPERTY_NODE_FACTORY,
          [value.value],
          objectStack,
          ['value'],
        );
      }
    } else {
      pushSerializeAndPop(
        context,
        EXTENDEDDATA_NODE_SERIALIZERS,
        OBJECT_PROPERTY_NODE_FACTORY,
        [value],
        objectStack,
        ['value'],
      );
    }
  }

  /**
   * @param {Node} node Node to append a TextNode with the name to.
   * @param {string} name DisplayName.
   */
  function writeDataNodeName(node, name) {
    writeStringTextNode(node, name);
  }

  /**
   * @param {Node} node Node to append a CDATA Section with the value to.
   * @param {string} value Value.
   */
  function writeDataNodeValue(node, value) {
    writeStringTextNode(node, value);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const DOCUMENT_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'Placemark': makeChildAppender(writePlacemark),
  });

  /**
   * @const
   * @param {*} value Value.
   * @param {Array<*>} objectStack Object stack.
   * @param {string} [nodeName] Node name.
   * @return {Node|undefined} Node.
   */
  const DOCUMENT_NODE_FACTORY = function (value, objectStack, nodeName) {
    const parentNode = objectStack[objectStack.length - 1].node;
    return createElementNS(parentNode.namespaceURI, 'Placemark');
  };

  /**
   * @param {Element} node Node.
   * @param {Array<Feature>} features Features.
   * @param {Array<*>} objectStack Object stack.
   * @this {KML}
   */
  function writeDocument(node, features, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    pushSerializeAndPop(
      context,
      DOCUMENT_SERIALIZERS,
      DOCUMENT_NODE_FACTORY,
      features,
      objectStack,
      undefined,
      this,
    );
  }

  /**
   * A factory for creating Data nodes.
   * @const
   * @type {function(*, Array<*>): (Node|undefined)}
   */
  const DATA_NODE_FACTORY = makeSimpleNodeFactory('Data');

  /**
   * @param {Element} node Node.
   * @param {{names: Array<string>, values: (Array<*>)}} namesAndValues Names and values.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeExtendedData(node, namesAndValues, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const names = namesAndValues.names;
    const values = namesAndValues.values;
    const length = names.length;

    for (let i = 0; i < length; i++) {
      pushSerializeAndPop(
        context,
        EXTENDEDDATA_NODE_SERIALIZERS,
        DATA_NODE_FACTORY,
        [{name: names[i], value: values[i]}],
        objectStack,
      );
    }
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const ICON_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS$3,
    ['href'],
    makeStructureNS(GX_NAMESPACE_URIS, ['x', 'y', 'w', 'h']),
  );

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const ICON_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$3,
    {
      'href': makeChildAppender(writeStringTextNode),
    },
    makeStructureNS(GX_NAMESPACE_URIS, {
      'x': makeChildAppender(writeDecimalTextNode),
      'y': makeChildAppender(writeDecimalTextNode),
      'w': makeChildAppender(writeDecimalTextNode),
      'h': makeChildAppender(writeDecimalTextNode),
    }),
  );

  /**
   * @const
   * @param {*} value Value.
   * @param {Array<*>} objectStack Object stack.
   * @param {string} [nodeName] Node name.
   * @return {Node|undefined} Node.
   */
  const GX_NODE_FACTORY = function (value, objectStack, nodeName) {
    return createElementNS(GX_NAMESPACE_URIS[0], 'gx:' + nodeName);
  };

  /**
   * @param {Element} node Node.
   * @param {Object} icon Icon object.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeIcon(node, icon, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const parentNode = objectStack[objectStack.length - 1].node;
    let orderedKeys = ICON_SEQUENCE[parentNode.namespaceURI];
    let values = makeSequence(icon, orderedKeys);
    pushSerializeAndPop(
      context,
      ICON_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );
    orderedKeys = ICON_SEQUENCE[GX_NAMESPACE_URIS[0]];
    values = makeSequence(icon, orderedKeys);
    pushSerializeAndPop(
      context,
      ICON_SERIALIZERS,
      GX_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const ICON_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS$3, [
    'scale',
    'heading',
    'Icon',
    'color',
    'hotSpot',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const ICON_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'Icon': makeChildAppender(writeIcon),
    'color': makeChildAppender(writeColorTextNode),
    'heading': makeChildAppender(writeDecimalTextNode),
    'hotSpot': makeChildAppender(writeVec2),
    'scale': makeChildAppender(writeScaleTextNode),
  });

  /**
   * @param {Element} node Node.
   * @param {import("../style/Icon.js").default} style Icon style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeIconStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const /** @type {Object<string, any>} */ properties = {};
    const src = style.getSrc();
    const size = style.getSize();
    const iconImageSize = style.getImageSize();
    const iconProperties = {
      'href': src,
    };

    if (size) {
      iconProperties['w'] = size[0];
      iconProperties['h'] = size[1];
      const anchor = style.getAnchor(); // top-left
      const origin = style.getOrigin(); // top-left

      if (origin && iconImageSize && origin[0] !== 0 && origin[1] !== size[1]) {
        iconProperties['x'] = origin[0];
        iconProperties['y'] = iconImageSize[1] - (origin[1] + size[1]);
      }

      if (anchor && (anchor[0] !== size[0] / 2 || anchor[1] !== size[1] / 2)) {
        const /** @type {Vec2} */ hotSpot = {
            x: anchor[0],
            xunits: 'pixels',
            y: size[1] - anchor[1],
            yunits: 'pixels',
          };
        properties['hotSpot'] = hotSpot;
      }
    }

    properties['Icon'] = iconProperties;

    let scale = style.getScaleArray()[0];
    let imageSize = size;
    if (imageSize === null) {
      imageSize = DEFAULT_IMAGE_STYLE_SIZE;
    }
    if (imageSize.length == 2) {
      const resizeScale = scaleForSize(imageSize);
      scale = scale / resizeScale;
    }
    if (scale !== 1) {
      properties['scale'] = scale;
    }

    const rotation = style.getRotation();
    if (rotation !== 0) {
      properties['heading'] = rotation; // 0-360
    }

    const color = style.getColor();
    if (color) {
      properties['color'] = color;
    }

    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = ICON_STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      ICON_STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const LABEL_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS$3, [
    'color',
    'scale',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const LABEL_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'color': makeChildAppender(writeColorTextNode),
    'scale': makeChildAppender(writeScaleTextNode),
  });

  /**
   * @param {Element} node Node.
   * @param {Text} style style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeLabelStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const properties = {};
    const fill = style.getFill();
    if (fill) {
      properties['color'] = fill.getColor();
    }
    const scale = style.getScale();
    if (scale && scale !== 1) {
      properties['scale'] = scale;
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = LABEL_STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      LABEL_STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const LINE_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS$3, ['color', 'width']);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const LINE_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'color': makeChildAppender(writeColorTextNode),
    'width': makeChildAppender(writeDecimalTextNode),
  });

  /**
   * @param {Element} node Node.
   * @param {Stroke} style style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeLineStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const properties = {
      'color': style.getColor(),
      'width': Number(style.getWidth()) || 1,
    };
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = LINE_STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      LINE_STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );
  }

  /**
   * @const
   * @type {Object<string, string>}
   */
  const GEOMETRY_TYPE_TO_NODENAME = {
    'Point': 'Point',
    'LineString': 'LineString',
    'LinearRing': 'LinearRing',
    'Polygon': 'Polygon',
    'MultiPoint': 'MultiGeometry',
    'MultiLineString': 'MultiGeometry',
    'MultiPolygon': 'MultiGeometry',
    'GeometryCollection': 'MultiGeometry',
  };

  /**
   * @const
   * @param {*} value Value.
   * @param {Array<*>} objectStack Object stack.
   * @param {string} [nodeName] Node name.
   * @return {Node|undefined} Node.
   */
  const GEOMETRY_NODE_FACTORY = function (value, objectStack, nodeName) {
    if (value) {
      const parentNode = objectStack[objectStack.length - 1].node;
      return createElementNS(
        parentNode.namespaceURI,
        GEOMETRY_TYPE_TO_NODENAME[
          /** @type {import("../geom/Geometry.js").default} */ (value).getType()
        ],
      );
    }
  };

  /**
   * A factory for creating Point nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const POINT_NODE_FACTORY = makeSimpleNodeFactory('Point');

  /**
   * A factory for creating LineString nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const LINE_STRING_NODE_FACTORY = makeSimpleNodeFactory('LineString');

  /**
   * A factory for creating LinearRing nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const LINEAR_RING_NODE_FACTORY = makeSimpleNodeFactory('LinearRing');

  /**
   * A factory for creating Polygon nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const POLYGON_NODE_FACTORY = makeSimpleNodeFactory('Polygon');

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const MULTI_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'LineString': makeChildAppender(writePrimitiveGeometry),
    'Point': makeChildAppender(writePrimitiveGeometry),
    'Polygon': makeChildAppender(writePolygon),
    'GeometryCollection': makeChildAppender(writeMultiGeometry),
  });

  /**
   * @param {Element} node Node.
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeMultiGeometry(node, geometry, objectStack) {
    /** @type {import("../xml.js").NodeStackItem} */
    const context = {node: node};
    const type = geometry.getType();
    /** @type {Array<import("../geom/Geometry.js").default>} */
    let geometries = [];
    /** @type {function(*, Array<*>, string=): (Node|undefined)} */
    let factory;
    if (type === 'GeometryCollection') {
      /** @type {GeometryCollection} */ (geometry)
        .getGeometriesArrayRecursive()
        .forEach(function (geometry) {
          const type = geometry.getType();
          if (type === 'MultiPoint') {
            geometries = geometries.concat(
              /** @type {MultiPoint} */ (geometry).getPoints(),
            );
          } else if (type === 'MultiLineString') {
            geometries = geometries.concat(
              /** @type {MultiLineString} */ (geometry).getLineStrings(),
            );
          } else if (type === 'MultiPolygon') {
            geometries = geometries.concat(
              /** @type {MultiPolygon} */ (geometry).getPolygons(),
            );
          } else if (
            type === 'Point' ||
            type === 'LineString' ||
            type === 'Polygon'
          ) {
            geometries.push(geometry);
          } else {
            throw new Error('Unknown geometry type');
          }
        });
      factory = GEOMETRY_NODE_FACTORY;
    } else if (type === 'MultiPoint') {
      geometries = /** @type {MultiPoint} */ (geometry).getPoints();
      factory = POINT_NODE_FACTORY;
    } else if (type === 'MultiLineString') {
      geometries = /** @type {MultiLineString} */ (geometry).getLineStrings();
      factory = LINE_STRING_NODE_FACTORY;
    } else if (type === 'MultiPolygon') {
      geometries = /** @type {MultiPolygon} */ (geometry).getPolygons();
      factory = POLYGON_NODE_FACTORY;
    } else {
      throw new Error('Unknown geometry type');
    }
    pushSerializeAndPop(
      context,
      MULTI_GEOMETRY_SERIALIZERS,
      factory,
      geometries,
      objectStack,
    );
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const BOUNDARY_IS_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'LinearRing': makeChildAppender(writePrimitiveGeometry),
  });

  /**
   * @param {Element} node Node.
   * @param {import("../geom/LinearRing.js").default} linearRing Linear ring.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeBoundaryIs(node, linearRing, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    pushSerializeAndPop(
      context,
      BOUNDARY_IS_SERIALIZERS,
      LINEAR_RING_NODE_FACTORY,
      [linearRing],
      objectStack,
    );
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const PLACEMARK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'ExtendedData': makeChildAppender(writeExtendedData),
    'MultiGeometry': makeChildAppender(writeMultiGeometry),
    'LineString': makeChildAppender(writePrimitiveGeometry),
    'LinearRing': makeChildAppender(writePrimitiveGeometry),
    'Point': makeChildAppender(writePrimitiveGeometry),
    'Polygon': makeChildAppender(writePolygon),
    'Style': makeChildAppender(writeStyle),
    'address': makeChildAppender(writeStringTextNode),
    'description': makeChildAppender(writeStringTextNode),
    'name': makeChildAppender(writeStringTextNode),
    'open': makeChildAppender(writeBooleanTextNode),
    'phoneNumber': makeChildAppender(writeStringTextNode),
    'styleUrl': makeChildAppender(writeStringTextNode),
    'visibility': makeChildAppender(writeBooleanTextNode),
  });

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const PLACEMARK_SEQUENCE = makeStructureNS(NAMESPACE_URIS$3, [
    'name',
    'open',
    'visibility',
    'address',
    'phoneNumber',
    'description',
    'styleUrl',
    'Style',
  ]);

  /**
   * A factory for creating ExtendedData nodes.
   * @const
   * @type {function(*, Array<*>): (Node|undefined)}
   */
  const EXTENDEDDATA_NODE_FACTORY = makeSimpleNodeFactory('ExtendedData');

  /**
   * FIXME currently we do serialize arbitrary/custom feature properties
   * (ExtendedData).
   * @param {Element} node Node.
   * @param {Feature} feature Feature.
   * @param {Array<*>} objectStack Object stack.
   * @this {KML}
   */
  function writePlacemark(node, feature, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};

    // set id
    if (feature.getId()) {
      node.setAttribute('id', /** @type {string} */ (feature.getId()));
    }

    // serialize properties (properties unknown to KML are not serialized)
    const properties = feature.getProperties();

    // don't export these to ExtendedData
    const filter = {
      'address': 1,
      'description': 1,
      'name': 1,
      'open': 1,
      'phoneNumber': 1,
      'styleUrl': 1,
      'visibility': 1,
    };
    filter[feature.getGeometryName()] = 1;
    const keys = Object.keys(properties || {})
      .sort()
      .filter(function (v) {
        return !filter[v];
      });

    const styleFunction = feature.getStyleFunction();
    if (styleFunction) {
      // FIXME the styles returned by the style function are supposed to be
      // resolution-independent here
      const styles = styleFunction(feature, 0);
      if (styles) {
        const styleArray = Array.isArray(styles) ? styles : [styles];
        let pointStyles = styleArray;
        if (feature.getGeometry()) {
          pointStyles = styleArray.filter(function (style) {
            const geometry = style.getGeometryFunction()(feature);
            if (geometry) {
              const type = geometry.getType();
              if (type === 'GeometryCollection') {
                return /** @type {GeometryCollection} */ (geometry)
                  .getGeometriesArrayRecursive()
                  .filter(function (geometry) {
                    const type = geometry.getType();
                    return type === 'Point' || type === 'MultiPoint';
                  }).length;
              }
              return type === 'Point' || type === 'MultiPoint';
            }
          });
        }
        if (this.writeStyles_) {
          let lineStyles = styleArray;
          let polyStyles = styleArray;
          if (feature.getGeometry()) {
            lineStyles = styleArray.filter(function (style) {
              const geometry = style.getGeometryFunction()(feature);
              if (geometry) {
                const type = geometry.getType();
                if (type === 'GeometryCollection') {
                  return /** @type {GeometryCollection} */ (geometry)
                    .getGeometriesArrayRecursive()
                    .filter(function (geometry) {
                      const type = geometry.getType();
                      return type === 'LineString' || type === 'MultiLineString';
                    }).length;
                }
                return type === 'LineString' || type === 'MultiLineString';
              }
            });
            polyStyles = styleArray.filter(function (style) {
              const geometry = style.getGeometryFunction()(feature);
              if (geometry) {
                const type = geometry.getType();
                if (type === 'GeometryCollection') {
                  return /** @type {GeometryCollection} */ (geometry)
                    .getGeometriesArrayRecursive()
                    .filter(function (geometry) {
                      const type = geometry.getType();
                      return type === 'Polygon' || type === 'MultiPolygon';
                    }).length;
                }
                return type === 'Polygon' || type === 'MultiPolygon';
              }
            });
          }
          properties['Style'] = {
            pointStyles: pointStyles,
            lineStyles: lineStyles,
            polyStyles: polyStyles,
          };
        }
        if (pointStyles.length && properties['name'] === undefined) {
          const textStyle = pointStyles[0].getText();
          if (textStyle) {
            properties['name'] = textStyle.getText();
          }
        }
      }
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = PLACEMARK_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      PLACEMARK_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );

    if (keys.length > 0) {
      const sequence = makeSequence(properties, keys);
      const namesAndValues = {names: keys, values: sequence};
      pushSerializeAndPop(
        context,
        PLACEMARK_SERIALIZERS,
        EXTENDEDDATA_NODE_FACTORY,
        [namesAndValues],
        objectStack,
      );
    }

    // serialize geometry
    const options = /** @type {import("./Feature.js").WriteOptions} */ (
      objectStack[0]
    );
    let geometry = feature.getGeometry();
    if (geometry) {
      geometry = transformGeometryWithOptions(geometry, true, options);
    }
    pushSerializeAndPop(
      context,
      PLACEMARK_SERIALIZERS,
      GEOMETRY_NODE_FACTORY,
      [geometry],
      objectStack,
    );
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const PRIMITIVE_GEOMETRY_SEQUENCE = makeStructureNS(NAMESPACE_URIS$3, [
    'extrude',
    'tessellate',
    'altitudeMode',
    'coordinates',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const PRIMITIVE_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'extrude': makeChildAppender(writeBooleanTextNode),
    'tessellate': makeChildAppender(writeBooleanTextNode),
    'altitudeMode': makeChildAppender(writeStringTextNode),
    'coordinates': makeChildAppender(writeCoordinatesTextNode),
  });

  /**
   * @param {Element} node Node.
   * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @param {Array<*>} objectStack Object stack.
   */
  function writePrimitiveGeometry(node, geometry, objectStack) {
    const flatCoordinates = geometry.getFlatCoordinates();
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    context['layout'] = geometry.getLayout();
    context['stride'] = geometry.getStride();

    // serialize properties (properties unknown to KML are not serialized)
    const properties = geometry.getProperties();
    properties.coordinates = flatCoordinates;

    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = PRIMITIVE_GEOMETRY_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      PRIMITIVE_GEOMETRY_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const POLY_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS$3, [
    'color',
    'fill',
    'outline',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const POLYGON_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'outerBoundaryIs': makeChildAppender(writeBoundaryIs),
    'innerBoundaryIs': makeChildAppender(writeBoundaryIs),
  });

  /**
   * A factory for creating innerBoundaryIs nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const INNER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('innerBoundaryIs');

  /**
   * A factory for creating outerBoundaryIs nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const OUTER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('outerBoundaryIs');

  /**
   * @param {Element} node Node.
   * @param {Polygon} polygon Polygon.
   * @param {Array<*>} objectStack Object stack.
   */
  function writePolygon(node, polygon, objectStack) {
    const linearRings = polygon.getLinearRings();
    const outerRing = linearRings.shift();
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    // inner rings
    pushSerializeAndPop(
      context,
      POLYGON_SERIALIZERS,
      INNER_BOUNDARY_NODE_FACTORY,
      linearRings,
      objectStack,
    );
    // outer ring
    pushSerializeAndPop(
      context,
      POLYGON_SERIALIZERS,
      OUTER_BOUNDARY_NODE_FACTORY,
      [outerRing],
      objectStack,
    );
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const POLY_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'color': makeChildAppender(writeColorTextNode),
    'fill': makeChildAppender(writeBooleanTextNode),
    'outline': makeChildAppender(writeBooleanTextNode),
  });

  /**
   * @param {Element} node Node.
   * @param {Style} style Style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writePolyStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const fill = style.getFill();
    const stroke = style.getStroke();
    const properties = {
      'color': fill ? fill.getColor() : undefined,
      'fill': fill ? undefined : false,
      'outline': stroke ? undefined : false,
    };
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = POLY_STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      POLY_STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );
  }

  /**
   * @param {Node} node Node to append a TextNode with the scale to.
   * @param {number|undefined} scale Scale.
   */
  function writeScaleTextNode(node, scale) {
    // the Math is to remove any excess decimals created by float arithmetic
    writeDecimalTextNode(node, Math.round(scale * 1e6) / 1e6);
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS$3, [
    'IconStyle',
    'LabelStyle',
    'LineStyle',
    'PolyStyle',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS$3, {
    'IconStyle': makeChildAppender(writeIconStyle),
    'LabelStyle': makeChildAppender(writeLabelStyle),
    'LineStyle': makeChildAppender(writeLineStyle),
    'PolyStyle': makeChildAppender(writePolyStyle),
  });

  /**
   * @param {Element} node Node.
   * @param {Object<string, Array<Style>>} styles Styles.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeStyle(node, styles, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const properties = {};
    if (styles.pointStyles.length) {
      const textStyle = styles.pointStyles[0].getText();
      if (textStyle) {
        properties['LabelStyle'] = textStyle;
      }
      const imageStyle = styles.pointStyles[0].getImage();
      if (
        imageStyle &&
        typeof (/** @type {?} */ (imageStyle).getSrc) === 'function'
      ) {
        properties['IconStyle'] = imageStyle;
      }
    }
    if (styles.lineStyles.length) {
      const strokeStyle = styles.lineStyles[0].getStroke();
      if (strokeStyle) {
        properties['LineStyle'] = strokeStyle;
      }
    }
    if (styles.polyStyles.length) {
      const strokeStyle = styles.polyStyles[0].getStroke();
      if (strokeStyle && !properties['LineStyle']) {
        properties['LineStyle'] = strokeStyle;
      }
      properties['PolyStyle'] = styles.polyStyles[0];
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys,
    );
  }

  /**
   * @param {Element} node Node to append a TextNode with the Vec2 to.
   * @param {Vec2} vec2 Vec2.
   */
  function writeVec2(node, vec2) {
    node.setAttribute('x', String(vec2.x));
    node.setAttribute('y', String(vec2.y));
    node.setAttribute('xunits', vec2.xunits);
    node.setAttribute('yunits', vec2.yunits);
  }

  const SHIFT_LEFT_32 = (1 << 16) * (1 << 16);
  const SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

  // Threshold chosen based on both benchmarking and knowledge about browser string
  // data structures (which currently switch structure types at 12 bytes or more)
  const TEXT_DECODER_MIN_LENGTH = 12;
  const utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8');

  const PBF_VARINT  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
  const PBF_FIXED64 = 1; // 64-bit: double, fixed64, sfixed64
  const PBF_BYTES   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
  const PBF_FIXED32 = 5; // 32-bit: float, fixed32, sfixed32

  class Pbf {
      /**
       * @param {Uint8Array | ArrayBuffer} [buf]
       */
      constructor(buf = new Uint8Array(16)) {
          this.buf = ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf);
          this.dataView = new DataView(this.buf.buffer);
          this.pos = 0;
          this.type = 0;
          this.length = this.buf.length;
      }

      // === READING =================================================================

      /**
       * @template T
       * @param {(tag: number, result: T, pbf: Pbf) => void} readField
       * @param {T} result
       * @param {number} [end]
       */
      readFields(readField, result, end = this.length) {
          while (this.pos < end) {
              const val = this.readVarint(),
                  tag = val >> 3,
                  startPos = this.pos;

              this.type = val & 0x7;
              readField(tag, result, this);

              if (this.pos === startPos) this.skip(val);
          }
          return result;
      }

      /**
       * @template T
       * @param {(tag: number, result: T, pbf: Pbf) => void} readField
       * @param {T} result
       */
      readMessage(readField, result) {
          return this.readFields(readField, result, this.readVarint() + this.pos);
      }

      readFixed32() {
          const val = this.dataView.getUint32(this.pos, true);
          this.pos += 4;
          return val;
      }

      readSFixed32() {
          const val = this.dataView.getInt32(this.pos, true);
          this.pos += 4;
          return val;
      }

      // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)

      readFixed64() {
          const val = this.dataView.getUint32(this.pos, true) + this.dataView.getUint32(this.pos + 4, true) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      }

      readSFixed64() {
          const val = this.dataView.getUint32(this.pos, true) + this.dataView.getInt32(this.pos + 4, true) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      }

      readFloat() {
          const val = this.dataView.getFloat32(this.pos, true);
          this.pos += 4;
          return val;
      }

      readDouble() {
          const val = this.dataView.getFloat64(this.pos, true);
          this.pos += 8;
          return val;
      }

      /**
       * @param {boolean} [isSigned]
       */
      readVarint(isSigned) {
          const buf = this.buf;
          let val, b;

          b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;
          b = buf[this.pos];   val |= (b & 0x0f) << 28;

          return readVarintRemainder(val, isSigned, this);
      }

      readVarint64() { // for compatibility with v2.0.1
          return this.readVarint(true);
      }

      readSVarint() {
          const num = this.readVarint();
          return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
      }

      readBoolean() {
          return Boolean(this.readVarint());
      }

      readString() {
          const end = this.readVarint() + this.pos;
          const pos = this.pos;
          this.pos = end;

          if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
              // longer strings are fast with the built-in browser TextDecoder API
              return utf8TextDecoder.decode(this.buf.subarray(pos, end));
          }
          // short strings are fast with our custom implementation
          return readUtf8(this.buf, pos, end);
      }

      readBytes() {
          const end = this.readVarint() + this.pos,
              buffer = this.buf.subarray(this.pos, end);
          this.pos = end;
          return buffer;
      }

      // verbose for performance reasons; doesn't affect gzipped size

      /**
       * @param {number[]} [arr]
       * @param {boolean} [isSigned]
       */
      readPackedVarint(arr = [], isSigned) {
          const end = this.readPackedEnd();
          while (this.pos < end) arr.push(this.readVarint(isSigned));
          return arr;
      }
      /** @param {number[]} [arr] */
      readPackedSVarint(arr = []) {
          const end = this.readPackedEnd();
          while (this.pos < end) arr.push(this.readSVarint());
          return arr;
      }
      /** @param {boolean[]} [arr] */
      readPackedBoolean(arr = []) {
          const end = this.readPackedEnd();
          while (this.pos < end) arr.push(this.readBoolean());
          return arr;
      }
      /** @param {number[]} [arr] */
      readPackedFloat(arr = []) {
          const end = this.readPackedEnd();
          while (this.pos < end) arr.push(this.readFloat());
          return arr;
      }
      /** @param {number[]} [arr] */
      readPackedDouble(arr = []) {
          const end = this.readPackedEnd();
          while (this.pos < end) arr.push(this.readDouble());
          return arr;
      }
      /** @param {number[]} [arr] */
      readPackedFixed32(arr = []) {
          const end = this.readPackedEnd();
          while (this.pos < end) arr.push(this.readFixed32());
          return arr;
      }
      /** @param {number[]} [arr] */
      readPackedSFixed32(arr = []) {
          const end = this.readPackedEnd();
          while (this.pos < end) arr.push(this.readSFixed32());
          return arr;
      }
      /** @param {number[]} [arr] */
      readPackedFixed64(arr = []) {
          const end = this.readPackedEnd();
          while (this.pos < end) arr.push(this.readFixed64());
          return arr;
      }
      /** @param {number[]} [arr] */
      readPackedSFixed64(arr = []) {
          const end = this.readPackedEnd();
          while (this.pos < end) arr.push(this.readSFixed64());
          return arr;
      }
      readPackedEnd() {
          return this.type === PBF_BYTES ? this.readVarint() + this.pos : this.pos + 1;
      }

      /** @param {number} val */
      skip(val) {
          const type = val & 0x7;
          if (type === PBF_VARINT) while (this.buf[this.pos++] > 0x7f) {}
          else if (type === PBF_BYTES) this.pos = this.readVarint() + this.pos;
          else if (type === PBF_FIXED32) this.pos += 4;
          else if (type === PBF_FIXED64) this.pos += 8;
          else throw new Error(`Unimplemented type: ${type}`);
      }

      // === WRITING =================================================================

      /**
       * @param {number} tag
       * @param {number} type
       */
      writeTag(tag, type) {
          this.writeVarint((tag << 3) | type);
      }

      /** @param {number} min */
      realloc(min) {
          let length = this.length || 16;

          while (length < this.pos + min) length *= 2;

          if (length !== this.length) {
              const buf = new Uint8Array(length);
              buf.set(this.buf);
              this.buf = buf;
              this.dataView = new DataView(buf.buffer);
              this.length = length;
          }
      }

      finish() {
          this.length = this.pos;
          this.pos = 0;
          return this.buf.subarray(0, this.length);
      }

      /** @param {number} val */
      writeFixed32(val) {
          this.realloc(4);
          this.dataView.setInt32(this.pos, val, true);
          this.pos += 4;
      }

      /** @param {number} val */
      writeSFixed32(val) {
          this.realloc(4);
          this.dataView.setInt32(this.pos, val, true);
          this.pos += 4;
      }

      /** @param {number} val */
      writeFixed64(val) {
          this.realloc(8);
          this.dataView.setInt32(this.pos, val & -1, true);
          this.dataView.setInt32(this.pos + 4, Math.floor(val * SHIFT_RIGHT_32), true);
          this.pos += 8;
      }

      /** @param {number} val */
      writeSFixed64(val) {
          this.realloc(8);
          this.dataView.setInt32(this.pos, val & -1, true);
          this.dataView.setInt32(this.pos + 4, Math.floor(val * SHIFT_RIGHT_32), true);
          this.pos += 8;
      }

      /** @param {number} val */
      writeVarint(val) {
          val = +val || 0;

          if (val > 0xfffffff || val < 0) {
              writeBigVarint(val, this);
              return;
          }

          this.realloc(4);

          this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] =   (val >>> 7) & 0x7f;
      }

      /** @param {number} val */
      writeSVarint(val) {
          this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
      }

      /** @param {boolean} val */
      writeBoolean(val) {
          this.writeVarint(+val);
      }

      /** @param {string} str */
      writeString(str) {
          str = String(str);
          this.realloc(str.length * 4);

          this.pos++; // reserve 1 byte for short string length

          const startPos = this.pos;
          // write the string directly to the buffer and see how much was written
          this.pos = writeUtf8(this.buf, str, this.pos);
          const len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      }

      /** @param {number} val */
      writeFloat(val) {
          this.realloc(4);
          this.dataView.setFloat32(this.pos, val, true);
          this.pos += 4;
      }

      /** @param {number} val */
      writeDouble(val) {
          this.realloc(8);
          this.dataView.setFloat64(this.pos, val, true);
          this.pos += 8;
      }

      /** @param {Uint8Array} buffer */
      writeBytes(buffer) {
          const len = buffer.length;
          this.writeVarint(len);
          this.realloc(len);
          for (let i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
      }

      /**
       * @template T
       * @param {(obj: T, pbf: Pbf) => void} fn
       * @param {T} obj
       */
      writeRawMessage(fn, obj) {
          this.pos++; // reserve 1 byte for short message length

          // write the message directly to the buffer and see how much was written
          const startPos = this.pos;
          fn(obj, this);
          const len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      }

      /**
       * @template T
       * @param {number} tag
       * @param {(obj: T, pbf: Pbf) => void} fn
       * @param {T} obj
       */
      writeMessage(tag, fn, obj) {
          this.writeTag(tag, PBF_BYTES);
          this.writeRawMessage(fn, obj);
      }

      /**
       * @param {number} tag
       * @param {number[]} arr
       */
      writePackedVarint(tag, arr) {
          if (arr.length) this.writeMessage(tag, writePackedVarint, arr);
      }
      /**
       * @param {number} tag
       * @param {number[]} arr
       */
      writePackedSVarint(tag, arr) {
          if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);
      }
      /**
       * @param {number} tag
       * @param {boolean[]} arr
       */
      writePackedBoolean(tag, arr) {
          if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);
      }
      /**
       * @param {number} tag
       * @param {number[]} arr
       */
      writePackedFloat(tag, arr) {
          if (arr.length) this.writeMessage(tag, writePackedFloat, arr);
      }
      /**
       * @param {number} tag
       * @param {number[]} arr
       */
      writePackedDouble(tag, arr) {
          if (arr.length) this.writeMessage(tag, writePackedDouble, arr);
      }
      /**
       * @param {number} tag
       * @param {number[]} arr
       */
      writePackedFixed32(tag, arr) {
          if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);
      }
      /**
       * @param {number} tag
       * @param {number[]} arr
       */
      writePackedSFixed32(tag, arr) {
          if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr);
      }
      /**
       * @param {number} tag
       * @param {number[]} arr
       */
      writePackedFixed64(tag, arr) {
          if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);
      }
      /**
       * @param {number} tag
       * @param {number[]} arr
       */
      writePackedSFixed64(tag, arr) {
          if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr);
      }

      /**
       * @param {number} tag
       * @param {Uint8Array} buffer
       */
      writeBytesField(tag, buffer) {
          this.writeTag(tag, PBF_BYTES);
          this.writeBytes(buffer);
      }
      /**
       * @param {number} tag
       * @param {number} val
       */
      writeFixed32Field(tag, val) {
          this.writeTag(tag, PBF_FIXED32);
          this.writeFixed32(val);
      }
      /**
       * @param {number} tag
       * @param {number} val
       */
      writeSFixed32Field(tag, val) {
          this.writeTag(tag, PBF_FIXED32);
          this.writeSFixed32(val);
      }
      /**
       * @param {number} tag
       * @param {number} val
       */
      writeFixed64Field(tag, val) {
          this.writeTag(tag, PBF_FIXED64);
          this.writeFixed64(val);
      }
      /**
       * @param {number} tag
       * @param {number} val
       */
      writeSFixed64Field(tag, val) {
          this.writeTag(tag, PBF_FIXED64);
          this.writeSFixed64(val);
      }
      /**
       * @param {number} tag
       * @param {number} val
       */
      writeVarintField(tag, val) {
          this.writeTag(tag, PBF_VARINT);
          this.writeVarint(val);
      }
      /**
       * @param {number} tag
       * @param {number} val
       */
      writeSVarintField(tag, val) {
          this.writeTag(tag, PBF_VARINT);
          this.writeSVarint(val);
      }
      /**
       * @param {number} tag
       * @param {string} str
       */
      writeStringField(tag, str) {
          this.writeTag(tag, PBF_BYTES);
          this.writeString(str);
      }
      /**
       * @param {number} tag
       * @param {number} val
       */
      writeFloatField(tag, val) {
          this.writeTag(tag, PBF_FIXED32);
          this.writeFloat(val);
      }
      /**
       * @param {number} tag
       * @param {number} val
       */
      writeDoubleField(tag, val) {
          this.writeTag(tag, PBF_FIXED64);
          this.writeDouble(val);
      }
      /**
       * @param {number} tag
       * @param {boolean} val
       */
      writeBooleanField(tag, val) {
          this.writeVarintField(tag, +val);
      }
  }
  /**
   * @param {number} l
   * @param {boolean | undefined} s
   * @param {Pbf} p
   */
  function readVarintRemainder(l, s, p) {
      const buf = p.buf;
      let h, b;

      b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);

      throw new Error('Expected varint not more than 10 bytes');
  }

  /**
   * @param {number} low
   * @param {number} high
   * @param {boolean} [isSigned]
   */
  function toNum(low, high, isSigned) {
      return isSigned ? high * 0x100000000 + (low >>> 0) : ((high >>> 0) * 0x100000000) + (low >>> 0);
  }

  /**
   * @param {number} val
   * @param {Pbf} pbf
   */
  function writeBigVarint(val, pbf) {
      let low, high;

      if (val >= 0) {
          low  = (val % 0x100000000) | 0;
          high = (val / 0x100000000) | 0;
      } else {
          low  = ~(-val % 0x100000000);
          high = ~(-val / 0x100000000);

          if (low ^ 0xffffffff) {
              low = (low + 1) | 0;
          } else {
              low = 0;
              high = (high + 1) | 0;
          }
      }

      if (val >= 0x10000000000000000 || val < -18446744073709552e3) {
          throw new Error('Given varint doesn\'t fit into 10 bytes');
      }

      pbf.realloc(10);

      writeBigVarintLow(low, high, pbf);
      writeBigVarintHigh(high, pbf);
  }

  /**
   * @param {number} high
   * @param {number} low
   * @param {Pbf} pbf
   */
  function writeBigVarintLow(low, high, pbf) {
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos]   = low & 0x7f;
  }

  /**
   * @param {number} high
   * @param {Pbf} pbf
   */
  function writeBigVarintHigh(high, pbf) {
      const lsb = (high & 0x07) << 4;

      pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f;
  }

  /**
   * @param {number} startPos
   * @param {number} len
   * @param {Pbf} pbf
   */
  function makeRoomForExtraLength(startPos, len, pbf) {
      const extraLen =
          len <= 0x3fff ? 1 :
          len <= 0x1fffff ? 2 :
          len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));

      // if 1 byte isn't enough for encoding message length, shift the data to the right
      pbf.realloc(extraLen);
      for (let i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
  }

  /**
   * @param {number[]} arr
   * @param {Pbf} pbf
   */
  function writePackedVarint(arr, pbf) {
      for (let i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);
  }
  /**
   * @param {number[]} arr
   * @param {Pbf} pbf
   */
  function writePackedSVarint(arr, pbf) {
      for (let i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);
  }
  /**
   * @param {number[]} arr
   * @param {Pbf} pbf
   */
  function writePackedFloat(arr, pbf) {
      for (let i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);
  }
  /**
   * @param {number[]} arr
   * @param {Pbf} pbf
   */
  function writePackedDouble(arr, pbf) {
      for (let i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);
  }
  /**
   * @param {boolean[]} arr
   * @param {Pbf} pbf
   */
  function writePackedBoolean(arr, pbf) {
      for (let i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);
  }
  /**
   * @param {number[]} arr
   * @param {Pbf} pbf
   */
  function writePackedFixed32(arr, pbf) {
      for (let i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);
  }
  /**
   * @param {number[]} arr
   * @param {Pbf} pbf
   */
  function writePackedSFixed32(arr, pbf) {
      for (let i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]);
  }
  /**
   * @param {number[]} arr
   * @param {Pbf} pbf
   */
  function writePackedFixed64(arr, pbf) {
      for (let i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);
  }
  /**
   * @param {number[]} arr
   * @param {Pbf} pbf
   */
  function writePackedSFixed64(arr, pbf) {
      for (let i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]);
  }

  // Buffer code below from https://github.com/feross/buffer, MIT-licensed

  /**
   * @param {Uint8Array} buf
   * @param {number} pos
   * @param {number} end
   */
  function readUtf8(buf, pos, end) {
      let str = '';
      let i = pos;

      while (i < end) {
          const b0 = buf[i];
          let c = null; // codepoint
          let bytesPerSequence =
              b0 > 0xEF ? 4 :
              b0 > 0xDF ? 3 :
              b0 > 0xBF ? 2 : 1;

          if (i + bytesPerSequence > end) break;

          let b1, b2, b3;

          if (bytesPerSequence === 1) {
              if (b0 < 0x80) {
                  c = b0;
              }
          } else if (bytesPerSequence === 2) {
              b1 = buf[i + 1];
              if ((b1 & 0xC0) === 0x80) {
                  c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
                  if (c <= 0x7F) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 3) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
                  if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 4) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              b3 = buf[i + 3];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
                  if (c <= 0xFFFF || c >= 0x110000) {
                      c = null;
                  }
              }
          }

          if (c === null) {
              c = 0xFFFD;
              bytesPerSequence = 1;

          } else if (c > 0xFFFF) {
              c -= 0x10000;
              str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
              c = 0xDC00 | c & 0x3FF;
          }

          str += String.fromCharCode(c);
          i += bytesPerSequence;
      }

      return str;
  }

  /**
   * @param {Uint8Array} buf
   * @param {string} str
   * @param {number} pos
   */
  function writeUtf8(buf, str, pos) {
      for (let i = 0, c, lead; i < str.length; i++) {
          c = str.charCodeAt(i); // code point

          if (c > 0xD7FF && c < 0xE000) {
              if (lead) {
                  if (c < 0xDC00) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                      lead = c;
                      continue;
                  } else {
                      c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
                      lead = null;
                  }
              } else {
                  if (c > 0xDBFF || (i + 1 === str.length)) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                  } else {
                      lead = c;
                  }
                  continue;
              }
          } else if (lead) {
              buf[pos++] = 0xEF;
              buf[pos++] = 0xBF;
              buf[pos++] = 0xBD;
              lead = null;
          }

          if (c < 0x80) {
              buf[pos++] = c;
          } else {
              if (c < 0x800) {
                  buf[pos++] = c >> 0x6 | 0xC0;
              } else {
                  if (c < 0x10000) {
                      buf[pos++] = c >> 0xC | 0xE0;
                  } else {
                      buf[pos++] = c >> 0x12 | 0xF0;
                      buf[pos++] = c >> 0xC & 0x3F | 0x80;
                  }
                  buf[pos++] = c >> 0x6 & 0x3F | 0x80;
              }
              buf[pos++] = c & 0x3F | 0x80;
          }
      }
      return pos;
  }

  /**
   * @module ol/format/MVT
   */
  //FIXME Implement projection handling


  /**
   * @template {import("../Feature.js").FeatureLike} [FeatureType=import("../render/Feature.js").default]
   * @typedef {Object} Options
   * @property {import('./Feature.js').FeatureToFeatureClass<FeatureType>} [featureClass] Class for features returned by
   * {@link module:ol/format/MVT~MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry
   * support at the cost of decreased rendering performance. The default is
   * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.
   * @property {string} [geometryName='geometry'] Geometry name to use when creating features.
   * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.
   * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all
   * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.
   * layers.
   */

  /**
   * @classdesc
   * Feature format for reading data in the Mapbox MVT format.
   *
   * @template {import('../Feature.js').FeatureLike} [FeatureType=RenderFeature]
   * @extends {FeatureFormat<FeatureType>}
   * @api
   */
  class MVT extends FeatureFormat {
    /**
     * @param {Options<FeatureType>} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @type {Projection}
       */
      this.dataProjection = new Projection$1({
        code: '',
        units: 'tile-pixels',
      });

      this.featureClass = options.featureClass
        ? options.featureClass
        : /** @type {import('./Feature.js').FeatureToFeatureClass<FeatureType>} */ (
            RenderFeature
          );

      /**
       * @private
       * @type {string|undefined}
       */
      this.geometryName_ = options.geometryName;

      /**
       * @private
       * @type {string}
       */
      this.layerName_ = options.layerName ? options.layerName : 'layer';

      /**
       * @private
       * @type {Array<string>|null}
       */
      this.layers_ = options.layers ? options.layers : null;

      /**
       * @private
       * @type {string}
       */
      this.idProperty_ = options.idProperty;

      this.supportedMediaTypes = [
        'application/vnd.mapbox-vector-tile',
        'application/x-protobuf',
      ];
    }

    /**
     * Read the raw geometry from the pbf offset stored in a raw feature's geometry
     * property.
     * @param {PBF} pbf PBF.
     * @param {Object} feature Raw feature.
     * @param {Array<number>} flatCoordinates Array to store flat coordinates in.
     * @param {Array<number>} ends Array to store ends in.
     * @private
     */
    readRawGeometry_(pbf, feature, flatCoordinates, ends) {
      pbf.pos = feature.geometry;

      const end = pbf.readVarint() + pbf.pos;
      let cmd = 1;
      let length = 0;
      let x = 0;
      let y = 0;
      let coordsLen = 0;
      let currentEnd = 0;

      while (pbf.pos < end) {
        if (!length) {
          const cmdLen = pbf.readVarint();
          cmd = cmdLen & 0x7;
          length = cmdLen >> 3;
        }

        length--;

        if (cmd === 1 || cmd === 2) {
          x += pbf.readSVarint();
          y += pbf.readSVarint();

          if (cmd === 1) {
            // moveTo
            if (coordsLen > currentEnd) {
              ends.push(coordsLen);
              currentEnd = coordsLen;
            }
          }

          flatCoordinates.push(x, y);
          coordsLen += 2;
        } else if (cmd === 7) {
          if (coordsLen > currentEnd) {
            // close polygon
            flatCoordinates.push(
              flatCoordinates[currentEnd],
              flatCoordinates[currentEnd + 1],
            );
            coordsLen += 2;
          }
        } else {
          throw new Error('Invalid command found in the PBF');
        }
      }

      if (coordsLen > currentEnd) {
        ends.push(coordsLen);
        currentEnd = coordsLen;
      }
    }

    /**
     * @private
     * @param {PBF} pbf PBF
     * @param {Object} rawFeature Raw Mapbox feature.
     * @param {import("./Feature.js").ReadOptions} options Read options.
     * @return {FeatureType|null} Feature.
     */
    createFeature_(pbf, rawFeature, options) {
      const type = rawFeature.type;
      if (type === 0) {
        return null;
      }

      let feature;
      const values = rawFeature.properties;

      let id;
      if (!this.idProperty_) {
        id = rawFeature.id;
      } else {
        id = values[this.idProperty_];
        delete values[this.idProperty_];
      }

      values[this.layerName_] = rawFeature.layer.name;

      const flatCoordinates = /** @type {Array<number>} */ ([]);
      const ends = /** @type {Array<number>} */ ([]);
      this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);

      const geometryType = getGeometryType(type, ends.length);

      if (this.featureClass === RenderFeature) {
        feature =
          new /** @type {import('./Feature.js').FeatureToFeatureClass<RenderFeature>} */ (
            this.featureClass
          )(geometryType, flatCoordinates, ends, 2, values, id);
        feature.transform(options.dataProjection);
      } else {
        let geom;
        if (geometryType == 'Polygon') {
          const endss = inflateEnds(flatCoordinates, ends);
          geom =
            endss.length > 1
              ? new MultiPolygon(flatCoordinates, 'XY', endss)
              : new Polygon(flatCoordinates, 'XY', ends);
        } else {
          geom =
            geometryType === 'Point'
              ? new Point$1(flatCoordinates, 'XY')
              : geometryType === 'LineString'
                ? new LineString(flatCoordinates, 'XY')
                : geometryType === 'MultiPoint'
                  ? new MultiPoint(flatCoordinates, 'XY')
                  : geometryType === 'MultiLineString'
                    ? new MultiLineString(flatCoordinates, 'XY', ends)
                    : null;
        }
        const ctor = /** @type {typeof import("../Feature.js").default} */ (
          this.featureClass
        );
        feature = new ctor();
        if (this.geometryName_) {
          feature.setGeometryName(this.geometryName_);
        }
        const geometry = transformGeometryWithOptions(geom, false, options);
        feature.setGeometry(geometry);
        if (id !== undefined) {
          feature.setId(id);
        }
        feature.setProperties(values, true);
      }

      return /** @type {FeatureType} */ (feature);
    }

    /**
     * @return {import("./Feature.js").Type} Format.
     * @override
     */
    getType() {
      return 'arraybuffer';
    }

    /**
     * Read all features.
     *
     * @param {ArrayBuffer} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {Array<FeatureType>} Features.
     * @api
     * @override
     */
    readFeatures(source, options) {
      const layers = this.layers_;
      options = this.adaptOptions(options);
      const dataProjection = get$2(options.dataProjection);
      dataProjection.setWorldExtent(options.extent);
      options.dataProjection = dataProjection;

      const pbf = new Pbf(/** @type {ArrayBuffer} */ (source));
      const pbfLayers = pbf.readFields(layersPBFReader, {});
      const features = [];
      for (const name in pbfLayers) {
        if (layers && !layers.includes(name)) {
          continue;
        }
        const pbfLayer = pbfLayers[name];

        const extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;
        dataProjection.setExtent(extent);

        for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {
          const rawFeature = readRawFeature(pbf, pbfLayer, i);
          const feature = this.createFeature_(pbf, rawFeature, options);
          if (feature !== null) {
            features.push(feature);
          }
        }
      }

      return /** @type {Array<FeatureType>} */ (features);
    }

    /**
     * Read the projection from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     * @override
     */
    readProjection(source) {
      return this.dataProjection;
    }

    /**
     * Sets the layers that features will be read from.
     * @param {Array<string>} layers Layers.
     * @api
     */
    setLayers(layers) {
      this.layers_ = layers;
    }
  }

  /**
   * Reader callback for parsing layers.
   * @param {number} tag The tag.
   * @param {Object} layers The layers object.
   * @param {PBF} pbf The PBF.
   */
  function layersPBFReader(tag, layers, pbf) {
    if (tag === 3) {
      const layer = {
        keys: [],
        values: [],
        features: [],
      };
      const end = pbf.readVarint() + pbf.pos;
      pbf.readFields(layerPBFReader, layer, end);
      layer.length = layer.features.length;
      if (layer.length) {
        layers[layer.name] = layer;
      }
    }
  }

  /**
   * Reader callback for parsing layer.
   * @param {number} tag The tag.
   * @param {Object} layer The layer object.
   * @param {PBF} pbf The PBF.
   */
  function layerPBFReader(tag, layer, pbf) {
    if (tag === 15) {
      layer.version = pbf.readVarint();
    } else if (tag === 1) {
      layer.name = pbf.readString();
    } else if (tag === 5) {
      layer.extent = pbf.readVarint();
    } else if (tag === 2) {
      layer.features.push(pbf.pos);
    } else if (tag === 3) {
      layer.keys.push(pbf.readString());
    } else if (tag === 4) {
      let value = null;
      const end = pbf.readVarint() + pbf.pos;
      while (pbf.pos < end) {
        tag = pbf.readVarint() >> 3;
        value =
          tag === 1
            ? pbf.readString()
            : tag === 2
              ? pbf.readFloat()
              : tag === 3
                ? pbf.readDouble()
                : tag === 4
                  ? pbf.readVarint64()
                  : tag === 5
                    ? pbf.readVarint()
                    : tag === 6
                      ? pbf.readSVarint()
                      : tag === 7
                        ? pbf.readBoolean()
                        : null;
      }
      layer.values.push(value);
    }
  }

  /**
   * Reader callback for parsing feature.
   * @param {number} tag The tag.
   * @param {Object} feature The feature object.
   * @param {PBF} pbf The PBF.
   */
  function featurePBFReader(tag, feature, pbf) {
    if (tag == 1) {
      feature.id = pbf.readVarint();
    } else if (tag == 2) {
      const end = pbf.readVarint() + pbf.pos;
      while (pbf.pos < end) {
        const key = feature.layer.keys[pbf.readVarint()];
        const value = feature.layer.values[pbf.readVarint()];
        feature.properties[key] = value;
      }
    } else if (tag == 3) {
      feature.type = pbf.readVarint();
    } else if (tag == 4) {
      feature.geometry = pbf.pos;
    }
  }

  /**
   * Read a raw feature from the pbf offset stored at index `i` in the raw layer.
   * @param {PBF} pbf PBF.
   * @param {Object} layer Raw layer.
   * @param {number} i Index of the feature in the raw layer's `features` array.
   * @return {Object} Raw feature.
   */
  function readRawFeature(pbf, layer, i) {
    pbf.pos = layer.features[i];
    const end = pbf.readVarint() + pbf.pos;

    const feature = {
      layer: layer,
      type: 0,
      properties: {},
    };
    pbf.readFields(featurePBFReader, feature, end);
    return feature;
  }

  /**
   * @param {number} type The raw feature's geometry type
   * @param {number} numEnds Number of ends of the flat coordinates of the
   * geometry.
   * @return {import("../render/Feature.js").Type} The geometry type.
   */
  function getGeometryType(type, numEnds) {
    /** @type {import("../render/Feature.js").Type} */
    let geometryType;
    if (type === 1) {
      geometryType = numEnds === 1 ? 'Point' : 'MultiPoint';
    } else if (type === 2) {
      geometryType = numEnds === 1 ? 'LineString' : 'MultiLineString';
    } else if (type === 3) {
      geometryType = 'Polygon';
      // MultiPolygon not relevant for rendering - winding order determines
      // outer rings of polygons.
    }
    return geometryType;
  }

  /**
   * @module ol/format/XML
   */

  /**
   * @classdesc
   * Generic format for reading non-feature XML data
   *
   * @abstract
   */
  class XML {
    /**
     * Read the source document.
     *
     * @param {Document|Element|string} source The XML source.
     * @return {Object|null} An object representing the source.
     * @api
     */
    read(source) {
      if (!source) {
        return null;
      }
      if (typeof source === 'string') {
        const doc = parse$1(source);
        return this.readFromDocument(doc);
      }
      if (isDocument(source)) {
        return this.readFromDocument(/** @type {Document} */ (source));
      }
      return this.readFromNode(/** @type {Element} */ (source));
    }

    /**
     * @param {Document} doc Document.
     * @return {Object|null} Object
     */
    readFromDocument(doc) {
      for (let n = doc.firstChild; n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readFromNode(/** @type {Element} */ (n));
        }
      }
      return null;
    }

    /**
     * @abstract
     * @param {Element} node Node.
     * @return {Object|null} Object
     */
    readFromNode(node) {
      abstract();
    }
  }

  /**
   * @module ol/format/xlink
   */

  /**
   * @const
   * @type {string}
   */
  const NAMESPACE_URI = 'http://www.w3.org/1999/xlink';

  /**
   * @param {Element} node Node.
   * @return {string|null} href.
   */
  function readHref(node) {
    return node.getAttributeNS(NAMESPACE_URI, 'href');
  }

  /**
   * @module ol/format/OWS
   */

  /**
   * @const
   * @type {Array<null|string>}
   */
  const NAMESPACE_URIS$2 = [null, 'http://www.opengis.net/ows/1.1'];

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const PARSERS$2 = makeStructureNS(NAMESPACE_URIS$2, {
    'ServiceIdentification': makeObjectPropertySetter(readServiceIdentification),
    'ServiceProvider': makeObjectPropertySetter(readServiceProvider),
    'OperationsMetadata': makeObjectPropertySetter(readOperationsMetadata),
  });

  class OWS extends XML {
    constructor() {
      super();
    }

    /**
     * @param {Element} node Node.
     * @return {Object|null} Object
     * @override
     */
    readFromNode(node) {
      const owsObject = pushParseAndPop({}, PARSERS$2, node, []);
      return owsObject ? owsObject : null;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'DeliveryPoint': makeObjectPropertySetter(readString),
    'City': makeObjectPropertySetter(readString),
    'AdministrativeArea': makeObjectPropertySetter(readString),
    'PostalCode': makeObjectPropertySetter(readString),
    'Country': makeObjectPropertySetter(readString),
    'ElectronicMailAddress': makeObjectPropertySetter(readString),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const ALLOWED_VALUES_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'Value': makeObjectPropertyPusher(readValue),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const CONSTRAINT_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'AllowedValues': makeObjectPropertySetter(readAllowedValues),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const CONTACT_INFO_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'Phone': makeObjectPropertySetter(readPhone),
    'Address': makeObjectPropertySetter(readAddress),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const DCP_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'HTTP': makeObjectPropertySetter(readHttp),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const HTTP_PARSERS$1 = makeStructureNS(NAMESPACE_URIS$2, {
    'Get': makeObjectPropertyPusher(readGet),
    'Post': undefined, // TODO
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const OPERATION_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'DCP': makeObjectPropertySetter(readDcp),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const OPERATIONS_METADATA_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'Operation': readOperation,
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const PHONE_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'Voice': makeObjectPropertySetter(readString),
    'Facsimile': makeObjectPropertySetter(readString),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const REQUEST_METHOD_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'Constraint': makeObjectPropertyPusher(readConstraint),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const SERVICE_CONTACT_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'IndividualName': makeObjectPropertySetter(readString),
    'PositionName': makeObjectPropertySetter(readString),
    'ContactInfo': makeObjectPropertySetter(readContactInfo),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const SERVICE_IDENTIFICATION_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'Abstract': makeObjectPropertySetter(readString),
    'AccessConstraints': makeObjectPropertySetter(readString),
    'Fees': makeObjectPropertySetter(readString),
    'Title': makeObjectPropertySetter(readString),
    'ServiceTypeVersion': makeObjectPropertySetter(readString),
    'ServiceType': makeObjectPropertySetter(readString),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const SERVICE_PROVIDER_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
    'ProviderName': makeObjectPropertySetter(readString),
    'ProviderSite': makeObjectPropertySetter(readHref),
    'ServiceContact': makeObjectPropertySetter(readServiceContact),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The address.
   */
  function readAddress(node, objectStack) {
    return pushParseAndPop({}, ADDRESS_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The values.
   */
  function readAllowedValues(node, objectStack) {
    return pushParseAndPop({}, ALLOWED_VALUES_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The constraint.
   */
  function readConstraint(node, objectStack) {
    const name = node.getAttribute('name');
    if (!name) {
      return undefined;
    }
    return pushParseAndPop({'name': name}, CONSTRAINT_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The contact info.
   */
  function readContactInfo(node, objectStack) {
    return pushParseAndPop({}, CONTACT_INFO_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The DCP.
   */
  function readDcp(node, objectStack) {
    return pushParseAndPop({}, DCP_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The GET object.
   */
  function readGet(node, objectStack) {
    const href = readHref(node);
    if (!href) {
      return undefined;
    }
    return pushParseAndPop(
      {'href': href},
      REQUEST_METHOD_PARSERS,
      node,
      objectStack,
    );
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The HTTP object.
   */
  function readHttp(node, objectStack) {
    return pushParseAndPop({}, HTTP_PARSERS$1, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The operation.
   */
  function readOperation(node, objectStack) {
    const name = node.getAttribute('name');
    const value = pushParseAndPop({}, OPERATION_PARSERS, node, objectStack);
    if (!value) {
      return undefined;
    }
    const object = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    object[name] = value;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The operations metadata.
   */
  function readOperationsMetadata(node, objectStack) {
    return pushParseAndPop({}, OPERATIONS_METADATA_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The phone.
   */
  function readPhone(node, objectStack) {
    return pushParseAndPop({}, PHONE_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The service identification.
   */
  function readServiceIdentification(node, objectStack) {
    return pushParseAndPop({}, SERVICE_IDENTIFICATION_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The service contact.
   */
  function readServiceContact(node, objectStack) {
    return pushParseAndPop({}, SERVICE_CONTACT_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The service provider.
   */
  function readServiceProvider(node, objectStack) {
    return pushParseAndPop({}, SERVICE_PROVIDER_PARSERS, node, objectStack);
  }

  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {string|undefined} The value.
   */
  function readValue(node, objectStack) {
    return readString(node);
  }

  /**
   * @module ol/geom/flat/flip
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Array<number>} [dest] Destination.
   * @param {number} [destOffset] Destination offset.
   * @return {Array<number>} Flat coordinates.
   */
  function flipXY(flatCoordinates, offset, end, stride, dest, destOffset) {
    if (dest !== undefined) {
      dest = dest;
      destOffset = destOffset !== undefined ? destOffset : 0;
    } else {
      dest = [];
      destOffset = 0;
    }
    let j = offset;
    while (j < end) {
      const x = flatCoordinates[j++];
      dest[destOffset++] = flatCoordinates[j++];
      dest[destOffset++] = x;
      for (let k = 2; k < stride; ++k) {
        dest[destOffset++] = flatCoordinates[j++];
      }
    }
    dest.length = destOffset;
    return dest;
  }

  /**
   * @module ol/format/Polyline
   */

  /**
   * @typedef {Object} Options
   * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.
   * @property {import("../geom/Geometry.js").GeometryLayout} [geometryLayout='XY'] Layout of the
   * feature geometries created by the format reader.
   */

  /**
   * @classdesc
   * Feature format for reading and writing data in the Encoded
   * Polyline Algorithm Format.
   *
   * When reading features, the coordinates are assumed to be in two dimensions
   * and in [latitude, longitude] order.
   *
   * As Polyline sources contain a single feature,
   * {@link module:ol/format/Polyline~Polyline#readFeatures} will return the
   * feature in an array.
   *
   * @api
   */
  class Polyline extends TextFeature {
    /**
     * @param {Options} [options] Optional configuration object.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @type {import("../proj/Projection.js").default}
       */
      this.dataProjection = get$2('EPSG:4326');

      /**
       * @private
       * @type {number}
       */
      this.factor_ = options.factor ? options.factor : 1e5;

      /**
       * @private
       * @type {import("../geom/Geometry.js").GeometryLayout}
       */
      this.geometryLayout_ = options.geometryLayout
        ? options.geometryLayout
        : 'XY';
    }

    /**
     * @protected
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../Feature.js").default} Feature.
     * @override
     */
    readFeatureFromText(text, options) {
      const geometry = this.readGeometryFromText(text, options);
      return new Feature(geometry);
    }

    /**
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<Feature>} Features.
     * @override
     */
    readFeaturesFromText(text, options) {
      const feature = this.readFeatureFromText(text, options);
      return [feature];
    }

    /**
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @override
     */
    readGeometryFromText(text, options) {
      const stride = getStrideForLayout(this.geometryLayout_);
      const flatCoordinates = decodeDeltas(text, stride, this.factor_);
      flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);
      const coordinates = inflateCoordinates(
        flatCoordinates,
        0,
        flatCoordinates.length,
        stride,
      );
      const lineString = new LineString(coordinates, this.geometryLayout_);

      return transformGeometryWithOptions(
        lineString,
        false,
        this.adaptOptions(options),
      );
    }

    /**
     * @param {import("../Feature.js").default<LineString>} feature Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     * @override
     */
    writeFeatureText(feature, options) {
      const geometry = feature.getGeometry();
      if (geometry) {
        return this.writeGeometryText(geometry, options);
      }
      throw new Error('Expected `feature` to have a geometry');
    }

    /**
     * @param {Array<import("../Feature.js").default<LineString>>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     * @override
     */
    writeFeaturesText(features, options) {
      return this.writeFeatureText(features[0], options);
    }

    /**
     * @param {LineString} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     * @override
     */
    writeGeometryText(geometry, options) {
      geometry =
        /** @type {LineString} */
        (
          transformGeometryWithOptions(geometry, true, this.adaptOptions(options))
        );
      const flatCoordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);
      return encodeDeltas(flatCoordinates, stride, this.factor_);
    }
  }

  /**
   * Encode a list of n-dimensional points and return an encoded string
   *
   * Attention: This function will modify the passed array!
   *
   * @param {Array<number>} numbers A list of n-dimensional points.
   * @param {number} stride The number of dimension of the points in the list.
   * @param {number} [factor] The factor by which the numbers will be
   *     multiplied. The remaining decimal places will get rounded away.
   *     Default is `1e5`.
   * @return {string} The encoded string.
   * @api
   */
  function encodeDeltas(numbers, stride, factor) {
    factor = factor ? factor : 1e5;
    let d;

    const lastNumbers = new Array(stride);
    for (d = 0; d < stride; ++d) {
      lastNumbers[d] = 0;
    }

    for (let i = 0, ii = numbers.length; i < ii; ) {
      for (d = 0; d < stride; ++d, ++i) {
        const num = numbers[i];
        const delta = num - lastNumbers[d];
        lastNumbers[d] = num;

        numbers[i] = delta;
      }
    }

    return encodeFloats(numbers, factor);
  }

  /**
   * Decode a list of n-dimensional points from an encoded string
   *
   * @param {string} encoded An encoded string.
   * @param {number} stride The number of dimension of the points in the
   *     encoded string.
   * @param {number} [factor] The factor by which the resulting numbers will
   *     be divided. Default is `1e5`.
   * @return {Array<number>} A list of n-dimensional points.
   * @api
   */
  function decodeDeltas(encoded, stride, factor) {
    factor = factor ? factor : 1e5;
    let d;

    /** @type {Array<number>} */
    const lastNumbers = new Array(stride);
    for (d = 0; d < stride; ++d) {
      lastNumbers[d] = 0;
    }

    const numbers = decodeFloats(encoded, factor);

    for (let i = 0, ii = numbers.length; i < ii; ) {
      for (d = 0; d < stride; ++d, ++i) {
        lastNumbers[d] += numbers[i];

        numbers[i] = lastNumbers[d];
      }
    }

    return numbers;
  }

  /**
   * Encode a list of floating point numbers and return an encoded string
   *
   * Attention: This function will modify the passed array!
   *
   * @param {Array<number>} numbers A list of floating point numbers.
   * @param {number} [factor] The factor by which the numbers will be
   *     multiplied. The remaining decimal places will get rounded away.
   *     Default is `1e5`.
   * @return {string} The encoded string.
   * @api
   */
  function encodeFloats(numbers, factor) {
    factor = factor ? factor : 1e5;
    for (let i = 0, ii = numbers.length; i < ii; ++i) {
      numbers[i] = Math.round(numbers[i] * factor);
    }

    return encodeSignedIntegers(numbers);
  }

  /**
   * Decode a list of floating point numbers from an encoded string
   *
   * @param {string} encoded An encoded string.
   * @param {number} [factor] The factor by which the result will be divided.
   *     Default is `1e5`.
   * @return {Array<number>} A list of floating point numbers.
   * @api
   */
  function decodeFloats(encoded, factor) {
    factor = factor ? factor : 1e5;
    const numbers = decodeSignedIntegers(encoded);
    for (let i = 0, ii = numbers.length; i < ii; ++i) {
      numbers[i] /= factor;
    }
    return numbers;
  }

  /**
   * Encode a list of signed integers and return an encoded string
   *
   * Attention: This function will modify the passed array!
   *
   * @param {Array<number>} numbers A list of signed integers.
   * @return {string} The encoded string.
   */
  function encodeSignedIntegers(numbers) {
    for (let i = 0, ii = numbers.length; i < ii; ++i) {
      const num = numbers[i];
      numbers[i] = num < 0 ? ~(num << 1) : num << 1;
    }
    return encodeUnsignedIntegers(numbers);
  }

  /**
   * Decode a list of signed integers from an encoded string
   *
   * @param {string} encoded An encoded string.
   * @return {Array<number>} A list of signed integers.
   */
  function decodeSignedIntegers(encoded) {
    const numbers = decodeUnsignedIntegers(encoded);
    for (let i = 0, ii = numbers.length; i < ii; ++i) {
      const num = numbers[i];
      numbers[i] = num & 1 ? ~(num >> 1) : num >> 1;
    }
    return numbers;
  }

  /**
   * Encode a list of unsigned integers and return an encoded string
   *
   * @param {Array<number>} numbers A list of unsigned integers.
   * @return {string} The encoded string.
   */
  function encodeUnsignedIntegers(numbers) {
    let encoded = '';
    for (let i = 0, ii = numbers.length; i < ii; ++i) {
      encoded += encodeUnsignedInteger(numbers[i]);
    }
    return encoded;
  }

  /**
   * Decode a list of unsigned integers from an encoded string
   *
   * @param {string} encoded An encoded string.
   * @return {Array<number>} A list of unsigned integers.
   */
  function decodeUnsignedIntegers(encoded) {
    const numbers = [];
    let current = 0;
    let shift = 0;
    for (let i = 0, ii = encoded.length; i < ii; ++i) {
      const b = encoded.charCodeAt(i) - 63;
      current |= (b & 0x1f) << shift;
      if (b < 0x20) {
        numbers.push(current);
        current = 0;
        shift = 0;
      } else {
        shift += 5;
      }
    }
    return numbers;
  }

  /**
   * Encode one single unsigned integer and return an encoded string
   *
   * @param {number} num Unsigned integer that should be encoded.
   * @return {string} The encoded string.
   */
  function encodeUnsignedInteger(num) {
    let value,
      encoded = '';
    while (num >= 0x20) {
      value = (0x20 | (num & 0x1f)) + 63;
      encoded += String.fromCharCode(value);
      num >>= 5;
    }
    value = num + 63;
    encoded += String.fromCharCode(value);
    return encoded;
  }

  /**
   * @module ol/format/TopoJSON
   */

  /**
   * @typedef {import("topojson-specification").Topology} TopoJSONTopology
   * @typedef {import("topojson-specification").GeometryCollection} TopoJSONGeometryCollection
   * @typedef {import("topojson-specification").GeometryObject} TopoJSONGeometry
   * @typedef {import("topojson-specification").Point} TopoJSONPoint
   * @typedef {import("topojson-specification").MultiPoint} TopoJSONMultiPoint
   * @typedef {import("topojson-specification").LineString} TopoJSONLineString
   * @typedef {import("topojson-specification").MultiLineString} TopoJSONMultiLineString
   * @typedef {import("topojson-specification").Polygon} TopoJSONPolygon
   * @typedef {import("topojson-specification").MultiPolygon} TopoJSONMultiPolygon
   */

  /**
   * @typedef {Object} Options
   * @property {import("../proj.js").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
   * @property {string} [layerName] Set the name of the TopoJSON topology
   * `objects`'s children as feature property with the specified name. This means
   * that when set to `'layer'`, a topology like
   * ```
   * {
   *   "type": "Topology",
   *   "objects": {
   *     "example": {
   *       "type": "GeometryCollection",
   *       "geometries": []
   *     }
   *   }
   * }
   * ```
   * will result in features that have a property `'layer'` set to `'example'`.
   * When not set, no property will be added to features.
   * @property {Array<string>} [layers] Names of the TopoJSON topology's
   * `objects`'s children to read features from.  If not provided, features will
   * be read from all children.
   */

  /**
   * @classdesc
   * Feature format for reading data in the TopoJSON format.
   *
   * @api
   */
  class TopoJSON extends JSONFeature {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @private
       * @type {string|undefined}
       */
      this.layerName_ = options.layerName;

      /**
       * @private
       * @type {?Array<string>}
       */
      this.layers_ = options.layers ? options.layers : null;

      /**
       * @type {import("../proj/Projection.js").default}
       */
      this.dataProjection = get$2(
        options.dataProjection ? options.dataProjection : 'EPSG:4326',
      );
    }

    /**
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<Feature>} Features.
     * @override
     */
    readFeaturesFromObject(object, options) {
      if (object.type == 'Topology') {
        const topoJSONTopology = /** @type {TopoJSONTopology} */ (object);
        let transform,
          scale = null,
          translate = null;
        if (topoJSONTopology['transform']) {
          transform = topoJSONTopology['transform'];
          scale = transform['scale'];
          translate = transform['translate'];
        }
        const arcs = topoJSONTopology['arcs'];
        if (transform) {
          transformArcs(arcs, scale, translate);
        }
        /** @type {Array<Feature>} */
        const features = [];
        const topoJSONFeatures = topoJSONTopology['objects'];
        const property = this.layerName_;
        let feature;
        for (const objectName in topoJSONFeatures) {
          if (this.layers_ && !this.layers_.includes(objectName)) {
            continue;
          }
          if (topoJSONFeatures[objectName].type === 'GeometryCollection') {
            feature = /** @type {TopoJSONGeometryCollection} */ (
              topoJSONFeatures[objectName]
            );
            features.push.apply(
              features,
              readFeaturesFromGeometryCollection(
                feature,
                arcs,
                scale,
                translate,
                property,
                objectName,
                options,
              ),
            );
          } else {
            feature = /** @type {TopoJSONGeometry} */ (
              topoJSONFeatures[objectName]
            );
            features.push(
              readFeatureFromGeometry(
                feature,
                arcs,
                scale,
                translate,
                property,
                objectName,
                options,
              ),
            );
          }
        }
        return features;
      }
      return [];
    }

    /**
     * @param {Object} object Object.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     * @override
     */
    readProjectionFromObject(object) {
      return this.dataProjection;
    }
  }

  /**
   * @const
   * @type {Object<string, function(TopoJSONGeometry, Array, ...Array=): import("../geom/Geometry.js").default>}
   */
  const GEOMETRY_READERS = {
    'Point': readPointGeometry,
    'LineString': readLineStringGeometry,
    'Polygon': readPolygonGeometry,
    'MultiPoint': readMultiPointGeometry,
    'MultiLineString': readMultiLineStringGeometry,
    'MultiPolygon': readMultiPolygonGeometry,
  };

  /**
   * Concatenate arcs into a coordinate array.
   * @param {Array<number>} indices Indices of arcs to concatenate.  Negative
   *     values indicate arcs need to be reversed.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs (already
   *     transformed).
   * @return {Array<import("../coordinate.js").Coordinate>} Coordinates array.
   */
  function concatenateArcs(indices, arcs) {
    /** @type {Array<import("../coordinate.js").Coordinate>} */
    const coordinates = [];
    let index;
    for (let i = 0, ii = indices.length; i < ii; ++i) {
      index = indices[i];
      if (i > 0) {
        // splicing together arcs, discard last point
        coordinates.pop();
      }
      if (index >= 0) {
        // forward arc
        const arc = arcs[index];
        for (let j = 0, jj = arc.length; j < jj; ++j) {
          coordinates.push(arc[j].slice(0));
        }
      } else {
        // reverse arc
        const arc = arcs[~index];
        for (let j = arc.length - 1; j >= 0; --j) {
          coordinates.push(arc[j].slice(0));
        }
      }
    }
    return coordinates;
  }

  /**
   * Create a point from a TopoJSON geometry object.
   *
   * @param {TopoJSONPoint} object TopoJSON object.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   * @return {Point} Geometry.
   */
  function readPointGeometry(object, scale, translate) {
    const coordinates = object['coordinates'];
    if (scale && translate) {
      transformVertex(coordinates, scale, translate);
    }
    return new Point$1(coordinates);
  }

  /**
   * Create a multi-point from a TopoJSON geometry object.
   *
   * @param {TopoJSONMultiPoint} object TopoJSON object.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   * @return {MultiPoint} Geometry.
   */
  function readMultiPointGeometry(object, scale, translate) {
    const coordinates = object['coordinates'];
    if (scale && translate) {
      for (let i = 0, ii = coordinates.length; i < ii; ++i) {
        transformVertex(coordinates[i], scale, translate);
      }
    }
    return new MultiPoint(coordinates);
  }

  /**
   * Create a linestring from a TopoJSON geometry object.
   *
   * @param {TopoJSONLineString} object TopoJSON object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @return {LineString} Geometry.
   */
  function readLineStringGeometry(object, arcs) {
    const coordinates = concatenateArcs(object['arcs'], arcs);
    return new LineString(coordinates);
  }

  /**
   * Create a multi-linestring from a TopoJSON geometry object.
   *
   * @param {TopoJSONMultiLineString} object TopoJSON object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @return {MultiLineString} Geometry.
   */
  function readMultiLineStringGeometry(object, arcs) {
    const coordinates = [];
    for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {
      coordinates[i] = concatenateArcs(object['arcs'][i], arcs);
    }
    return new MultiLineString(coordinates);
  }

  /**
   * Create a polygon from a TopoJSON geometry object.
   *
   * @param {TopoJSONPolygon} object TopoJSON object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @return {Polygon} Geometry.
   */
  function readPolygonGeometry(object, arcs) {
    const coordinates = [];
    for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {
      coordinates[i] = concatenateArcs(object['arcs'][i], arcs);
    }
    return new Polygon(coordinates);
  }

  /**
   * Create a multi-polygon from a TopoJSON geometry object.
   *
   * @param {TopoJSONMultiPolygon} object TopoJSON object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @return {MultiPolygon} Geometry.
   */
  function readMultiPolygonGeometry(object, arcs) {
    const coordinates = [];
    for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {
      // for each polygon
      const polyArray = object['arcs'][i];
      const ringCoords = [];
      for (let j = 0, jj = polyArray.length; j < jj; ++j) {
        // for each ring
        ringCoords[j] = concatenateArcs(polyArray[j], arcs);
      }
      coordinates[i] = ringCoords;
    }
    return new MultiPolygon(coordinates);
  }

  /**
   * Create features from a TopoJSON GeometryCollection object.
   *
   * @param {TopoJSONGeometryCollection} collection TopoJSON Geometry
   *     object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   * @param {string|undefined} property Property to set the `GeometryCollection`'s parent
   *     object to.
   * @param {string} name Name of the `Topology`'s child object.
   * @param {import("./Feature.js").ReadOptions} [options] Read options.
   * @return {Array<Feature>} Array of features.
   */
  function readFeaturesFromGeometryCollection(
    collection,
    arcs,
    scale,
    translate,
    property,
    name,
    options,
  ) {
    const geometries = collection['geometries'];
    const features = [];
    for (let i = 0, ii = geometries.length; i < ii; ++i) {
      features[i] = readFeatureFromGeometry(
        geometries[i],
        arcs,
        scale,
        translate,
        property,
        name,
        options,
      );
    }
    return features;
  }

  /**
   * Create a feature from a TopoJSON geometry object.
   *
   * @param {TopoJSONGeometry} object TopoJSON geometry object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   * @param {string|undefined} property Property to set the `GeometryCollection`'s parent
   *     object to.
   * @param {string} name Name of the `Topology`'s child object.
   * @param {import("./Feature.js").ReadOptions} [options] Read options.
   * @return {Feature} Feature.
   */
  function readFeatureFromGeometry(
    object,
    arcs,
    scale,
    translate,
    property,
    name,
    options,
  ) {
    let geometry = null;
    const type = object.type;
    if (type) {
      const geometryReader = GEOMETRY_READERS[type];
      if (type === 'Point' || type === 'MultiPoint') {
        geometry = geometryReader(object, scale, translate);
      } else {
        geometry = geometryReader(object, arcs);
      }
      geometry = transformGeometryWithOptions(geometry, false, options);
    }
    const feature = new Feature({geometry: geometry});
    if (object.id !== undefined) {
      feature.setId(object.id);
    }
    let properties = object.properties;
    if (property) {
      if (!properties) {
        properties = {};
      }
      properties[property] = name;
    }
    if (properties) {
      feature.setProperties(properties, true);
    }
    return feature;
  }

  /**
   * Apply a linear transform to array of arcs.  The provided array of arcs is
   * modified in place.
   *
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   */
  function transformArcs(arcs, scale, translate) {
    for (let i = 0, ii = arcs.length; i < ii; ++i) {
      transformArc(arcs[i], scale, translate);
    }
  }

  /**
   * Apply a linear transform to an arc.  The provided arc is modified in place.
   *
   * @param {Array<import("../coordinate.js").Coordinate>} arc Arc.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   */
  function transformArc(arc, scale, translate) {
    let x = 0;
    let y = 0;
    for (let i = 0, ii = arc.length; i < ii; ++i) {
      const vertex = arc[i];
      x += vertex[0];
      y += vertex[1];
      vertex[0] = x;
      vertex[1] = y;
      transformVertex(vertex, scale, translate);
    }
  }

  /**
   * Apply a linear transform to a vertex.  The provided vertex is modified in
   * place.
   *
   * @param {import("../coordinate.js").Coordinate} vertex Vertex.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   */
  function transformVertex(vertex, scale, translate) {
    vertex[0] = vertex[0] * scale[0] + translate[0];
    vertex[1] = vertex[1] * scale[1] + translate[1];
  }

  /**
   * @module ol/format/GML32
   */

  /**
   * @classdesc Feature format for reading and writing data in the GML format
   *            version 3.2.1.
   * @api
   */
  class GML32 extends GML3 {
    /**
     * @param {import("./GMLBase.js").Options} [options] Optional configuration object.
     */
    constructor(options) {
      options = options ? options : {};

      super(options);

      /**
       * @type {string}
       */
      this.schemaLocation = options.schemaLocation
        ? options.schemaLocation
        : this.namespace + ' http://schemas.opengis.net/gml/3.2.1/gml.xsd';
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Geometry.js").default|import("../extent.js").Extent} geometry Geometry.
     * @param {Array<*>} objectStack Node stack.
     * @override
     */
    writeGeometryElement(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      objectStack[objectStack.length - 1] = Object.assign(
        {multiCurve: true, multiSurface: true},
        context,
      );
      super.writeGeometryElement(node, geometry, objectStack);
    }
  }

  GML32.prototype.namespace = 'http://www.opengis.net/gml/3.2';

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'pos': makeReplacer(GML3.prototype.readFlatPos),
      'posList': makeReplacer(GML3.prototype.readFlatPosList),
      'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.FLAT_LINEAR_RINGS_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'interior': GML3.prototype.interiorParser,
      'exterior': GML3.prototype.exteriorParser,
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.GEOMETRY_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'Point': makeReplacer(GMLBase.prototype.readPoint),
      'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),
      'LineString': makeReplacer(GMLBase.prototype.readLineString),
      'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),
      'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),
      'Polygon': makeReplacer(GMLBase.prototype.readPolygon),
      'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),
      'Surface': makeReplacer(GML32.prototype.readSurface),
      'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),
      'Curve': makeReplacer(GML32.prototype.readCurve),
      'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),
      'Envelope': makeReplacer(GML32.prototype.readEnvelope),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.MULTICURVE_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),
      'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.MULTISURFACE_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),
      'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.CURVEMEMBER_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'LineString': makeArrayPusher(GMLBase.prototype.readLineString),
      'Curve': makeArrayPusher(GML3.prototype.readCurve),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.SURFACEMEMBER_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),
      'Surface': makeArrayPusher(GML3.prototype.readSurface),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.SURFACE_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'patches': makeReplacer(GML3.prototype.readPatch),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.CURVE_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'segments': makeReplacer(GML3.prototype.readSegment),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.ENVELOPE_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),
      'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.PATCHES_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.SEGMENTS_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'LineStringSegment': makeArrayExtender(
        GML3.prototype.readLineStringSegment,
      ),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.MULTIPOINT_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),
      'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.MULTILINESTRING_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'lineStringMember': makeArrayPusher(
        GMLBase.prototype.lineStringMemberParser,
      ),
      'lineStringMembers': makeArrayPusher(
        GMLBase.prototype.lineStringMemberParser,
      ),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.MULTIPOLYGON_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),
      'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.POINTMEMBER_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.LINESTRINGMEMBER_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'LineString': makeArrayPusher(GMLBase.prototype.readLineString),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.POLYGONMEMBER_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.RING_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),
      'Ring': makeReplacer(GML32.prototype.readFlatCurveRing),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.RING_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'exterior': makeChildAppender(GML3.prototype.writeRing),
      'interior': makeChildAppender(GML3.prototype.writeRing),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.ENVELOPE_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'lowerCorner': makeChildAppender(writeStringTextNode),
      'upperCorner': makeChildAppender(writeStringTextNode),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'surfaceMember': makeChildAppender(
        GML3.prototype.writeSurfaceOrPolygonMember,
      ),
      'polygonMember': makeChildAppender(
        GML3.prototype.writeSurfaceOrPolygonMember,
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.POINTMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'pointMember': makeChildAppender(GML3.prototype.writePointMember),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'lineStringMember': makeChildAppender(
        GML3.prototype.writeLineStringOrCurveMember,
      ),
      'curveMember': makeChildAppender(
        GML3.prototype.writeLineStringOrCurveMember,
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.GEOMETRY_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),
      'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),
      'Point': makeChildAppender(GML32.prototype.writePoint),
      'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),
      'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),
      'MultiLineString': makeChildAppender(
        GML3.prototype.writeMultiCurveOrLineString,
      ),
      'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),
      'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),
      'MultiPolygon': makeChildAppender(
        GML3.prototype.writeMultiSurfaceOrPolygon,
      ),
      'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),
      'MultiSurface': makeChildAppender(
        GML3.prototype.writeMultiSurfaceOrPolygon,
      ),
      'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),
    },
  };

  /**
   * @module ol/format/filter/Filter
   */

  /**
   * @classdesc
   * Abstract class; normally only used for creating subclasses and not instantiated in apps.
   * Base class for WFS GetFeature filters.
   *
   * @abstract
   */
  class Filter {
    /**
     * @param {!string} tagName The XML tag name for this filter.
     */
    constructor(tagName) {
      /**
       * @private
       * @type {!string}
       */
      this.tagName_ = tagName;
    }

    /**
     * The XML tag name for a filter.
     * @return {!string} Name.
     */
    getTagName() {
      return this.tagName_;
    }
  }

  /**
   * @module ol/format/filter/LogicalNary
   */

  /**
   * @classdesc
   * Abstract class; normally only used for creating subclasses and not instantiated in apps.
   * Base class for WFS GetFeature n-ary logical filters.
   *
   * @abstract
   */
  class LogicalNary extends Filter {
    /**
     * @param {!string} tagName The XML tag name for this filter.
     * @param {Array<import("./Filter.js").default>} conditions Conditions.
     */
    constructor(tagName, conditions) {
      super(tagName);

      /**
       * @type {Array<import("./Filter.js").default>}
       */
      this.conditions = conditions;
      assert$1(this.conditions.length >= 2, 'At least 2 conditions are required');
    }
  }

  /**
   * @module ol/format/filter/And
   */

  /**
   * @classdesc
   * Represents a logical `<And>` operator between two or more filter conditions.
   *
   * @abstract
   */
  class And extends LogicalNary {
    /**
     * @param {...import("./Filter.js").default} conditions Conditions.
     */
    constructor(conditions) {
      super('And', Array.prototype.slice.call(arguments));
    }
  }

  /**
   * @module ol/format/filter/Bbox
   */

  /**
   * @classdesc
   * Represents a `<BBOX>` operator to test whether a geometry-valued property
   * intersects a fixed bounding box
   *
   * @api
   */
  class Bbox extends Filter {
    /**
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../../extent.js").Extent} extent Extent.
     * @param {string} [srsName] SRS name. No srsName attribute will be set
     * on geometries when this is not provided.
     */
    constructor(geometryName, extent, srsName) {
      super('BBOX');

      /**
       * @type {!string}
       */
      this.geometryName = geometryName;

      /**
       * @type {import("../../extent.js").Extent}
       */
      this.extent = extent;
      if (extent.length !== 4) {
        throw new Error(
          'Expected an extent with four values ([minX, minY, maxX, maxY])',
        );
      }

      /**
       * @type {string|undefined}
       */
      this.srsName = srsName;
    }
  }

  /**
   * @module ol/format/filter
   */

  /**
   * Create a logical `<And>` operator between two or more filter conditions.
   *
   * @param {...import("./filter/Filter.js").default} conditions Filter conditions.
   * @return {!And} `<And>` operator.
   * @api
   */
  function and(conditions) {
    const params = [null].concat(Array.prototype.slice.call(arguments));
    return new (Function.prototype.bind.apply(And, params))();
  }

  /**
   * Create a `<BBOX>` operator to test whether a geometry-valued property
   * intersects a fixed bounding box
   *
   * @param {!string} geometryName Geometry name to use.
   * @param {!import("../extent.js").Extent} extent Extent.
   * @param {string} [srsName] SRS name. No srsName attribute will be
   *    set on geometries when this is not provided.
   * @return {!Bbox} `<BBOX>` operator.
   * @api
   */
  function bbox$1(geometryName, extent, srsName) {
    return new Bbox(geometryName, extent, srsName);
  }

  /**
   * @module ol/format/WFS
   */

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const FEATURE_COLLECTION_PARSERS = {
    'http://www.opengis.net/gml': {
      'boundedBy': makeObjectPropertySetter(
        GMLBase.prototype.readExtentElement,
        'bounds',
      ),
    },
    'http://www.opengis.net/wfs/2.0': {
      'member': makeArrayPusher(GMLBase.prototype.readFeaturesInternal),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TRANSACTION_SUMMARY_PARSERS = {
    'http://www.opengis.net/wfs': {
      'totalInserted': makeObjectPropertySetter(readPositiveInteger),
      'totalUpdated': makeObjectPropertySetter(readPositiveInteger),
      'totalDeleted': makeObjectPropertySetter(readPositiveInteger),
    },
    'http://www.opengis.net/wfs/2.0': {
      'totalInserted': makeObjectPropertySetter(readPositiveInteger),
      'totalUpdated': makeObjectPropertySetter(readPositiveInteger),
      'totalDeleted': makeObjectPropertySetter(readPositiveInteger),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TRANSACTION_RESPONSE_PARSERS = {
    'http://www.opengis.net/wfs': {
      'TransactionSummary': makeObjectPropertySetter(
        readTransactionSummary,
        'transactionSummary',
      ),
      'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),
    },
    'http://www.opengis.net/wfs/2.0': {
      'TransactionSummary': makeObjectPropertySetter(
        readTransactionSummary,
        'transactionSummary',
      ),
      'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const QUERY_SERIALIZERS = {
    'http://www.opengis.net/wfs': {
      'PropertyName': makeChildAppender(writeStringTextNode),
    },
    'http://www.opengis.net/wfs/2.0': {
      'PropertyName': makeChildAppender(writeStringTextNode),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const TRANSACTION_SERIALIZERS = {
    'http://www.opengis.net/wfs': {
      'Insert': makeChildAppender(writeFeature),
      'Update': makeChildAppender(writeUpdate),
      'Delete': makeChildAppender(writeDelete),
      'Property': makeChildAppender(writeProperty),
      'Native': makeChildAppender(writeNative),
    },
    'http://www.opengis.net/wfs/2.0': {
      'Insert': makeChildAppender(writeFeature),
      'Update': makeChildAppender(writeUpdate),
      'Delete': makeChildAppender(writeDelete),
      'Property': makeChildAppender(writeProperty),
      'Native': makeChildAppender(writeNative),
    },
  };

  /**
   * @typedef {Object} Options
   * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.
   * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.
   * @property {GMLBase} [gmlFormat] The GML format to use to parse the response.
   * Default is `ol/format/GML2` for WFS 1.0.0, `ol/format/GML3` for WFS 1.1.0 and `ol/format/GML32` for WFS 2.0.0.
   * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.
   * @property {string} [version='1.1.0'] WFS version to use. Can be either `1.0.0`, `1.1.0` or `2.0.0`.
   */

  /**
   * @typedef {Object} WriteGetFeatureOptions
   * @property {string} featureNS The namespace URI used for features.
   * @property {string} featurePrefix The prefix for the feature namespace.
   * @property {Array<string|FeatureType>} featureTypes The feature type names or FeatureType objects to
   * define a unique bbox filter per feature type name (in this case, options `bbox` and `geometryName` are
   * ignored.).
   * @property {string} [srsName] SRS name. No srsName attribute will be set on
   * geometries when this is not provided.
   * @property {string} [handle] Handle.
   * @property {string} [outputFormat] Output format.
   * @property {number} [maxFeatures] Maximum number of features to fetch.
   * @property {string} [geometryName] Geometry name to use in a BBOX filter.
   * @property {Array<string>} [propertyNames] Optional list of property names to serialize.
   * @property {string} [viewParams] viewParams GeoServer vendor parameter.
   * @property {number} [startIndex] Start index to use for WFS paging. This is a
   * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.
   * @property {number} [count] Number of features to retrieve when paging. This is a
   * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some
   * Web Feature Services have repurposed `maxfeatures` instead.
   * @property {import("../extent.js").Extent} [bbox] Extent to use for the BBOX filter. The `geometryName`
   * option must be set.
   * @property {import("./filter/Filter.js").default} [filter] Filter condition. See
   * {@link module:ol/format/filter} for more information.
   * @property {string} [resultType] Indicates what response should be returned,
   * e.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.
   */

  /**
   * @typedef {Object} FeatureType
   * @property {!string} name The feature type name.
   * @property {!import("../extent.js").Extent} bbox Extent to use for the BBOX filter.
   * @property {!string} geometryName Geometry name to use in the BBOX filter.
   */

  /**
   * @typedef {Object} WriteTransactionOptions
   * @property {string} featureNS The namespace URI used for features.
   * @property {string} featurePrefix The prefix for the feature namespace.
   * @property {string} featureType The feature type name.
   * @property {string} [srsName] SRS name. No srsName attribute will be set on
   * geometries when this is not provided.
   * @property {string} [handle] Handle.
   * @property {boolean} [hasZ] Must be set to true if the transaction is for
   * a 3D layer. This will allow the Z coordinate to be included in the transaction.
   * @property {Array<Object>} nativeElements Native elements. Currently not supported.
   * @property {import("./GMLBase.js").Options} [gmlOptions] GML options for the WFS transaction writer.
   * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0`, `1.1.0` or `2.0.0`.
   */

  /**
   * Number of features; bounds/extent.
   * @typedef {Object} FeatureCollectionMetadata
   * @property {number} numberOfFeatures NumberOfFeatures.
   * @property {import("../extent.js").Extent} bounds Bounds.
   */

  /**
   * @typedef {Object} TransactionSummary
   * @property {number} totalDeleted TotalDeleted.
   * @property {number} totalInserted TotalInserted.
   * @property {number} totalUpdated TotalUpdated.
   */

  /**
   * Total deleted; total inserted; total updated; array of insert ids.
   * @typedef {Object} TransactionResponse
   * @property {TransactionSummary} transactionSummary Transaction summary.
   * @property {Array<string>} insertIds InsertIds.
   */

  /**
   * @type {string}
   */
  const FEATURE_PREFIX = 'feature';

  /**
   * @type {string}
   */
  const XMLNS = 'http://www.w3.org/2000/xmlns/';

  /**
   * @type {Object<string, string>}
   */
  const OGCNS = {
    '2.0.0': 'http://www.opengis.net/ogc/1.1',
    '1.1.0': 'http://www.opengis.net/ogc',
    '1.0.0': 'http://www.opengis.net/ogc',
  };

  /**
   * @type {Object<string, string>}
   */
  const WFSNS = {
    '2.0.0': 'http://www.opengis.net/wfs/2.0',
    '1.1.0': 'http://www.opengis.net/wfs',
    '1.0.0': 'http://www.opengis.net/wfs',
  };

  /**
   * @type {Object<string, string>}
   */
  const FESNS = {
    '2.0.0': 'http://www.opengis.net/fes/2.0',
    '1.1.0': 'http://www.opengis.net/fes',
    '1.0.0': 'http://www.opengis.net/fes',
  };

  /**
   * @type {Object<string, string>}
   */
  const SCHEMA_LOCATIONS = {
    '2.0.0':
      'http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd',
    '1.1.0':
      'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',
    '1.0.0':
      'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd',
  };

  /**
   * @type {Object<string, object>}
   */
  const GML_FORMATS = {
    '2.0.0': GML32,
    '1.1.0': GML3,
    '1.0.0': GML2,
  };

  /**
   * @const
   * @type {string}
   */
  const DEFAULT_VERSION$1 = '1.1.0';

  /**
   * @classdesc
   * Feature format for reading and writing data in the WFS format.
   * By default, supports WFS version 1.1.0. You can pass a GML format
   * as option to override the default.
   * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.
   *
   * @api
   */
  class WFS extends XMLFeature {
    /**
     * @param {Options} [options] Optional configuration object.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @private
       * @type {string}
       */
      this.version_ = options.version ? options.version : DEFAULT_VERSION$1;

      /**
       * @private
       * @type {Array<string>|string|undefined}
       */
      this.featureType_ = options.featureType;

      /**
       * @private
       * @type {Object<string, string>|string|undefined}
       */
      this.featureNS_ = options.featureNS;

      /**
       * @private
       * @type {GMLBase}
       */
      this.gmlFormat_ = options.gmlFormat
        ? options.gmlFormat
        : new GML_FORMATS[this.version_]();

      /**
       * @private
       * @type {string}
       */
      this.schemaLocation_ = options.schemaLocation
        ? options.schemaLocation
        : SCHEMA_LOCATIONS[this.version_];
    }

    /**
     * @return {Array<string>|string|undefined} featureType
     */
    getFeatureType() {
      return this.featureType_;
    }

    /**
     * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.
     */
    setFeatureType(featureType) {
      this.featureType_ = featureType;
    }

    /**
     * @protected
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @override
     */
    readFeaturesFromNode(node, options) {
      /** @type {import("../xml.js").NodeStackItem} */
      const context = {
        node,
      };
      Object.assign(context, {
        'featureType': this.featureType_,
        'featureNS': this.featureNS_,
      });

      Object.assign(context, this.getReadOptions(node, options ? options : {}));
      const objectStack = [context];
      let featuresNS;
      if (this.version_ === '2.0.0') {
        featuresNS = FEATURE_COLLECTION_PARSERS;
      } else {
        featuresNS = this.gmlFormat_.FEATURE_COLLECTION_PARSERS;
      }
      let features = pushParseAndPop(
        [],
        featuresNS,
        node,
        objectStack,
        this.gmlFormat_,
      );
      if (!features) {
        features = [];
      }
      return features;
    }

    /**
     * Read transaction response of the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {TransactionResponse|undefined} Transaction response.
     * @api
     */
    readTransactionResponse(source) {
      if (!source) {
        return undefined;
      }
      if (typeof source === 'string') {
        const doc = parse$1(source);
        return this.readTransactionResponseFromDocument(doc);
      }
      if (isDocument(source)) {
        return this.readTransactionResponseFromDocument(
          /** @type {Document} */ (source),
        );
      }
      return this.readTransactionResponseFromNode(
        /** @type {Element} */ (source),
      );
    }

    /**
     * Read feature collection metadata of the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {FeatureCollectionMetadata|undefined}
     *     FeatureCollection metadata.
     * @api
     */
    readFeatureCollectionMetadata(source) {
      if (!source) {
        return undefined;
      }
      if (typeof source === 'string') {
        const doc = parse$1(source);
        return this.readFeatureCollectionMetadataFromDocument(doc);
      }
      if (isDocument(source)) {
        return this.readFeatureCollectionMetadataFromDocument(
          /** @type {Document} */ (source),
        );
      }
      return this.readFeatureCollectionMetadataFromNode(
        /** @type {Element} */ (source),
      );
    }

    /**
     * @param {Document} doc Document.
     * @return {FeatureCollectionMetadata|undefined}
     *     FeatureCollection metadata.
     */
    readFeatureCollectionMetadataFromDocument(doc) {
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readFeatureCollectionMetadataFromNode(
            /** @type {Element} */ (n),
          );
        }
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @return {FeatureCollectionMetadata|undefined}
     *     FeatureCollection metadata.
     */
    readFeatureCollectionMetadataFromNode(node) {
      const result = {};
      const value = readNonNegativeIntegerString(
        node.getAttribute('numberOfFeatures'),
      );
      result['numberOfFeatures'] = value;
      return pushParseAndPop(
        /** @type {FeatureCollectionMetadata} */ (result),
        FEATURE_COLLECTION_PARSERS,
        node,
        [],
        this.gmlFormat_,
      );
    }

    /**
     * @param {Document} doc Document.
     * @return {TransactionResponse|undefined} Transaction response.
     */
    readTransactionResponseFromDocument(doc) {
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readTransactionResponseFromNode(/** @type {Element} */ (n));
        }
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @return {TransactionResponse|undefined} Transaction response.
     */
    readTransactionResponseFromNode(node) {
      return pushParseAndPop(
        /** @type {TransactionResponse} */ ({}),
        TRANSACTION_RESPONSE_PARSERS,
        node,
        [],
      );
    }

    /**
     * Encode format as WFS `GetFeature` and return the Node.
     *
     * @param {WriteGetFeatureOptions} options Options.
     * @return {Node} Result.
     * @api
     */
    writeGetFeature(options) {
      const node = createElementNS(WFSNS[this.version_], 'GetFeature');
      node.setAttribute('service', 'WFS');
      node.setAttribute('version', this.version_);
      if (options.handle) {
        node.setAttribute('handle', options.handle);
      }
      if (options.outputFormat) {
        node.setAttribute('outputFormat', options.outputFormat);
      }
      if (options.maxFeatures !== undefined) {
        node.setAttribute('maxFeatures', String(options.maxFeatures));
      }
      if (options.resultType) {
        node.setAttribute('resultType', options.resultType);
      }
      if (options.startIndex !== undefined) {
        node.setAttribute('startIndex', String(options.startIndex));
      }
      if (options.count !== undefined) {
        node.setAttribute('count', String(options.count));
      }
      if (options.viewParams !== undefined) {
        node.setAttribute('viewParams', options.viewParams);
      }
      node.setAttributeNS(
        XML_SCHEMA_INSTANCE_URI,
        'xsi:schemaLocation',
        this.schemaLocation_,
      );
      /** @type {import("../xml.js").NodeStackItem} */
      const context = {
        node,
      };
      Object.assign(context, {
        'version': this.version_,
        'srsName': options.srsName,
        'featureNS': options.featureNS ? options.featureNS : this.featureNS_,
        'featurePrefix': options.featurePrefix,
        'propertyNames': options.propertyNames ? options.propertyNames : [],
      });
      assert$1(
        Array.isArray(options.featureTypes),
        '`options.featureTypes` must be an Array',
      );
      if (typeof options.featureTypes[0] === 'string') {
        let filter = options.filter;
        if (options.bbox) {
          assert$1(
            options.geometryName,
            '`options.geometryName` must also be provided when `options.bbox` is set',
          );
          filter = this.combineBboxAndFilter(
            options.geometryName,
            options.bbox,
            options.srsName,
            filter,
          );
        }
        Object.assign(context, {
          'geometryName': options.geometryName,
          'filter': filter,
        });
        writeGetFeature(
          node,
          /** @type {!Array<string>} */ (options.featureTypes),
          [context],
        );
      } else {
        // Write one query node per element in featuresType.
        options.featureTypes.forEach((/** @type {FeatureType} */ featureType) => {
          const completeFilter = this.combineBboxAndFilter(
            featureType.geometryName,
            featureType.bbox,
            options.srsName,
            options.filter,
          );
          Object.assign(context, {
            'geometryName': featureType.geometryName,
            'filter': completeFilter,
          });
          writeGetFeature(node, [featureType.name], [context]);
        });
      }
      return node;
    }

    /**
     * Create a bbox filter and combine it with another optional filter.
     *
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../extent.js").Extent} extent Extent.
     * @param {string} [srsName] SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     * @param {import("./filter/Filter.js").default} [filter] Filter condition.
     * @return {import("./filter/Filter.js").default} The filter.
     */
    combineBboxAndFilter(geometryName, extent, srsName, filter) {
      const bboxFilter = bbox$1(geometryName, extent, srsName);
      if (filter) {
        // if bbox and filter are both set, combine the two into a single filter
        return and(filter, bboxFilter);
      }
      return bboxFilter;
    }

    /**
     * Encode format as WFS `Transaction` and return the Node.
     *
     * @param {Array<import("../Feature.js").default>} inserts The features to insert.
     * @param {Array<import("../Feature.js").default>} updates The features to update.
     * @param {Array<import("../Feature.js").default>} deletes The features to delete.
     * @param {WriteTransactionOptions} options Write options.
     * @return {Node} Result.
     * @api
     */
    writeTransaction(inserts, updates, deletes, options) {
      const objectStack = [];
      const version = options.version ? options.version : this.version_;
      const node = createElementNS(WFSNS[version], 'Transaction');

      node.setAttribute('service', 'WFS');
      node.setAttribute('version', version);
      let baseObj;
      /** @type {import("../xml.js").NodeStackItem} */
      if (options) {
        baseObj = options.gmlOptions ? options.gmlOptions : {};
        if (options.handle) {
          node.setAttribute('handle', options.handle);
        }
      }
      node.setAttributeNS(
        XML_SCHEMA_INSTANCE_URI,
        'xsi:schemaLocation',
        SCHEMA_LOCATIONS[version],
      );

      const request = createTransactionRequest(node, baseObj, version, options);
      if (inserts) {
        serializeTransactionRequest('Insert', inserts, objectStack, request);
      }
      if (updates) {
        serializeTransactionRequest('Update', updates, objectStack, request);
      }
      if (deletes) {
        serializeTransactionRequest('Delete', deletes, objectStack, request);
      }
      if (options.nativeElements) {
        serializeTransactionRequest(
          'Native',
          options.nativeElements,
          objectStack,
          request,
        );
      }
      return node;
    }

    /**
     * @param {Document} doc Document.
     * @return {import("../proj/Projection.js").default} Projection.
     * @override
     */
    readProjectionFromDocument(doc) {
      for (let n = doc.firstChild; n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readProjectionFromNode(/** @type {Element} */ (n));
        }
      }
      return null;
    }

    /**
     * @param {Element} node Node.
     * @return {import("../proj/Projection.js").default} Projection.
     * @override
     */
    readProjectionFromNode(node) {
      if (node.firstElementChild && node.firstElementChild.firstElementChild) {
        node = node.firstElementChild.firstElementChild;
        for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
          if (
            !(
              n.childNodes.length === 0 ||
              (n.childNodes.length === 1 && n.firstChild.nodeType === 3)
            )
          ) {
            const objectStack = [{}];
            this.gmlFormat_.readGeometryElement(n, objectStack);
            return get$2(objectStack.pop().srsName);
          }
        }
      }

      return null;
    }
  }

  /**
   * @param {Element} node Node.
   * @param {*} baseObj Base object.
   * @param {string} version Version.
   * @param {WriteTransactionOptions} options Options.
   * @return {Object} Request object.
   */
  function createTransactionRequest(node, baseObj, version, options) {
    const featurePrefix = options.featurePrefix
      ? options.featurePrefix
      : FEATURE_PREFIX;
    let gmlVersion;
    if (version === '1.0.0') {
      gmlVersion = 2;
    } else if (version === '1.1.0') {
      gmlVersion = 3;
    } else if (version === '2.0.0') {
      gmlVersion = 3.2;
    }
    const obj = Object.assign(
      {node},
      {
        version,
        'featureNS': options.featureNS,
        'featureType': options.featureType,
        'featurePrefix': featurePrefix,
        'gmlVersion': gmlVersion,
        'hasZ': options.hasZ,
        'srsName': options.srsName,
      },
      baseObj,
    );
    return obj;
  }

  /**
   * @param {string} type Request type.
   * @param {Array<import("../Feature.js").default>} features Features.
   * @param {Array<*>} objectStack Object stack.
   * @param {Element} request Transaction Request.
   */
  function serializeTransactionRequest(type, features, objectStack, request) {
    pushSerializeAndPop(
      request,
      TRANSACTION_SERIALIZERS,
      makeSimpleNodeFactory(type),
      features,
      objectStack,
    );
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Transaction Summary.
   */
  function readTransactionSummary(node, objectStack) {
    return pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const OGC_FID_PARSERS = {
    'http://www.opengis.net/ogc': {
      'FeatureId': makeArrayPusher(function (node, objectStack) {
        return node.getAttribute('fid');
      }),
    },
    'http://www.opengis.net/ogc/1.1': {
      'FeatureId': makeArrayPusher(function (node, objectStack) {
        return node.getAttribute('fid');
      }),
    },
  };

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function fidParser(node, objectStack) {
    parseNode(OGC_FID_PARSERS, node, objectStack);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const INSERT_RESULTS_PARSERS = {
    'http://www.opengis.net/wfs': {
      'Feature': fidParser,
    },
    'http://www.opengis.net/wfs/2.0': {
      'Feature': fidParser,
    },
  };

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<string>|undefined} Insert results.
   */
  function readInsertResults(node, objectStack) {
    return pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeFeature(node, feature, objectStack) {
    const context = objectStack[objectStack.length - 1];
    const featureType = context['featureType'];
    const featureNS = context['featureNS'];
    const gmlVersion = context['gmlVersion'];
    const child = createElementNS(featureNS, featureType);
    node.appendChild(child);
    if (gmlVersion === 2) {
      GML2.prototype.writeFeatureElement(child, feature, objectStack);
    } else if (gmlVersion === 3) {
      GML3.prototype.writeFeatureElement(child, feature, objectStack);
    } else {
      GML32.prototype.writeFeatureElement(child, feature, objectStack);
    }
  }

  /**
   * @param {Node} node Node.
   * @param {number|string} fid Feature identifier.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeOgcFidFilter(node, fid, objectStack) {
    const context = objectStack[objectStack.length - 1];
    const version = context['version'];
    const ns = OGCNS[version];
    const filter = createElementNS(ns, 'Filter');
    const child = createElementNS(ns, 'FeatureId');
    filter.appendChild(child);
    child.setAttribute('fid', /** @type {string} */ (fid));
    node.appendChild(filter);
  }

  /**
   * @param {string|undefined} featurePrefix The prefix of the feature.
   * @param {string} featureType The type of the feature.
   * @return {string} The value of the typeName property.
   */
  function getTypeName(featurePrefix, featureType) {
    featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;
    const prefix = featurePrefix + ':';
    // The featureType already contains the prefix.
    if (featureType.startsWith(prefix)) {
      return featureType;
    }
    return prefix + featureType;
  }

  /**
   * @param {Element} node Node.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeDelete(node, feature, objectStack) {
    const context = objectStack[objectStack.length - 1];
    assert$1(feature.getId() !== undefined, 'Features must have an id set');
    const featureType = context['featureType'];
    const featurePrefix = context['featurePrefix'];
    const featureNS = context['featureNS'];
    const typeName = getTypeName(featurePrefix, featureType);
    node.setAttribute('typeName', typeName);
    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
    const fid = feature.getId();
    if (fid !== undefined) {
      writeOgcFidFilter(node, fid, objectStack);
    }
  }

  /**
   * @param {Element} node Node.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeUpdate(node, feature, objectStack) {
    const context = objectStack[objectStack.length - 1];
    assert$1(feature.getId() !== undefined, 'Features must have an id set');
    const version = context['version'];
    const featureType = context['featureType'];
    const featurePrefix = context['featurePrefix'];
    const featureNS = context['featureNS'];
    const typeName = getTypeName(featurePrefix, featureType);
    const geometryName = feature.getGeometryName();
    node.setAttribute('typeName', typeName);
    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
    const fid = feature.getId();
    if (fid !== undefined) {
      const keys = feature.getKeys();
      const values = [];
      for (let i = 0, ii = keys.length; i < ii; i++) {
        const value = feature.get(keys[i]);
        if (value !== undefined) {
          let name = keys[i];
          if (
            value &&
            typeof (/** @type {?} */ (value).getSimplifiedGeometry) === 'function'
          ) {
            name = geometryName;
          }
          values.push({name: name, value: value});
        }
      }
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */ ({
          version,
          'gmlVersion': context['gmlVersion'],
          node,
          'hasZ': context['hasZ'],
          'srsName': context['srsName'],
        }),
        TRANSACTION_SERIALIZERS,
        makeSimpleNodeFactory('Property'),
        values,
        objectStack,
      );
      writeOgcFidFilter(node, fid, objectStack);
    }
  }

  /**
   * @param {Node} node Node.
   * @param {Object} pair Property name and value.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeProperty(node, pair, objectStack) {
    const context = objectStack[objectStack.length - 1];
    const version = context['version'];
    const ns = WFSNS[version];
    const tagName = version === '2.0.0' ? 'ValueReference' : 'Name';
    const name = createElementNS(ns, tagName);
    const gmlVersion = context['gmlVersion'];
    node.appendChild(name);
    writeStringTextNode(name, pair.name);
    if (pair.value !== undefined && pair.value !== null) {
      const value = createElementNS(ns, 'Value');
      node.appendChild(value);
      if (
        pair.value &&
        typeof (/** @type {?} */ (pair.value).getSimplifiedGeometry) ===
          'function'
      ) {
        if (gmlVersion === 2) {
          GML2.prototype.writeGeometryElement(value, pair.value, objectStack);
        } else if (gmlVersion === 3) {
          GML3.prototype.writeGeometryElement(value, pair.value, objectStack);
        } else {
          GML32.prototype.writeGeometryElement(value, pair.value, objectStack);
        }
      } else {
        writeStringTextNode(value, pair.value);
      }
    }
  }

  /**
   * @param {Element} node Node.
   * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeNative(node, nativeElement, objectStack) {
    if (nativeElement.vendorId) {
      node.setAttribute('vendorId', nativeElement.vendorId);
    }
    if (nativeElement.safeToIgnore !== undefined) {
      node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));
    }
    if (nativeElement.value !== undefined) {
      writeStringTextNode(node, nativeElement.value);
    }
  }

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const GETFEATURE_SERIALIZERS = {
    'http://www.opengis.net/wfs': {
      'Query': makeChildAppender(writeQuery),
    },
    'http://www.opengis.net/wfs/2.0': {
      'Query': makeChildAppender(writeQuery),
    },
    'http://www.opengis.net/ogc': {
      'During': makeChildAppender(writeDuringFilter),
      'And': makeChildAppender(writeLogicalFilter),
      'Or': makeChildAppender(writeLogicalFilter),
      'Not': makeChildAppender(writeNotFilter),
      'BBOX': makeChildAppender(writeBboxFilter),
      'Contains': makeChildAppender(writeSpatialFilter),
      'Intersects': makeChildAppender(writeSpatialFilter),
      'Within': makeChildAppender(writeSpatialFilter),
      'DWithin': makeChildAppender(writeDWithinFilter),
      'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),
      'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),
      'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsNull': makeChildAppender(writeIsNullFilter),
      'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),
      'PropertyIsLike': makeChildAppender(writeIsLikeFilter),
    },
    'http://www.opengis.net/fes/2.0': {
      'During': makeChildAppender(writeDuringFilter),
      'And': makeChildAppender(writeLogicalFilter),
      'Or': makeChildAppender(writeLogicalFilter),
      'Not': makeChildAppender(writeNotFilter),
      'BBOX': makeChildAppender(writeBboxFilter),
      'Contains': makeChildAppender(writeSpatialFilter),
      'Disjoint': makeChildAppender(writeSpatialFilter),
      'Intersects': makeChildAppender(writeSpatialFilter),
      'ResourceId': makeChildAppender(writeResourceIdFilter),
      'Within': makeChildAppender(writeSpatialFilter),
      'DWithin': makeChildAppender(writeDWithinFilter),
      'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),
      'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),
      'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsNull': makeChildAppender(writeIsNullFilter),
      'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),
      'PropertyIsLike': makeChildAppender(writeIsLikeFilter),
    },
  };

  /**
   * @param {Element} node Node.
   * @param {string} featureType Feature type.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeQuery(node, featureType, objectStack) {
    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const version = context['version'];
    const featurePrefix = context['featurePrefix'];
    const featureNS = context['featureNS'];
    const propertyNames = context['propertyNames'];
    const srsName = context['srsName'];
    let typeName;
    // If feature prefix is not defined, we must not use the default prefix.
    if (featurePrefix) {
      typeName = getTypeName(featurePrefix, featureType);
    } else {
      typeName = featureType;
    }
    let typeNameAttr;
    if (version === '2.0.0') {
      typeNameAttr = 'typeNames';
    } else {
      typeNameAttr = 'typeName';
    }
    node.setAttribute(typeNameAttr, typeName);
    if (srsName) {
      node.setAttribute('srsName', srsName);
    }
    if (featureNS) {
      node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
    }
    const item = /** @type {import("../xml.js").NodeStackItem} */ (
      Object.assign({}, context)
    );
    item.node = node;
    pushSerializeAndPop(
      item,
      QUERY_SERIALIZERS,
      makeSimpleNodeFactory('PropertyName'),
      propertyNames,
      objectStack,
    );
    const filter = context['filter'];
    if (filter) {
      const child = createElementNS(getFilterNS(version), 'Filter');
      node.appendChild(child);
      writeFilterCondition(child, filter, objectStack);
    }
  }

  /**
   * @param {Element} node Node.
   * @param {import("./filter/Filter.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeFilterCondition(node, filter, objectStack) {
    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    /** @type {import("../xml.js").NodeStackItem} */
    const item = {node};
    Object.assign(item, {context});
    pushSerializeAndPop(
      item,
      GETFEATURE_SERIALIZERS,
      makeSimpleNodeFactory(filter.getTagName()),
      [filter],
      objectStack,
    );
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/Bbox.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeBboxFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    parent['srsName'] = filter.srsName;
    const format = GML_FORMATS[version];

    writePropertyName(version, node, filter.geometryName);
    format.prototype.writeGeometryElement(node, filter.extent, objectStack);
  }

  /**
   * @param {Element} node Element.
   * @param {import("./filter/ResourceId.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeResourceIdFilter(node, filter, objectStack) {
    node.setAttribute('rid', /** @type {string} */ (filter.rid));
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/Spatial.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeSpatialFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    parent['srsName'] = filter.srsName;
    const format = GML_FORMATS[version];

    writePropertyName(version, node, filter.geometryName);
    format.prototype.writeGeometryElement(node, filter.geometry, objectStack);
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/DWithin.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeDWithinFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    writeSpatialFilter(node, filter, objectStack);
    const distance = createElementNS(getFilterNS(version), 'Distance');
    writeStringTextNode(distance, filter.distance.toString());
    if (version === '2.0.0') {
      distance.setAttribute('uom', filter.unit);
    } else {
      distance.setAttribute('units', filter.unit);
    }
    node.appendChild(distance);
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/During.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeDuringFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];

    writeExpression(FESNS[version], 'ValueReference', node, filter.propertyName);
    const timePeriod = createElementNS(GMLNS, 'TimePeriod');

    node.appendChild(timePeriod);

    const begin = createElementNS(GMLNS, 'begin');
    timePeriod.appendChild(begin);
    writeTimeInstant(begin, filter.begin);

    const end = createElementNS(GMLNS, 'end');
    timePeriod.appendChild(end);
    writeTimeInstant(end, filter.end);
  }

  /**
   * @param {Element} node Node.
   * @param {import("./filter/LogicalNary.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeLogicalFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    /** @type {import("../xml.js").NodeStackItem} */
    const item = {node};
    Object.assign(item, {context});
    const conditions = filter.conditions;
    for (let i = 0, ii = conditions.length; i < ii; ++i) {
      const condition = conditions[i];
      pushSerializeAndPop(
        item,
        GETFEATURE_SERIALIZERS,
        makeSimpleNodeFactory(condition.getTagName()),
        [condition],
        objectStack,
      );
    }
  }

  /**
   * @param {Element} node Node.
   * @param {import("./filter/Not.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeNotFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    /** @type {import("../xml.js").NodeStackItem} */
    const item = {node};
    Object.assign(item, {context});
    const condition = filter.condition;
    pushSerializeAndPop(
      item,
      GETFEATURE_SERIALIZERS,
      makeSimpleNodeFactory(condition.getTagName()),
      [condition],
      objectStack,
    );
  }

  /**
   * @param {Element} node Node.
   * @param {import("./filter/ComparisonBinary.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeComparisonFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    if (filter.matchCase !== undefined) {
      node.setAttribute('matchCase', filter.matchCase.toString());
    }
    writePropertyName(version, node, filter.propertyName);
    writeLiteral(version, node, '' + filter.expression);
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/IsNull.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeIsNullFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    writePropertyName(version, node, filter.propertyName);
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/IsBetween.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeIsBetweenFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    const ns = getFilterNS(version);

    writePropertyName(version, node, filter.propertyName);

    const lowerBoundary = createElementNS(ns, 'LowerBoundary');
    node.appendChild(lowerBoundary);
    writeLiteral(version, lowerBoundary, '' + filter.lowerBoundary);

    const upperBoundary = createElementNS(ns, 'UpperBoundary');
    node.appendChild(upperBoundary);
    writeLiteral(version, upperBoundary, '' + filter.upperBoundary);
  }

  /**
   * @param {Element} node Node.
   * @param {import("./filter/IsLike.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeIsLikeFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    node.setAttribute('wildCard', filter.wildCard);
    node.setAttribute('singleChar', filter.singleChar);
    node.setAttribute('escapeChar', filter.escapeChar);
    if (filter.matchCase !== undefined) {
      node.setAttribute('matchCase', filter.matchCase.toString());
    }
    writePropertyName(version, node, filter.propertyName);
    writeLiteral(version, node, '' + filter.pattern);
  }

  /**
   * @param {string} ns Namespace.
   * @param {string} tagName Tag name.
   * @param {Node} node Node.
   * @param {string} value Value.
   */
  function writeExpression(ns, tagName, node, value) {
    const property = createElementNS(ns, tagName);
    writeStringTextNode(property, value);
    node.appendChild(property);
  }

  /**
   * @param {string} version Version.
   * @param {Node} node Node.
   * @param {string} value PropertyName value.
   */
  function writeLiteral(version, node, value) {
    writeExpression(getFilterNS(version), 'Literal', node, value);
  }

  /**
   * @param {string} version Version.
   * @param {Node} node Node.
   * @param {string} value PropertyName value.
   */
  function writePropertyName(version, node, value) {
    if (version === '2.0.0') {
      writeExpression(FESNS[version], 'ValueReference', node, value);
    } else {
      writeExpression(OGCNS[version], 'PropertyName', node, value);
    }
  }

  /**
   * @param {Node} node Node.
   * @param {string} time PropertyName value.
   */
  function writeTimeInstant(node, time) {
    const timeInstant = createElementNS(GMLNS, 'TimeInstant');
    node.appendChild(timeInstant);

    const timePosition = createElementNS(GMLNS, 'timePosition');
    timeInstant.appendChild(timePosition);
    writeStringTextNode(timePosition, time);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<string>} featureTypes Feature types.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeGetFeature(node, featureTypes, objectStack) {
    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const item = /** @type {import("../xml.js").NodeStackItem} */ (
      Object.assign({}, context)
    );
    item.node = node;
    pushSerializeAndPop(
      item,
      GETFEATURE_SERIALIZERS,
      makeSimpleNodeFactory('Query'),
      featureTypes,
      objectStack,
    );
  }

  function getFilterNS(version) {
    let ns;
    if (version === '2.0.0') {
      ns = FESNS[version];
    } else {
      ns = OGCNS[version];
    }
    return ns;
  }

  /**
   * @module ol/format/WKB
   */

  // WKB spec: https://www.ogc.org/standards/sfa
  // EWKB spec: https://raw.githubusercontent.com/postgis/postgis/2.1.0/doc/ZMSgeoms.txt

  /**
   * @const
   * @enum {number}
   */
  const WKBGeometryType = {
    POINT: 1,
    LINE_STRING: 2,
    POLYGON: 3,
    MULTI_POINT: 4,
    MULTI_LINE_STRING: 5,
    MULTI_POLYGON: 6,
    GEOMETRY_COLLECTION: 7,

    /*
    CIRCULAR_STRING: 8,
    COMPOUND_CURVE: 9,
    CURVE_POLYGON: 10,

    MULTI_CURVE: 11,
    MULTI_SURFACE: 12,
    CURVE: 13,
    SURFACE: 14,
    */

    POLYHEDRAL_SURFACE: 15,
    TIN: 16,
    TRIANGLE: 17,
  };

  class WkbReader {
    /**
     * @param {DataView} view source to read
     */
    constructor(view) {
      /** @private */
      this.view_ = view;

      /**
       * @type {number}
       * @private
       */
      this.pos_ = 0;

      /**
       * @type {boolean}
       * @private
       */
      this.initialized_ = false;

      /**
       * @type {boolean}
       * @private
       */
      this.isLittleEndian_ = false;

      /**
       * @type {boolean}
       * @private
       */
      this.hasZ_ = false;

      /**
       * @type {boolean}
       * @private
       */
      this.hasM_ = false;

      /**
       * @type {number|null}
       * @private
       */
      this.srid_ = null;

      /**
       * @type {import("../geom/Geometry.js").GeometryLayout}
       * @private
       */
      this.layout_ = 'XY';
    }

    /**
     * @return {number} value
     */
    readUint8() {
      return this.view_.getUint8(this.pos_++);
    }

    /**
     * @param {boolean} [isLittleEndian] Whether read value as little endian
     * @return {number} value
     */
    readUint32(isLittleEndian) {
      return this.view_.getUint32(
        (this.pos_ += 4) - 4,
        isLittleEndian !== undefined ? isLittleEndian : this.isLittleEndian_,
      );
    }

    /**
     * @param {boolean} [isLittleEndian] Whether read value as little endian
     * @return {number} value
     */
    readDouble(isLittleEndian) {
      return this.view_.getFloat64(
        (this.pos_ += 8) - 8,
        isLittleEndian !== undefined ? isLittleEndian : this.isLittleEndian_,
      );
    }

    /**
     * @return {import('../coordinate.js').Coordinate} coords for Point
     */
    readPoint() {
      /** @type {import('../coordinate.js').Coordinate} */
      const coords = [];

      coords.push(this.readDouble());
      coords.push(this.readDouble());
      if (this.hasZ_) {
        coords.push(this.readDouble());
      }
      if (this.hasM_) {
        coords.push(this.readDouble());
      }

      return coords;
    }

    /**
     * @return {Array<import('../coordinate.js').Coordinate>} coords for LineString / LinearRing
     */
    readLineString() {
      const numPoints = this.readUint32();

      /** @type {Array<import('../coordinate.js').Coordinate>} */
      const coords = [];
      for (let i = 0; i < numPoints; i++) {
        coords.push(this.readPoint());
      }

      return coords;
    }

    /**
     * @return {Array<Array<import('../coordinate.js').Coordinate>>} coords for Polygon like
     */
    readPolygon() {
      const numRings = this.readUint32();

      /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */
      const rings = [];
      for (let i = 0; i < numRings; i++) {
        rings.push(this.readLineString()); // as a LinearRing
      }

      return rings;
    }

    /**
     * @param {number} [expectedTypeId] Expected WKB Type ID
     * @return {number} WKB Type ID
     */
    readWkbHeader(expectedTypeId) {
      const byteOrder = this.readUint8();
      const isLittleEndian = byteOrder > 0;

      const wkbType = this.readUint32(isLittleEndian);
      const wkbTypeThousandth = Math.floor((wkbType & 0x0fffffff) / 1000);
      const hasZ =
        Boolean(wkbType & 0x80000000) ||
        wkbTypeThousandth === 1 ||
        wkbTypeThousandth === 3;
      const hasM =
        Boolean(wkbType & 0x40000000) ||
        wkbTypeThousandth === 2 ||
        wkbTypeThousandth === 3;
      const hasSRID = Boolean(wkbType & 0x20000000);
      const typeId = (wkbType & 0x0fffffff) % 1000; // Assume 1000 is an upper limit for type ID
      const layout = /** @type {import("../geom/Geometry.js").GeometryLayout} */ (
        ['XY', hasZ ? 'Z' : '', hasM ? 'M' : ''].join('')
      );

      const srid = hasSRID ? this.readUint32(isLittleEndian) : null;

      if (expectedTypeId !== undefined && expectedTypeId !== typeId) {
        throw new Error('Unexpected WKB geometry type ' + typeId);
      }

      if (this.initialized_) {
        // sanity checks
        if (this.isLittleEndian_ !== isLittleEndian) {
          throw new Error('Inconsistent endian');
        }
        if (this.layout_ !== layout) {
          throw new Error('Inconsistent geometry layout');
        }
        if (srid && this.srid_ !== srid) {
          throw new Error('Inconsistent coordinate system (SRID)');
        }
      } else {
        this.isLittleEndian_ = isLittleEndian;
        this.hasZ_ = hasZ;
        this.hasM_ = hasM;
        this.layout_ = layout;
        this.srid_ = srid;
        this.initialized_ = true;
      }

      return typeId;
    }

    /**
     * @param {number} typeId WKB Type ID
     * @return {any} values read
     */
    readWkbPayload(typeId) {
      switch (typeId) {
        case WKBGeometryType.POINT:
          return this.readPoint();

        case WKBGeometryType.LINE_STRING:
          return this.readLineString();

        case WKBGeometryType.POLYGON:
        case WKBGeometryType.TRIANGLE:
          return this.readPolygon();

        case WKBGeometryType.MULTI_POINT:
          return this.readMultiPoint();

        case WKBGeometryType.MULTI_LINE_STRING:
          return this.readMultiLineString();

        case WKBGeometryType.MULTI_POLYGON:
        case WKBGeometryType.POLYHEDRAL_SURFACE:
        case WKBGeometryType.TIN:
          return this.readMultiPolygon();

        case WKBGeometryType.GEOMETRY_COLLECTION:
          return this.readGeometryCollection();

        default:
          throw new Error(
            'Unsupported WKB geometry type ' + typeId + ' is found',
          );
      }
    }

    /**
     * @param {number} expectedTypeId Expected WKB Type ID
     * @return {any} values read
     */
    readWkbBlock(expectedTypeId) {
      return this.readWkbPayload(this.readWkbHeader(expectedTypeId));
    }

    /**
     * @param {Function} reader reader function for each item
     * @param {number} [expectedTypeId] Expected WKB Type ID
     * @return {any} values read
     */
    readWkbCollection(reader, expectedTypeId) {
      const num = this.readUint32();

      const items = [];
      for (let i = 0; i < num; i++) {
        const result = reader.call(this, expectedTypeId);
        if (result) {
          items.push(result);
        }
      }

      return items;
    }

    /**
     * @return {Array<import('../coordinate.js').Coordinate>} coords for MultiPoint
     */
    readMultiPoint() {
      return this.readWkbCollection(this.readWkbBlock, WKBGeometryType.POINT);
    }

    /**
     * @return {Array<Array<import('../coordinate.js').Coordinate>>} coords for MultiLineString like
     */
    readMultiLineString() {
      return this.readWkbCollection(
        this.readWkbBlock,
        WKBGeometryType.LINE_STRING,
      );
    }

    /**
     * @return {Array<Array<Array<import('../coordinate.js').Coordinate>>>} coords for MultiPolygon like
     */
    readMultiPolygon() {
      return this.readWkbCollection(this.readWkbBlock, WKBGeometryType.POLYGON);
    }

    /**
     * @return {Array<import('../geom/Geometry.js').default>} array of geometries
     */
    readGeometryCollection() {
      return this.readWkbCollection(this.readGeometry);
    }

    /**
     * @return {import('../geom/Geometry.js').default} geometry
     */
    readGeometry() {
      const typeId = this.readWkbHeader();
      const result = this.readWkbPayload(typeId);

      switch (typeId) {
        case WKBGeometryType.POINT:
          return new Point$1(
            /** @type {import('../coordinate.js').Coordinate} */ (result),
            this.layout_,
          );

        case WKBGeometryType.LINE_STRING:
          return new LineString(
            /** @type {Array<import('../coordinate.js').Coordinate>} */ (result),
            this.layout_,
          );

        case WKBGeometryType.POLYGON:
        case WKBGeometryType.TRIANGLE:
          return new Polygon(
            /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */ (
              result
            ),
            this.layout_,
          );

        case WKBGeometryType.MULTI_POINT:
          return new MultiPoint(
            /** @type {Array<import('../coordinate.js').Coordinate>} */ (result),
            this.layout_,
          );

        case WKBGeometryType.MULTI_LINE_STRING:
          return new MultiLineString(
            /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */ (
              result
            ),
            this.layout_,
          );

        case WKBGeometryType.MULTI_POLYGON:
        case WKBGeometryType.POLYHEDRAL_SURFACE:
        case WKBGeometryType.TIN:
          return new MultiPolygon(
            /** @type {Array<Array<Array<import('../coordinate.js').Coordinate>>>} */ (
              result
            ),
            this.layout_,
          );

        case WKBGeometryType.GEOMETRY_COLLECTION:
          return new GeometryCollection(
            /** @type {Array<import('../geom/Geometry.js').default>} */ (result),
          );

        default:
          return null;
      }
    }

    /**
     * @return {number|null} SRID in the EWKB. `null` if not defined.
     */
    getSrid() {
      return this.srid_;
    }
  }

  class WkbWriter {
    /**
     * @type {Object}
     * @property {string} [layout] geometryLayout
     * @property {boolean} [littleEndian=true] littleEndian
     * @property {boolean} [ewkb=true] Whether writes in EWKB format
     * @property {Object} [nodata] NoData value for each axes
     * @param {Object} opts options
     */
    constructor(opts) {
      opts = opts || {};

      /** @type {string} */
      this.layout_ = opts.layout;
      this.isLittleEndian_ = opts.littleEndian !== false;

      this.isEWKB_ = opts.ewkb !== false;

      /** @type {Array<Array<number>>} */
      this.writeQueue_ = [];

      /**
       * @type {Object}
       * @property {number} X NoData value for X
       * @property {number} Y NoData value for Y
       * @property {number} Z NoData value for Z
       * @property {number} M NoData value for M
       */
      this.nodata_ = Object.assign({X: 0, Y: 0, Z: 0, M: 0}, opts.nodata);
    }

    /**
     * @param {number} value value
     */
    writeUint8(value) {
      this.writeQueue_.push([1, value]);
    }

    /**
     * @param {number} value value
     */
    writeUint32(value) {
      this.writeQueue_.push([4, value]);
    }

    /**
     * @param {number} value value
     */
    writeDouble(value) {
      this.writeQueue_.push([8, value]);
    }

    /**
     * @param {import('../coordinate.js').Coordinate} coords coords
     * @param {import("../geom/Geometry.js").GeometryLayout} layout layout
     */
    writePoint(coords, layout) {
      /**
       * @type {Object}
       * @property {number} X NoData value for X
       * @property {number} Y NoData value for Y
       * @property {number} [Z] NoData value for Z
       * @property {number} [M] NoData value for M
       */
      const coordsObj = Object.assign.apply(
        null,
        layout.split('').map((axis, idx) => ({[axis]: coords[idx]})),
      );

      for (const axis of this.layout_) {
        this.writeDouble(
          axis in coordsObj ? coordsObj[axis] : this.nodata_[axis],
        );
      }
    }

    /**
     * @param {Array<import('../coordinate.js').Coordinate>} coords coords
     * @param {import("../geom/Geometry.js").GeometryLayout} layout layout
     */
    writeLineString(coords, layout) {
      this.writeUint32(coords.length); // numPoints
      for (let i = 0; i < coords.length; i++) {
        this.writePoint(coords[i], layout);
      }
    }

    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} rings rings
     * @param {import("../geom/Geometry.js").GeometryLayout} layout layout
     */
    writePolygon(rings, layout) {
      this.writeUint32(rings.length); // numRings
      for (let i = 0; i < rings.length; i++) {
        this.writeLineString(rings[i], layout); // as a LinearRing
      }
    }

    /**
     * @param {number} wkbType WKB Type ID
     * @param {number} [srid] SRID
     */
    writeWkbHeader(wkbType, srid) {
      wkbType %= 1000; // Assume 1000 is an upper limit for type ID
      if (this.layout_.includes('Z')) {
        wkbType += this.isEWKB_ ? 0x80000000 : 1000;
      }
      if (this.layout_.includes('M')) {
        wkbType += this.isEWKB_ ? 0x40000000 : 2000;
      }
      if (this.isEWKB_ && Number.isInteger(srid)) {
        wkbType |= 0x20000000;
      }

      this.writeUint8(this.isLittleEndian_ ? 1 : 0);
      this.writeUint32(wkbType);
      if (this.isEWKB_ && Number.isInteger(srid)) {
        this.writeUint32(srid);
      }
    }

    /**
     * @param {Array<import('../coordinate.js').Coordinate>} coords coords
     * @param {import("../geom/Geometry.js").GeometryLayout} layout layout
     */
    writeMultiPoint(coords, layout) {
      this.writeUint32(coords.length); // numItems
      for (let i = 0; i < coords.length; i++) {
        this.writeWkbHeader(1);
        this.writePoint(coords[i], layout);
      }
    }

    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} coords coords
     * @param {import("../geom/Geometry.js").GeometryLayout} layout layout
     */
    writeMultiLineString(coords, layout) {
      this.writeUint32(coords.length); // numItems
      for (let i = 0; i < coords.length; i++) {
        this.writeWkbHeader(2);
        this.writeLineString(coords[i], layout);
      }
    }

    /**
     * @param {Array<Array<Array<import('../coordinate.js').Coordinate>>>} coords coords
     * @param {import("../geom/Geometry.js").GeometryLayout} layout layout
     */
    writeMultiPolygon(coords, layout) {
      this.writeUint32(coords.length); // numItems
      for (let i = 0; i < coords.length; i++) {
        this.writeWkbHeader(3);
        this.writePolygon(coords[i], layout);
      }
    }

    /**
     * @param {Array<import('../geom/Geometry.js').default>} geometries geometries
     */
    writeGeometryCollection(geometries) {
      this.writeUint32(geometries.length); // numItems

      for (let i = 0; i < geometries.length; i++) {
        this.writeGeometry(geometries[i]);
      }
    }

    /**
     * @param {import("../geom/Geometry.js").default} geom geometry
     * @param {import("../geom/Geometry.js").GeometryLayout} [layout] layout
     * @return {import("../geom/Geometry.js").GeometryLayout} minimum layout made by common axes
     */
    findMinimumLayout(geom, layout = 'XYZM') {
      /**
       * @param {import("../geom/Geometry.js").GeometryLayout} a A
       * @param {import("../geom/Geometry.js").GeometryLayout} b B
       * @return {import("../geom/Geometry.js").GeometryLayout} minimum layout made by common axes
       */
      const GeometryLayout_min = (a, b) => {
        if (a === b) {
          return a;
        }

        if (a === 'XYZM') {
          // anything `b` is minimum
          return b;
        }
        if (b === 'XYZM') {
          // anything `a` is minimum
          return a;
        }

        // otherwise, incompatible
        return 'XY';
      };

      if (geom instanceof SimpleGeometry) {
        return GeometryLayout_min(geom.getLayout(), layout);
      }

      if (geom instanceof GeometryCollection) {
        const geoms = geom.getGeometriesArray();
        for (let i = 0; i < geoms.length && layout !== 'XY'; i++) {
          layout = this.findMinimumLayout(geoms[i], layout);
        }
      }

      return layout;
    }

    /**
     * @param {import("../geom/Geometry.js").default} geom geometry
     * @param {number} [srid] SRID
     */
    writeGeometry(geom, srid) {
      /**
       * @type {Object<import("../geom/Geometry.js").Type, WKBGeometryType>}
       */
      const wkblut = {
        Point: WKBGeometryType.POINT,
        LineString: WKBGeometryType.LINE_STRING,
        Polygon: WKBGeometryType.POLYGON,
        MultiPoint: WKBGeometryType.MULTI_POINT,
        MultiLineString: WKBGeometryType.MULTI_LINE_STRING,
        MultiPolygon: WKBGeometryType.MULTI_POLYGON,
        GeometryCollection: WKBGeometryType.GEOMETRY_COLLECTION,
      };
      const geomType = geom.getType();
      const typeId = wkblut[geomType];

      if (!typeId) {
        throw new Error('GeometryType ' + geomType + ' is not supported');
      }

      // first call of writeGeometry() traverse whole geometries to determine its output layout if not specified on constructor.
      if (!this.layout_) {
        this.layout_ = this.findMinimumLayout(geom);
      }

      this.writeWkbHeader(typeId, srid);

      if (geom instanceof SimpleGeometry) {
        const writerLUT = {
          Point: this.writePoint,
          LineString: this.writeLineString,
          Polygon: this.writePolygon,
          MultiPoint: this.writeMultiPoint,
          MultiLineString: this.writeMultiLineString,
          MultiPolygon: this.writeMultiPolygon,
        };
        writerLUT[geomType].call(this, geom.getCoordinates(), geom.getLayout());
      } else if (geom instanceof GeometryCollection) {
        this.writeGeometryCollection(geom.getGeometriesArray());
      }
    }

    getBuffer() {
      const byteLength = this.writeQueue_.reduce((acc, item) => acc + item[0], 0);
      const buffer = new ArrayBuffer(byteLength);
      const view = new DataView(buffer);

      let pos = 0;
      this.writeQueue_.forEach((item) => {
        switch (item[0]) {
          case 1:
            view.setUint8(pos, item[1]);
            break;
          case 4:
            view.setUint32(pos, item[1], this.isLittleEndian_);
            break;
          case 8:
            view.setFloat64(pos, item[1], this.isLittleEndian_);
            break;
        }

        pos += item[0];
      });

      return buffer;
    }
  }

  /**
   * @typedef {Object} Options
   * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into multiple features on reading.
   * @property {boolean} [hex=true] Returns hex string instead of ArrayBuffer for output. This also is used as a hint internally whether it should load contents as text or ArrayBuffer on reading.
   * @property {boolean} [littleEndian=true] Use littleEndian for output.
   * @property {boolean} [ewkb=true] Use EWKB format for output.
   * @property {import("../geom/Geometry.js").GeometryLayout} [geometryLayout=null] Use specific coordinate layout for output features (null: auto detect)
   * @property {number} [nodataZ=0] If the `geometryLayout` doesn't match with geometry to be output, this value is used to fill missing coordinate value of Z.
   * @property {number} [nodataM=0] If the `geometryLayout` doesn't match with geometry to be output, this value is used to fill missing coordinate value of M.
   * @property {number|boolean} [srid=true] SRID for output. Specify integer value to enforce the value as a SRID. Specify `true` to extract from `dataProjection`. `false` to suppress the output. This option only takes effect when `ewkb` is `true`.
   */

  /**
   * @classdesc
   * Geometry format for reading and writing data in the `Well-Known Binary` (WKB) format.
   * Also supports `Extended Well-Known Binary` (EWKB) format, used in PostGIS for example.
   *
   * @api
   */
  class WKB extends FeatureFormat {
    /**
     * @param {Options} [options] Optional configuration object.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      this.splitCollection = Boolean(options.splitCollection);

      this.viewCache_ = null;

      this.hex_ = options.hex !== false;
      this.littleEndian_ = options.littleEndian !== false;
      this.ewkb_ = options.ewkb !== false;

      this.layout_ = options.geometryLayout; // null for auto detect
      this.nodataZ_ = options.nodataZ || 0;
      this.nodataM_ = options.nodataM || 0;

      this.srid_ = options.srid;
    }

    /**
     * @return {import("./Feature.js").Type} Format.
     * @override
     */
    getType() {
      return this.hex_ ? 'text' : 'arraybuffer';
    }

    /**
     * Read a single feature from a source.
     *
     * @param {string|ArrayBuffer|ArrayBufferView} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../Feature.js").default} Feature.
     * @api
     * @override
     */
    readFeature(source, options) {
      return new Feature({
        geometry: this.readGeometry(source, options),
      });
    }

    /**
     * Read all features from a source.
     *
     * @param {string|ArrayBuffer|ArrayBufferView} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     * @override
     */
    readFeatures(source, options) {
      let geometries = [];
      const geometry = this.readGeometry(source, options);
      if (this.splitCollection && geometry instanceof GeometryCollection) {
        geometries = geometry.getGeometriesArray();
      } else {
        geometries = [geometry];
      }
      return geometries.map((geometry) => new Feature({geometry}));
    }

    /**
     * Read a single geometry from a source.
     *
     * @param {string|ArrayBuffer|ArrayBufferView} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @api
     * @override
     */
    readGeometry(source, options) {
      const view = getDataView(source);
      if (!view) {
        return null;
      }

      const reader = new WkbReader(view);
      const geometry = reader.readGeometry();

      this.viewCache_ = view; // cache for internal subsequent call of readProjection()
      options = this.getReadOptions(source, options);
      this.viewCache_ = null; // release

      return transformGeometryWithOptions(geometry, false, options);
    }

    /**
     * Read the projection from a source.
     *
     * @param {string|ArrayBuffer|ArrayBufferView} source Source.
     * @return {import("../proj/Projection.js").default|undefined} Projection.
     * @api
     * @override
     */
    readProjection(source) {
      const view = this.viewCache_ || getDataView(source);
      if (!view) {
        return undefined;
      }

      const reader = new WkbReader(view);
      reader.readWkbHeader();

      return (
        (reader.getSrid() && get$2('EPSG:' + reader.getSrid())) ||
        undefined
      );
    }

    /**
     * Encode a feature in this format.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string|ArrayBuffer} Result.
     * @api
     * @override
     */
    writeFeature(feature, options) {
      return this.writeGeometry(feature.getGeometry(), options);
    }

    /**
     * Encode an array of features in this format.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string|ArrayBuffer} Result.
     * @api
     * @override
     */
    writeFeatures(features, options) {
      return this.writeGeometry(
        new GeometryCollection(features.map((f) => f.getGeometry())),
        options,
      );
    }

    /**
     * Write a single geometry in this format.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string|ArrayBuffer} Result.
     * @api
     * @override
     */
    writeGeometry(geometry, options) {
      options = this.adaptOptions(options);

      const writer = new WkbWriter({
        layout: this.layout_,
        littleEndian: this.littleEndian_,
        ewkb: this.ewkb_,

        nodata: {
          Z: this.nodataZ_,
          M: this.nodataM_,
        },
      });

      // extract SRID from `dataProjection`
      let srid = Number.isInteger(this.srid_) ? Number(this.srid_) : null;
      if (this.srid_ !== false && !Number.isInteger(this.srid_)) {
        const dataProjection =
          options.dataProjection && get$2(options.dataProjection);
        if (dataProjection) {
          const code = dataProjection.getCode();
          if (code.startsWith('EPSG:')) {
            srid = Number(code.substring(5));
          }
        }
      }

      writer.writeGeometry(
        transformGeometryWithOptions(geometry, true, options),
        srid,
      );
      const buffer = writer.getBuffer();

      return this.hex_ ? encodeHexString(buffer) : buffer;
    }
  }

  /**
   * @param {ArrayBuffer} buffer source buffer
   * @return {string} encoded hex string
   */
  function encodeHexString(buffer) {
    const view = new Uint8Array(buffer);
    return Array.from(view.values())
      .map((x) => (x < 16 ? '0' : '') + Number(x).toString(16).toUpperCase())
      .join('');
  }

  /**
   * @param {string} text source text
   * @return {DataView} decoded binary buffer
   */
  function decodeHexString(text) {
    const buffer = new Uint8Array(text.length / 2);
    for (let i = 0; i < text.length / 2; i++) {
      buffer[i] = parseInt(text.substr(i * 2, 2), 16);
    }
    return new DataView(buffer.buffer);
  }

  /**
   * @param {string | ArrayBuffer | ArrayBufferView} source source
   * @return {DataView} data view
   */
  function getDataView(source) {
    if (typeof source === 'string') {
      return decodeHexString(source);
    }
    if (ArrayBuffer.isView(source)) {
      if (source instanceof DataView) {
        return source;
      }
      return new DataView(source.buffer, source.byteOffset, source.byteLength);
    }
    if (source instanceof ArrayBuffer) {
      return new DataView(source);
    }
    return null;
  }

  /**
   * @module ol/format/WKT
   */

  /**
   * Geometry constructors
   * @enum {function (new:import("../geom/Geometry.js").default, Array, import("../geom/Geometry.js").GeometryLayout)}
   */
  const GeometryConstructor = {
    'POINT': Point$1,
    'LINESTRING': LineString,
    'POLYGON': Polygon,
    'MULTIPOINT': MultiPoint,
    'MULTILINESTRING': MultiLineString,
    'MULTIPOLYGON': MultiPolygon,
  };

  /**
   * @typedef {Object} Options
   * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into
   * multiple features on reading.
   */

  /**
   * @typedef {Object} Token
   * @property {number} type Type.
   * @property {number|string} [value] Value.
   * @property {number} position Position.
   */

  /**
   * @const
   * @type {string}
   */
  const EMPTY = 'EMPTY';

  /**
   * @const
   * @type {string}
   */
  const Z$1 = 'Z';

  /**
   * @const
   * @type {string}
   */
  const M$1 = 'M';

  /**
   * @const
   * @type {string}
   */
  const ZM = 'ZM';

  /**
   * @const
   * @enum {number}
   */
  const TokenType = {
    START: 0,
    TEXT: 1,
    LEFT_PAREN: 2,
    RIGHT_PAREN: 3,
    NUMBER: 4,
    COMMA: 5,
    EOF: 6,
  };

  /**
   * @type {Object<import("../geom/Geometry.js").Type, string>}
   */
  const wktTypeLookup = {
    Point: 'POINT',
    LineString: 'LINESTRING',
    Polygon: 'POLYGON',
    MultiPoint: 'MULTIPOINT',
    MultiLineString: 'MULTILINESTRING',
    MultiPolygon: 'MULTIPOLYGON',
    GeometryCollection: 'GEOMETRYCOLLECTION',
    Circle: 'CIRCLE',
  };

  /**
   * Class to tokenize a WKT string.
   */
  class Lexer {
    /**
     * @param {string} wkt WKT string.
     */
    constructor(wkt) {
      /**
       * @type {string}
       */
      this.wkt = wkt;

      /**
       * @type {number}
       * @private
       */
      this.index_ = -1;
    }

    /**
     * @param {string} c Character.
     * @return {boolean} Whether the character is alphabetic.
     * @private
     */
    isAlpha_(c) {
      return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
    }

    /**
     * @param {string} c Character.
     * @param {boolean} [decimal] Whether the string number
     *     contains a dot, i.e. is a decimal number.
     * @return {boolean} Whether the character is numeric.
     * @private
     */
    isNumeric_(c, decimal) {
      decimal = decimal !== undefined ? decimal : false;
      return (c >= '0' && c <= '9') || (c == '.' && !decimal);
    }

    /**
     * @param {string} c Character.
     * @return {boolean} Whether the character is whitespace.
     * @private
     */
    isWhiteSpace_(c) {
      return c == ' ' || c == '\t' || c == '\r' || c == '\n';
    }

    /**
     * @return {string} Next string character.
     * @private
     */
    nextChar_() {
      return this.wkt.charAt(++this.index_);
    }

    /**
     * Fetch and return the next token.
     * @return {Token} Next string token.
     */
    nextToken() {
      const c = this.nextChar_();
      const position = this.index_;
      /** @type {number|string} */
      let value = c;
      let type;

      if (c == '(') {
        type = TokenType.LEFT_PAREN;
      } else if (c == ',') {
        type = TokenType.COMMA;
      } else if (c == ')') {
        type = TokenType.RIGHT_PAREN;
      } else if (this.isNumeric_(c) || c == '-') {
        type = TokenType.NUMBER;
        value = this.readNumber_();
      } else if (this.isAlpha_(c)) {
        type = TokenType.TEXT;
        value = this.readText_();
      } else if (this.isWhiteSpace_(c)) {
        return this.nextToken();
      } else if (c === '') {
        type = TokenType.EOF;
      } else {
        throw new Error('Unexpected character: ' + c);
      }

      return {position: position, value: value, type: type};
    }

    /**
     * @return {number} Numeric token value.
     * @private
     */
    readNumber_() {
      let c;
      const index = this.index_;
      let decimal = false;
      let scientificNotation = false;
      do {
        if (c == '.') {
          decimal = true;
        } else if (c == 'e' || c == 'E') {
          scientificNotation = true;
        }
        c = this.nextChar_();
      } while (
        this.isNumeric_(c, decimal) ||
        // if we haven't detected a scientific number before, 'e' or 'E'
        // hint that we should continue to read
        (!scientificNotation && (c == 'e' || c == 'E')) ||
        // once we know that we have a scientific number, both '-' and '+'
        // are allowed
        (scientificNotation && (c == '-' || c == '+'))
      );
      return parseFloat(this.wkt.substring(index, this.index_--));
    }

    /**
     * @return {string} String token value.
     * @private
     */
    readText_() {
      let c;
      const index = this.index_;
      do {
        c = this.nextChar_();
      } while (this.isAlpha_(c));
      return this.wkt.substring(index, this.index_--).toUpperCase();
    }
  }

  /**
   * Class to parse the tokens from the WKT string.
   */
  let Parser$1 = class Parser {
    /**
     * @param {Lexer} lexer The lexer.
     */
    constructor(lexer) {
      /**
       * @type {Lexer}
       * @private
       */
      this.lexer_ = lexer;

      /**
       * @type {Token}
       * @private
       */
      this.token_ = {
        position: 0,
        type: TokenType.START,
      };

      /**
       * @type {import("../geom/Geometry.js").GeometryLayout}
       * @private
       */
      this.layout_ = 'XY';
    }

    /**
     * Fetch the next token form the lexer and replace the active token.
     * @private
     */
    consume_() {
      this.token_ = this.lexer_.nextToken();
    }

    /**
     * Tests if the given type matches the type of the current token.
     * @param {TokenType} type Token type.
     * @return {boolean} Whether the token matches the given type.
     */
    isTokenType(type) {
      return this.token_.type == type;
    }

    /**
     * If the given type matches the current token, consume it.
     * @param {TokenType} type Token type.
     * @return {boolean} Whether the token matches the given type.
     */
    match(type) {
      const isMatch = this.isTokenType(type);
      if (isMatch) {
        this.consume_();
      }
      return isMatch;
    }

    /**
     * Try to parse the tokens provided by the lexer.
     * @return {import("../geom/Geometry.js").default} The geometry.
     */
    parse() {
      this.consume_();
      return this.parseGeometry_();
    }

    /**
     * Try to parse the dimensional info.
     * @return {import("../geom/Geometry.js").GeometryLayout} The layout.
     * @private
     */
    parseGeometryLayout_() {
      /** @type {import("../geom/Geometry.js").GeometryLayout} */
      let layout = 'XY';
      const dimToken = this.token_;
      if (this.isTokenType(TokenType.TEXT)) {
        const dimInfo = dimToken.value;
        if (dimInfo === Z$1) {
          layout = 'XYZ';
        } else if (dimInfo === M$1) {
          layout = 'XYM';
        } else if (dimInfo === ZM) {
          layout = 'XYZM';
        }
        if (layout !== 'XY') {
          this.consume_();
        }
      }
      return layout;
    }

    /**
     * @return {Array<import("../geom/Geometry.js").default>} A collection of geometries.
     * @private
     */
    parseGeometryCollectionText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const geometries = [];
        do {
          geometries.push(this.parseGeometry_());
        } while (this.match(TokenType.COMMA));
        if (this.match(TokenType.RIGHT_PAREN)) {
          return geometries;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<number>} All values in a point.
     * @private
     */
    parsePointText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parsePoint_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<number>>} All points in a linestring.
     * @private
     */
    parseLineStringText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parsePointList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<Array<number>>>} All points in a polygon.
     * @private
     */
    parsePolygonText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parseLineStringTextList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<number>>} All points in a multipoint.
     * @private
     */
    parseMultiPointText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        let coordinates;
        if (this.token_.type == TokenType.LEFT_PAREN) {
          coordinates = this.parsePointTextList_();
        } else {
          coordinates = this.parsePointList_();
        }
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<Array<number>>>} All linestring points
     *                                          in a multilinestring.
     * @private
     */
    parseMultiLineStringText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parseLineStringTextList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<Array<Array<number>>>>} All polygon points in a multipolygon.
     * @private
     */
    parseMultiPolygonText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parsePolygonTextList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<number>} A point.
     * @private
     */
    parsePoint_() {
      const coordinates = [];
      const dimensions = this.layout_.length;
      for (let i = 0; i < dimensions; ++i) {
        const token = this.token_;
        if (this.match(TokenType.NUMBER)) {
          coordinates.push(/** @type {number} */ (token.value));
        } else {
          break;
        }
      }
      if (coordinates.length == dimensions) {
        return coordinates;
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<number>>} An array of points.
     * @private
     */
    parsePointList_() {
      const coordinates = [this.parsePoint_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parsePoint_());
      }
      return coordinates;
    }

    /**
     * @return {Array<Array<number>>} An array of points.
     * @private
     */
    parsePointTextList_() {
      const coordinates = [this.parsePointText_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parsePointText_());
      }
      return coordinates;
    }

    /**
     * @return {Array<Array<Array<number>>>} An array of points.
     * @private
     */
    parseLineStringTextList_() {
      const coordinates = [this.parseLineStringText_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parseLineStringText_());
      }
      return coordinates;
    }

    /**
     * @return {Array<Array<Array<Array<number>>>>} An array of points.
     * @private
     */
    parsePolygonTextList_() {
      const coordinates = [this.parsePolygonText_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parsePolygonText_());
      }
      return coordinates;
    }

    /**
     * @return {boolean} Whether the token implies an empty geometry.
     * @private
     */
    isEmptyGeometry_() {
      const isEmpty =
        this.isTokenType(TokenType.TEXT) && this.token_.value == EMPTY;
      if (isEmpty) {
        this.consume_();
      }
      return isEmpty;
    }

    /**
     * Create an error message for an unexpected token error.
     * @return {string} Error message.
     * @private
     */
    formatErrorMessage_() {
      return (
        'Unexpected `' +
        this.token_.value +
        '` at position ' +
        this.token_.position +
        ' in `' +
        this.lexer_.wkt +
        '`'
      );
    }

    /**
     * @return {import("../geom/Geometry.js").default} The geometry.
     * @private
     */
    parseGeometry_() {
      const token = this.token_;
      if (this.match(TokenType.TEXT)) {
        const geomType = /** @type {string} */ (token.value);
        this.layout_ = this.parseGeometryLayout_();
        const isEmpty = this.isEmptyGeometry_();
        if (geomType == 'GEOMETRYCOLLECTION') {
          if (isEmpty) {
            return new GeometryCollection([]);
          }
          const geometries = this.parseGeometryCollectionText_();
          return new GeometryCollection(geometries);
        }
        const ctor = GeometryConstructor[geomType];
        if (!ctor) {
          throw new Error('Invalid geometry type: ' + geomType);
        }

        let coordinates;

        if (isEmpty) {
          if (geomType == 'POINT') {
            coordinates = [NaN, NaN];
          } else {
            coordinates = [];
          }
        } else {
          switch (geomType) {
            case 'POINT': {
              coordinates = this.parsePointText_();
              break;
            }
            case 'LINESTRING': {
              coordinates = this.parseLineStringText_();
              break;
            }
            case 'POLYGON': {
              coordinates = this.parsePolygonText_();
              break;
            }
            case 'MULTIPOINT': {
              coordinates = this.parseMultiPointText_();
              break;
            }
            case 'MULTILINESTRING': {
              coordinates = this.parseMultiLineStringText_();
              break;
            }
            case 'MULTIPOLYGON': {
              coordinates = this.parseMultiPolygonText_();
              break;
            }
          }
        }

        return new ctor(coordinates, this.layout_);
      }
      throw new Error(this.formatErrorMessage_());
    }
  };

  /**
   * @classdesc
   * Geometry format for reading and writing data in the `WellKnownText` (WKT)
   * format.
   *
   * @api
   */
  class WKT extends TextFeature {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * Split GeometryCollection into multiple features.
       * @type {boolean}
       * @private
       */
      this.splitCollection_ =
        options.splitCollection !== undefined ? options.splitCollection : false;
    }

    /**
     * Parse a WKT string.
     * @param {string} wkt WKT string.
     * @return {import("../geom/Geometry.js").default}
     *     The geometry created.
     * @private
     */
    parse_(wkt) {
      const lexer = new Lexer(wkt);
      const parser = new Parser$1(lexer);
      return parser.parse();
    }

    /**
     * @protected
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../Feature.js").default} Feature.
     * @override
     */
    readFeatureFromText(text, options) {
      const geom = this.readGeometryFromText(text, options);
      const feature = new Feature();
      feature.setGeometry(geom);
      return feature;
    }

    /**
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<Feature>} Features.
     * @override
     */
    readFeaturesFromText(text, options) {
      let geometries = [];
      const geometry = this.readGeometryFromText(text, options);
      if (this.splitCollection_ && geometry.getType() == 'GeometryCollection') {
        geometries = /** @type {GeometryCollection} */ (
          geometry
        ).getGeometriesArray();
      } else {
        geometries = [geometry];
      }
      const features = [];
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        const feature = new Feature();
        feature.setGeometry(geometries[i]);
        features.push(feature);
      }
      return features;
    }

    /**
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @override
     */
    readGeometryFromText(text, options) {
      const geometry = this.parse_(text);
      return transformGeometryWithOptions(geometry, false, options);
    }

    /**
     * @param {import("../Feature.js").default} feature Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     * @override
     */
    writeFeatureText(feature, options) {
      const geometry = feature.getGeometry();
      if (geometry) {
        return this.writeGeometryText(geometry, options);
      }
      return '';
    }

    /**
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     * @override
     */
    writeFeaturesText(features, options) {
      if (features.length == 1) {
        return this.writeFeatureText(features[0], options);
      }
      const geometries = [];
      for (let i = 0, ii = features.length; i < ii; ++i) {
        geometries.push(features[i].getGeometry());
      }
      const collection = new GeometryCollection(geometries);
      return this.writeGeometryText(collection, options);
    }

    /**
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     * @override
     */
    writeGeometryText(geometry, options) {
      return encode$1(transformGeometryWithOptions(geometry, true, options));
    }
  }

  /**
   * @param {Point} geom Point geometry.
   * @return {string} Coordinates part of Point as WKT.
   */
  function encodePointGeometry(geom) {
    const coordinates = geom.getCoordinates();
    if (coordinates.length === 0) {
      return '';
    }
    return coordinates.join(' ');
  }

  /**
   * @param {MultiPoint} geom MultiPoint geometry.
   * @return {string} Coordinates part of MultiPoint as WKT.
   */
  function encodeMultiPointGeometry(geom) {
    const array = [];
    const components = geom.getPoints();
    for (let i = 0, ii = components.length; i < ii; ++i) {
      array.push('(' + encodePointGeometry(components[i]) + ')');
    }
    return array.join(',');
  }

  /**
   * @param {GeometryCollection} geom GeometryCollection geometry.
   * @return {string} Coordinates part of GeometryCollection as WKT.
   */
  function encodeGeometryCollectionGeometry(geom) {
    const array = [];
    const geoms = geom.getGeometries();
    for (let i = 0, ii = geoms.length; i < ii; ++i) {
      array.push(encode$1(geoms[i]));
    }
    return array.join(',');
  }

  /**
   * @param {LineString|import("../geom/LinearRing.js").default} geom LineString geometry.
   * @return {string} Coordinates part of LineString as WKT.
   */
  function encodeLineStringGeometry(geom) {
    const coordinates = geom.getCoordinates();
    const array = [];
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      array.push(coordinates[i].join(' '));
    }
    return array.join(',');
  }

  /**
   * @param {MultiLineString} geom MultiLineString geometry.
   * @return {string} Coordinates part of MultiLineString as WKT.
   */
  function encodeMultiLineStringGeometry(geom) {
    const array = [];
    const components = geom.getLineStrings();
    for (let i = 0, ii = components.length; i < ii; ++i) {
      array.push('(' + encodeLineStringGeometry(components[i]) + ')');
    }
    return array.join(',');
  }

  /**
   * @param {Polygon} geom Polygon geometry.
   * @return {string} Coordinates part of Polygon as WKT.
   */
  function encodePolygonGeometry(geom) {
    const array = [];
    const rings = geom.getLinearRings();
    for (let i = 0, ii = rings.length; i < ii; ++i) {
      array.push('(' + encodeLineStringGeometry(rings[i]) + ')');
    }
    return array.join(',');
  }

  /**
   * @param {MultiPolygon} geom MultiPolygon geometry.
   * @return {string} Coordinates part of MultiPolygon as WKT.
   */
  function encodeMultiPolygonGeometry(geom) {
    const array = [];
    const components = geom.getPolygons();
    for (let i = 0, ii = components.length; i < ii; ++i) {
      array.push('(' + encodePolygonGeometry(components[i]) + ')');
    }
    return array.join(',');
  }

  /**
   * @param {import("../geom/SimpleGeometry.js").default} geom SimpleGeometry geometry.
   * @return {string} Potential dimensional information for WKT type.
   */
  function encodeGeometryLayout(geom) {
    const layout = geom.getLayout();
    let dimInfo = '';
    if (layout === 'XYZ' || layout === 'XYZM') {
      dimInfo += Z$1;
    }
    if (layout === 'XYM' || layout === 'XYZM') {
      dimInfo += M$1;
    }
    return dimInfo;
  }

  /**
   * @const
   * @type {Object<string, function(import("../geom/Geometry.js").default): string>}
   */
  const GeometryEncoder = {
    'Point': encodePointGeometry,
    'LineString': encodeLineStringGeometry,
    'Polygon': encodePolygonGeometry,
    'MultiPoint': encodeMultiPointGeometry,
    'MultiLineString': encodeMultiLineStringGeometry,
    'MultiPolygon': encodeMultiPolygonGeometry,
    'GeometryCollection': encodeGeometryCollectionGeometry,
  };

  /**
   * Encode a geometry as WKT.
   * @param {import("../geom/Geometry.js").default} geom The geometry to encode.
   * @return {string} WKT string for the geometry.
   */
  function encode$1(geom) {
    const type = geom.getType();
    const geometryEncoder = GeometryEncoder[type];
    const enc = geometryEncoder(geom);
    let wktType = wktTypeLookup[type];
    if (typeof (/** @type {?} */ (geom).getFlatCoordinates) === 'function') {
      const dimInfo = encodeGeometryLayout(
        /** @type {import("../geom/SimpleGeometry.js").default} */ (geom),
      );
      if (dimInfo.length > 0) {
        wktType += ' ' + dimInfo;
      }
    }
    if (enc.length === 0) {
      return wktType + ' ' + EMPTY;
    }
    return wktType + '(' + enc + ')';
  }

  /**
   * @module ol/format/WMSCapabilities
   */

  /**
   * @const
   * @type {Array<null|string>}
   */
  const NAMESPACE_URIS$1 = [null, 'http://www.opengis.net/wms'];

  function isV13(objectStack) {
    return compareVersions(objectStack[0].version, '1.3') >= 0;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const PARSERS$1 = makeStructureNS(NAMESPACE_URIS$1, {
    'Service': makeObjectPropertySetter(readService),
    'Capability': makeObjectPropertySetter(readCapability),
  });

  const COMMON_CAPABILITY_PARSERS = {
    'Request': makeObjectPropertySetter(readRequest),
    'Exception': makeObjectPropertySetter(readException),
    'Layer': makeObjectPropertySetter(readCapabilityLayer),
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const CAPABILITY_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    ...COMMON_CAPABILITY_PARSERS,
    'UserDefinedSymbolization': makeObjectPropertySetter(
      readUserDefinedSymbolization,
    ),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const CAPABILITY_PARSERS_V13 = makeStructureNS(
    NAMESPACE_URIS$1,
    COMMON_CAPABILITY_PARSERS,
  );

  /**
   * @typedef {Object} RootObject
   * @property {string} version Version
   * @property {boolean} v13 Whether version is 1.3 or higher
   */

  /**
   * @classdesc
   * Format for reading WMS capabilities data
   *
   * @api
   */
  class WMSCapabilities extends XML {
    constructor() {
      super();

      /**
       * @type {string|undefined}
       */
      this.version = undefined;
    }

    /**
     * @param {Element} node Node.
     * @return {Object|null} Object
     * @override
     */
    readFromNode(node) {
      this.version = node.getAttribute('version').trim();
      const wmsCapabilityObject = pushParseAndPop(
        {
          'version': this.version,
        },
        PARSERS$1,
        node,
        [],
      );
      return wmsCapabilityObject ? wmsCapabilityObject : null;
    }
  }

  const COMMON_SERVICE_PARSERS = {
    'Name': makeObjectPropertySetter(readString),
    'Title': makeObjectPropertySetter(readString),
    'Abstract': makeObjectPropertySetter(readString),
    'KeywordList': makeObjectPropertySetter(readKeywordList),
    'OnlineResource': makeObjectPropertySetter(readHref),
    'ContactInformation': makeObjectPropertySetter(readContactInformation),
    'Fees': makeObjectPropertySetter(readString),
    'AccessConstraints': makeObjectPropertySetter(readString),
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const SERVICE_PARSERS = makeStructureNS(NAMESPACE_URIS$1, COMMON_SERVICE_PARSERS);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const SERVICE_PARSERS_V13 = makeStructureNS(NAMESPACE_URIS$1, {
    ...COMMON_SERVICE_PARSERS,
    'LayerLimit': makeObjectPropertySetter(readPositiveInteger),
    'MaxWidth': makeObjectPropertySetter(readPositiveInteger),
    'MaxHeight': makeObjectPropertySetter(readPositiveInteger),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const CONTACT_INFORMATION_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'ContactPersonPrimary': makeObjectPropertySetter(readContactPersonPrimary),
    'ContactPosition': makeObjectPropertySetter(readString),
    'ContactAddress': makeObjectPropertySetter(readContactAddress),
    'ContactVoiceTelephone': makeObjectPropertySetter(readString),
    'ContactFacsimileTelephone': makeObjectPropertySetter(readString),
    'ContactElectronicMailAddress': makeObjectPropertySetter(readString),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const CONTACT_PERSON_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'ContactPerson': makeObjectPropertySetter(readString),
    'ContactOrganization': makeObjectPropertySetter(readString),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const CONTACT_ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'AddressType': makeObjectPropertySetter(readString),
    'Address': makeObjectPropertySetter(readString),
    'City': makeObjectPropertySetter(readString),
    'StateOrProvince': makeObjectPropertySetter(readString),
    'PostCode': makeObjectPropertySetter(readString),
    'Country': makeObjectPropertySetter(readString),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const EXCEPTION_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'Format': makeArrayPusher(readString),
  });

  const COMMON_LAYER_PARSERS = {
    'Name': makeObjectPropertySetter(readString),
    'Title': makeObjectPropertySetter(readString),
    'Abstract': makeObjectPropertySetter(readString),
    'KeywordList': makeObjectPropertySetter(readKeywordList),
    'BoundingBox': makeObjectPropertyPusher(readBoundingBox$1),
    'Dimension': makeObjectPropertyPusher(readDimension),
    'Attribution': makeObjectPropertySetter(readAttribution),
    'AuthorityURL': makeObjectPropertyPusher(readAuthorityURL),
    'Identifier': makeObjectPropertyPusher(readString),
    'MetadataURL': makeObjectPropertyPusher(readMetadataURL),
    'DataURL': makeObjectPropertyPusher(readFormatOnlineresource),
    'FeatureListURL': makeObjectPropertyPusher(readFormatOnlineresource),
    'Style': makeObjectPropertyPusher(readStyle$1),
    'Layer': makeObjectPropertyPusher(readLayer$1),
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LAYER_PARSERS$1 = makeStructureNS(NAMESPACE_URIS$1, {
    ...COMMON_LAYER_PARSERS,
    'SRS': makeObjectPropertyPusher(readString),
    'Extent': makeObjectPropertySetter(readExtent),
    'ScaleHint': makeObjectPropertyPusher(readScaleHint),
    'LatLonBoundingBox': makeObjectPropertySetter((node, objectStack) =>
      readBoundingBox$1(node, objectStack, false),
    ),
    'Layer': makeObjectPropertyPusher(readLayer$1),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LAYER_PARSERS_V13 = makeStructureNS(NAMESPACE_URIS$1, {
    ...COMMON_LAYER_PARSERS,
    'CRS': makeObjectPropertyPusher(readString),
    'EX_GeographicBoundingBox': makeObjectPropertySetter(
      readEXGeographicBoundingBox,
    ),
    'MinScaleDenominator': makeObjectPropertySetter(readDecimal),
    'MaxScaleDenominator': makeObjectPropertySetter(readDecimal),
    'Layer': makeObjectPropertyPusher(readLayer$1),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const ATTRIBUTION_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'Title': makeObjectPropertySetter(readString),
    'OnlineResource': makeObjectPropertySetter(readHref),
    'LogoURL': makeObjectPropertySetter(readSizedFormatOnlineresource),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'westBoundLongitude': makeObjectPropertySetter(readDecimal),
    'eastBoundLongitude': makeObjectPropertySetter(readDecimal),
    'southBoundLatitude': makeObjectPropertySetter(readDecimal),
    'northBoundLatitude': makeObjectPropertySetter(readDecimal),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const REQUEST_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'GetCapabilities': makeObjectPropertySetter(readOperationType),
    'GetMap': makeObjectPropertySetter(readOperationType),
    'GetFeatureInfo': makeObjectPropertySetter(readOperationType),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const OPERATIONTYPE_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'Format': makeObjectPropertyPusher(readString),
    'DCPType': makeObjectPropertyPusher(readDCPType),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const DCPTYPE_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'HTTP': makeObjectPropertySetter(readHTTP),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const HTTP_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'Get': makeObjectPropertySetter(readFormatOnlineresource),
    'Post': makeObjectPropertySetter(readFormatOnlineresource),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const STYLE_PARSERS$1 = makeStructureNS(NAMESPACE_URIS$1, {
    'Name': makeObjectPropertySetter(readString),
    'Title': makeObjectPropertySetter(readString),
    'Abstract': makeObjectPropertySetter(readString),
    'LegendURL': makeObjectPropertyPusher(readSizedFormatOnlineresource),
    'StyleSheetURL': makeObjectPropertySetter(readFormatOnlineresource),
    'StyleURL': makeObjectPropertySetter(readFormatOnlineresource),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const FORMAT_ONLINERESOURCE_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'Format': makeObjectPropertySetter(readString),
    'OnlineResource': makeObjectPropertySetter(readHref),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const KEYWORDLIST_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
    'Keyword': makeArrayPusher(readString),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Attribution object.
   */
  function readAttribution(node, objectStack) {
    return pushParseAndPop({}, ATTRIBUTION_PARSERS, node, objectStack);
  }

  function readUserDefinedSymbolization(node, objectStack) {
    return {
      'SupportSLD': !!readBooleanString(
        node.getAttribute('UserDefinedSymbolization'),
      ),
      'UserLayer': !!readBooleanString(node.getAttribute('UserLayer')),
      'UserStyle': !!readBooleanString(node.getAttribute('UserStyle')),
      'RemoteWFS': !!readBooleanString(node.getAttribute('RemoteWFS')),
    };
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @param {boolean} withCrs Whether to include the CRS attribute.
   * @return {Object} Bounding box object.
   */
  function readBoundingBox$1(node, objectStack, withCrs = true) {
    const extent = [
      readDecimalString(node.getAttribute('minx')),
      readDecimalString(node.getAttribute('miny')),
      readDecimalString(node.getAttribute('maxx')),
      readDecimalString(node.getAttribute('maxy')),
    ];

    const resolutions = [
      readDecimalString(node.getAttribute('resx')),
      readDecimalString(node.getAttribute('resy')),
    ];

    const result = {
      extent,
      res: resolutions,
    };
    if (!withCrs) {
      return result;
    }

    /** @type {RootObject} */
    if (isV13(objectStack)) {
      result.crs = node.getAttribute('CRS');
    } else {
      result.srs = node.getAttribute('SRS');
    }

    return result;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {import("../extent.js").Extent|undefined} Bounding box object.
   */
  function readEXGeographicBoundingBox(node, objectStack) {
    const geographicBoundingBox = pushParseAndPop(
      {},
      EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS,
      node,
      objectStack,
    );
    if (!geographicBoundingBox) {
      return undefined;
    }
    const westBoundLongitude =
      /** @type {number|undefined} */
      (geographicBoundingBox['westBoundLongitude']);
    const southBoundLatitude =
      /** @type {number|undefined} */
      (geographicBoundingBox['southBoundLatitude']);
    const eastBoundLongitude =
      /** @type {number|undefined} */
      (geographicBoundingBox['eastBoundLongitude']);
    const northBoundLatitude =
      /** @type {number|undefined} */
      (geographicBoundingBox['northBoundLatitude']);
    if (
      westBoundLongitude === undefined ||
      southBoundLatitude === undefined ||
      eastBoundLongitude === undefined ||
      northBoundLatitude === undefined
    ) {
      return undefined;
    }
    return [
      westBoundLongitude,
      southBoundLatitude,
      eastBoundLongitude,
      northBoundLatitude,
    ];
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Capability object.
   */
  function readCapability(node, objectStack) {
    return pushParseAndPop(
      {},
      isV13(objectStack) ? CAPABILITY_PARSERS_V13 : CAPABILITY_PARSERS,
      node,
      objectStack,
    );
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Service object.
   */
  function readService(node, objectStack) {
    return pushParseAndPop(
      {},
      isV13(objectStack) ? SERVICE_PARSERS_V13 : SERVICE_PARSERS,
      node,
      objectStack,
    );
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Contact information object.
   */
  function readContactInformation(node, objectStack) {
    return pushParseAndPop({}, CONTACT_INFORMATION_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Contact person object.
   */
  function readContactPersonPrimary(node, objectStack) {
    return pushParseAndPop({}, CONTACT_PERSON_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Contact address object.
   */
  function readContactAddress(node, objectStack) {
    return pushParseAndPop({}, CONTACT_ADDRESS_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<string>|undefined} Format array.
   */
  function readException(node, objectStack) {
    return pushParseAndPop([], EXCEPTION_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Layer object.
   */
  function readCapabilityLayer(node, objectStack) {
    const layerObject = pushParseAndPop(
      {},
      isV13(objectStack) ? LAYER_PARSERS_V13 : LAYER_PARSERS$1,
      node,
      objectStack,
    );

    if (layerObject['Layer'] === undefined) {
      return Object.assign(layerObject, readLayer$1(node, objectStack));
    }

    return layerObject;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Layer object.
   */
  function readLayer$1(node, objectStack) {
    const v13 = isV13(objectStack);

    const parentLayerObject = /**  @type {!Object<string,*>} */ (
      objectStack[objectStack.length - 1]
    );

    const layerObject = pushParseAndPop(
      {},
      v13 ? LAYER_PARSERS_V13 : LAYER_PARSERS$1,
      node,
      objectStack,
    );

    if (!layerObject) {
      return undefined;
    }
    let queryable = readBooleanString(node.getAttribute('queryable'));
    if (queryable === undefined) {
      queryable = parentLayerObject['queryable'];
    }
    layerObject['queryable'] = queryable !== undefined ? queryable : false;

    let cascaded = readNonNegativeIntegerString(node.getAttribute('cascaded'));
    if (cascaded === undefined) {
      cascaded = parentLayerObject['cascaded'];
    }
    layerObject['cascaded'] = cascaded;

    let opaque = readBooleanString(node.getAttribute('opaque'));
    if (opaque === undefined) {
      opaque = parentLayerObject['opaque'];
    }
    layerObject['opaque'] = opaque !== undefined ? opaque : false;

    let noSubsets = readBooleanString(node.getAttribute('noSubsets'));
    if (noSubsets === undefined) {
      noSubsets = parentLayerObject['noSubsets'];
    }
    layerObject['noSubsets'] = noSubsets !== undefined ? noSubsets : false;

    let fixedWidth = readDecimalString(node.getAttribute('fixedWidth'));
    if (!fixedWidth) {
      fixedWidth = parentLayerObject['fixedWidth'];
    }
    layerObject['fixedWidth'] = fixedWidth;

    let fixedHeight = readDecimalString(node.getAttribute('fixedHeight'));
    if (!fixedHeight) {
      fixedHeight = parentLayerObject['fixedHeight'];
    }
    layerObject['fixedHeight'] = fixedHeight;

    // See 7.2.4.8
    const addKeys = ['Style', 'AuthorityURL'];
    if (v13) {
      addKeys.push('CRS');
    } else {
      addKeys.push('SRS', 'Dimension');
    }
    addKeys.forEach(function (key) {
      if (key in parentLayerObject) {
        const childValue = layerObject[key] || [];
        layerObject[key] = childValue.concat(parentLayerObject[key]);
      }
    });

    const replaceKeys = ['BoundingBox', 'Attribution'];
    if (v13) {
      replaceKeys.push(
        'Dimension',
        'EX_GeographicBoundingBox',
        'MinScaleDenominator',
        'MaxScaleDenominator',
      );
    } else {
      replaceKeys.push('LatLonBoundingBox', 'ScaleHint', 'Extent');
    }
    replaceKeys.forEach(function (key) {
      if (!(key in layerObject)) {
        const parentValue = parentLayerObject[key];
        layerObject[key] = parentValue;
      }
    });

    return layerObject;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object} Dimension object.
   */
  function readDimension(node, objectStack) {
    const dimensionObject = {
      'name': node.getAttribute('name'),
      'units': node.getAttribute('units'),
      'unitSymbol': node.getAttribute('unitSymbol'),
    };

    if (isV13(objectStack)) {
      Object.assign(dimensionObject, {
        'default': node.getAttribute('default'),
        'multipleValues': readBooleanString(node.getAttribute('multipleValues')),
        'nearestValue': readBooleanString(node.getAttribute('nearestValue')),
        'current': readBooleanString(node.getAttribute('current')),
        'values': readString(node),
      });
    }
    return dimensionObject;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object} Extent object.
   */
  function readExtent(node, objectStack) {
    return {
      'name': node.getAttribute('name'),
      'default': node.getAttribute('default'),
      'nearestValue': readBooleanString(node.getAttribute('nearestValue')),
    };
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object} ScaleHint object.
   */
  function readScaleHint(node, objectStack) {
    return {
      'min': readDecimalString(node.getAttribute('min')),
      'max': readDecimalString(node.getAttribute('max')),
    };
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Online resource object.
   */
  function readFormatOnlineresource(node, objectStack) {
    return pushParseAndPop({}, FORMAT_ONLINERESOURCE_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Request object.
   */
  function readRequest(node, objectStack) {
    return pushParseAndPop({}, REQUEST_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} DCP type object.
   */
  function readDCPType(node, objectStack) {
    return pushParseAndPop({}, DCPTYPE_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} HTTP object.
   */
  function readHTTP(node, objectStack) {
    return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Operation type object.
   */
  function readOperationType(node, objectStack) {
    return pushParseAndPop({}, OPERATIONTYPE_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Online resource object.
   */
  function readSizedFormatOnlineresource(node, objectStack) {
    const formatOnlineresource = readFormatOnlineresource(node, objectStack);
    if (formatOnlineresource) {
      const size = [
        readNonNegativeIntegerString(node.getAttribute('width')),
        readNonNegativeIntegerString(node.getAttribute('height')),
      ];
      formatOnlineresource['size'] = size;
      return formatOnlineresource;
    }
    return undefined;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Authority URL object.
   */
  function readAuthorityURL(node, objectStack) {
    const authorityObject = readFormatOnlineresource(node, objectStack);
    if (authorityObject) {
      authorityObject['name'] = node.getAttribute('name');
      return authorityObject;
    }
    return undefined;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Metadata URL object.
   */
  function readMetadataURL(node, objectStack) {
    const metadataObject = readFormatOnlineresource(node, objectStack);
    if (metadataObject) {
      metadataObject['type'] = node.getAttribute('type');
      return metadataObject;
    }
    return undefined;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Style object.
   */
  function readStyle$1(node, objectStack) {
    return pushParseAndPop({}, STYLE_PARSERS$1, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<string>|undefined} Keyword list.
   */
  function readKeywordList(node, objectStack) {
    return pushParseAndPop([], KEYWORDLIST_PARSERS, node, objectStack);
  }

  /**
   * @module ol/format/WMSGetFeatureInfo
   */

  /**
   * @typedef {Object} Options
   * @property {Array<string>} [layers] If set, only features of the given layers will be returned by the format when read.
   */

  /**
   * @const
   * @type {string}
   */
  const featureIdentifier = '_feature';

  /**
   * @const
   * @type {string}
   */
  const layerIdentifier = '_layer';

  /**
   * @classdesc
   * Format for reading WMSGetFeatureInfo format. It uses
   * {@link module:ol/format/GML2~GML2} to read features.
   *
   * @api
   */
  class WMSGetFeatureInfo extends XMLFeature {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @private
       * @type {string}
       */
      this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';

      /**
       * @private
       * @type {GML2}
       */
      this.gmlFormat_ = new GML2();

      /**
       * @private
       * @type {Array<string>|null}
       */
      this.layers_ = options.layers ? options.layers : null;
    }

    /**
     * @return {Array<string>|null} layers
     */
    getLayers() {
      return this.layers_;
    }

    /**
     * @param {Array<string>|null} layers Layers to parse.
     */
    setLayers(layers) {
      this.layers_ = layers;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<import("../Feature.js").default>} Features.
     * @private
     */
    readFeatures_(node, objectStack) {
      node.setAttribute('namespaceURI', this.featureNS_);
      const localName = node.localName;
      /** @type {Array<import("../Feature.js").default>} */
      let features = [];
      if (node.childNodes.length === 0) {
        return features;
      }
      if (localName == 'msGMLOutput') {
        for (let i = 0, ii = node.childNodes.length; i < ii; i++) {
          const layer = node.childNodes[i];
          if (layer.nodeType !== Node.ELEMENT_NODE) {
            continue;
          }

          const layerElement = /** @type {Element} */ (layer);
          const context = objectStack[0];

          const toRemove = layerIdentifier;
          const layerName = layerElement.localName.replace(toRemove, '');

          if (this.layers_ && !this.layers_.includes(layerName)) {
            continue;
          }

          const featureType = layerName + featureIdentifier;

          context['featureType'] = featureType;
          context['featureNS'] = this.featureNS_;

          /** @type {Object<string, import("../xml.js").Parser>} */
          const parsers = {};
          parsers[featureType] = makeArrayPusher(
            this.gmlFormat_.readFeatureElement,
            this.gmlFormat_,
          );
          const parsersNS = makeStructureNS(
            [context['featureNS'], null],
            parsers,
          );
          layerElement.setAttribute('namespaceURI', this.featureNS_);
          const layerFeatures = pushParseAndPop(
            [],
            // @ts-ignore
            parsersNS,
            layerElement,
            objectStack,
            this.gmlFormat_,
          );
          if (layerFeatures) {
            extend$3(features, layerFeatures);
          }
        }
      }
      if (localName == 'FeatureCollection') {
        const gmlFeatures = pushParseAndPop(
          [],
          this.gmlFormat_.FEATURE_COLLECTION_PARSERS,
          node,
          [{}],
          this.gmlFormat_,
        );
        if (gmlFeatures) {
          features = gmlFeatures;
        }
      }
      return features;
    }

    /**
     * @protected
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @override
     */
    readFeaturesFromNode(node, options) {
      const internalOptions = {};
      if (options) {
        Object.assign(internalOptions, this.getReadOptions(node, options));
      }
      return this.readFeatures_(node, [internalOptions]);
    }
  }

  /**
   * @module ol/format/WMTSCapabilities
   */

  /**
   * @const
   * @type {Array<null|string>}
   */
  const NAMESPACE_URIS = [null, 'http://www.opengis.net/wmts/1.0'];

  /**
   * @const
   * @type {Array<null|string>}
   */
  const OWS_NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'Contents': makeObjectPropertySetter(readContents),
  });

  /**
   * @classdesc
   * Format for reading WMTS capabilities data.
   *
   * @api
   */
  class WMTSCapabilities extends XML {
    constructor() {
      super();

      /**
       * @type {OWS}
       * @private
       */
      this.owsParser_ = new OWS();
    }

    /**
     * @param {Element} node Node.
     * @return {Object|null} Object
     * @override
     */
    readFromNode(node) {
      let version = node.getAttribute('version');
      if (version) {
        version = version.trim();
      }
      let WMTSCapabilityObject = this.owsParser_.readFromNode(node);
      if (!WMTSCapabilityObject) {
        return null;
      }
      WMTSCapabilityObject['version'] = version;
      WMTSCapabilityObject = pushParseAndPop(
        WMTSCapabilityObject,
        PARSERS,
        node,
        [],
      );
      return WMTSCapabilityObject ? WMTSCapabilityObject : null;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const CONTENTS_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'Layer': makeObjectPropertyPusher(readLayer),
    'TileMatrixSet': makeObjectPropertyPusher(readTileMatrixSet),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LAYER_PARSERS = makeStructureNS(
    NAMESPACE_URIS,
    {
      'Style': makeObjectPropertyPusher(readStyle),
      'Format': makeObjectPropertyPusher(readString),
      'TileMatrixSetLink': makeObjectPropertyPusher(readTileMatrixSetLink),
      'Dimension': makeObjectPropertyPusher(readDimensions),
      'ResourceURL': makeObjectPropertyPusher(readResourceUrl),
    },
    makeStructureNS(OWS_NAMESPACE_URIS, {
      'Title': makeObjectPropertySetter(readString),
      'Abstract': makeObjectPropertySetter(readString),
      'WGS84BoundingBox': makeObjectPropertySetter(readBoundingBox),
      'BoundingBox': makeObjectPropertyPusher(readBoundingBoxWithCrs),
      'Identifier': makeObjectPropertySetter(readString),
    }),
  );

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const STYLE_PARSERS = makeStructureNS(
    NAMESPACE_URIS,
    {
      'LegendURL': makeObjectPropertyPusher(readLegendUrl),
    },
    makeStructureNS(OWS_NAMESPACE_URIS, {
      'Title': makeObjectPropertySetter(readString),
      'Identifier': makeObjectPropertySetter(readString),
    }),
  );

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const TMS_LINKS_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'TileMatrixSet': makeObjectPropertySetter(readString),
    'TileMatrixSetLimits': makeObjectPropertySetter(readTileMatrixLimitsList),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const TMS_LIMITS_LIST_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'TileMatrixLimits': makeArrayPusher(readTileMatrixLimits),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const TMS_LIMITS_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'TileMatrix': makeObjectPropertySetter(readString),
    'MinTileRow': makeObjectPropertySetter(readPositiveInteger),
    'MaxTileRow': makeObjectPropertySetter(readPositiveInteger),
    'MinTileCol': makeObjectPropertySetter(readPositiveInteger),
    'MaxTileCol': makeObjectPropertySetter(readPositiveInteger),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const DIMENSION_PARSERS = makeStructureNS(
    NAMESPACE_URIS,
    {
      'Default': makeObjectPropertySetter(readString),
      'Value': makeObjectPropertyPusher(readString),
    },
    makeStructureNS(OWS_NAMESPACE_URIS, {
      'Identifier': makeObjectPropertySetter(readString),
    }),
  );

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const WGS84_BBOX_READERS = makeStructureNS(OWS_NAMESPACE_URIS, {
    'LowerCorner': makeArrayPusher(readCoordinates),
    'UpperCorner': makeArrayPusher(readCoordinates),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const TMS_PARSERS = makeStructureNS(
    NAMESPACE_URIS,
    {
      'WellKnownScaleSet': makeObjectPropertySetter(readString),
      'TileMatrix': makeObjectPropertyPusher(readTileMatrix),
    },
    makeStructureNS(OWS_NAMESPACE_URIS, {
      'SupportedCRS': makeObjectPropertySetter(readString),
      'Identifier': makeObjectPropertySetter(readString),
      'BoundingBox': makeObjectPropertySetter(readBoundingBox),
    }),
  );

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const TM_PARSERS = makeStructureNS(
    NAMESPACE_URIS,
    {
      'TopLeftCorner': makeObjectPropertySetter(readCoordinates),
      'ScaleDenominator': makeObjectPropertySetter(readDecimal),
      'TileWidth': makeObjectPropertySetter(readPositiveInteger),
      'TileHeight': makeObjectPropertySetter(readPositiveInteger),
      'MatrixWidth': makeObjectPropertySetter(readPositiveInteger),
      'MatrixHeight': makeObjectPropertySetter(readPositiveInteger),
    },
    makeStructureNS(OWS_NAMESPACE_URIS, {
      'Identifier': makeObjectPropertySetter(readString),
    }),
  );

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Attribution object.
   */
  function readContents(node, objectStack) {
    return pushParseAndPop({}, CONTENTS_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Layers object.
   */
  function readLayer(node, objectStack) {
    return pushParseAndPop({}, LAYER_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Tile Matrix Set object.
   */
  function readTileMatrixSet(node, objectStack) {
    return pushParseAndPop({}, TMS_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Style object.
   */
  function readStyle(node, objectStack) {
    const style = pushParseAndPop({}, STYLE_PARSERS, node, objectStack);
    if (!style) {
      return undefined;
    }
    const isDefault = node.getAttribute('isDefault') === 'true';
    style['isDefault'] = isDefault;
    return style;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Tile Matrix Set Link object.
   */
  function readTileMatrixSetLink(node, objectStack) {
    return pushParseAndPop({}, TMS_LINKS_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Dimension object.
   */
  function readDimensions(node, objectStack) {
    return pushParseAndPop({}, DIMENSION_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Resource URL object.
   */
  function readResourceUrl(node, objectStack) {
    const format = node.getAttribute('format');
    const template = node.getAttribute('template');
    const resourceType = node.getAttribute('resourceType');
    const resource = {};
    if (format) {
      resource['format'] = format;
    }
    if (template) {
      resource['template'] = template;
    }
    if (resourceType) {
      resource['resourceType'] = resourceType;
    }
    return resource;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} BBox object.
   */
  function readBoundingBox(node, objectStack) {
    const coordinates = pushParseAndPop(
      [],
      WGS84_BBOX_READERS,
      node,
      objectStack,
    );
    if (coordinates.length != 2) {
      return undefined;
    }
    return boundingExtent(coordinates);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} BBox object.
   */
  function readBoundingBoxWithCrs(node, objectStack) {
    const crs = node.getAttribute('crs');
    const coordinates = pushParseAndPop(
      [],
      WGS84_BBOX_READERS,
      node,
      objectStack,
    );
    if (coordinates.length != 2) {
      return undefined;
    }
    return {extent: boundingExtent(coordinates), crs: crs};
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Legend object.
   */
  function readLegendUrl(node, objectStack) {
    const legend = {};
    legend['format'] = node.getAttribute('format');
    legend['href'] = readHref(node);
    return legend;
  }

  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Coordinates object.
   */
  function readCoordinates(node, objectStack) {
    const coordinates = readString(node).split(/\s+/);
    if (!coordinates || coordinates.length != 2) {
      return undefined;
    }
    const x = +coordinates[0];
    const y = +coordinates[1];
    if (isNaN(x) || isNaN(y)) {
      return undefined;
    }
    return [x, y];
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} TileMatrix object.
   */
  function readTileMatrix(node, objectStack) {
    return pushParseAndPop({}, TM_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} TileMatrixSetLimits Object.
   */
  function readTileMatrixLimitsList(node, objectStack) {
    return pushParseAndPop([], TMS_LIMITS_LIST_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} TileMatrixLimits Array.
   */
  function readTileMatrixLimits(node, objectStack) {
    return pushParseAndPop({}, TMS_LIMITS_PARSERS, node, objectStack);
  }

  /**
   * @module ol/format
   */

  var format = /*#__PURE__*/Object.freeze({
    __proto__: null,
    EsriJSON: EsriJSON,
    GML: GML,
    GPX: GPX,
    GeoJSON: GeoJSON,
    IGC: IGC,
    IIIFInfo: IIIFInfo,
    KML: KML,
    MVT: MVT,
    OWS: OWS,
    Polyline: Polyline,
    TopoJSON: TopoJSON,
    WFS: WFS,
    WKB: WKB,
    WKT: WKT,
    WMSCapabilities: WMSCapabilities,
    WMSGetFeatureInfo: WMSGetFeatureInfo,
    WMTSCapabilities: WMTSCapabilities
  });

  /**
   * @module ol/render/VectorContext
   */

  /**
   * @classdesc
   * Context for drawing geometries.  A vector context is available on render
   * events and does not need to be constructed directly.
   * @api
   */
  class VectorContext {
    /**
     * Render a geometry with a custom renderer.
     *
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {Function} renderer Renderer.
     * @param {Function} hitDetectionRenderer Renderer.
     * @param {number} [index] Render order index.
     */
    drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {}

    /**
     * Render a geometry.
     *
     * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
     */
    drawGeometry(geometry) {}

    /**
     * Set the rendering style.
     *
     * @param {import("../style/Style.js").default} style The rendering style.
     */
    setStyle(style) {}

    /**
     * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {number} [index] Render order index.
     */
    drawCircle(circleGeometry, feature, index) {}

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("../style/Style.js").default} style Style.
     * @param {number} [index] Render order index.
     */
    drawFeature(feature, style, index) {}

    /**
     * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {number} [index] Render order index.
     */
    drawGeometryCollection(geometryCollectionGeometry, feature, index) {}

    /**
     * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     */
    drawLineString(lineStringGeometry, feature, index) {}

    /**
     * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     */
    drawMultiLineString(multiLineStringGeometry, feature, index) {}

    /**
     * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     */
    drawMultiPoint(multiPointGeometry, feature, index) {}

    /**
     * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     */
    drawMultiPolygon(multiPolygonGeometry, feature, index) {}

    /**
     * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     */
    drawPoint(pointGeometry, feature, index) {}

    /**
     * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     */
    drawPolygon(polygonGeometry, feature, index) {}

    /**
     * @param {import("../geom/SimpleGeometry.js").default|import("./Feature.js").default} geometry Geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     */
    drawText(geometry, feature, index) {}

    /**
     * @param {import("../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
     */
    setFillStrokeStyle(fillStyle, strokeStyle) {}

    /**
     * @param {import("../style/Image.js").default} imageStyle Image style.
     * @param {import("../render/canvas.js").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.
     */
    setImageStyle(imageStyle, declutterImageWithText) {}

    /**
     * @param {import("../style/Text.js").default} textStyle Text style.
     * @param {import("../render/canvas.js").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.
     */
    setTextStyle(textStyle, declutterImageWithText) {}
  }

  /**
   * @module ol/render/canvas/Instruction
   */

  /**
   * @enum {number}
   */
  const Instruction = {
    BEGIN_GEOMETRY: 0,
    BEGIN_PATH: 1,
    CIRCLE: 2,
    CLOSE_PATH: 3,
    CUSTOM: 4,
    DRAW_CHARS: 5,
    DRAW_IMAGE: 6,
    END_GEOMETRY: 7,
    FILL: 8,
    MOVE_TO_LINE_TO: 9,
    SET_FILL_STYLE: 10,
    SET_STROKE_STYLE: 11,
    STROKE: 12,
  };

  /**
   * @type {Array<Instruction>}
   */
  const fillInstruction = [Instruction.FILL];

  /**
   * @type {Array<Instruction>}
   */
  const strokeInstruction = [Instruction.STROKE];

  /**
   * @type {Array<Instruction>}
   */
  const beginPathInstruction = [Instruction.BEGIN_PATH];

  /**
   * @type {Array<Instruction>}
   */
  const closePathInstruction = [Instruction.CLOSE_PATH];

  /**
   * @module ol/render/canvas/Builder
   */

  class CanvasBuilder extends VectorContext {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super();

      /**
       * @protected
       * @type {number}
       */
      this.tolerance = tolerance;

      /**
       * @protected
       * @const
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent = maxExtent;

      /**
       * @protected
       * @type {number}
       */
      this.pixelRatio = pixelRatio;

      /**
       * @protected
       * @type {number}
       */
      this.maxLineWidth = 0;

      /**
       * @protected
       * @const
       * @type {number}
       */
      this.resolution = resolution;

      /**
       * @private
       * @type {Array<*>}
       */
      this.beginGeometryInstruction1_ = null;

      /**
       * @private
       * @type {Array<*>}
       */
      this.beginGeometryInstruction2_ = null;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.bufferedMaxExtent_ = null;

      /**
       * @protected
       * @type {Array<*>}
       */
      this.instructions = [];

      /**
       * @protected
       * @type {Array<number>}
       */
      this.coordinates = [];

      /**
       * @private
       * @type {import("../../coordinate.js").Coordinate}
       */
      this.tmpCoordinate_ = [];

      /**
       * @protected
       * @type {Array<*>}
       */
      this.hitDetectionInstructions = [];

      /**
       * @protected
       * @type {import("../canvas.js").FillStrokeState}
       */
      this.state = /** @type {import("../canvas.js").FillStrokeState} */ ({});
    }

    /**
     * @protected
     * @param {Array<number>} dashArray Dash array.
     * @return {Array<number>} Dash array with pixel ratio applied
     */
    applyPixelRatio(dashArray) {
      const pixelRatio = this.pixelRatio;
      return pixelRatio == 1
        ? dashArray
        : dashArray.map(function (dash) {
            return dash * pixelRatio;
          });
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} stride Stride.
     * @protected
     * @return {number} My end
     */
    appendFlatPointCoordinates(flatCoordinates, stride) {
      const extent = this.getBufferedMaxExtent();
      const tmpCoord = this.tmpCoordinate_;
      const coordinates = this.coordinates;
      let myEnd = coordinates.length;
      for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        tmpCoord[0] = flatCoordinates[i];
        tmpCoord[1] = flatCoordinates[i + 1];
        if (containsCoordinate(extent, tmpCoord)) {
          coordinates[myEnd++] = tmpCoord[0];
          coordinates[myEnd++] = tmpCoord[1];
        }
      }
      return myEnd;
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} closed Last input coordinate equals first.
     * @param {boolean} skipFirst Skip first coordinate.
     * @protected
     * @return {number} My end.
     */
    appendFlatLineCoordinates(
      flatCoordinates,
      offset,
      end,
      stride,
      closed,
      skipFirst,
    ) {
      const coordinates = this.coordinates;
      let myEnd = coordinates.length;
      const extent = this.getBufferedMaxExtent();
      if (skipFirst) {
        offset += stride;
      }
      let lastXCoord = flatCoordinates[offset];
      let lastYCoord = flatCoordinates[offset + 1];
      const nextCoord = this.tmpCoordinate_;
      let skipped = true;

      let i, lastRel, nextRel;
      for (i = offset + stride; i < end; i += stride) {
        nextCoord[0] = flatCoordinates[i];
        nextCoord[1] = flatCoordinates[i + 1];
        nextRel = coordinateRelationship(extent, nextCoord);
        if (nextRel !== lastRel) {
          if (skipped) {
            coordinates[myEnd++] = lastXCoord;
            coordinates[myEnd++] = lastYCoord;
            skipped = false;
          }
          coordinates[myEnd++] = nextCoord[0];
          coordinates[myEnd++] = nextCoord[1];
        } else if (nextRel === Relationship.INTERSECTING) {
          coordinates[myEnd++] = nextCoord[0];
          coordinates[myEnd++] = nextCoord[1];
          skipped = false;
        } else {
          skipped = true;
        }
        lastXCoord = nextCoord[0];
        lastYCoord = nextCoord[1];
        lastRel = nextRel;
      }

      // Last coordinate equals first or only one point to append:
      if ((closed && skipped) || i === offset + stride) {
        coordinates[myEnd++] = lastXCoord;
        coordinates[myEnd++] = lastYCoord;
      }
      return myEnd;
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<number>} builderEnds Builder ends.
     * @return {number} Offset.
     */
    drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const builderEnd = this.appendFlatLineCoordinates(
          flatCoordinates,
          offset,
          end,
          stride,
          false,
          false,
        );
        builderEnds.push(builderEnd);
        offset = end;
      }
      return offset;
    }

    /**
     * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {Function} renderer Renderer.
     * @param {Function} hitDetectionRenderer Renderer.
     * @param {number} [index] Render order index.
     * @override
     */
    drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {
      this.beginGeometry(geometry, feature, index);

      const type = geometry.getType();
      const stride = geometry.getStride();
      const builderBegin = this.coordinates.length;

      let flatCoordinates, builderEnd, builderEnds, builderEndss;
      let offset;

      switch (type) {
        case 'MultiPolygon':
          flatCoordinates =
            /** @type {import("../../geom/MultiPolygon.js").default} */ (
              geometry
            ).getOrientedFlatCoordinates();
          builderEndss = [];
          const endss =
            /** @type {import("../../geom/MultiPolygon.js").default} */ (
              geometry
            ).getEndss();
          offset = 0;
          for (let i = 0, ii = endss.length; i < ii; ++i) {
            const myEnds = [];
            offset = this.drawCustomCoordinates_(
              flatCoordinates,
              offset,
              endss[i],
              stride,
              myEnds,
            );
            builderEndss.push(myEnds);
          }
          this.instructions.push([
            Instruction.CUSTOM,
            builderBegin,
            builderEndss,
            geometry,
            renderer,
            inflateMultiCoordinatesArray,
            index,
          ]);
          this.hitDetectionInstructions.push([
            Instruction.CUSTOM,
            builderBegin,
            builderEndss,
            geometry,
            hitDetectionRenderer || renderer,
            inflateMultiCoordinatesArray,
            index,
          ]);
          break;
        case 'Polygon':
        case 'MultiLineString':
          builderEnds = [];
          flatCoordinates =
            type == 'Polygon'
              ? /** @type {import("../../geom/Polygon.js").default} */ (
                  geometry
                ).getOrientedFlatCoordinates()
              : geometry.getFlatCoordinates();
          offset = this.drawCustomCoordinates_(
            flatCoordinates,
            0,
            /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ (
              geometry
            ).getEnds(),
            stride,
            builderEnds,
          );
          this.instructions.push([
            Instruction.CUSTOM,
            builderBegin,
            builderEnds,
            geometry,
            renderer,
            inflateCoordinatesArray,
            index,
          ]);
          this.hitDetectionInstructions.push([
            Instruction.CUSTOM,
            builderBegin,
            builderEnds,
            geometry,
            hitDetectionRenderer || renderer,
            inflateCoordinatesArray,
            index,
          ]);
          break;
        case 'LineString':
        case 'Circle':
          flatCoordinates = geometry.getFlatCoordinates();
          builderEnd = this.appendFlatLineCoordinates(
            flatCoordinates,
            0,
            flatCoordinates.length,
            stride,
            false,
            false,
          );
          this.instructions.push([
            Instruction.CUSTOM,
            builderBegin,
            builderEnd,
            geometry,
            renderer,
            inflateCoordinates,
            index,
          ]);
          this.hitDetectionInstructions.push([
            Instruction.CUSTOM,
            builderBegin,
            builderEnd,
            geometry,
            hitDetectionRenderer || renderer,
            inflateCoordinates,
            index,
          ]);
          break;
        case 'MultiPoint':
          flatCoordinates = geometry.getFlatCoordinates();
          builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);

          if (builderEnd > builderBegin) {
            this.instructions.push([
              Instruction.CUSTOM,
              builderBegin,
              builderEnd,
              geometry,
              renderer,
              inflateCoordinates,
              index,
            ]);
            this.hitDetectionInstructions.push([
              Instruction.CUSTOM,
              builderBegin,
              builderEnd,
              geometry,
              hitDetectionRenderer || renderer,
              inflateCoordinates,
              index,
            ]);
          }
          break;
        case 'Point':
          flatCoordinates = geometry.getFlatCoordinates();
          this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
          builderEnd = this.coordinates.length;

          this.instructions.push([
            Instruction.CUSTOM,
            builderBegin,
            builderEnd,
            geometry,
            renderer,
            undefined,
            index,
          ]);
          this.hitDetectionInstructions.push([
            Instruction.CUSTOM,
            builderBegin,
            builderEnd,
            geometry,
            hitDetectionRenderer || renderer,
            undefined,
            index,
          ]);
          break;
      }
      this.endGeometry(feature);
    }

    /**
     * @protected
     * @param {import("../../geom/Geometry").default|import("../Feature.js").default} geometry The geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} index Render order index
     */
    beginGeometry(geometry, feature, index) {
      this.beginGeometryInstruction1_ = [
        Instruction.BEGIN_GEOMETRY,
        feature,
        0,
        geometry,
        index,
      ];
      this.instructions.push(this.beginGeometryInstruction1_);
      this.beginGeometryInstruction2_ = [
        Instruction.BEGIN_GEOMETRY,
        feature,
        0,
        geometry,
        index,
      ];
      this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
    }

    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     */
    finish() {
      return {
        instructions: this.instructions,
        hitDetectionInstructions: this.hitDetectionInstructions,
        coordinates: this.coordinates,
      };
    }

    /**
     * Reverse the hit detection instructions.
     */
    reverseHitDetectionInstructions() {
      const hitDetectionInstructions = this.hitDetectionInstructions;
      // step 1 - reverse array
      hitDetectionInstructions.reverse();
      // step 2 - reverse instructions within geometry blocks
      let i;
      const n = hitDetectionInstructions.length;
      let instruction;
      let type;
      let begin = -1;
      for (i = 0; i < n; ++i) {
        instruction = hitDetectionInstructions[i];
        type = /** @type {import("./Instruction.js").default} */ (instruction[0]);
        if (type == Instruction.END_GEOMETRY) {
          begin = i;
        } else if (type == Instruction.BEGIN_GEOMETRY) {
          instruction[2] = i;
          reverseSubArray(this.hitDetectionInstructions, begin, i);
          begin = -1;
        }
      }
    }

    /**
     * @param {import("../../style/Fill.js").default} fillStyle Fill style.
     * @param {import('../canvas.js').FillStrokeState} [state] State.
     * @return {import('../canvas.js').FillStrokeState} State.
     */
    fillStyleToState(
      fillStyle,
      state = /** @type {import('../canvas.js').FillStrokeState} */ ({}),
    ) {
      if (fillStyle) {
        const fillStyleColor = fillStyle.getColor();
        state.fillPatternScale =
          fillStyleColor &&
          typeof fillStyleColor === 'object' &&
          'src' in fillStyleColor
            ? this.pixelRatio
            : 1;
        state.fillStyle = asColorLike(
          fillStyleColor ? fillStyleColor : defaultFillStyle,
        );
      } else {
        state.fillStyle = undefined;
      }
      return state;
    }

    /**
     * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @return {import("../canvas.js").FillStrokeState} State.
     */
    strokeStyleToState(
      strokeStyle,
      state = /** @type {import('../canvas.js').FillStrokeState} */ ({}),
    ) {
      if (strokeStyle) {
        const strokeStyleColor = strokeStyle.getColor();
        state.strokeStyle = asColorLike(
          strokeStyleColor ? strokeStyleColor : defaultStrokeStyle,
        );
        const strokeStyleLineCap = strokeStyle.getLineCap();
        state.lineCap =
          strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;
        const strokeStyleLineDash = strokeStyle.getLineDash();
        state.lineDash = strokeStyleLineDash
          ? strokeStyleLineDash.slice()
          : defaultLineDash;
        const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        state.lineDashOffset = strokeStyleLineDashOffset
          ? strokeStyleLineDashOffset
          : defaultLineDashOffset;
        const strokeStyleLineJoin = strokeStyle.getLineJoin();
        state.lineJoin =
          strokeStyleLineJoin !== undefined
            ? strokeStyleLineJoin
            : defaultLineJoin;
        const strokeStyleWidth = strokeStyle.getWidth();
        state.lineWidth =
          strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;
        const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
        state.miterLimit =
          strokeStyleMiterLimit !== undefined
            ? strokeStyleMiterLimit
            : defaultMiterLimit;

        if (state.lineWidth > this.maxLineWidth) {
          this.maxLineWidth = state.lineWidth;
          // invalidate the buffered max extent cache
          this.bufferedMaxExtent_ = null;
        }
      } else {
        state.strokeStyle = undefined;
        state.lineCap = undefined;
        state.lineDash = null;
        state.lineDashOffset = undefined;
        state.lineJoin = undefined;
        state.lineWidth = undefined;
        state.miterLimit = undefined;
      }
      return state;
    }

    /**
     * @param {import("../../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
     * @override
     */
    setFillStrokeStyle(fillStyle, strokeStyle) {
      const state = this.state;
      this.fillStyleToState(fillStyle, state);
      this.strokeStyleToState(strokeStyle, state);
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @return {Array<*>} Fill instruction.
     */
    createFill(state) {
      const fillStyle = state.fillStyle;
      /** @type {Array<*>} */
      const fillInstruction = [Instruction.SET_FILL_STYLE, fillStyle];
      if (typeof fillStyle !== 'string') {
        // Fill is a pattern or gradient - align and scale it!
        fillInstruction.push(state.fillPatternScale);
      }
      return fillInstruction;
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     */
    applyStroke(state) {
      this.instructions.push(this.createStroke(state));
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @return {Array<*>} Stroke instruction.
     */
    createStroke(state) {
      return [
        Instruction.SET_STROKE_STYLE,
        state.strokeStyle,
        state.lineWidth * this.pixelRatio,
        state.lineCap,
        state.lineJoin,
        state.miterLimit,
        state.lineDash ? this.applyPixelRatio(state.lineDash) : null,
        state.lineDashOffset * this.pixelRatio,
      ];
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.
     */
    updateFillStyle(state, createFill) {
      const fillStyle = state.fillStyle;
      if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {
        if (fillStyle !== undefined) {
          this.instructions.push(createFill.call(this, state));
        }
        state.currentFillStyle = fillStyle;
      }
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.
     */
    updateStrokeStyle(state, applyStroke) {
      const strokeStyle = state.strokeStyle;
      const lineCap = state.lineCap;
      const lineDash = state.lineDash;
      const lineDashOffset = state.lineDashOffset;
      const lineJoin = state.lineJoin;
      const lineWidth = state.lineWidth;
      const miterLimit = state.miterLimit;
      if (
        state.currentStrokeStyle != strokeStyle ||
        state.currentLineCap != lineCap ||
        (lineDash != state.currentLineDash &&
          !equals$2(state.currentLineDash, lineDash)) ||
        state.currentLineDashOffset != lineDashOffset ||
        state.currentLineJoin != lineJoin ||
        state.currentLineWidth != lineWidth ||
        state.currentMiterLimit != miterLimit
      ) {
        if (strokeStyle !== undefined) {
          applyStroke.call(this, state);
        }
        state.currentStrokeStyle = strokeStyle;
        state.currentLineCap = lineCap;
        state.currentLineDash = lineDash;
        state.currentLineDashOffset = lineDashOffset;
        state.currentLineJoin = lineJoin;
        state.currentLineWidth = lineWidth;
        state.currentMiterLimit = miterLimit;
      }
    }

    /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    endGeometry(feature) {
      this.beginGeometryInstruction1_[2] = this.instructions.length;
      this.beginGeometryInstruction1_ = null;
      this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
      this.beginGeometryInstruction2_ = null;
      const endGeometryInstruction = [Instruction.END_GEOMETRY, feature];
      this.instructions.push(endGeometryInstruction);
      this.hitDetectionInstructions.push(endGeometryInstruction);
    }

    /**
     * Get the buffered rendering extent.  Rendering will be clipped to the extent
     * provided to the constructor.  To account for symbolizers that may intersect
     * this extent, we calculate a buffered extent (e.g. based on stroke width).
     * @return {import("../../extent.js").Extent} The buffered rendering extent.
     * @protected
     */
    getBufferedMaxExtent() {
      if (!this.bufferedMaxExtent_) {
        this.bufferedMaxExtent_ = clone(this.maxExtent);
        if (this.maxLineWidth > 0) {
          const width = (this.resolution * (this.maxLineWidth + 1)) / 2;
          buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
        }
      }
      return this.bufferedMaxExtent_;
    }
  }

  /**
   * @module ol/render/canvas/ImageBuilder
   */

  class CanvasImageBuilder extends CanvasBuilder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);

      /**
       * @private
       * @type {import('../../DataTile.js').ImageLike}
       */
      this.hitDetectionImage_ = null;

      /**
       * @private
       * @type {import('../../DataTile.js').ImageLike}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.imagePixelRatio_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.anchorX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.anchorY_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.height_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.opacity_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.originX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.originY_ = undefined;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.rotateWithView_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = undefined;

      /**
       * @private
       * @type {import("../../size.js").Size|undefined}
       */
      this.scale_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.width_ = undefined;

      /**
       * @private
       * @type {import('../../style/Style.js').DeclutterMode}
       */
      this.declutterMode_ = undefined;

      /**
       * Data shared with a text builder for combined decluttering.
       * @private
       * @type {import("../canvas.js").DeclutterImageWithText}
       */
      this.declutterImageWithText_ = undefined;
    }

    /**
     * @param {import("../../geom/Point.js").default|import("../Feature.js").default} pointGeometry Point geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     * @override
     */
    drawPoint(pointGeometry, feature, index) {
      if (
        !this.image_ ||
        (this.maxExtent &&
          !containsCoordinate(this.maxExtent, pointGeometry.getFlatCoordinates()))
      ) {
        return;
      }
      this.beginGeometry(pointGeometry, feature, index);
      const flatCoordinates = pointGeometry.getFlatCoordinates();
      const stride = pointGeometry.getStride();
      const myBegin = this.coordinates.length;
      const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
      this.instructions.push([
        Instruction.DRAW_IMAGE,
        myBegin,
        myEnd,
        this.image_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_ * this.imagePixelRatio_,
        this.anchorY_ * this.imagePixelRatio_,
        Math.ceil(this.height_ * this.imagePixelRatio_),
        this.opacity_,
        this.originX_ * this.imagePixelRatio_,
        this.originY_ * this.imagePixelRatio_,
        this.rotateWithView_,
        this.rotation_,
        [
          (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,
          (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,
        ],
        Math.ceil(this.width_ * this.imagePixelRatio_),
        this.declutterMode_,
        this.declutterImageWithText_,
      ]);
      this.hitDetectionInstructions.push([
        Instruction.DRAW_IMAGE,
        myBegin,
        myEnd,
        this.hitDetectionImage_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_,
        this.anchorY_,
        this.height_,
        1,
        this.originX_,
        this.originY_,
        this.rotateWithView_,
        this.rotation_,
        this.scale_,
        this.width_,
        this.declutterMode_,
        this.declutterImageWithText_,
      ]);
      this.endGeometry(feature);
    }

    /**
     * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} multiPointGeometry MultiPoint geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     * @override
     */
    drawMultiPoint(multiPointGeometry, feature, index) {
      if (!this.image_) {
        return;
      }
      this.beginGeometry(multiPointGeometry, feature, index);
      const flatCoordinates = multiPointGeometry.getFlatCoordinates();
      const filteredFlatCoordinates = [];
      for (
        let i = 0, ii = flatCoordinates.length;
        i < ii;
        i += multiPointGeometry.getStride()
      ) {
        if (
          !this.maxExtent ||
          containsCoordinate(this.maxExtent, flatCoordinates.slice(i, i + 2))
        ) {
          filteredFlatCoordinates.push(
            flatCoordinates[i],
            flatCoordinates[i + 1],
          );
        }
      }
      const myBegin = this.coordinates.length;
      const myEnd = this.appendFlatPointCoordinates(filteredFlatCoordinates, 2);
      this.instructions.push([
        Instruction.DRAW_IMAGE,
        myBegin,
        myEnd,
        this.image_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_ * this.imagePixelRatio_,
        this.anchorY_ * this.imagePixelRatio_,
        Math.ceil(this.height_ * this.imagePixelRatio_),
        this.opacity_,
        this.originX_ * this.imagePixelRatio_,
        this.originY_ * this.imagePixelRatio_,
        this.rotateWithView_,
        this.rotation_,
        [
          (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,
          (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,
        ],
        Math.ceil(this.width_ * this.imagePixelRatio_),
        this.declutterMode_,
        this.declutterImageWithText_,
      ]);
      this.hitDetectionInstructions.push([
        Instruction.DRAW_IMAGE,
        myBegin,
        myEnd,
        this.hitDetectionImage_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_,
        this.anchorY_,
        this.height_,
        1,
        this.originX_,
        this.originY_,
        this.rotateWithView_,
        this.rotation_,
        this.scale_,
        this.width_,
        this.declutterMode_,
        this.declutterImageWithText_,
      ]);
      this.endGeometry(feature);
    }

    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     * @override
     */
    finish() {
      this.reverseHitDetectionInstructions();
      // FIXME this doesn't really protect us against further calls to draw*Geometry
      this.anchorX_ = undefined;
      this.anchorY_ = undefined;
      this.hitDetectionImage_ = null;
      this.image_ = null;
      this.imagePixelRatio_ = undefined;
      this.height_ = undefined;
      this.scale_ = undefined;
      this.opacity_ = undefined;
      this.originX_ = undefined;
      this.originY_ = undefined;
      this.rotateWithView_ = undefined;
      this.rotation_ = undefined;
      this.width_ = undefined;
      return super.finish();
    }

    /**
     * @param {import("../../style/Image.js").default} imageStyle Image style.
     * @param {Object} [sharedData] Shared data.
     * @override
     */
    setImageStyle(imageStyle, sharedData) {
      const anchor = imageStyle.getAnchor();
      const size = imageStyle.getSize();
      const origin = imageStyle.getOrigin();
      this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);
      this.anchorX_ = anchor[0];
      this.anchorY_ = anchor[1];
      this.hitDetectionImage_ = imageStyle.getHitDetectionImage();
      this.image_ = imageStyle.getImage(this.pixelRatio);
      this.height_ = size[1];
      this.opacity_ = imageStyle.getOpacity();
      this.originX_ = origin[0];
      this.originY_ = origin[1];
      this.rotateWithView_ = imageStyle.getRotateWithView();
      this.rotation_ = imageStyle.getRotation();
      this.scale_ = imageStyle.getScaleArray();
      this.width_ = size[0];
      this.declutterMode_ = imageStyle.getDeclutterMode();
      this.declutterImageWithText_ = sharedData;
    }
  }

  /**
   * @module ol/render/canvas/LineStringBuilder
   */

  class CanvasLineStringBuilder extends CanvasBuilder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     * @return {number} end.
     */
    drawFlatCoordinates_(flatCoordinates, offset, end, stride) {
      const myBegin = this.coordinates.length;
      const myEnd = this.appendFlatLineCoordinates(
        flatCoordinates,
        offset,
        end,
        stride,
        false,
        false,
      );
      const moveToLineToInstruction = [
        Instruction.MOVE_TO_LINE_TO,
        myBegin,
        myEnd,
      ];
      this.instructions.push(moveToLineToInstruction);
      this.hitDetectionInstructions.push(moveToLineToInstruction);
      return end;
    }

    /**
     * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} lineStringGeometry Line string geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     * @override
     */
    drawLineString(lineStringGeometry, feature, index) {
      const state = this.state;
      const strokeStyle = state.strokeStyle;
      const lineWidth = state.lineWidth;
      if (strokeStyle === undefined || lineWidth === undefined) {
        return;
      }
      this.updateStrokeStyle(state, this.applyStroke);
      this.beginGeometry(lineStringGeometry, feature, index);
      this.hitDetectionInstructions.push(
        [
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle,
          state.lineWidth,
          state.lineCap,
          state.lineJoin,
          state.miterLimit,
          defaultLineDash,
          defaultLineDashOffset,
        ],
        beginPathInstruction,
      );
      const flatCoordinates = lineStringGeometry.getFlatCoordinates();
      const stride = lineStringGeometry.getStride();
      this.drawFlatCoordinates_(
        flatCoordinates,
        0,
        flatCoordinates.length,
        stride,
      );
      this.hitDetectionInstructions.push(strokeInstruction);
      this.endGeometry(feature);
    }

    /**
     * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} multiLineStringGeometry MultiLineString geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     * @override
     */
    drawMultiLineString(multiLineStringGeometry, feature, index) {
      const state = this.state;
      const strokeStyle = state.strokeStyle;
      const lineWidth = state.lineWidth;
      if (strokeStyle === undefined || lineWidth === undefined) {
        return;
      }
      this.updateStrokeStyle(state, this.applyStroke);
      this.beginGeometry(multiLineStringGeometry, feature, index);
      this.hitDetectionInstructions.push(
        [
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle,
          state.lineWidth,
          state.lineCap,
          state.lineJoin,
          state.miterLimit,
          defaultLineDash,
          defaultLineDashOffset,
        ],
        beginPathInstruction,
      );
      const ends = multiLineStringGeometry.getEnds();
      const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
      const stride = multiLineStringGeometry.getStride();
      let offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        offset = this.drawFlatCoordinates_(
          flatCoordinates,
          offset,
          /** @type {number} */ (ends[i]),
          stride,
        );
      }
      this.hitDetectionInstructions.push(strokeInstruction);
      this.endGeometry(feature);
    }

    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     * @override
     */
    finish() {
      const state = this.state;
      if (
        state.lastStroke != undefined &&
        state.lastStroke != this.coordinates.length
      ) {
        this.instructions.push(strokeInstruction);
      }
      this.reverseHitDetectionInstructions();
      this.state = null;
      return super.finish();
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @override
     */
    applyStroke(state) {
      if (
        state.lastStroke != undefined &&
        state.lastStroke != this.coordinates.length
      ) {
        this.instructions.push(strokeInstruction);
        state.lastStroke = this.coordinates.length;
      }
      state.lastStroke = 0;
      super.applyStroke(state);
      this.instructions.push(beginPathInstruction);
    }
  }

  /**
   * @module ol/render/canvas/PolygonBuilder
   */

  class CanvasPolygonBuilder extends CanvasBuilder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */
    drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {
      const state = this.state;
      const fill = state.fillStyle !== undefined;
      const stroke = state.strokeStyle !== undefined;
      const numEnds = ends.length;
      this.instructions.push(beginPathInstruction);
      this.hitDetectionInstructions.push(beginPathInstruction);
      for (let i = 0; i < numEnds; ++i) {
        const end = ends[i];
        const myBegin = this.coordinates.length;
        const myEnd = this.appendFlatLineCoordinates(
          flatCoordinates,
          offset,
          end,
          stride,
          true,
          !stroke,
        );
        const moveToLineToInstruction = [
          Instruction.MOVE_TO_LINE_TO,
          myBegin,
          myEnd,
        ];
        this.instructions.push(moveToLineToInstruction);
        this.hitDetectionInstructions.push(moveToLineToInstruction);
        if (stroke) {
          // Performance optimization: only call closePath() when we have a stroke.
          // Otherwise the ring is closed already (see appendFlatLineCoordinates above).
          this.instructions.push(closePathInstruction);
          this.hitDetectionInstructions.push(closePathInstruction);
        }
        offset = end;
      }
      if (fill) {
        this.instructions.push(fillInstruction);
        this.hitDetectionInstructions.push(fillInstruction);
      }
      if (stroke) {
        this.instructions.push(strokeInstruction);
        this.hitDetectionInstructions.push(strokeInstruction);
      }
      return offset;
    }

    /**
     * @param {import("../../geom/Circle.js").default} circleGeometry Circle geometry.
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {number} [index] Render order index.
     * @override
     */
    drawCircle(circleGeometry, feature, index) {
      const state = this.state;
      const fillStyle = state.fillStyle;
      const strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_();
      this.beginGeometry(circleGeometry, feature, index);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          defaultFillStyle,
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle,
          state.lineWidth,
          state.lineCap,
          state.lineJoin,
          state.miterLimit,
          defaultLineDash,
          defaultLineDashOffset,
        ]);
      }
      const flatCoordinates = circleGeometry.getFlatCoordinates();
      const stride = circleGeometry.getStride();
      const myBegin = this.coordinates.length;
      this.appendFlatLineCoordinates(
        flatCoordinates,
        0,
        flatCoordinates.length,
        stride,
        false,
        false,
      );
      const circleInstruction = [Instruction.CIRCLE, myBegin];
      this.instructions.push(beginPathInstruction, circleInstruction);
      this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);
      if (state.fillStyle !== undefined) {
        this.instructions.push(fillInstruction);
        this.hitDetectionInstructions.push(fillInstruction);
      }
      if (state.strokeStyle !== undefined) {
        this.instructions.push(strokeInstruction);
        this.hitDetectionInstructions.push(strokeInstruction);
      }
      this.endGeometry(feature);
    }

    /**
     * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} polygonGeometry Polygon geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     * @override
     */
    drawPolygon(polygonGeometry, feature, index) {
      const state = this.state;
      const fillStyle = state.fillStyle;
      const strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_();
      this.beginGeometry(polygonGeometry, feature, index);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          defaultFillStyle,
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle,
          state.lineWidth,
          state.lineCap,
          state.lineJoin,
          state.miterLimit,
          defaultLineDash,
          defaultLineDashOffset,
        ]);
      }
      const ends = polygonGeometry.getEnds();
      const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
      const stride = polygonGeometry.getStride();
      this.drawFlatCoordinatess_(
        flatCoordinates,
        0,
        /** @type {Array<number>} */ (ends),
        stride,
      );
      this.endGeometry(feature);
    }

    /**
     * @param {import("../../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     * @override
     */
    drawMultiPolygon(multiPolygonGeometry, feature, index) {
      const state = this.state;
      const fillStyle = state.fillStyle;
      const strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_();
      this.beginGeometry(multiPolygonGeometry, feature, index);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          defaultFillStyle,
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle,
          state.lineWidth,
          state.lineCap,
          state.lineJoin,
          state.miterLimit,
          defaultLineDash,
          defaultLineDashOffset,
        ]);
      }
      const endss = multiPolygonGeometry.getEndss();
      const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
      const stride = multiPolygonGeometry.getStride();
      let offset = 0;
      for (let i = 0, ii = endss.length; i < ii; ++i) {
        offset = this.drawFlatCoordinatess_(
          flatCoordinates,
          offset,
          endss[i],
          stride,
        );
      }
      this.endGeometry(feature);
    }

    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     * @override
     */
    finish() {
      this.reverseHitDetectionInstructions();
      this.state = null;
      // We want to preserve topology when drawing polygons.  Polygons are
      // simplified using quantization and point elimination. However, we might
      // have received a mix of quantized and non-quantized geometries, so ensure
      // that all are quantized by quantizing all coordinates in the batch.
      const tolerance = this.tolerance;
      if (tolerance !== 0) {
        const coordinates = this.coordinates;
        for (let i = 0, ii = coordinates.length; i < ii; ++i) {
          coordinates[i] = snap(coordinates[i], tolerance);
        }
      }
      return super.finish();
    }

    /**
     * @private
     */
    setFillStrokeStyles_() {
      const state = this.state;
      const fillStyle = state.fillStyle;
      if (fillStyle !== undefined) {
        this.updateFillStyle(state, this.createFill);
      }
      if (state.strokeStyle !== undefined) {
        this.updateStrokeStyle(state, this.applyStroke);
      }
    }
  }

  /**
   * Creates chunks of equal length from a linestring
   * @param {number} chunkLength Length of each chunk.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Start offset of the `flatCoordinates`.
   * @param {number} end End offset of the `flatCoordinates`.
   * @param {number} stride Stride.
   * @return {Array<Array<number>>} Chunks of linestrings with stride 2.
   */
  function lineChunk(chunkLength, flatCoordinates, offset, end, stride) {
    const chunks = [];
    let cursor = offset;
    let chunkM = 0;
    let currentChunk = flatCoordinates.slice(offset, 2);
    while (chunkM < chunkLength && cursor + stride < end) {
      const [x1, y1] = currentChunk.slice(-2);
      const x2 = flatCoordinates[cursor + stride];
      const y2 = flatCoordinates[cursor + stride + 1];
      const segmentLength = Math.sqrt(
        (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1),
      );
      chunkM += segmentLength;
      if (chunkM >= chunkLength) {
        const m = (chunkLength - chunkM + segmentLength) / segmentLength;
        const x = lerp(x1, x2, m);
        const y = lerp(y1, y2, m);
        currentChunk.push(x, y);
        chunks.push(currentChunk);
        currentChunk = [x, y];
        if (chunkM == chunkLength) {
          cursor += stride;
        }
        chunkM = 0;
      } else if (chunkM < chunkLength) {
        currentChunk.push(
          flatCoordinates[cursor + stride],
          flatCoordinates[cursor + stride + 1],
        );
        cursor += stride;
      } else {
        const missing = segmentLength - chunkM;
        const x = lerp(x1, x2, missing / segmentLength);
        const y = lerp(y1, y2, missing / segmentLength);
        currentChunk.push(x, y);
        chunks.push(currentChunk);
        currentChunk = [x, y];
        chunkM = 0;
        cursor += stride;
      }
    }
    if (chunkM > 0) {
      chunks.push(currentChunk);
    }
    return chunks;
  }

  /**
   * @module ol/geom/flat/straightchunk
   */

  /**
   * @param {number} maxAngle Maximum acceptable angle delta between segments.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Array<number>} Start and end of the first suitable chunk of the
   * given `flatCoordinates`.
   */
  function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {
    let chunkStart = offset;
    let chunkEnd = offset;
    let chunkM = 0;
    let m = 0;
    let start = offset;
    let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
    for (i = offset; i < end; i += stride) {
      const x2 = flatCoordinates[i];
      const y2 = flatCoordinates[i + 1];
      if (x1 !== undefined) {
        x23 = x2 - x1;
        y23 = y2 - y1;
        m23 = Math.sqrt(x23 * x23 + y23 * y23);
        if (x12 !== undefined) {
          m += m12;
          acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
          if (acos > maxAngle) {
            if (m > chunkM) {
              chunkM = m;
              chunkStart = start;
              chunkEnd = i;
            }
            m = 0;
            start = i - stride;
          }
        }
        m12 = m23;
        x12 = x23;
        y12 = y23;
      }
      x1 = x2;
      y1 = y2;
    }
    m += m23;
    return m > chunkM ? [start, i] : [chunkStart, chunkEnd];
  }

  /**
   * @module ol/render/canvas/TextBuilder
   */
  /**
   * @const
   * @type {{left: 0, center: 0.5, right: 1, top: 0, middle: 0.5, hanging: 0.2, alphabetic: 0.8, ideographic: 0.8, bottom: 1}}
   */
  const TEXT_ALIGN = {
    'left': 0,
    'center': 0.5,
    'right': 1,
    'top': 0,
    'middle': 0.5,
    'hanging': 0.2,
    'alphabetic': 0.8,
    'ideographic': 0.8,
    'bottom': 1,
  };

  class CanvasTextBuilder extends CanvasBuilder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);

      /**
       * @private
       * @type {Array<HTMLCanvasElement>}
       */
      this.labels_ = null;

      /**
       * @private
       * @type {string|Array<string>}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number}
       */
      this.textOffsetX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textOffsetY_ = 0;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.textRotateWithView_ = undefined;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.textKeepUpright_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.textRotation_ = 0;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.textFillState_ = null;

      /**
       * @type {!Object<string, import("../canvas.js").FillState>}
       */
      this.fillStates = {};
      this.fillStates[defaultFillStyle] = {fillStyle: defaultFillStyle};

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.textStrokeState_ = null;

      /**
       * @type {!Object<string, import("../canvas.js").StrokeState>}
       */
      this.strokeStates = {};

      /**
       * @private
       * @type {import("../canvas.js").TextState}
       */
      this.textState_ = /** @type {import("../canvas.js").TextState} */ ({});

      /**
       * @type {!Object<string, import("../canvas.js").TextState>}
       */
      this.textStates = {};

      /**
       * @private
       * @type {string}
       */
      this.textKey_ = '';

      /**
       * @private
       * @type {string}
       */
      this.fillKey_ = '';

      /**
       * @private
       * @type {string}
       */
      this.strokeKey_ = '';

      /**
       * @private
       * @type {import('../../style/Style.js').DeclutterMode}
       */
      this.declutterMode_ = undefined;

      /**
       * Data shared with an image builder for combined decluttering.
       * @private
       * @type {import("../canvas.js").DeclutterImageWithText}
       */
      this.declutterImageWithText_ = undefined;
    }

    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     * @override
     */
    finish() {
      const instructions = super.finish();
      instructions.textStates = this.textStates;
      instructions.fillStates = this.fillStates;
      instructions.strokeStates = this.strokeStates;
      return instructions;
    }

    /**
     * @param {import("../../geom/SimpleGeometry.js").default|import("../Feature.js").default} geometry Geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} [index] Render order index.
     * @override
     */
    drawText(geometry, feature, index) {
      const fillState = this.textFillState_;
      const strokeState = this.textStrokeState_;
      const textState = this.textState_;
      if (this.text_ === '' || !textState || (!fillState && !strokeState)) {
        return;
      }

      const coordinates = this.coordinates;
      let begin = coordinates.length;

      const geometryType = geometry.getType();
      let flatCoordinates = null;
      let stride = geometry.getStride();

      if (
        textState.placement === 'line' &&
        (geometryType == 'LineString' ||
          geometryType == 'MultiLineString' ||
          geometryType == 'Polygon' ||
          geometryType == 'MultiPolygon')
      ) {
        if (!intersects$1(this.maxExtent, geometry.getExtent())) {
          return;
        }
        let ends;
        flatCoordinates = geometry.getFlatCoordinates();
        if (geometryType == 'LineString') {
          ends = [flatCoordinates.length];
        } else if (geometryType == 'MultiLineString') {
          ends = /** @type {import("../../geom/MultiLineString.js").default} */ (
            geometry
          ).getEnds();
        } else if (geometryType == 'Polygon') {
          ends = /** @type {import("../../geom/Polygon.js").default} */ (geometry)
            .getEnds()
            .slice(0, 1);
        } else if (geometryType == 'MultiPolygon') {
          const endss =
            /** @type {import("../../geom/MultiPolygon.js").default} */ (
              geometry
            ).getEndss();
          ends = [];
          for (let i = 0, ii = endss.length; i < ii; ++i) {
            ends.push(endss[i][0]);
          }
        }
        this.beginGeometry(geometry, feature, index);
        const repeat = textState.repeat;
        const textAlign = repeat ? undefined : textState.textAlign;
        // No `justify` support for line placement.
        let flatOffset = 0;
        for (let o = 0, oo = ends.length; o < oo; ++o) {
          let chunks;
          if (repeat) {
            chunks = lineChunk(
              repeat * this.resolution,
              flatCoordinates,
              flatOffset,
              ends[o],
              stride,
            );
          } else {
            chunks = [flatCoordinates.slice(flatOffset, ends[o])];
          }
          for (let c = 0, cc = chunks.length; c < cc; ++c) {
            const chunk = chunks[c];
            let chunkBegin = 0;
            let chunkEnd = chunk.length;
            if (textAlign == undefined) {
              const range = matchingChunk(
                textState.maxAngle,
                chunk,
                0,
                chunk.length,
                2,
              );
              chunkBegin = range[0];
              chunkEnd = range[1];
            }
            for (let i = chunkBegin; i < chunkEnd; i += stride) {
              coordinates.push(chunk[i], chunk[i + 1]);
            }
            const end = coordinates.length;
            flatOffset = ends[o];
            this.drawChars_(begin, end);
            begin = end;
          }
        }
        this.endGeometry(feature);
      } else {
        let geometryWidths = textState.overflow ? null : [];
        switch (geometryType) {
          case 'Point':
          case 'MultiPoint':
            flatCoordinates =
              /** @type {import("../../geom/MultiPoint.js").default} */ (
                geometry
              ).getFlatCoordinates();
            break;
          case 'LineString':
            flatCoordinates =
              /** @type {import("../../geom/LineString.js").default} */ (
                geometry
              ).getFlatMidpoint();
            break;
          case 'Circle':
            flatCoordinates =
              /** @type {import("../../geom/Circle.js").default} */ (
                geometry
              ).getCenter();
            break;
          case 'MultiLineString':
            flatCoordinates =
              /** @type {import("../../geom/MultiLineString.js").default} */ (
                geometry
              ).getFlatMidpoints();
            stride = 2;
            break;
          case 'Polygon':
            flatCoordinates =
              /** @type {import("../../geom/Polygon.js").default} */ (
                geometry
              ).getFlatInteriorPoint();
            if (!textState.overflow) {
              geometryWidths.push(flatCoordinates[2] / this.resolution);
            }
            stride = 3;
            break;
          case 'MultiPolygon':
            const interiorPoints =
              /** @type {import("../../geom/MultiPolygon.js").default} */ (
                geometry
              ).getFlatInteriorPoints();
            flatCoordinates = [];
            for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {
              if (!textState.overflow) {
                geometryWidths.push(interiorPoints[i + 2] / this.resolution);
              }
              flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
            }
            if (flatCoordinates.length === 0) {
              return;
            }
            stride = 2;
            break;
        }
        const end = this.appendFlatPointCoordinates(flatCoordinates, stride);
        if (end === begin) {
          return;
        }
        if (
          geometryWidths &&
          (end - begin) / 2 !== flatCoordinates.length / stride
        ) {
          let beg = begin / 2;
          geometryWidths = geometryWidths.filter((w, i) => {
            const keep =
              coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&
              coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];
            if (!keep) {
              --beg;
            }
            return keep;
          });
        }

        this.saveTextStates_();

        const backgroundFill = textState.backgroundFill
          ? this.createFill(this.fillStyleToState(textState.backgroundFill))
          : null;
        const backgroundStroke = textState.backgroundStroke
          ? this.createStroke(this.strokeStyleToState(textState.backgroundStroke))
          : null;

        this.beginGeometry(geometry, feature, index);

        // adjust padding for negative scale
        let padding = textState.padding;
        if (
          padding != defaultPadding &&
          (textState.scale[0] < 0 || textState.scale[1] < 0)
        ) {
          let p0 = textState.padding[0];
          let p1 = textState.padding[1];
          let p2 = textState.padding[2];
          let p3 = textState.padding[3];
          if (textState.scale[0] < 0) {
            p1 = -p1;
            p3 = -p3;
          }
          if (textState.scale[1] < 0) {
            p0 = -p0;
            p2 = -p2;
          }
          padding = [p0, p1, p2, p3];
        }

        // The image is unknown at this stage so we pass null; it will be computed at render time.
        // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at
        // render time.
        const pixelRatio = this.pixelRatio;
        this.instructions.push([
          Instruction.DRAW_IMAGE,
          begin,
          end,
          null,
          NaN,
          NaN,
          NaN,
          1,
          0,
          0,
          this.textRotateWithView_,
          this.textRotation_,
          [1, 1],
          NaN,
          this.declutterMode_,
          this.declutterImageWithText_,
          padding == defaultPadding
            ? defaultPadding
            : padding.map(function (p) {
                return p * pixelRatio;
              }),
          backgroundFill,
          backgroundStroke,
          this.text_,
          this.textKey_,
          this.strokeKey_,
          this.fillKey_,
          this.textOffsetX_,
          this.textOffsetY_,
          geometryWidths,
        ]);
        const scale = 1 / pixelRatio;
        // Set default fill for hit detection background
        const hitDetectionBackgroundFill = backgroundFill
          ? backgroundFill.slice(0)
          : null;
        if (hitDetectionBackgroundFill) {
          hitDetectionBackgroundFill[1] = defaultFillStyle;
        }
        this.hitDetectionInstructions.push([
          Instruction.DRAW_IMAGE,
          begin,
          end,
          null,
          NaN,
          NaN,
          NaN,
          1,
          0,
          0,
          this.textRotateWithView_,
          this.textRotation_,
          [scale, scale],
          NaN,
          this.declutterMode_,
          this.declutterImageWithText_,
          padding,
          hitDetectionBackgroundFill,
          backgroundStroke,
          this.text_,
          this.textKey_,
          this.strokeKey_,
          this.fillKey_ ? defaultFillStyle : this.fillKey_,
          this.textOffsetX_,
          this.textOffsetY_,
          geometryWidths,
        ]);

        this.endGeometry(feature);
      }
    }

    /**
     * @private
     */
    saveTextStates_() {
      const strokeState = this.textStrokeState_;
      const textState = this.textState_;
      const fillState = this.textFillState_;

      const strokeKey = this.strokeKey_;
      if (strokeState) {
        if (!(strokeKey in this.strokeStates)) {
          this.strokeStates[strokeKey] = {
            strokeStyle: strokeState.strokeStyle,
            lineCap: strokeState.lineCap,
            lineDashOffset: strokeState.lineDashOffset,
            lineWidth: strokeState.lineWidth,
            lineJoin: strokeState.lineJoin,
            miterLimit: strokeState.miterLimit,
            lineDash: strokeState.lineDash,
          };
        }
      }
      const textKey = this.textKey_;
      if (!(textKey in this.textStates)) {
        this.textStates[textKey] = {
          font: textState.font,
          textAlign: textState.textAlign || defaultTextAlign,
          justify: textState.justify,
          textBaseline: textState.textBaseline || defaultTextBaseline,
          scale: textState.scale,
        };
      }
      const fillKey = this.fillKey_;
      if (fillState) {
        if (!(fillKey in this.fillStates)) {
          this.fillStates[fillKey] = {
            fillStyle: fillState.fillStyle,
          };
        }
      }
    }

    /**
     * @private
     * @param {number} begin Begin.
     * @param {number} end End.
     */
    drawChars_(begin, end) {
      const strokeState = this.textStrokeState_;
      const textState = this.textState_;

      const strokeKey = this.strokeKey_;
      const textKey = this.textKey_;
      const fillKey = this.fillKey_;
      this.saveTextStates_();

      const pixelRatio = this.pixelRatio;
      const baseline = TEXT_ALIGN[textState.textBaseline];

      const offsetY = this.textOffsetY_ * pixelRatio;
      const text = this.text_;
      const strokeWidth = strokeState
        ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2
        : 0;

      this.instructions.push([
        Instruction.DRAW_CHARS,
        begin,
        end,
        baseline,
        textState.overflow,
        fillKey,
        textState.maxAngle,
        pixelRatio,
        offsetY,
        strokeKey,
        strokeWidth * pixelRatio,
        text,
        textKey,
        1,
        this.declutterMode_,
        this.textKeepUpright_,
      ]);
      this.hitDetectionInstructions.push([
        Instruction.DRAW_CHARS,
        begin,
        end,
        baseline,
        textState.overflow,
        fillKey ? defaultFillStyle : fillKey,
        textState.maxAngle,
        pixelRatio,
        offsetY,
        strokeKey,
        strokeWidth * pixelRatio,
        text,
        textKey,
        1 / pixelRatio,
        this.declutterMode_,
        this.textKeepUpright_,
      ]);
    }

    /**
     * @param {import("../../style/Text.js").default} textStyle Text style.
     * @param {Object} [sharedData] Shared data.
     * @override
     */
    setTextStyle(textStyle, sharedData) {
      let textState, fillState, strokeState;
      if (!textStyle) {
        this.text_ = '';
      } else {
        const textFillStyle = textStyle.getFill();
        if (!textFillStyle) {
          fillState = null;
          this.textFillState_ = fillState;
        } else {
          fillState = this.textFillState_;
          if (!fillState) {
            fillState = /** @type {import("../canvas.js").FillState} */ ({});
            this.textFillState_ = fillState;
          }
          fillState.fillStyle = asColorLike(
            textFillStyle.getColor() || defaultFillStyle,
          );
        }

        const textStrokeStyle = textStyle.getStroke();
        if (!textStrokeStyle) {
          strokeState = null;
          this.textStrokeState_ = strokeState;
        } else {
          strokeState = this.textStrokeState_;
          if (!strokeState) {
            strokeState = /** @type {import("../canvas.js").StrokeState} */ ({});
            this.textStrokeState_ = strokeState;
          }
          const lineDash = textStrokeStyle.getLineDash();
          const lineDashOffset = textStrokeStyle.getLineDashOffset();
          const lineWidth = textStrokeStyle.getWidth();
          const miterLimit = textStrokeStyle.getMiterLimit();
          strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;
          strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;
          strokeState.lineDashOffset =
            lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;
          strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;
          strokeState.lineWidth =
            lineWidth === undefined ? defaultLineWidth : lineWidth;
          strokeState.miterLimit =
            miterLimit === undefined ? defaultMiterLimit : miterLimit;
          strokeState.strokeStyle = asColorLike(
            textStrokeStyle.getColor() || defaultStrokeStyle,
          );
        }

        textState = this.textState_;
        const font = textStyle.getFont() || defaultFont;
        registerFont(font);
        const textScale = textStyle.getScaleArray();
        textState.overflow = textStyle.getOverflow();
        textState.font = font;
        textState.maxAngle = textStyle.getMaxAngle();
        textState.placement = textStyle.getPlacement();
        textState.textAlign = textStyle.getTextAlign();
        textState.repeat = textStyle.getRepeat();
        textState.justify = textStyle.getJustify();
        textState.textBaseline =
          textStyle.getTextBaseline() || defaultTextBaseline;
        textState.backgroundFill = textStyle.getBackgroundFill();
        textState.backgroundStroke = textStyle.getBackgroundStroke();
        textState.padding = textStyle.getPadding() || defaultPadding;
        textState.scale = textScale === undefined ? [1, 1] : textScale;

        const textOffsetX = textStyle.getOffsetX();
        const textOffsetY = textStyle.getOffsetY();
        const textRotateWithView = textStyle.getRotateWithView();
        const textKeepUpright = textStyle.getKeepUpright();
        const textRotation = textStyle.getRotation();
        this.text_ = textStyle.getText() || '';
        this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
        this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
        this.textRotateWithView_ =
          textRotateWithView === undefined ? false : textRotateWithView;
        this.textKeepUpright_ =
          textKeepUpright === undefined ? true : textKeepUpright;
        this.textRotation_ = textRotation === undefined ? 0 : textRotation;

        this.strokeKey_ = strokeState
          ? (typeof strokeState.strokeStyle == 'string'
              ? strokeState.strokeStyle
              : getUid(strokeState.strokeStyle)) +
            strokeState.lineCap +
            strokeState.lineDashOffset +
            '|' +
            strokeState.lineWidth +
            strokeState.lineJoin +
            strokeState.miterLimit +
            '[' +
            strokeState.lineDash.join() +
            ']'
          : '';
        this.textKey_ =
          textState.font +
          textState.scale +
          (textState.textAlign || '?') +
          (textState.repeat || '?') +
          (textState.justify || '?') +
          (textState.textBaseline || '?');
        this.fillKey_ =
          fillState && fillState.fillStyle
            ? typeof fillState.fillStyle == 'string'
              ? fillState.fillStyle
              : '|' + getUid(fillState.fillStyle)
            : '';
      }
      this.declutterMode_ = textStyle.getDeclutterMode();
      this.declutterImageWithText_ = sharedData;
    }
  }

  /**
   * @module ol/render/canvas/BuilderGroup
   */


  /**
   * @type {Object<import("../canvas.js").BuilderType, typeof Builder>}
   */
  const BATCH_CONSTRUCTORS = {
    'Circle': CanvasPolygonBuilder,
    'Default': CanvasBuilder,
    'Image': CanvasImageBuilder,
    'LineString': CanvasLineStringBuilder,
    'Polygon': CanvasPolygonBuilder,
    'Text': CanvasTextBuilder,
  };

  class BuilderGroup {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Max extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      /**
       * @private
       * @type {number}
       */
      this.tolerance_ = tolerance;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent_ = maxExtent;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.resolution_ = resolution;

      /**
       * @private
       * @type {!Object<string, !Object<import("../canvas.js").BuilderType, Builder>>}
       */
      this.buildersByZIndex_ = {};
    }

    /**
     * @return {!Object<string, !Object<import("../canvas.js").BuilderType, import("./Builder.js").SerializableInstructions>>} The serializable instructions
     */
    finish() {
      const builderInstructions = {};
      for (const zKey in this.buildersByZIndex_) {
        builderInstructions[zKey] = builderInstructions[zKey] || {};
        const builders = this.buildersByZIndex_[zKey];
        for (const builderKey in builders) {
          const builderInstruction = builders[builderKey].finish();
          builderInstructions[zKey][builderKey] = builderInstruction;
        }
      }
      return builderInstructions;
    }

    /**
     * @param {number|undefined} zIndex Z index.
     * @param {import("../canvas.js").BuilderType} builderType Replay type.
     * @return {import("../VectorContext.js").default} Replay.
     */
    getBuilder(zIndex, builderType) {
      const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
      let replays = this.buildersByZIndex_[zIndexKey];
      if (replays === undefined) {
        replays = {};
        this.buildersByZIndex_[zIndexKey] = replays;
      }
      let replay = replays[builderType];
      if (replay === undefined) {
        const Constructor = BATCH_CONSTRUCTORS[builderType];
        replay = new Constructor(
          this.tolerance_,
          this.maxExtent_,
          this.resolution_,
          this.pixelRatio_,
        );
        replays[builderType] = replay;
      }
      return replay;
    }
  }

  /**
   * @module ol/geom/flat/textpath
   */

  /**
   * @param {Array<number>} flatCoordinates Path to put text on.
   * @param {number} offset Start offset of the `flatCoordinates`.
   * @param {number} end End offset of the `flatCoordinates`.
   * @param {number} stride Stride.
   * @param {string} text Text to place on the path.
   * @param {number} startM m along the path where the text starts.
   * @param {number} maxAngle Max angle between adjacent chars in radians.
   * @param {number} scale The product of the text scale and the device pixel ratio.
   * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.
   * @param {string} font The font.
   * @param {Object<string, number>} cache A cache of measured widths.
   * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.
   * @param {boolean} keepUpright Whether the text needs to be kept upright
   * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was
   * exceeded). Entries of the array are x, y, anchorX, angle, chunk.
   */
  function drawTextOnPath(
    flatCoordinates,
    offset,
    end,
    stride,
    text,
    startM,
    maxAngle,
    scale,
    measureAndCacheTextWidth,
    font,
    cache,
    rotation,
    keepUpright = true,
  ) {
    let x2 = flatCoordinates[offset];
    let y2 = flatCoordinates[offset + 1];
    let x1 = 0;
    let y1 = 0;
    let segmentLength = 0;
    let segmentM = 0;

    function advance() {
      x1 = x2;
      y1 = y2;
      offset += stride;
      x2 = flatCoordinates[offset];
      y2 = flatCoordinates[offset + 1];
      segmentM += segmentLength;
      segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    }
    do {
      advance();
    } while (offset < end - stride && segmentM + segmentLength < startM);

    let interpolate =
      segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;
    const beginX = lerp(x1, x2, interpolate);
    const beginY = lerp(y1, y2, interpolate);

    const startOffset = offset - stride;
    const startLength = segmentM;
    const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);
    while (offset < end - stride && segmentM + segmentLength < endM) {
      advance();
    }
    interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;
    const endX = lerp(x1, x2, interpolate);
    const endY = lerp(y1, y2, interpolate);

    // Keep text upright if the option is selected
    let reverse = false;
    if (keepUpright) {
      if (rotation) {
        const flat = [beginX, beginY, endX, endY];
        rotate(flat, 0, 4, 2, rotation, flat, flat);
        reverse = flat[0] > flat[2];
      } else {
        reverse = beginX > endX;
      }
    }

    const PI = Math.PI;
    const result = [];
    const singleSegment = startOffset + stride === offset;

    offset = startOffset;
    segmentLength = 0;
    segmentM = startLength;
    x2 = flatCoordinates[offset];
    y2 = flatCoordinates[offset + 1];

    let previousAngle;
    // All on the same segment
    if (singleSegment) {
      advance();

      previousAngle = Math.atan2(y2 - y1, x2 - x1);
      if (reverse) {
        previousAngle += previousAngle > 0 ? -PI : PI;
      }
      const x = (endX + beginX) / 2;
      const y = (endY + beginY) / 2;
      result[0] = [x, y, (endM - startM) / 2, previousAngle, text];
      return result;
    }

    // rendering across line segments
    text = text.replace(/\n/g, ' '); // ensure rendering in single-line as all calculations below don't handle multi-lines

    for (let i = 0, ii = text.length; i < ii; ) {
      advance();
      let angle = Math.atan2(y2 - y1, x2 - x1);
      if (reverse) {
        angle += angle > 0 ? -PI : PI;
      }
      if (previousAngle !== undefined) {
        let delta = angle - previousAngle;
        delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;
        if (Math.abs(delta) > maxAngle) {
          return null;
        }
      }
      previousAngle = angle;

      const iStart = i;
      let charLength = 0;
      for (; i < ii; ++i) {
        const index = reverse ? ii - i - 1 : i;
        const len = scale * measureAndCacheTextWidth(font, text[index], cache);
        if (
          offset + stride < end &&
          segmentM + segmentLength < startM + charLength + len / 2
        ) {
          break;
        }
        charLength += len;
      }
      if (i === iStart) {
        continue;
      }
      const chars = reverse
        ? text.substring(ii - iStart, ii - i)
        : text.substring(iStart, i);
      interpolate =
        segmentLength === 0
          ? 0
          : (startM + charLength / 2 - segmentM) / segmentLength;
      const x = lerp(x1, x2, interpolate);
      const y = lerp(y1, y2, interpolate);
      result.push([x, y, charLength / 2, angle, chars]);
      startM += charLength;
    }
    return result;
  }

  /**
   * @module ol/render/canvas/ZIndexContext
   */


  /** @typedef {CanvasRenderingContext2D & {globalAlpha: any}} ZIndexContextProxy */

  /**
   * @extends {CanvasRenderingContext2D}
   */
  class ZIndexContext {
    constructor() {
      /**
       * @private
       * @type {Array<Array<*>>}
       */
      this.instructions_ = [];
      /**
       * @type {number}
       */
      this.zIndex = 0;
      /**
       * @private
       * @type {number}
       */
      this.offset_ = 0;

      /**
       * @private
       * @type {ZIndexContextProxy}
       */
      this.context_ = /** @type {ZIndexContextProxy} */ (
        new Proxy(getSharedCanvasContext2D(), {
          get: (target, property) => {
            if (
              typeof (/** @type {*} */ (getSharedCanvasContext2D())[property]) !==
              'function'
            ) {
              // we only accept calling functions on the proxy, not accessing properties
              return undefined;
            }
            this.push_(property);
            return this.pushMethodArgs_;
          },
          set: (target, property, value) => {
            this.push_(property, value);
            return true;
          },
        })
      );
    }

    /**
     * @param {...*} args Arguments to push to the instructions array.
     * @private
     */
    push_(...args) {
      const instructions = this.instructions_;
      const index = this.zIndex + this.offset_;
      if (!instructions[index]) {
        instructions[index] = [];
      }
      instructions[index].push(...args);
    }

    /**
     * @private
     * @param {...*} args Args.
     * @return {ZIndexContext} This.
     */
    pushMethodArgs_ = (...args) => {
      this.push_(args);
      return this;
    };

    /**
     * Push a function that renders to the context directly.
     * @param {function(CanvasRenderingContext2D): void} render Function.
     */
    pushFunction(render) {
      this.push_(render);
    }

    /**
     * Get a proxy for CanvasRenderingContext2D which does not support getting state
     * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a
     * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,
     * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.
     * @return {ZIndexContextProxy} Context.
     */
    getContext() {
      return this.context_;
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     */
    draw(context) {
      this.instructions_.forEach((instructionsAtIndex) => {
        for (let i = 0, ii = instructionsAtIndex.length; i < ii; ++i) {
          const property = instructionsAtIndex[i];
          if (typeof property === 'function') {
            property(context);
            continue;
          }
          const instructionAtIndex = instructionsAtIndex[++i];
          if (typeof (/** @type {*} */ (context)[property]) === 'function') {
            /** @type {*} */ (context)[property](...instructionAtIndex);
          } else {
            if (typeof instructionAtIndex === 'function') {
              /** @type {*} */ (context)[property] = instructionAtIndex(context);
              continue;
            }
            /** @type {*} */ (context)[property] = instructionAtIndex;
          }
        }
      });
    }

    clear() {
      this.instructions_.length = 0;
      this.zIndex = 0;
      this.offset_ = 0;
    }

    /**
     * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to
     * avoid conflicting context.clip() or context.save()/restore() calls.
     */
    offset() {
      this.offset_ = this.instructions_.length;
      this.zIndex = 0;
    }
  }

  /**
   * @module ol/render/canvas/Executor
   */

  /**
   * @typedef {import('../../structs/RBush.js').Entry<import('../../Feature.js').FeatureLike>} DeclutterEntry
   */

  /**
   * @typedef {Object} ImageOrLabelDimensions
   * @property {number} drawImageX DrawImageX.
   * @property {number} drawImageY DrawImageY.
   * @property {number} drawImageW DrawImageW.
   * @property {number} drawImageH DrawImageH.
   * @property {number} originX OriginX.
   * @property {number} originY OriginY.
   * @property {Array<number>} scale Scale.
   * @property {DeclutterEntry} declutterBox DeclutterBox.
   * @property {import("../../transform.js").Transform} canvasTransform CanvasTransform.
   */

  /**
   * @typedef {{0: CanvasRenderingContext2D, 1: import('../../size.js').Size, 2: import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs
   */

  /**
   * @template T
   * @typedef {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default, import("../../style/Style.js").DeclutterMode): T} FeatureCallback
   */

  /**
   * @type {import("../../extent.js").Extent}
   */
  const tmpExtent = createEmpty();

  /** @type {import("../../coordinate.js").Coordinate} */
  const p1 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  const p2 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  const p3 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  const p4 = [];

  /**
   * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel
   * @return {DeclutterEntry} Declutter rbush entry.
   */
  function getDeclutterBox(replayImageOrLabelArgs) {
    return replayImageOrLabelArgs[3].declutterBox;
  }

  const rtlRegEx = new RegExp(
    /* eslint-disable prettier/prettier */
    '[' +
      String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +
      String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +
      String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +
      String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +
      String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +
    ']'
    /* eslint-enable prettier/prettier */
  );

  /**
   * @param {string} text Text.
   * @param {CanvasTextAlign} align Alignment.
   * @return {number} Text alignment.
   */
  function horizontalTextAlign(text, align) {
    if (align === 'start') {
      align = rtlRegEx.test(text) ? 'right' : 'left';
    } else if (align === 'end') {
      align = rtlRegEx.test(text) ? 'left' : 'right';
    }
    return TEXT_ALIGN[align];
  }

  /**
   * @param {Array<string>} acc Accumulator.
   * @param {string} line Line of text.
   * @param {number} i Index
   * @return {Array<string>} Accumulator.
   */
  function createTextChunks(acc, line, i) {
    if (i > 0) {
      acc.push('\n', '');
    }
    acc.push(line, '');
    return acc;
  }

  /**
   * Converts rich text to plain text for text along lines.
   * @param {string} result The resulting plain text.
   * @param {string} part Item of the rich text array.
   * @param {number} index Index of the item in the rich text array.
   * @return {string} The resulting plain text.
   */
  function richTextToPlainText(result, part, index) {
    if (index % 2 === 0) {
      result += part;
    }
    return result;
  }

  class Executor {
    /**
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {boolean} overlaps The replay can have overlapping geometries.
     * @param {import("../canvas.js").SerializableInstructions} instructions The serializable instructions.
     * @param {boolean} [deferredRendering] Enable deferred rendering.
     */
    constructor(
      resolution,
      pixelRatio,
      overlaps,
      instructions,
      deferredRendering,
    ) {
      /**
       * @protected
       * @type {boolean}
       */
      this.overlaps = overlaps;

      /**
       * @protected
       * @type {number}
       */
      this.pixelRatio = pixelRatio;

      /**
       * @protected
       * @const
       * @type {number}
       */
      this.resolution = resolution;

      /**
       * @private
       * @type {number}
       */
      this.alignAndScaleFill_;

      /**
       * @protected
       * @type {Array<*>}
       */
      this.instructions = instructions.instructions;

      /**
       * @protected
       * @type {Array<number>}
       */
      this.coordinates = instructions.coordinates;

      /**
       * @private
       * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
       */
      this.coordinateCache_ = {};

      /**
       * @private
       * @type {!import("../../transform.js").Transform}
       */
      this.renderedTransform_ = create();

      /**
       * @protected
       * @type {Array<*>}
       */
      this.hitDetectionInstructions = instructions.hitDetectionInstructions;

      /**
       * @private
       * @type {Array<number>}
       */
      this.pixelCoordinates_ = null;

      /**
       * @private
       * @type {number}
       */
      this.viewRotation_ = 0;

      /**
       * @type {!Object<string, import("../canvas.js").FillState>}
       */
      this.fillStates = instructions.fillStates || {};

      /**
       * @type {!Object<string, import("../canvas.js").StrokeState>}
       */
      this.strokeStates = instructions.strokeStates || {};

      /**
       * @type {!Object<string, import("../canvas.js").TextState>}
       */
      this.textStates = instructions.textStates || {};

      /**
       * @private
       * @type {Object<string, Object<string, number>>}
       */
      this.widths_ = {};

      /**
       * @private
       * @type {Object<string, import("../canvas.js").Label>}
       */
      this.labels_ = {};

      /**
       * @private
       * @type {import("../canvas/ZIndexContext.js").default}
       */
      this.zIndexContext_ = deferredRendering ? new ZIndexContext() : null;
    }

    /**
     * @return {ZIndexContext} ZIndex context.
     */
    getZIndexContext() {
      return this.zIndexContext_;
    }

    /**
     * @param {string|Array<string>} text Text.
     * @param {string} textKey Text style key.
     * @param {string} fillKey Fill style key.
     * @param {string} strokeKey Stroke style key.
     * @return {import("../canvas.js").Label} Label.
     */
    createLabel(text, textKey, fillKey, strokeKey) {
      const key = text + textKey + fillKey + strokeKey;
      if (this.labels_[key]) {
        return this.labels_[key];
      }
      const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;
      const fillState = fillKey ? this.fillStates[fillKey] : null;
      const textState = this.textStates[textKey];
      const pixelRatio = this.pixelRatio;
      const scale = [
        textState.scale[0] * pixelRatio,
        textState.scale[1] * pixelRatio,
      ];
      const align = textState.justify
        ? TEXT_ALIGN[textState.justify]
        : horizontalTextAlign(
            Array.isArray(text) ? text[0] : text,
            textState.textAlign || defaultTextAlign,
          );
      const strokeWidth =
        strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;

      const chunks = Array.isArray(text)
        ? text
        : String(text).split('\n').reduce(createTextChunks, []);

      const {width, height, widths, heights, lineWidths} = getTextDimensions(
        textState,
        chunks,
      );
      const renderWidth = width + strokeWidth;
      const contextInstructions = [];
      // make canvas 2 pixels wider to account for italic text width measurement errors
      const w = (renderWidth + 2) * scale[0];
      const h = (height + strokeWidth) * scale[1];
      /** @type {import("../canvas.js").Label} */
      const label = {
        width: w < 0 ? Math.floor(w) : Math.ceil(w),
        height: h < 0 ? Math.floor(h) : Math.ceil(h),
        contextInstructions: contextInstructions,
      };
      if (scale[0] != 1 || scale[1] != 1) {
        contextInstructions.push('scale', scale);
      }
      if (strokeKey) {
        contextInstructions.push('strokeStyle', strokeState.strokeStyle);
        contextInstructions.push('lineWidth', strokeWidth);
        contextInstructions.push('lineCap', strokeState.lineCap);
        contextInstructions.push('lineJoin', strokeState.lineJoin);
        contextInstructions.push('miterLimit', strokeState.miterLimit);
        contextInstructions.push('setLineDash', [strokeState.lineDash]);
        contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);
      }
      if (fillKey) {
        contextInstructions.push('fillStyle', fillState.fillStyle);
      }
      contextInstructions.push('textBaseline', 'middle');
      contextInstructions.push('textAlign', 'center');
      const leftRight = 0.5 - align;
      let x = align * renderWidth + leftRight * strokeWidth;
      const strokeInstructions = [];
      const fillInstructions = [];
      let lineHeight = 0;
      let lineOffset = 0;
      let widthHeightIndex = 0;
      let lineWidthIndex = 0;
      let previousFont;
      for (let i = 0, ii = chunks.length; i < ii; i += 2) {
        const text = chunks[i];
        if (text === '\n') {
          lineOffset += lineHeight;
          lineHeight = 0;
          x = align * renderWidth + leftRight * strokeWidth;
          ++lineWidthIndex;
          continue;
        }
        const font = chunks[i + 1] || textState.font;
        if (font !== previousFont) {
          if (strokeKey) {
            strokeInstructions.push('font', font);
          }
          if (fillKey) {
            fillInstructions.push('font', font);
          }
          previousFont = font;
        }
        lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);
        const fillStrokeArgs = [
          text,
          x +
            leftRight * widths[widthHeightIndex] +
            align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),
          0.5 * (strokeWidth + lineHeight) + lineOffset,
        ];
        x += widths[widthHeightIndex];
        if (strokeKey) {
          strokeInstructions.push('strokeText', fillStrokeArgs);
        }
        if (fillKey) {
          fillInstructions.push('fillText', fillStrokeArgs);
        }
        ++widthHeightIndex;
      }
      Array.prototype.push.apply(contextInstructions, strokeInstructions);
      Array.prototype.push.apply(contextInstructions, fillInstructions);
      this.labels_[key] = label;
      return label;
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     */
    replayTextBackground_(
      context,
      p1,
      p2,
      p3,
      p4,
      fillInstruction,
      strokeInstruction,
    ) {
      context.beginPath();
      context.moveTo.apply(context, p1);
      context.lineTo.apply(context, p2);
      context.lineTo.apply(context, p3);
      context.lineTo.apply(context, p4);
      context.lineTo.apply(context, p1);
      if (fillInstruction) {
        this.alignAndScaleFill_ = /** @type {number} */ (fillInstruction[2]);
        context.fillStyle = /** @type {string} */ (fillInstruction[1]);
        this.fill_(context);
      }
      if (strokeInstruction) {
        this.setStrokeStyle_(
          context,
          /** @type {Array<*>} */ (strokeInstruction),
        );
        context.stroke();
      }
    }

    /**
     * @private
     * @param {number} sheetWidth Width of the sprite sheet.
     * @param {number} sheetHeight Height of the sprite sheet.
     * @param {number} centerX X.
     * @param {number} centerY Y.
     * @param {number} width Width.
     * @param {number} height Height.
     * @param {number} anchorX Anchor X.
     * @param {number} anchorY Anchor Y.
     * @param {number} originX Origin X.
     * @param {number} originY Origin Y.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} scale Scale.
     * @param {boolean} snapToPixel Snap to pixel.
     * @param {Array<number>} padding Padding.
     * @param {boolean} fillStroke Background fill or stroke.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.
     */
    calculateImageOrLabelDimensions_(
      sheetWidth,
      sheetHeight,
      centerX,
      centerY,
      width,
      height,
      anchorX,
      anchorY,
      originX,
      originY,
      rotation,
      scale,
      snapToPixel,
      padding,
      fillStroke,
      feature,
    ) {
      anchorX *= scale[0];
      anchorY *= scale[1];
      let x = centerX - anchorX;
      let y = centerY - anchorY;

      const w = width + originX > sheetWidth ? sheetWidth - originX : width;
      const h = height + originY > sheetHeight ? sheetHeight - originY : height;
      const boxW = padding[3] + w * scale[0] + padding[1];
      const boxH = padding[0] + h * scale[1] + padding[2];
      const boxX = x - padding[3];
      const boxY = y - padding[0];

      if (fillStroke || rotation !== 0) {
        p1[0] = boxX;
        p4[0] = boxX;
        p1[1] = boxY;
        p2[1] = boxY;
        p2[0] = boxX + boxW;
        p3[0] = p2[0];
        p3[1] = boxY + boxH;
        p4[1] = p3[1];
      }

      let transform;
      if (rotation !== 0) {
        transform = compose(
          create(),
          centerX,
          centerY,
          1,
          1,
          rotation,
          -centerX,
          -centerY,
        );

        apply(transform, p1);
        apply(transform, p2);
        apply(transform, p3);
        apply(transform, p4);
        createOrUpdate$2(
          Math.min(p1[0], p2[0], p3[0], p4[0]),
          Math.min(p1[1], p2[1], p3[1], p4[1]),
          Math.max(p1[0], p2[0], p3[0], p4[0]),
          Math.max(p1[1], p2[1], p3[1], p4[1]),
          tmpExtent,
        );
      } else {
        createOrUpdate$2(
          Math.min(boxX, boxX + boxW),
          Math.min(boxY, boxY + boxH),
          Math.max(boxX, boxX + boxW),
          Math.max(boxY, boxY + boxH),
          tmpExtent,
        );
      }
      if (snapToPixel) {
        x = Math.round(x);
        y = Math.round(y);
      }
      return {
        drawImageX: x,
        drawImageY: y,
        drawImageW: w,
        drawImageH: h,
        originX: originX,
        originY: originY,
        declutterBox: {
          minX: tmpExtent[0],
          minY: tmpExtent[1],
          maxX: tmpExtent[2],
          maxY: tmpExtent[3],
          value: feature,
        },
        canvasTransform: transform,
        scale: scale,
      };
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.
     * @param {import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.
     * @param {ImageOrLabelDimensions} dimensions Dimensions.
     * @param {number} opacity Opacity.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     * @return {boolean} The image or label was rendered.
     */
    replayImageOrLabel_(
      context,
      scaledCanvasSize,
      imageOrLabel,
      dimensions,
      opacity,
      fillInstruction,
      strokeInstruction,
    ) {
      const fillStroke = !!(fillInstruction || strokeInstruction);

      const box = dimensions.declutterBox;
      const strokePadding = strokeInstruction
        ? (strokeInstruction[2] * dimensions.scale[0]) / 2
        : 0;
      const intersects =
        box.minX - strokePadding <= scaledCanvasSize[0] &&
        box.maxX + strokePadding >= 0 &&
        box.minY - strokePadding <= scaledCanvasSize[1] &&
        box.maxY + strokePadding >= 0;

      if (intersects) {
        if (fillStroke) {
          this.replayTextBackground_(
            context,
            p1,
            p2,
            p3,
            p4,
            /** @type {Array<*>} */ (fillInstruction),
            /** @type {Array<*>} */ (strokeInstruction),
          );
        }
        drawImageOrLabel(
          context,
          dimensions.canvasTransform,
          opacity,
          imageOrLabel,
          dimensions.originX,
          dimensions.originY,
          dimensions.drawImageW,
          dimensions.drawImageH,
          dimensions.drawImageX,
          dimensions.drawImageY,
          dimensions.scale,
        );
      }
      return true;
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     */
    fill_(context) {
      const alignAndScale = this.alignAndScaleFill_;
      if (alignAndScale) {
        const origin = apply(this.renderedTransform_, [0, 0]);
        const repeatSize = 512 * this.pixelRatio;
        context.save();
        context.translate(origin[0] % repeatSize, origin[1] % repeatSize);
        if (alignAndScale !== 1) {
          context.scale(alignAndScale, alignAndScale);
        }
        context.rotate(this.viewRotation_);
      }
      context.fill();
      if (alignAndScale) {
        context.restore();
      }
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {Array<*>} instruction Instruction.
     */
    setStrokeStyle_(context, instruction) {
      context.strokeStyle =
        /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
      context.lineWidth = /** @type {number} */ (instruction[2]);
      context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);
      context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);
      context.miterLimit = /** @type {number} */ (instruction[5]);
      context.lineDashOffset = /** @type {number} */ (instruction[7]);
      context.setLineDash(/** @type {Array<number>} */ (instruction[6]));
    }

    /**
     * @private
     * @param {string|Array<string>} text The text to draw.
     * @param {string} textKey The key of the text state.
     * @param {string} strokeKey The key for the stroke state.
     * @param {string} fillKey The key for the fill state.
     * @return {{label: import("../canvas.js").Label, anchorX: number, anchorY: number}} The text image and its anchor.
     */
    drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {
      const textState = this.textStates[textKey];

      const label = this.createLabel(text, textKey, fillKey, strokeKey);

      const strokeState = this.strokeStates[strokeKey];
      const pixelRatio = this.pixelRatio;
      const align = horizontalTextAlign(
        Array.isArray(text) ? text[0] : text,
        textState.textAlign || defaultTextAlign,
      );
      const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];
      const strokeWidth =
        strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;

      // Remove the 2 pixels we added in createLabel() for the anchor
      const width = label.width / pixelRatio - 2 * textState.scale[0];
      const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;
      const anchorY =
        (baseline * label.height) / pixelRatio +
        2 * (0.5 - baseline) * strokeWidth;

      return {
        label: label,
        anchorX: anchorX,
        anchorY: anchorY,
      };
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {Array<*>} instructions Instructions array.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     * @param {FeatureCallback<T>} [featureCallback] Feature callback.
     * @param {import("../../extent.js").Extent} [hitExtent] Only check
     *     features that intersect this extent.
     * @param {import("rbush").default<DeclutterEntry>} [declutterTree] Declutter tree.
     * @return {T|undefined} Callback result.
     * @template T
     */
    execute_(
      context,
      scaledCanvasSize,
      transform,
      instructions,
      snapToPixel,
      featureCallback,
      hitExtent,
      declutterTree,
    ) {
      const zIndexContext = this.zIndexContext_;
      /** @type {Array<number>} */
      let pixelCoordinates;
      if (this.pixelCoordinates_ && equals$2(transform, this.renderedTransform_)) {
        pixelCoordinates = this.pixelCoordinates_;
      } else {
        if (!this.pixelCoordinates_) {
          this.pixelCoordinates_ = [];
        }
        pixelCoordinates = transform2D(
          this.coordinates,
          0,
          this.coordinates.length,
          2,
          transform,
          this.pixelCoordinates_,
        );
        setFromArray(this.renderedTransform_, transform);
      }
      let i = 0; // instruction index
      const ii = instructions.length; // end of instructions
      let d = 0; // data index
      let dd; // end of per-instruction data
      let anchorX,
        anchorY,
        /** @type {import('../../style/Style.js').DeclutterMode} */
        declutterMode,
        prevX,
        prevY,
        roundX,
        roundY,
        image,
        text,
        textKey,
        strokeKey,
        fillKey;
      let pendingFill = 0;
      let pendingStroke = 0;
      const coordinateCache = this.coordinateCache_;
      const viewRotation = this.viewRotation_;
      const viewRotationFromTransform =
        Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;

      const state = /** @type {import("../../render.js").State} */ ({
        context: context,
        pixelRatio: this.pixelRatio,
        resolution: this.resolution,
        rotation: viewRotation,
      });

      // When the batch size gets too big, performance decreases. 200 is a good
      // balance between batch size and number of fill/stroke instructions.
      const batchSize =
        this.instructions != instructions || this.overlaps ? 0 : 200;
      let /** @type {import("../../Feature.js").FeatureLike} */ feature;
      let x, y, currentGeometry;
      while (i < ii) {
        const instruction = instructions[i];
        const type = /** @type {import("./Instruction.js").default} */ (
          instruction[0]
        );
        switch (type) {
          case Instruction.BEGIN_GEOMETRY:
            feature = /** @type {import("../../Feature.js").FeatureLike} */ (
              instruction[1]
            );
            currentGeometry = instruction[3];
            if (!feature.getGeometry()) {
              i = /** @type {number} */ (instruction[2]);
            } else if (
              hitExtent !== undefined &&
              !intersects$1(hitExtent, currentGeometry.getExtent())
            ) {
              i = /** @type {number} */ (instruction[2]) + 1;
            } else {
              ++i;
            }
            if (zIndexContext) {
              zIndexContext.zIndex = instruction[4];
            }
            break;
          case Instruction.BEGIN_PATH:
            if (pendingFill > batchSize) {
              this.fill_(context);
              pendingFill = 0;
            }
            if (pendingStroke > batchSize) {
              context.stroke();
              pendingStroke = 0;
            }
            if (!pendingFill && !pendingStroke) {
              context.beginPath();
              prevX = NaN;
              prevY = NaN;
            }
            ++i;
            break;
          case Instruction.CIRCLE:
            d = /** @type {number} */ (instruction[1]);
            const x1 = pixelCoordinates[d];
            const y1 = pixelCoordinates[d + 1];
            const x2 = pixelCoordinates[d + 2];
            const y2 = pixelCoordinates[d + 3];
            const dx = x2 - x1;
            const dy = y2 - y1;
            const r = Math.sqrt(dx * dx + dy * dy);
            context.moveTo(x1 + r, y1);
            context.arc(x1, y1, r, 0, 2 * Math.PI, true);
            ++i;
            break;
          case Instruction.CLOSE_PATH:
            context.closePath();
            ++i;
            break;
          case Instruction.CUSTOM:
            d = /** @type {number} */ (instruction[1]);
            dd = instruction[2];
            const geometry =
              /** @type {import("../../geom/SimpleGeometry.js").default} */ (
                instruction[3]
              );
            const renderer = instruction[4];
            const fn = instruction[5];
            state.geometry = geometry;
            state.feature = feature;
            if (!(i in coordinateCache)) {
              coordinateCache[i] = [];
            }
            const coords = coordinateCache[i];
            if (fn) {
              fn(pixelCoordinates, d, dd, 2, coords);
            } else {
              coords[0] = pixelCoordinates[d];
              coords[1] = pixelCoordinates[d + 1];
              coords.length = 2;
            }
            if (zIndexContext) {
              zIndexContext.zIndex = instruction[6];
            }
            renderer(coords, state);
            ++i;
            break;
          case Instruction.DRAW_IMAGE:
            d = /** @type {number} */ (instruction[1]);
            dd = /** @type {number} */ (instruction[2]);
            image =
              /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (
                instruction[3]
              );

            // Remaining arguments in DRAW_IMAGE are in alphabetical order
            anchorX = /** @type {number} */ (instruction[4]);
            anchorY = /** @type {number} */ (instruction[5]);
            let height = /** @type {number} */ (instruction[6]);
            const opacity = /** @type {number} */ (instruction[7]);
            const originX = /** @type {number} */ (instruction[8]);
            const originY = /** @type {number} */ (instruction[9]);
            const rotateWithView = /** @type {boolean} */ (instruction[10]);
            let rotation = /** @type {number} */ (instruction[11]);
            const scale = /** @type {import("../../size.js").Size} */ (
              instruction[12]
            );
            let width = /** @type {number} */ (instruction[13]);
            declutterMode = instruction[14] || 'declutter';
            const declutterImageWithText =
              /** @type {{args: import("../canvas.js").DeclutterImageWithText, declutterMode: import('../../style/Style.js').DeclutterMode}} */ (
                instruction[15]
              );

            if (!image && instruction.length >= 20) {
              // create label images
              text = /** @type {string} */ (instruction[19]);
              textKey = /** @type {string} */ (instruction[20]);
              strokeKey = /** @type {string} */ (instruction[21]);
              fillKey = /** @type {string} */ (instruction[22]);
              const labelWithAnchor = this.drawLabelWithPointPlacement_(
                text,
                textKey,
                strokeKey,
                fillKey,
              );
              image = labelWithAnchor.label;
              instruction[3] = image;
              const textOffsetX = /** @type {number} */ (instruction[23]);
              anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;
              instruction[4] = anchorX;
              const textOffsetY = /** @type {number} */ (instruction[24]);
              anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;
              instruction[5] = anchorY;
              height = image.height;
              instruction[6] = height;
              width = image.width;
              instruction[13] = width;
            }

            let geometryWidths;
            if (instruction.length > 25) {
              geometryWidths = /** @type {number} */ (instruction[25]);
            }

            let padding, backgroundFillInstruction, backgroundStrokeInstruction;
            if (instruction.length > 17) {
              padding = /** @type {Array<number>} */ (instruction[16]);
              backgroundFillInstruction = /** @type {Array<*>} */ (
                instruction[17]
              );
              backgroundStrokeInstruction = /** @type {Array<*>} */ (
                instruction[18]
              );
            } else {
              padding = defaultPadding;
              backgroundFillInstruction = null;
              backgroundStrokeInstruction = null;
            }

            if (rotateWithView && viewRotationFromTransform) {
              // Canvas is expected to be rotated to reverse view rotation.
              rotation += viewRotation;
            } else if (!rotateWithView && !viewRotationFromTransform) {
              // Canvas is not rotated, images need to be rotated back to be north-up.
              rotation -= viewRotation;
            }
            let widthIndex = 0;
            for (; d < dd; d += 2) {
              if (
                geometryWidths &&
                geometryWidths[widthIndex++] < width / this.pixelRatio
              ) {
                continue;
              }
              const dimensions = this.calculateImageOrLabelDimensions_(
                image.width,
                image.height,
                pixelCoordinates[d],
                pixelCoordinates[d + 1],
                width,
                height,
                anchorX,
                anchorY,
                originX,
                originY,
                rotation,
                scale,
                snapToPixel,
                padding,
                !!backgroundFillInstruction || !!backgroundStrokeInstruction,
                feature,
              );
              /** @type {ReplayImageOrLabelArgs} */
              const args = [
                context,
                scaledCanvasSize,
                image,
                dimensions,
                opacity,
                backgroundFillInstruction,
                backgroundStrokeInstruction,
              ];
              if (declutterTree) {
                let imageArgs, imageDeclutterMode, imageDeclutterBox;
                if (declutterImageWithText) {
                  const index = dd - d;
                  if (!declutterImageWithText[index]) {
                    // We now have the image for an image+text combination.
                    declutterImageWithText[index] = {args, declutterMode};
                    // Don't render anything for now, wait for the text.
                    continue;
                  }
                  const imageDeclutter = declutterImageWithText[index];
                  imageArgs = imageDeclutter.args;
                  imageDeclutterMode = imageDeclutter.declutterMode;
                  delete declutterImageWithText[index];
                  imageDeclutterBox = getDeclutterBox(imageArgs);
                }
                // We now have image and text for an image+text combination.
                let renderImage, renderText;
                if (
                  imageArgs &&
                  (imageDeclutterMode !== 'declutter' ||
                    !declutterTree.collides(imageDeclutterBox))
                ) {
                  renderImage = true;
                }
                if (
                  declutterMode !== 'declutter' ||
                  !declutterTree.collides(dimensions.declutterBox)
                ) {
                  renderText = true;
                }
                if (
                  imageDeclutterMode === 'declutter' &&
                  declutterMode === 'declutter'
                ) {
                  const render = renderImage && renderText;
                  renderImage = render;
                  renderText = render;
                }
                if (renderImage) {
                  if (imageDeclutterMode !== 'none') {
                    declutterTree.insert(imageDeclutterBox);
                  }
                  this.replayImageOrLabel_.apply(this, imageArgs);
                }
                if (renderText) {
                  if (declutterMode !== 'none') {
                    declutterTree.insert(dimensions.declutterBox);
                  }
                  this.replayImageOrLabel_.apply(this, args);
                }
              } else {
                this.replayImageOrLabel_.apply(this, args);
              }
            }
            ++i;
            break;
          case Instruction.DRAW_CHARS:
            const begin = /** @type {number} */ (instruction[1]);
            const end = /** @type {number} */ (instruction[2]);
            const baseline = /** @type {number} */ (instruction[3]);
            const overflow = /** @type {number} */ (instruction[4]);
            fillKey = /** @type {string} */ (instruction[5]);
            const maxAngle = /** @type {number} */ (instruction[6]);
            const measurePixelRatio = /** @type {number} */ (instruction[7]);
            const offsetY = /** @type {number} */ (instruction[8]);
            strokeKey = /** @type {string} */ (instruction[9]);
            const strokeWidth = /** @type {number} */ (instruction[10]);
            text = /** @type {string|Array<string>} */ (instruction[11]);
            if (Array.isArray(text)) {
              //FIXME Add support for rich text along lines
              text = text.reduce(richTextToPlainText, '');
            }
            textKey = /** @type {string} */ (instruction[12]);
            const pixelRatioScale = [
              /** @type {number} */ (instruction[13]),
              /** @type {number} */ (instruction[13]),
            ];
            declutterMode = instruction[14] || 'declutter';

            const textKeepUpright = /** @type {boolean} */ (instruction[15]);
            const textState = this.textStates[textKey];
            const font = textState.font;
            const textScale = [
              textState.scale[0] * measurePixelRatio,
              textState.scale[1] * measurePixelRatio,
            ];

            let cachedWidths;
            if (font in this.widths_) {
              cachedWidths = this.widths_[font];
            } else {
              cachedWidths = {};
              this.widths_[font] = cachedWidths;
            }

            const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);
            const textLength =
              Math.abs(textScale[0]) *
              measureAndCacheTextWidth(font, text, cachedWidths);
            if (overflow || textLength <= pathLength) {
              const textAlign = this.textStates[textKey].textAlign;
              const startM =
                (pathLength - textLength) * horizontalTextAlign(text, textAlign);
              const parts = drawTextOnPath(
                pixelCoordinates,
                begin,
                end,
                2,
                text,
                startM,
                maxAngle,
                Math.abs(textScale[0]),
                measureAndCacheTextWidth,
                font,
                cachedWidths,
                viewRotationFromTransform ? 0 : this.viewRotation_,
                textKeepUpright,
              );
              drawChars: if (parts) {
                /** @type {Array<ReplayImageOrLabelArgs>} */
                const replayImageOrLabelArgs = [];
                let c, cc, chars, label, part;
                if (strokeKey) {
                  for (c = 0, cc = parts.length; c < cc; ++c) {
                    part = parts[c]; // x, y, anchorX, rotation, chunk
                    chars = /** @type {string} */ (part[4]);
                    label = this.createLabel(chars, textKey, '', strokeKey);
                    anchorX =
                      /** @type {number} */ (part[2]) +
                      (textScale[0] < 0 ? -strokeWidth : strokeWidth);
                    anchorY =
                      baseline * label.height +
                      ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /
                        textScale[0] -
                      offsetY;
                    const dimensions = this.calculateImageOrLabelDimensions_(
                      label.width,
                      label.height,
                      part[0],
                      part[1],
                      label.width,
                      label.height,
                      anchorX,
                      anchorY,
                      0,
                      0,
                      part[3],
                      pixelRatioScale,
                      false,
                      defaultPadding,
                      false,
                      feature,
                    );
                    if (
                      declutterTree &&
                      declutterMode === 'declutter' &&
                      declutterTree.collides(dimensions.declutterBox)
                    ) {
                      break drawChars;
                    }
                    replayImageOrLabelArgs.push([
                      context,
                      scaledCanvasSize,
                      label,
                      dimensions,
                      1,
                      null,
                      null,
                    ]);
                  }
                }
                if (fillKey) {
                  for (c = 0, cc = parts.length; c < cc; ++c) {
                    part = parts[c]; // x, y, anchorX, rotation, chunk
                    chars = /** @type {string} */ (part[4]);
                    label = this.createLabel(chars, textKey, fillKey, '');
                    anchorX = /** @type {number} */ (part[2]);
                    anchorY = baseline * label.height - offsetY;
                    const dimensions = this.calculateImageOrLabelDimensions_(
                      label.width,
                      label.height,
                      part[0],
                      part[1],
                      label.width,
                      label.height,
                      anchorX,
                      anchorY,
                      0,
                      0,
                      part[3],
                      pixelRatioScale,
                      false,
                      defaultPadding,
                      false,
                      feature,
                    );
                    if (
                      declutterTree &&
                      declutterMode === 'declutter' &&
                      declutterTree.collides(dimensions.declutterBox)
                    ) {
                      break drawChars;
                    }
                    replayImageOrLabelArgs.push([
                      context,
                      scaledCanvasSize,
                      label,
                      dimensions,
                      1,
                      null,
                      null,
                    ]);
                  }
                }
                if (declutterTree && declutterMode !== 'none') {
                  declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));
                }
                for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {
                  this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);
                }
              }
            }
            ++i;
            break;
          case Instruction.END_GEOMETRY:
            if (featureCallback !== undefined) {
              feature = /** @type {import("../../Feature.js").FeatureLike} */ (
                instruction[1]
              );
              const result = featureCallback(
                feature,
                currentGeometry,
                declutterMode,
              );
              if (result) {
                return result;
              }
            }
            ++i;
            break;
          case Instruction.FILL:
            if (batchSize) {
              pendingFill++;
            } else {
              this.fill_(context);
            }
            ++i;
            break;
          case Instruction.MOVE_TO_LINE_TO:
            d = /** @type {number} */ (instruction[1]);
            dd = /** @type {number} */ (instruction[2]);
            x = pixelCoordinates[d];
            y = pixelCoordinates[d + 1];
            context.moveTo(x, y);
            prevX = (x + 0.5) | 0;
            prevY = (y + 0.5) | 0;
            for (d += 2; d < dd; d += 2) {
              x = pixelCoordinates[d];
              y = pixelCoordinates[d + 1];
              roundX = (x + 0.5) | 0;
              roundY = (y + 0.5) | 0;
              if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                context.lineTo(x, y);
                prevX = roundX;
                prevY = roundY;
              }
            }
            ++i;
            break;
          case Instruction.SET_FILL_STYLE:
            this.alignAndScaleFill_ = instruction[2];

            if (pendingFill) {
              this.fill_(context);
              pendingFill = 0;
              if (pendingStroke) {
                context.stroke();
                pendingStroke = 0;
              }
            }

            /** @type {import("../../colorlike.js").ColorLike} */
            context.fillStyle = instruction[1];
            ++i;
            break;
          case Instruction.SET_STROKE_STYLE:
            if (pendingStroke) {
              context.stroke();
              pendingStroke = 0;
            }
            this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));
            ++i;
            break;
          case Instruction.STROKE:
            if (batchSize) {
              pendingStroke++;
            } else {
              context.stroke();
            }
            ++i;
            break;
          default: // consume the instruction anyway, to avoid an infinite loop
            ++i;
            break;
        }
      }
      if (pendingFill) {
        this.fill_(context);
      }
      if (pendingStroke) {
        context.stroke();
      }
      return undefined;
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     * @param {import("rbush").default<DeclutterEntry>} [declutterTree] Declutter tree.
     */
    execute(
      context,
      scaledCanvasSize,
      transform,
      viewRotation,
      snapToPixel,
      declutterTree,
    ) {
      this.viewRotation_ = viewRotation;
      this.execute_(
        context,
        scaledCanvasSize,
        transform,
        this.instructions,
        snapToPixel,
        undefined,
        undefined,
        declutterTree,
      );
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {FeatureCallback<T>} [featureCallback] Feature callback.
     * @param {import("../../extent.js").Extent} [hitExtent] Only check
     *     features that intersect this extent.
     * @return {T|undefined} Callback result.
     * @template T
     */
    executeHitDetection(
      context,
      transform,
      viewRotation,
      featureCallback,
      hitExtent,
    ) {
      this.viewRotation_ = viewRotation;
      return this.execute_(
        context,
        [context.canvas.width, context.canvas.height],
        transform,
        this.hitDetectionInstructions,
        true,
        featureCallback,
        hitExtent,
      );
    }
  }

  /**
   * @module ol/render/canvas/ExecutorGroup
   */


  /**
   * @const
   * @type {Array<import("../canvas.js").BuilderType>}
   */
  const ALL = [
    'Polygon',
    'Circle',
    'LineString',
    'Image',
    'Text',
    'Default',
  ];

  /**
   * @const
   * @type {Array<import("../canvas.js").BuilderType>}
   */
  const DECLUTTER = ['Image', 'Text'];

  /**
   * @const
   * @type {Array<import("../canvas.js").BuilderType>}
   */
  const NON_DECLUTTER = ALL.filter(
    (builderType) => !DECLUTTER.includes(builderType),
  );

  class ExecutorGroup {
    /**
     * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a
     * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`
     * should be set here, unless the target context does not exceed that extent (which
     * can be the case when rendering to tiles).
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {boolean} overlaps The executor group can have overlapping geometries.
     * @param {!Object<string, !Object<import("../canvas.js").BuilderType, import("../canvas.js").SerializableInstructions>>} allInstructions
     * The serializable instructions.
     * @param {number} [renderBuffer] Optional rendering buffer.
     * @param {boolean} [deferredRendering] Enable deferred rendering with renderDeferred().
     */
    constructor(
      maxExtent,
      resolution,
      pixelRatio,
      overlaps,
      allInstructions,
      renderBuffer,
      deferredRendering,
    ) {
      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent_ = maxExtent;

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = overlaps;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.resolution_ = resolution;

      /**
       * @private
       * @type {number|undefined}
       */
      this.renderBuffer_ = renderBuffer;

      /**
       * @private
       * @type {!Object<string, !Object<string, import("./Executor").default>>}
       */
      this.executorsByZIndex_ = {};

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.hitDetectionContext_ = null;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.hitDetectionTransform_ = create();

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.renderedContext_ = null;

      /**
       * @private
       * @type {Object<number, Array<import("./ZIndexContext.js").default>>}
       */
      this.deferredZIndexContexts_ = {};

      this.createExecutors_(allInstructions, deferredRendering);
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     */
    clip(context, transform) {
      const flatClipCoords = this.getClipCoords(transform);
      context.beginPath();
      context.moveTo(flatClipCoords[0], flatClipCoords[1]);
      context.lineTo(flatClipCoords[2], flatClipCoords[3]);
      context.lineTo(flatClipCoords[4], flatClipCoords[5]);
      context.lineTo(flatClipCoords[6], flatClipCoords[7]);
      context.clip();
    }

    /**
     * Create executors and populate them using the provided instructions.
     * @private
     * @param {!Object<string, !Object<string, import("../canvas.js").SerializableInstructions>>} allInstructions The serializable instructions
     * @param {boolean} deferredRendering Enable deferred rendering.
     */
    createExecutors_(allInstructions, deferredRendering) {
      for (const zIndex in allInstructions) {
        let executors = this.executorsByZIndex_[zIndex];
        if (executors === undefined) {
          executors = {};
          this.executorsByZIndex_[zIndex] = executors;
        }
        const instructionByZindex = allInstructions[zIndex];
        for (const builderType in instructionByZindex) {
          const instructions = instructionByZindex[builderType];
          executors[builderType] = new Executor(
            this.resolution_,
            this.pixelRatio_,
            this.overlaps_,
            instructions,
            deferredRendering,
          );
        }
      }
    }

    /**
     * @param {Array<import("../canvas.js").BuilderType>} executors Executors.
     * @return {boolean} Has executors of the provided types.
     */
    hasExecutors(executors) {
      for (const zIndex in this.executorsByZIndex_) {
        const candidates = this.executorsByZIndex_[zIndex];
        for (let i = 0, ii = executors.length; i < ii; ++i) {
          if (executors[i] in candidates) {
            return true;
          }
        }
      }
      return false;
    }

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default, number): T} callback Feature callback.
     * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
     * @return {T|undefined} Callback result.
     * @template T
     */
    forEachFeatureAtCoordinate(
      coordinate,
      resolution,
      rotation,
      hitTolerance,
      callback,
      declutteredFeatures,
    ) {
      hitTolerance = Math.round(hitTolerance);
      const contextSize = hitTolerance * 2 + 1;
      const transform = compose(
        this.hitDetectionTransform_,
        hitTolerance + 0.5,
        hitTolerance + 0.5,
        1 / resolution,
        -1 / resolution,
        -rotation,
        -coordinate[0],
        -coordinate[1],
      );

      const newContext = !this.hitDetectionContext_;
      if (newContext) {
        this.hitDetectionContext_ = createCanvasContext2D(
          contextSize,
          contextSize,
        );
      }
      const context = this.hitDetectionContext_;

      if (
        context.canvas.width !== contextSize ||
        context.canvas.height !== contextSize
      ) {
        context.canvas.width = contextSize;
        context.canvas.height = contextSize;
      } else if (!newContext) {
        context.clearRect(0, 0, contextSize, contextSize);
      }

      /** @type {import("../../extent.js").Extent|undefined} */
      let hitExtent;
      if (this.renderBuffer_ !== undefined) {
        hitExtent = createEmpty();
        extendCoordinate(hitExtent, coordinate);
        buffer(
          hitExtent,
          resolution * (this.renderBuffer_ + hitTolerance),
          hitExtent,
        );
      }

      const indexes = getPixelIndexArray(hitTolerance);

      /** @type {import("../canvas.js").BuilderType} */
      let builderType;

      /**
       * @param {import("../../Feature.js").FeatureLike} feature Feature.
       * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
       * @param {import('../../style/Style.js').DeclutterMode} declutterMode Declutter mode.
       * @return {T|undefined} Callback result.
       */
      function featureCallback(feature, geometry, declutterMode) {
        const imageData = context.getImageData(
          0,
          0,
          contextSize,
          contextSize,
        ).data;
        for (let i = 0, ii = indexes.length; i < ii; i++) {
          if (imageData[indexes[i]] > 0) {
            if (
              !declutteredFeatures ||
              declutterMode === 'none' ||
              (builderType !== 'Image' && builderType !== 'Text') ||
              declutteredFeatures.includes(feature)
            ) {
              const idx = (indexes[i] - 3) / 4;
              const x = hitTolerance - (idx % contextSize);
              const y = hitTolerance - ((idx / contextSize) | 0);
              const result = callback(feature, geometry, x * x + y * y);
              if (result) {
                return result;
              }
            }
            context.clearRect(0, 0, contextSize, contextSize);
            break;
          }
        }
        return undefined;
      }

      /** @type {Array<number>} */
      const zs = Object.keys(this.executorsByZIndex_).map(Number);
      zs.sort(ascending);

      let i, j, executors, executor, result;
      for (i = zs.length - 1; i >= 0; --i) {
        const zIndexKey = zs[i].toString();
        executors = this.executorsByZIndex_[zIndexKey];
        for (j = ALL.length - 1; j >= 0; --j) {
          builderType = ALL[j];
          executor = executors[builderType];
          if (executor !== undefined) {
            result = executor.executeHitDetection(
              context,
              transform,
              rotation,
              featureCallback,
              hitExtent,
            );
            if (result) {
              return result;
            }
          }
        }
      }
      return undefined;
    }

    /**
     * @param {import("../../transform.js").Transform} transform Transform.
     * @return {Array<number>|null} Clip coordinates.
     */
    getClipCoords(transform) {
      const maxExtent = this.maxExtent_;
      if (!maxExtent) {
        return null;
      }
      const minX = maxExtent[0];
      const minY = maxExtent[1];
      const maxX = maxExtent[2];
      const maxY = maxExtent[3];
      const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];
      transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);
      return flatClipCoords;
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return isEmpty$1(this.executorsByZIndex_);
    }

    /**
     * @param {CanvasRenderingContext2D} targetContext Context.
     * @param {import('../../size.js').Size} scaledCanvasSize Scale of the context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
     * @param {Array<import("../canvas.js").BuilderType>} [builderTypes] Ordered replay types to replay.
     *     Default is {@link module:ol/render/replay~ALL}
     * @param {import("rbush").default<import('./Executor.js').DeclutterEntry>|null} [declutterTree] Declutter tree.
     *     When set to null, no decluttering is done, even when the executor group has a `ZIndexContext`.
     */
    execute(
      targetContext,
      scaledCanvasSize,
      transform,
      viewRotation,
      snapToPixel,
      builderTypes,
      declutterTree,
    ) {
      const zs = Object.keys(this.executorsByZIndex_).map(Number);
      zs.sort(declutterTree ? descending : ascending);

      builderTypes = builderTypes ? builderTypes : ALL;
      const maxBuilderTypes = ALL.length;
      for (let i = 0, ii = zs.length; i < ii; ++i) {
        const zIndexKey = zs[i].toString();
        const replays = this.executorsByZIndex_[zIndexKey];
        for (let j = 0, jj = builderTypes.length; j < jj; ++j) {
          const builderType = builderTypes[j];
          const replay = replays[builderType];
          if (replay !== undefined) {
            const zIndexContext =
              declutterTree === null ? undefined : replay.getZIndexContext();
            const context = zIndexContext
              ? zIndexContext.getContext()
              : targetContext;
            const requireClip =
              this.maxExtent_ &&
              builderType !== 'Image' &&
              builderType !== 'Text';
            if (requireClip) {
              context.save();
              // setup clipping so that the parts of over-simplified geometries are not
              // visible outside the current extent when panning
              this.clip(context, transform);
            }
            if (
              !zIndexContext ||
              builderType === 'Text' ||
              builderType === 'Image'
            ) {
              replay.execute(
                context,
                scaledCanvasSize,
                transform,
                viewRotation,
                snapToPixel,
                declutterTree,
              );
            } else {
              zIndexContext.pushFunction((context) =>
                replay.execute(
                  context,
                  scaledCanvasSize,
                  transform,
                  viewRotation,
                  snapToPixel,
                  declutterTree,
                ),
              );
            }
            if (requireClip) {
              context.restore();
            }
            if (zIndexContext) {
              zIndexContext.offset();
              const index = zs[i] * maxBuilderTypes + j;
              if (!this.deferredZIndexContexts_[index]) {
                this.deferredZIndexContexts_[index] = [];
              }
              this.deferredZIndexContexts_[index].push(zIndexContext);
            }
          }
        }
      }

      this.renderedContext_ = targetContext;
    }

    getDeferredZIndexContexts() {
      return this.deferredZIndexContexts_;
    }

    getRenderedContext() {
      return this.renderedContext_;
    }

    renderDeferred() {
      const deferredZIndexContexts = this.deferredZIndexContexts_;
      const zs = Object.keys(deferredZIndexContexts).map(Number).sort(ascending);
      for (let i = 0, ii = zs.length; i < ii; ++i) {
        deferredZIndexContexts[zs[i]].forEach((zIndexContext) => {
          zIndexContext.draw(this.renderedContext_); // FIXME Pass clip to replay for temporarily enabling clip
          zIndexContext.clear();
        });
        deferredZIndexContexts[zs[i]].length = 0;
      }
    }
  }

  /**
   * This cache is used to store arrays of indexes for calculated pixel circles
   * to increase performance.
   * It is a static property to allow each Replaygroup to access it.
   * @type {Object<number, Array<number>>}
   */
  const circlePixelIndexArrayCache = {};

  /**
   * This methods creates an array with indexes of all pixels within a circle,
   * ordered by how close they are to the center.
   * A cache is used to increase performance.
   * @param {number} radius Radius.
   * @return {Array<number>} An array with indexes within a circle.
   */
  function getPixelIndexArray(radius) {
    if (circlePixelIndexArrayCache[radius] !== undefined) {
      return circlePixelIndexArrayCache[radius];
    }

    const size = radius * 2 + 1;
    const maxDistanceSq = radius * radius;
    const distances = new Array(maxDistanceSq + 1);
    for (let i = 0; i <= radius; ++i) {
      for (let j = 0; j <= radius; ++j) {
        const distanceSq = i * i + j * j;
        if (distanceSq > maxDistanceSq) {
          break;
        }
        let distance = distances[distanceSq];
        if (!distance) {
          distance = [];
          distances[distanceSq] = distance;
        }
        distance.push(((radius + i) * size + (radius + j)) * 4 + 3);
        if (i > 0) {
          distance.push(((radius - i) * size + (radius + j)) * 4 + 3);
        }
        if (j > 0) {
          distance.push(((radius + i) * size + (radius - j)) * 4 + 3);
          if (i > 0) {
            distance.push(((radius - i) * size + (radius - j)) * 4 + 3);
          }
        }
      }
    }

    const pixelIndex = [];
    for (let i = 0, ii = distances.length; i < ii; ++i) {
      if (distances[i]) {
        pixelIndex.push(...distances[i]);
      }
    }

    circlePixelIndexArrayCache[radius] = pixelIndex;
    return pixelIndex;
  }

  /**
   * @module ol/style
   */

  var style = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Circle: CircleStyle,
    Fill: Fill,
    Icon: Icon,
    IconImage: IconImage,
    Image: ImageStyle,
    RegularShape: RegularShape,
    Stroke: Stroke,
    Style: Style,
    Text: Text
  });

  /**
   * @module ol/render/canvas/Immediate
   */
  // FIXME test, especially polygons with holes and multipolygons
  // FIXME need to handle large thick features (where pixel size matters)
  // FIXME add offset and end to ol/geom/flat/transform~transform2D?


  /**
   * @classdesc
   * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements
   * direct rendering of features and geometries to an HTML5 Canvas context.
   * Instances of this class are created internally by the library and
   * provided to application code as vectorContext member of the
   * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
   * render events emitted by layers and maps.
   */
  class CanvasImmediateRenderer extends VectorContext {
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {number} [squaredTolerance] Optional squared tolerance for simplification.
     * @param {import("../../proj.js").TransformFunction} [userTransform] Transform from user to view projection.
     */
    constructor(
      context,
      pixelRatio,
      extent,
      transform,
      viewRotation,
      squaredTolerance,
      userTransform,
    ) {
      super();

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.context_ = context;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.extent_ = extent;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.transform_ = transform;

      /**
       * @private
       * @type {number}
       */
      this.transformRotation_ = transform
        ? toFixed(Math.atan2(transform[1], transform[0]), 10)
        : 0;

      /**
       * @private
       * @type {number}
       */
      this.viewRotation_ = viewRotation;

      /**
       * @private
       * @type {number}
       */
      this.squaredTolerance_ = squaredTolerance;

      /**
       * @private
       * @type {import("../../proj.js").TransformFunction}
       */
      this.userTransform_ = userTransform;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.contextFillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.contextStrokeState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").TextState}
       */
      this.contextTextState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.fillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.strokeState_ = null;

      /**
       * @private
       * @type {import('../../DataTile.js').ImageLike}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number}
       */
      this.imageAnchorX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageAnchorY_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageHeight_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOpacity_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOriginX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOriginY_ = 0;

      /**
       * @private
       * @type {boolean}
       */
      this.imageRotateWithView_ = false;

      /**
       * @private
       * @type {number}
       */
      this.imageRotation_ = 0;

      /**
       * @private
       * @type {import("../../size.js").Size}
       */
      this.imageScale_ = [0, 0];

      /**
       * @private
       * @type {number}
       */
      this.imageWidth_ = 0;

      /**
       * @private
       * @type {string}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number}
       */
      this.textOffsetX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textOffsetY_ = 0;

      /**
       * @private
       * @type {boolean}
       */
      this.textRotateWithView_ = false;

      /**
       * @private
       * @type {number}
       */
      this.textRotation_ = 0;

      /**
       * @private
       * @type {import("../../size.js").Size}
       */
      this.textScale_ = [0, 0];

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.textFillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.textStrokeState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").TextState}
       */
      this.textState_ = null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.pixelCoordinates_ = [];

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.tmpLocalTransform_ = create();
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */
    drawImages_(flatCoordinates, offset, end, stride) {
      if (!this.image_) {
        return;
      }
      const pixelCoordinates = transform2D(
        flatCoordinates,
        offset,
        end,
        stride,
        this.transform_,
        this.pixelCoordinates_,
      );
      const context = this.context_;
      const localTransform = this.tmpLocalTransform_;
      const alpha = context.globalAlpha;
      if (this.imageOpacity_ != 1) {
        context.globalAlpha = alpha * this.imageOpacity_;
      }
      let rotation = this.imageRotation_;
      if (this.transformRotation_ === 0) {
        rotation -= this.viewRotation_;
      }
      if (this.imageRotateWithView_) {
        rotation += this.viewRotation_;
      }
      for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {
        const x = pixelCoordinates[i] - this.imageAnchorX_;
        const y = pixelCoordinates[i + 1] - this.imageAnchorY_;
        if (
          rotation !== 0 ||
          this.imageScale_[0] != 1 ||
          this.imageScale_[1] != 1
        ) {
          const centerX = x + this.imageAnchorX_;
          const centerY = y + this.imageAnchorY_;
          compose(
            localTransform,
            centerX,
            centerY,
            1,
            1,
            rotation,
            -centerX,
            -centerY,
          );
          context.save();
          context.transform.apply(context, localTransform);
          context.translate(centerX, centerY);
          context.scale(this.imageScale_[0], this.imageScale_[1]);
          context.drawImage(
            this.image_,
            this.imageOriginX_,
            this.imageOriginY_,
            this.imageWidth_,
            this.imageHeight_,
            -this.imageAnchorX_,
            -this.imageAnchorY_,
            this.imageWidth_,
            this.imageHeight_,
          );
          context.restore();
        } else {
          context.drawImage(
            this.image_,
            this.imageOriginX_,
            this.imageOriginY_,
            this.imageWidth_,
            this.imageHeight_,
            x,
            y,
            this.imageWidth_,
            this.imageHeight_,
          );
        }
      }
      if (this.imageOpacity_ != 1) {
        context.globalAlpha = alpha;
      }
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */
    drawText_(flatCoordinates, offset, end, stride) {
      if (!this.textState_ || this.text_ === '') {
        return;
      }
      if (this.textFillState_) {
        this.setContextFillState_(this.textFillState_);
      }
      if (this.textStrokeState_) {
        this.setContextStrokeState_(this.textStrokeState_);
      }
      this.setContextTextState_(this.textState_);
      const pixelCoordinates = transform2D(
        flatCoordinates,
        offset,
        end,
        stride,
        this.transform_,
        this.pixelCoordinates_,
      );
      const context = this.context_;
      let rotation = this.textRotation_;
      if (this.transformRotation_ === 0) {
        rotation -= this.viewRotation_;
      }
      if (this.textRotateWithView_) {
        rotation += this.viewRotation_;
      }
      for (; offset < end; offset += stride) {
        const x = pixelCoordinates[offset] + this.textOffsetX_;
        const y = pixelCoordinates[offset + 1] + this.textOffsetY_;
        if (
          rotation !== 0 ||
          this.textScale_[0] != 1 ||
          this.textScale_[1] != 1
        ) {
          context.save();
          context.translate(x - this.textOffsetX_, y - this.textOffsetY_);
          context.rotate(rotation);
          context.translate(this.textOffsetX_, this.textOffsetY_);
          context.scale(this.textScale_[0], this.textScale_[1]);
          if (this.textStrokeState_) {
            context.strokeText(this.text_, 0, 0);
          }
          if (this.textFillState_) {
            context.fillText(this.text_, 0, 0);
          }
          context.restore();
        } else {
          if (this.textStrokeState_) {
            context.strokeText(this.text_, x, y);
          }
          if (this.textFillState_) {
            context.fillText(this.text_, x, y);
          }
        }
      }
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} close Close.
     * @private
     * @return {number} end End.
     */
    moveToLineTo_(flatCoordinates, offset, end, stride, close) {
      const context = this.context_;
      const pixelCoordinates = transform2D(
        flatCoordinates,
        offset,
        end,
        stride,
        this.transform_,
        this.pixelCoordinates_,
      );
      context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
      let length = pixelCoordinates.length;
      if (close) {
        length -= 2;
      }
      for (let i = 2; i < length; i += 2) {
        context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
      }
      if (close) {
        context.closePath();
      }
      return end;
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */
    drawRings_(flatCoordinates, offset, ends, stride) {
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        offset = this.moveToLineTo_(
          flatCoordinates,
          offset,
          ends[i],
          stride,
          true,
        );
      }
      return offset;
    }

    /**
     * Render a circle geometry into the canvas.  Rendering is immediate and uses
     * the current fill and stroke styles.
     *
     * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
     * @api
     * @override
     */
    drawCircle(geometry) {
      if (this.squaredTolerance_) {
        geometry = /** @type {import("../../geom/Circle.js").default} */ (
          geometry.simplifyTransformed(
            this.squaredTolerance_,
            this.userTransform_,
          )
        );
      }
      if (!intersects$1(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.fillState_ || this.strokeState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        const pixelCoordinates = transformGeom2D(
          geometry,
          this.transform_,
          this.pixelCoordinates_,
        );
        const dx = pixelCoordinates[2] - pixelCoordinates[0];
        const dy = pixelCoordinates[3] - pixelCoordinates[1];
        const radius = Math.sqrt(dx * dx + dy * dy);
        const context = this.context_;
        context.beginPath();
        context.arc(
          pixelCoordinates[0],
          pixelCoordinates[1],
          radius,
          0,
          2 * Math.PI,
        );
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        this.drawText_(geometry.getCenter(), 0, 2, 2);
      }
    }

    /**
     * Set the rendering style.  Note that since this is an immediate rendering API,
     * any `zIndex` on the provided style will be ignored.
     *
     * @param {import("../../style/Style.js").default} style The rendering style.
     * @api
     * @override
     */
    setStyle(style) {
      this.setFillStrokeStyle(style.getFill(), style.getStroke());
      this.setImageStyle(style.getImage());
      this.setTextStyle(style.getText());
    }

    /**
     * @param {import("../../transform.js").Transform} transform Transform.
     */
    setTransform(transform) {
      this.transform_ = transform;
    }

    /**
     * Render a geometry into the canvas.  Call
     * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.
     *
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
     * @api
     * @override
     */
    drawGeometry(geometry) {
      const type = geometry.getType();
      switch (type) {
        case 'Point':
          this.drawPoint(
            /** @type {import("../../geom/Point.js").default} */ (geometry),
          );
          break;
        case 'LineString':
          this.drawLineString(
            /** @type {import("../../geom/LineString.js").default} */ (geometry),
          );
          break;
        case 'Polygon':
          this.drawPolygon(
            /** @type {import("../../geom/Polygon.js").default} */ (geometry),
          );
          break;
        case 'MultiPoint':
          this.drawMultiPoint(
            /** @type {import("../../geom/MultiPoint.js").default} */ (geometry),
          );
          break;
        case 'MultiLineString':
          this.drawMultiLineString(
            /** @type {import("../../geom/MultiLineString.js").default} */ (
              geometry
            ),
          );
          break;
        case 'MultiPolygon':
          this.drawMultiPolygon(
            /** @type {import("../../geom/MultiPolygon.js").default} */ (
              geometry
            ),
          );
          break;
        case 'GeometryCollection':
          this.drawGeometryCollection(
            /** @type {import("../../geom/GeometryCollection.js").default} */ (
              geometry
            ),
          );
          break;
        case 'Circle':
          this.drawCircle(
            /** @type {import("../../geom/Circle.js").default} */ (geometry),
          );
          break;
      }
    }

    /**
     * Render a feature into the canvas.  Note that any `zIndex` on the provided
     * style will be ignored - features are rendered immediately in the order that
     * this method is called.  If you need `zIndex` support, you should be using an
     * {@link module:ol/layer/Vector~VectorLayer} instead.
     *
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {import("../../style/Style.js").default} style Style.
     * @api
     * @override
     */
    drawFeature(feature, style) {
      const geometry = style.getGeometryFunction()(feature);
      if (!geometry) {
        return;
      }
      this.setStyle(style);
      this.drawGeometry(geometry);
    }

    /**
     * Render a GeometryCollection to the canvas.  Rendering is immediate and
     * uses the current styles appropriate for each geometry in the collection.
     *
     * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
     * @override
     */
    drawGeometryCollection(geometry) {
      const geometries = geometry.getGeometriesArray();
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        this.drawGeometry(geometries[i]);
      }
    }

    /**
     * Render a Point geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
     * @override
     */
    drawPoint(geometry) {
      if (this.squaredTolerance_) {
        geometry = /** @type {import("../../geom/Point.js").default} */ (
          geometry.simplifyTransformed(
            this.squaredTolerance_,
            this.userTransform_,
          )
        );
      }
      const flatCoordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      if (this.image_) {
        this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
      if (this.text_ !== '') {
        this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
    }

    /**
     * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
     * uses the current style.
     *
     * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
     * @override
     */
    drawMultiPoint(geometry) {
      if (this.squaredTolerance_) {
        geometry = /** @type {import("../../geom/MultiPoint.js").default} */ (
          geometry.simplifyTransformed(
            this.squaredTolerance_,
            this.userTransform_,
          )
        );
      }
      const flatCoordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      if (this.image_) {
        this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
      if (this.text_ !== '') {
        this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
    }

    /**
     * Render a LineString into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
     * @override
     */
    drawLineString(geometry) {
      if (this.squaredTolerance_) {
        geometry = /** @type {import("../../geom/LineString.js").default} */ (
          geometry.simplifyTransformed(
            this.squaredTolerance_,
            this.userTransform_,
          )
        );
      }
      if (!intersects$1(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        const context = this.context_;
        const flatCoordinates = geometry.getFlatCoordinates();
        context.beginPath();
        this.moveToLineTo_(
          flatCoordinates,
          0,
          flatCoordinates.length,
          geometry.getStride(),
          false,
        );
        context.stroke();
      }
      if (this.text_ !== '') {
        const flatMidpoint = geometry.getFlatMidpoint();
        this.drawText_(flatMidpoint, 0, 2, 2);
      }
    }

    /**
     * Render a MultiLineString geometry into the canvas.  Rendering is immediate
     * and uses the current style.
     *
     * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
     * @override
     */
    drawMultiLineString(geometry) {
      if (this.squaredTolerance_) {
        geometry =
          /** @type {import("../../geom/MultiLineString.js").default} */ (
            geometry.simplifyTransformed(
              this.squaredTolerance_,
              this.userTransform_,
            )
          );
      }
      const geometryExtent = geometry.getExtent();
      if (!intersects$1(this.extent_, geometryExtent)) {
        return;
      }
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        const context = this.context_;
        const flatCoordinates = geometry.getFlatCoordinates();
        let offset = 0;
        const ends = /** @type {Array<number>} */ (geometry.getEnds());
        const stride = geometry.getStride();
        context.beginPath();
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          offset = this.moveToLineTo_(
            flatCoordinates,
            offset,
            ends[i],
            stride,
            false,
          );
        }
        context.stroke();
      }
      if (this.text_ !== '') {
        const flatMidpoints = geometry.getFlatMidpoints();
        this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
      }
    }

    /**
     * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
     * @override
     */
    drawPolygon(geometry) {
      if (this.squaredTolerance_) {
        geometry = /** @type {import("../../geom/Polygon.js").default} */ (
          geometry.simplifyTransformed(
            this.squaredTolerance_,
            this.userTransform_,
          )
        );
      }
      if (!intersects$1(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_ || this.fillState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        const context = this.context_;
        context.beginPath();
        this.drawRings_(
          geometry.getOrientedFlatCoordinates(),
          0,
          /** @type {Array<number>} */ (geometry.getEnds()),
          geometry.getStride(),
        );
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        const flatInteriorPoint = geometry.getFlatInteriorPoint();
        this.drawText_(flatInteriorPoint, 0, 2, 2);
      }
    }

    /**
     * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
     * uses the current style.
     * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
     * @override
     */
    drawMultiPolygon(geometry) {
      if (this.squaredTolerance_) {
        geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (
          geometry.simplifyTransformed(
            this.squaredTolerance_,
            this.userTransform_,
          )
        );
      }
      if (!intersects$1(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_ || this.fillState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        const context = this.context_;
        const flatCoordinates = geometry.getOrientedFlatCoordinates();
        let offset = 0;
        const endss = geometry.getEndss();
        const stride = geometry.getStride();
        context.beginPath();
        for (let i = 0, ii = endss.length; i < ii; ++i) {
          const ends = endss[i];
          offset = this.drawRings_(flatCoordinates, offset, ends, stride);
        }
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        const flatInteriorPoints = geometry.getFlatInteriorPoints();
        this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
      }
    }

    /**
     * @param {import("../canvas.js").FillState} fillState Fill state.
     * @private
     */
    setContextFillState_(fillState) {
      const context = this.context_;
      const contextFillState = this.contextFillState_;
      if (!contextFillState) {
        context.fillStyle = fillState.fillStyle;
        this.contextFillState_ = {
          fillStyle: fillState.fillStyle,
        };
      } else {
        if (contextFillState.fillStyle != fillState.fillStyle) {
          contextFillState.fillStyle = fillState.fillStyle;
          context.fillStyle = fillState.fillStyle;
        }
      }
    }

    /**
     * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
     * @private
     */
    setContextStrokeState_(strokeState) {
      const context = this.context_;
      const contextStrokeState = this.contextStrokeState_;
      if (!contextStrokeState) {
        context.lineCap = strokeState.lineCap;
        context.setLineDash(strokeState.lineDash);
        context.lineDashOffset = strokeState.lineDashOffset;
        context.lineJoin = strokeState.lineJoin;
        context.lineWidth = strokeState.lineWidth;
        context.miterLimit = strokeState.miterLimit;
        context.strokeStyle = strokeState.strokeStyle;
        this.contextStrokeState_ = {
          lineCap: strokeState.lineCap,
          lineDash: strokeState.lineDash,
          lineDashOffset: strokeState.lineDashOffset,
          lineJoin: strokeState.lineJoin,
          lineWidth: strokeState.lineWidth,
          miterLimit: strokeState.miterLimit,
          strokeStyle: strokeState.strokeStyle,
        };
      } else {
        if (contextStrokeState.lineCap != strokeState.lineCap) {
          contextStrokeState.lineCap = strokeState.lineCap;
          context.lineCap = strokeState.lineCap;
        }
        if (!equals$2(contextStrokeState.lineDash, strokeState.lineDash)) {
          context.setLineDash(
            (contextStrokeState.lineDash = strokeState.lineDash),
          );
        }
        if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
          contextStrokeState.lineDashOffset = strokeState.lineDashOffset;
          context.lineDashOffset = strokeState.lineDashOffset;
        }
        if (contextStrokeState.lineJoin != strokeState.lineJoin) {
          contextStrokeState.lineJoin = strokeState.lineJoin;
          context.lineJoin = strokeState.lineJoin;
        }
        if (contextStrokeState.lineWidth != strokeState.lineWidth) {
          contextStrokeState.lineWidth = strokeState.lineWidth;
          context.lineWidth = strokeState.lineWidth;
        }
        if (contextStrokeState.miterLimit != strokeState.miterLimit) {
          contextStrokeState.miterLimit = strokeState.miterLimit;
          context.miterLimit = strokeState.miterLimit;
        }
        if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
          contextStrokeState.strokeStyle = strokeState.strokeStyle;
          context.strokeStyle = strokeState.strokeStyle;
        }
      }
    }

    /**
     * @param {import("../canvas.js").TextState} textState Text state.
     * @private
     */
    setContextTextState_(textState) {
      const context = this.context_;
      const contextTextState = this.contextTextState_;
      const textAlign = textState.textAlign
        ? textState.textAlign
        : defaultTextAlign;
      if (!contextTextState) {
        context.font = textState.font;
        context.textAlign = textAlign;
        context.textBaseline = textState.textBaseline;
        this.contextTextState_ = {
          font: textState.font,
          textAlign: textAlign,
          textBaseline: textState.textBaseline,
        };
      } else {
        if (contextTextState.font != textState.font) {
          contextTextState.font = textState.font;
          context.font = textState.font;
        }
        if (contextTextState.textAlign != textAlign) {
          contextTextState.textAlign = textAlign;
          context.textAlign = textAlign;
        }
        if (contextTextState.textBaseline != textState.textBaseline) {
          contextTextState.textBaseline = textState.textBaseline;
          context.textBaseline = textState.textBaseline;
        }
      }
    }

    /**
     * Set the fill and stroke style for subsequent draw operations.  To clear
     * either fill or stroke styles, pass null for the appropriate parameter.
     *
     * @param {import("../../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
     * @override
     */
    setFillStrokeStyle(fillStyle, strokeStyle) {
      if (!fillStyle) {
        this.fillState_ = null;
      } else {
        const fillStyleColor = fillStyle.getColor();
        this.fillState_ = {
          fillStyle: asColorLike(
            fillStyleColor ? fillStyleColor : defaultFillStyle,
          ),
        };
      }
      if (!strokeStyle) {
        this.strokeState_ = null;
      } else {
        const strokeStyleColor = strokeStyle.getColor();
        const strokeStyleLineCap = strokeStyle.getLineCap();
        const strokeStyleLineDash = strokeStyle.getLineDash();
        const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        const strokeStyleLineJoin = strokeStyle.getLineJoin();
        const strokeStyleWidth = strokeStyle.getWidth();
        const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
        const lineDash = strokeStyleLineDash
          ? strokeStyleLineDash
          : defaultLineDash;
        this.strokeState_ = {
          lineCap:
            strokeStyleLineCap !== undefined
              ? strokeStyleLineCap
              : defaultLineCap,
          lineDash:
            this.pixelRatio_ === 1
              ? lineDash
              : lineDash.map((n) => n * this.pixelRatio_),
          lineDashOffset:
            (strokeStyleLineDashOffset
              ? strokeStyleLineDashOffset
              : defaultLineDashOffset) * this.pixelRatio_,
          lineJoin:
            strokeStyleLineJoin !== undefined
              ? strokeStyleLineJoin
              : defaultLineJoin,
          lineWidth:
            (strokeStyleWidth !== undefined
              ? strokeStyleWidth
              : defaultLineWidth) * this.pixelRatio_,
          miterLimit:
            strokeStyleMiterLimit !== undefined
              ? strokeStyleMiterLimit
              : defaultMiterLimit,
          strokeStyle: asColorLike(
            strokeStyleColor ? strokeStyleColor : defaultStrokeStyle,
          ),
        };
      }
    }

    /**
     * Set the image style for subsequent draw operations.  Pass null to remove
     * the image style.
     *
     * @param {import("../../style/Image.js").default} imageStyle Image style.
     * @override
     */
    setImageStyle(imageStyle) {
      let imageSize;
      if (!imageStyle || !(imageSize = imageStyle.getSize())) {
        this.image_ = null;
        return;
      }
      const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);
      const imageAnchor = imageStyle.getAnchor();
      const imageOrigin = imageStyle.getOrigin();
      this.image_ = imageStyle.getImage(this.pixelRatio_);
      this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;
      this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;
      this.imageHeight_ = imageSize[1] * imagePixelRatio;
      this.imageOpacity_ = imageStyle.getOpacity();
      this.imageOriginX_ = imageOrigin[0];
      this.imageOriginY_ = imageOrigin[1];
      this.imageRotateWithView_ = imageStyle.getRotateWithView();
      this.imageRotation_ = imageStyle.getRotation();
      const imageScale = imageStyle.getScaleArray();
      this.imageScale_ = [
        (imageScale[0] * this.pixelRatio_) / imagePixelRatio,
        (imageScale[1] * this.pixelRatio_) / imagePixelRatio,
      ];
      this.imageWidth_ = imageSize[0] * imagePixelRatio;
    }

    /**
     * Set the text style for subsequent draw operations.  Pass null to
     * remove the text style.
     *
     * @param {import("../../style/Text.js").default} textStyle Text style.
     * @override
     */
    setTextStyle(textStyle) {
      if (!textStyle) {
        this.text_ = '';
      } else {
        const textFillStyle = textStyle.getFill();
        if (!textFillStyle) {
          this.textFillState_ = null;
        } else {
          const textFillStyleColor = textFillStyle.getColor();
          this.textFillState_ = {
            fillStyle: asColorLike(
              textFillStyleColor ? textFillStyleColor : defaultFillStyle,
            ),
          };
        }
        const textStrokeStyle = textStyle.getStroke();
        if (!textStrokeStyle) {
          this.textStrokeState_ = null;
        } else {
          const textStrokeStyleColor = textStrokeStyle.getColor();
          const textStrokeStyleLineCap = textStrokeStyle.getLineCap();
          const textStrokeStyleLineDash = textStrokeStyle.getLineDash();
          const textStrokeStyleLineDashOffset =
            textStrokeStyle.getLineDashOffset();
          const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
          const textStrokeStyleWidth = textStrokeStyle.getWidth();
          const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
          this.textStrokeState_ = {
            lineCap:
              textStrokeStyleLineCap !== undefined
                ? textStrokeStyleLineCap
                : defaultLineCap,
            lineDash: textStrokeStyleLineDash
              ? textStrokeStyleLineDash
              : defaultLineDash,
            lineDashOffset: textStrokeStyleLineDashOffset
              ? textStrokeStyleLineDashOffset
              : defaultLineDashOffset,
            lineJoin:
              textStrokeStyleLineJoin !== undefined
                ? textStrokeStyleLineJoin
                : defaultLineJoin,
            lineWidth:
              textStrokeStyleWidth !== undefined
                ? textStrokeStyleWidth
                : defaultLineWidth,
            miterLimit:
              textStrokeStyleMiterLimit !== undefined
                ? textStrokeStyleMiterLimit
                : defaultMiterLimit,
            strokeStyle: asColorLike(
              textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle,
            ),
          };
        }
        const textFont = textStyle.getFont();
        const textOffsetX = textStyle.getOffsetX();
        const textOffsetY = textStyle.getOffsetY();
        const textRotateWithView = textStyle.getRotateWithView();
        const textRotation = textStyle.getRotation();
        const textScale = textStyle.getScaleArray();
        const textText = textStyle.getText();
        const textTextAlign = textStyle.getTextAlign();
        const textTextBaseline = textStyle.getTextBaseline();
        this.textState_ = {
          font: textFont !== undefined ? textFont : defaultFont,
          textAlign:
            textTextAlign !== undefined ? textTextAlign : defaultTextAlign,
          textBaseline:
            textTextBaseline !== undefined
              ? textTextBaseline
              : defaultTextBaseline,
        };
        this.text_ =
          textText !== undefined
            ? Array.isArray(textText)
              ? textText.reduce((acc, t, i) => (acc += i % 2 ? ' ' : t), '')
              : textText
            : '';
        this.textOffsetX_ =
          textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;
        this.textOffsetY_ =
          textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;
        this.textRotateWithView_ =
          textRotateWithView !== undefined ? textRotateWithView : false;
        this.textRotation_ = textRotation !== undefined ? textRotation : 0;
        this.textScale_ = [
          this.pixelRatio_ * textScale[0],
          this.pixelRatio_ * textScale[1],
        ];
      }
    }
  }

  /**
   * @module ol/render/canvas/hitdetect
   */


  const HIT_DETECT_RESOLUTION = 0.5;

  /**
   * @param {import("../../size.js").Size} size Canvas size in css pixels.
   * @param {Array<import("../../transform.js").Transform>} transforms Transforms
   * for rendering features to all worlds of the viewport, from coordinates to css
   * pixels.
   * @param {Array<import("../../Feature.js").FeatureLike>} features
   * Features to consider for hit detection.
   * @param {import("../../style/Style.js").StyleFunction|undefined} styleFunction
   * Layer style function.
   * @param {import("../../extent.js").Extent} extent Extent in render projection.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {number} [squaredTolerance] Squared tolerance.
   * @param {import("../../proj/Projection.js").default} [projection] Render projection.
   * @return {ImageData} Hit detection image data.
   */
  function createHitDetectionImageData(
    size,
    transforms,
    features,
    styleFunction,
    extent,
    resolution,
    rotation,
    squaredTolerance,
    projection,
  ) {
    const userExtent = projection ? toUserExtent(extent, projection) : extent;
    const width = size[0] * HIT_DETECT_RESOLUTION;
    const height = size[1] * HIT_DETECT_RESOLUTION;
    const context = createCanvasContext2D(width, height);
    context.imageSmoothingEnabled = false;
    const canvas = context.canvas;
    const renderer = new CanvasImmediateRenderer(
      context,
      HIT_DETECT_RESOLUTION,
      extent,
      null,
      rotation,
      squaredTolerance,
      projection
        ? getTransformFromProjections(getUserProjection(), projection)
        : null,
    );
    const featureCount = features.length;
    // Stretch hit detection index to use the whole available color range
    const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);
    const featuresByZIndex = {};
    for (let i = 1; i <= featureCount; ++i) {
      const feature = features[i - 1];
      const featureStyleFunction = feature.getStyleFunction() || styleFunction;
      if (!featureStyleFunction) {
        continue;
      }
      let styles = featureStyleFunction(feature, resolution);
      if (!styles) {
        continue;
      }
      if (!Array.isArray(styles)) {
        styles = [styles];
      }
      const index = i * indexFactor;
      const color = index.toString(16).padStart(7, '#00000');
      for (let j = 0, jj = styles.length; j < jj; ++j) {
        const originalStyle = styles[j];
        const geometry = originalStyle.getGeometryFunction()(feature);
        if (!geometry || !intersects$1(userExtent, geometry.getExtent())) {
          continue;
        }
        const style = originalStyle.clone();
        const fill = style.getFill();
        if (fill) {
          fill.setColor(color);
        }
        const stroke = style.getStroke();
        if (stroke) {
          stroke.setColor(color);
          stroke.setLineDash(null);
        }
        style.setText(undefined);
        const image = originalStyle.getImage();
        if (image) {
          const imgSize = image.getImageSize();
          if (!imgSize) {
            continue;
          }

          const imgContext = createCanvasContext2D(
            imgSize[0],
            imgSize[1],
            undefined,
            {alpha: false},
          );
          const img = imgContext.canvas;
          imgContext.fillStyle = color;
          imgContext.fillRect(0, 0, img.width, img.height);
          style.setImage(
            new Icon({
              img: img,
              anchor: image.getAnchor(),
              anchorXUnits: 'pixels',
              anchorYUnits: 'pixels',
              offset: image.getOrigin(),
              opacity: 1,
              size: image.getSize(),
              scale: image.getScale(),
              rotation: image.getRotation(),
              rotateWithView: image.getRotateWithView(),
            }),
          );
        }
        const zIndex = style.getZIndex() || 0;
        let byGeometryType = featuresByZIndex[zIndex];
        if (!byGeometryType) {
          byGeometryType = {};
          featuresByZIndex[zIndex] = byGeometryType;
          byGeometryType['Polygon'] = [];
          byGeometryType['Circle'] = [];
          byGeometryType['LineString'] = [];
          byGeometryType['Point'] = [];
        }
        const type = geometry.getType();
        if (type === 'GeometryCollection') {
          const geometries =
            /** @type {import("../../geom/GeometryCollection.js").default} */ (
              geometry
            ).getGeometriesArrayRecursive();
          for (let i = 0, ii = geometries.length; i < ii; ++i) {
            const geometry = geometries[i];
            byGeometryType[geometry.getType().replace('Multi', '')].push(
              geometry,
              style,
            );
          }
        } else {
          byGeometryType[type.replace('Multi', '')].push(geometry, style);
        }
      }
    }

    const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);
    for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {
      const byGeometryType = featuresByZIndex[zIndexKeys[i]];
      for (const type in byGeometryType) {
        const geomAndStyle = byGeometryType[type];
        for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {
          renderer.setStyle(geomAndStyle[j + 1]);
          for (let k = 0, kk = transforms.length; k < kk; ++k) {
            renderer.setTransform(transforms[k]);
            renderer.drawGeometry(geomAndStyle[j]);
          }
        }
      }
    }
    return context.getImageData(0, 0, canvas.width, canvas.height);
  }

  /**
   * @param {import("../../pixel").Pixel} pixel Pixel coordinate on the hit
   * detection canvas in css pixels.
   * @param {Array<F>} features Features. Has to
   * match the `features` array that was passed to `createHitDetectionImageData()`.
   * @param {ImageData} imageData Hit detection image data generated by
   * `createHitDetectionImageData()`.
   * @return {Array<F>} Features.
   * @template {import("../../Feature.js").FeatureLike} F
   */
  function hitDetect(pixel, features, imageData) {
    /** @type {Array<F>} */
    const resultFeatures = [];
    if (imageData) {
      const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);
      const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);
      // The pixel coordinate is clamped down to the hit-detect canvas' size to account
      // for browsers returning coordinates slightly larger than the actual canvas size
      // due to a non-integer pixel ratio.
      const index =
        (clamp(x, 0, imageData.width - 1) +
          clamp(y, 0, imageData.height - 1) * imageData.width) *
        4;
      const r = imageData.data[index];
      const g = imageData.data[index + 1];
      const b = imageData.data[index + 2];
      const i = b + 256 * (g + 256 * r);
      const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);
      if (i && i % indexFactor === 0) {
        resultFeatures.push(features[i / indexFactor - 1]);
      }
    }
    return resultFeatures;
  }

  /**
   * @module ol/renderer/vector
   */

  /**
   * Feature callback. The callback will be called with three arguments. The first
   * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}
   * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for
   * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features
   * with a GeometryCollection geometry, it will be the first detected geometry from the collection.
   * @template T
   * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default<import("../source/Source").default>, import("../geom/SimpleGeometry.js").default): T} FeatureCallback
   */

  /**
   * Tolerance for geometry simplification in device pixels.
   * @type {number}
   */
  const SIMPLIFY_TOLERANCE = 0.5;

  /**
   * @const
   * @type {Object<import("../geom/Geometry.js").Type,
   *                function(import("../render/canvas/BuilderGroup.js").default, import("../geom/Geometry.js").default,
   *                         import("../style/Style.js").default, Object): void>}
   */
  const GEOMETRY_RENDERERS = {
    'Point': renderPointGeometry,
    'LineString': renderLineStringGeometry,
    'Polygon': renderPolygonGeometry,
    'MultiPoint': renderMultiPointGeometry,
    'MultiLineString': renderMultiLineStringGeometry,
    'MultiPolygon': renderMultiPolygonGeometry,
    'GeometryCollection': renderGeometryCollectionGeometry,
    'Circle': renderCircleGeometry,
  };

  /**
   * @param {import("../Feature.js").FeatureLike} feature1 Feature 1.
   * @param {import("../Feature.js").FeatureLike} feature2 Feature 2.
   * @return {number} Order.
   */
  function defaultOrder(feature1, feature2) {
    return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);
  }

  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Squared pixel tolerance.
   */
  function getSquaredTolerance(resolution, pixelRatio) {
    const tolerance = getTolerance(resolution, pixelRatio);
    return tolerance * tolerance;
  }

  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Pixel tolerance.
   */
  function getTolerance(resolution, pixelRatio) {
    return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
   * @param {import("../geom/Circle.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {number} [index] Render order index.
   */
  function renderCircleGeometry(builderGroup, geometry, style, feature, index) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
      const circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');
      circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      circleReplay.drawCircle(geometry, feature, index);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
      textReplay.setTextStyle(textStyle);
      textReplay.drawText(geometry, feature);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   * @param {import("../proj.js").TransformFunction} [transform] Transform from user to view projection.
   * @param {boolean} [declutter] Enable decluttering.
   * @param {number} [index] Render order index..
   * @return {boolean} `true` if style is loading.
   */
  function renderFeature(
    replayGroup,
    feature,
    style,
    squaredTolerance,
    listener,
    transform,
    declutter,
    index,
  ) {
    const loadingPromises = [];
    const imageStyle = style.getImage();
    if (imageStyle) {
      let loading = true;
      const imageState = imageStyle.getImageState();
      if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {
        loading = false;
      } else {
        if (imageState == ImageState.IDLE) {
          imageStyle.load();
        }
      }
      if (loading) {
        loadingPromises.push(imageStyle.ready());
      }
    }
    const fillStyle = style.getFill();
    if (fillStyle && fillStyle.loading()) {
      loadingPromises.push(fillStyle.ready());
    }
    const loading = loadingPromises.length > 0;
    if (loading) {
      Promise.all(loadingPromises).then(() => listener(null));
    }
    renderFeatureInternal(
      replayGroup,
      feature,
      style,
      squaredTolerance,
      transform,
      declutter,
      index,
    );

    return loading;
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
   * @param {boolean} [declutter] Enable decluttering.
   * @param {number} [index] Render order index..
   */
  function renderFeatureInternal(
    replayGroup,
    feature,
    style,
    squaredTolerance,
    transform,
    declutter,
    index,
  ) {
    const geometry = style.getGeometryFunction()(feature);
    if (!geometry) {
      return;
    }
    const simplifiedGeometry = geometry.simplifyTransformed(
      squaredTolerance,
      transform,
    );
    const renderer = style.getRenderer();
    if (renderer) {
      renderGeometry(replayGroup, simplifiedGeometry, style, feature, index);
    } else {
      const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
      geometryRenderer(
        replayGroup,
        simplifiedGeometry,
        style,
        feature,
        index,
        declutter,
      );
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  function renderGeometry(replayGroup, geometry, style, feature, index) {
    if (geometry.getType() == 'GeometryCollection') {
      const geometries =
        /** @type {import("../geom/GeometryCollection.js").default} */ (
          geometry
        ).getGeometries();
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        renderGeometry(replayGroup, geometries[i], style, feature, index);
      }
      return;
    }
    const replay = replayGroup.getBuilder(style.getZIndex(), 'Default');
    replay.drawCustom(
      /** @type {import("../geom/SimpleGeometry.js").default} */ (geometry),
      feature,
      style.getRenderer(),
      style.getHitDetectionRenderer(),
      index,
    );
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   * @param {number} [index] Render order index.
   */
  function renderGeometryCollectionGeometry(
    replayGroup,
    geometry,
    style,
    feature,
    declutterBuilderGroup,
    index,
  ) {
    const geometries = geometry.getGeometriesArray();
    let i, ii;
    for (i = 0, ii = geometries.length; i < ii; ++i) {
      const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];
      geometryRenderer(
        replayGroup,
        geometries[i],
        style,
        feature,
        declutterBuilderGroup,
        index,
      );
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  function renderLineStringGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    index,
  ) {
    const strokeStyle = style.getStroke();
    if (strokeStyle) {
      const lineStringReplay = builderGroup.getBuilder(
        style.getZIndex(),
        'LineString',
      );
      lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      lineStringReplay.drawLineString(geometry, feature, index);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
      textReplay.setTextStyle(textStyle);
      textReplay.drawText(geometry, feature, index);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  function renderMultiLineStringGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    index,
  ) {
    const strokeStyle = style.getStroke();
    if (strokeStyle) {
      const lineStringReplay = builderGroup.getBuilder(
        style.getZIndex(),
        'LineString',
      );
      lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      lineStringReplay.drawMultiLineString(geometry, feature, index);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
      textReplay.setTextStyle(textStyle);
      textReplay.drawText(geometry, feature, index);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {number} [index] Render order index.
   */
  function renderMultiPolygonGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    index,
  ) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (strokeStyle || fillStyle) {
      const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');
      polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      polygonReplay.drawMultiPolygon(geometry, feature, index);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
      textReplay.setTextStyle(textStyle);
      textReplay.drawText(geometry, feature, index);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   * @param {boolean} [declutter] Enable decluttering.
   */
  function renderPointGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    index,
    declutter,
  ) {
    const imageStyle = style.getImage();
    const textStyle = style.getText();
    const hasText = textStyle && textStyle.getText();
    /** @type {import("../render/canvas.js").DeclutterImageWithText} */
    const declutterImageWithText =
      declutter && imageStyle && hasText ? {} : undefined;
    if (imageStyle) {
      if (imageStyle.getImageState() != ImageState.LOADED) {
        return;
      }
      const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');
      imageReplay.setImageStyle(imageStyle, declutterImageWithText);
      imageReplay.drawPoint(geometry, feature, index);
    }
    if (hasText) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
      textReplay.setTextStyle(textStyle, declutterImageWithText);
      textReplay.drawText(geometry, feature, index);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   * @param {boolean} [declutter] Enable decluttering.
   */
  function renderMultiPointGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    index,
    declutter,
  ) {
    const imageStyle = style.getImage();
    const hasImage = imageStyle && imageStyle.getOpacity() !== 0;
    const textStyle = style.getText();
    const hasText = textStyle && textStyle.getText();
    /** @type {import("../render/canvas.js").DeclutterImageWithText} */
    const declutterImageWithText =
      declutter && hasImage && hasText ? {} : undefined;
    if (hasImage) {
      if (imageStyle.getImageState() != ImageState.LOADED) {
        return;
      }
      const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');
      imageReplay.setImageStyle(imageStyle, declutterImageWithText);
      imageReplay.drawMultiPoint(geometry, feature, index);
    }
    if (hasText) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
      textReplay.setTextStyle(textStyle, declutterImageWithText);
      textReplay.drawText(geometry, feature, index);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} [index] Render order index.
   */
  function renderPolygonGeometry(builderGroup, geometry, style, feature, index) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
      const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');
      polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      polygonReplay.drawPolygon(geometry, feature, index);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');
      textReplay.setTextStyle(textStyle);
      textReplay.drawText(geometry, feature, index);
    }
  }

  /**
   * @module ol/renderer/Layer
   */

  const maxStaleKeys = 5;

  /**
   * @template {import("../layer/Layer.js").default} LayerType
   */
  class LayerRenderer extends Observable {
    /**
     * @param {LayerType} layer Layer.
     */
    constructor(layer) {
      super();

      /**
       * The renderer is initialized and ready to render.
       * @type {boolean}
       */
      this.ready = true;

      /** @private */
      this.boundHandleImageChange_ = this.handleImageChange_.bind(this);

      /**
       * @private
       * @type {LayerType}
       */
      this.layer_ = layer;

      /**
       * @type {Array<string>}
       * @private
       */
      this.staleKeys_ = new Array();

      /**
       * @type {number}
       * @protected
       */
      this.maxStaleKeys = maxStaleKeys;
    }

    /**
     * @return {Array<string>} Get the list of stale keys.
     */
    getStaleKeys() {
      return this.staleKeys_;
    }

    /**
     * @param {string} key The new stale key.
     */
    prependStaleKey(key) {
      this.staleKeys_.unshift(key);
      if (this.staleKeys_.length > this.maxStaleKeys) {
        this.staleKeys_.length = this.maxStaleKeys;
      }
    }

    /**
     * Asynchronous layer level hit detection.
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with
     * an array of features.
     */
    getFeatures(pixel) {
      return abstract();
    }

    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
     */
    getData(pixel) {
      return null;
    }

    /**
     * Determine whether render should be called.
     * @abstract
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */
    prepareFrame(frameState) {
      return abstract();
    }

    /**
     * Render the layer.
     * @abstract
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @param {HTMLElement|null} target Target that may be used to render content to.
     * @return {HTMLElement} The rendered element.
     */
    renderFrame(frameState, target) {
      return abstract();
    }

    /**
     * @abstract
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {Array<import("./Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
     * @return {T|undefined} Callback result.
     * @template T
     */
    forEachFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      callback,
      matches,
    ) {
      return undefined;
    }

    /**
     * @return {LayerType} Layer.
     */
    getLayer() {
      return this.layer_;
    }

    /**
     * Perform action necessary to get the layer rendered after new fonts have loaded
     * @abstract
     */
    handleFontsChanged() {}

    /**
     * Handle changes in image state.
     * @param {import("../events/Event.js").default} event Image change event.
     * @private
     */
    handleImageChange_(event) {
      const image = /** @type {import("../Image.js").default} */ (event.target);
      if (
        image.getState() === ImageState.LOADED ||
        image.getState() === ImageState.ERROR
      ) {
        this.renderIfReadyAndVisible();
      }
    }

    /**
     * Load the image if not already loaded, and register the image change
     * listener if needed.
     * @param {import("../Image.js").default} image Image.
     * @return {boolean} `true` if the image is already loaded, `false` otherwise.
     * @protected
     */
    loadImage(image) {
      let imageState = image.getState();
      if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {
        image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);
      }
      if (imageState == ImageState.IDLE) {
        image.load();
        imageState = image.getState();
      }
      return imageState == ImageState.LOADED;
    }

    /**
     * @protected
     */
    renderIfReadyAndVisible() {
      const layer = this.getLayer();
      if (layer && layer.getVisible() && layer.getSourceState() === 'ready') {
        layer.changed();
      }
    }

    /**
     * @param {import("../Map.js").FrameState} frameState Frame state.
     */
    renderDeferred(frameState) {}

    /**
     * Clean up.
     * @override
     */
    disposeInternal() {
      delete this.layer_;
      super.disposeInternal();
    }
  }

  /**
   * @module ol/renderer/canvas/Layer
   */

  /**
   * @type {Array<HTMLCanvasElement>}
   */
  const canvasPool$1 = [];

  /**
   * @type {CanvasRenderingContext2D}
   */
  let pixelContext = null;

  function createPixelContext() {
    pixelContext = createCanvasContext2D(1, 1, undefined, {
      willReadFrequently: true,
    });
  }

  /**
   * @abstract
   * @template {import("../../layer/Layer.js").default} LayerType
   * @extends {LayerRenderer<LayerType>}
   */
  class CanvasLayerRenderer extends LayerRenderer {
    /**
     * @param {LayerType} layer Layer.
     */
    constructor(layer) {
      super(layer);

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.container = null;

      /**
       * @protected
       * @type {number}
       */
      this.renderedResolution;

      /**
       * A temporary transform.  The values in this transform should only be used in a
       * function that sets the values.
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.tempTransform = create();

      /**
       * The transform for rendered pixels to viewport CSS pixels.  This transform must
       * be set when rendering a frame and may be used by other functions after rendering.
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.pixelTransform = create();

      /**
       * The transform for viewport CSS pixels to rendered pixels.  This transform must
       * be set when rendering a frame and may be used by other functions after rendering.
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.inversePixelTransform = create();

      /**
       * @type {CanvasRenderingContext2D}
       */
      this.context = null;

      /**
       * @private
       * @type {ZIndexContext}
       */
      this.deferredContext_ = null;

      /**
       * @type {boolean}
       */
      this.containerReused = false;

      /**
       * @protected
       * @type {import("../../Map.js").FrameState|null}
       */
      this.frameState = null;
    }

    /**
     * @param {import('../../DataTile.js').ImageLike} image Image.
     * @param {number} col The column index.
     * @param {number} row The row index.
     * @return {Uint8ClampedArray|null} The image data.
     */
    getImageData(image, col, row) {
      if (!pixelContext) {
        createPixelContext();
      }
      pixelContext.clearRect(0, 0, 1, 1);

      let data;
      try {
        pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);
        data = pixelContext.getImageData(0, 0, 1, 1).data;
      } catch {
        pixelContext = null;
        return null;
      }
      return data;
    }

    /**
     * @param {import('../../Map.js').FrameState} frameState Frame state.
     * @return {string} Background color.
     */
    getBackground(frameState) {
      const layer = this.getLayer();
      let background = layer.getBackground();
      if (typeof background === 'function') {
        background = background(frameState.viewState.resolution);
      }
      return background || undefined;
    }

    /**
     * Get a rendering container from an existing target, if compatible.
     * @param {HTMLElement} target Potential render target.
     * @param {string} transform CSS transform matrix.
     * @param {string} [backgroundColor] Background color.
     */
    useContainer(target, transform, backgroundColor) {
      const layerClassName = this.getLayer().getClassName();
      let container, context;
      if (
        target &&
        target.className === layerClassName &&
        (!backgroundColor ||
          (target &&
            target.style.backgroundColor &&
            equals$2(
              asArray(target.style.backgroundColor),
              asArray(backgroundColor),
            )))
      ) {
        const canvas = target.firstElementChild;
        if (canvas instanceof HTMLCanvasElement) {
          context = canvas.getContext('2d');
        }
      }
      if (context && equivalent(context.canvas.style.transform, transform)) {
        // Container of the previous layer renderer can be used.
        this.container = target;
        this.context = context;
        this.containerReused = true;
      } else if (this.containerReused) {
        // Previously reused container cannot be used any more.
        this.container = null;
        this.context = null;
        this.containerReused = false;
      } else if (this.container) {
        this.container.style.backgroundColor = null;
      }
      if (!this.container) {
        container = document.createElement('div');
        container.className = layerClassName;
        let style = container.style;
        style.position = 'absolute';
        style.width = '100%';
        style.height = '100%';
        context = createCanvasContext2D();
        const canvas = context.canvas;
        container.appendChild(canvas);
        style = canvas.style;
        style.position = 'absolute';
        style.left = '0';
        style.transformOrigin = 'top left';
        this.container = container;
        this.context = context;
      }
      if (
        !this.containerReused &&
        backgroundColor &&
        !this.container.style.backgroundColor
      ) {
        this.container.style.backgroundColor = backgroundColor;
      }
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {import("../../extent.js").Extent} extent Clip extent.
     * @protected
     */
    clipUnrotated(context, frameState, extent) {
      const topLeft = getTopLeft(extent);
      const topRight = getTopRight(extent);
      const bottomRight = getBottomRight(extent);
      const bottomLeft = getBottomLeft(extent);

      apply(frameState.coordinateToPixelTransform, topLeft);
      apply(frameState.coordinateToPixelTransform, topRight);
      apply(frameState.coordinateToPixelTransform, bottomRight);
      apply(frameState.coordinateToPixelTransform, bottomLeft);

      const inverted = this.inversePixelTransform;
      apply(inverted, topLeft);
      apply(inverted, topRight);
      apply(inverted, bottomRight);
      apply(inverted, bottomLeft);

      context.save();
      context.beginPath();
      context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));
      context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));
      context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));
      context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));
      context.clip();
    }

    /**
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target that may be used to render content to.
     * @protected
     */
    prepareContainer(frameState, target) {
      const extent = frameState.extent;
      const resolution = frameState.viewState.resolution;
      const rotation = frameState.viewState.rotation;
      const pixelRatio = frameState.pixelRatio;
      const width = Math.round((getWidth(extent) / resolution) * pixelRatio);
      const height = Math.round((getHeight(extent) / resolution) * pixelRatio);
      // set forward and inverse pixel transforms
      compose(
        this.pixelTransform,
        frameState.size[0] / 2,
        frameState.size[1] / 2,
        1 / pixelRatio,
        1 / pixelRatio,
        rotation,
        -width / 2,
        -height / 2,
      );
      makeInverse(this.inversePixelTransform, this.pixelTransform);

      const canvasTransform = toString$1(this.pixelTransform);
      this.useContainer(target, canvasTransform, this.getBackground(frameState));

      if (!this.containerReused) {
        const canvas = this.context.canvas;
        if (canvas.width != width || canvas.height != height) {
          canvas.width = width;
          canvas.height = height;
        } else {
          this.context.clearRect(0, 0, width, height);
        }
        if (canvasTransform !== canvas.style.transform) {
          canvas.style.transform = canvasTransform;
        }
      }
    }

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @private
     */
    dispatchRenderEvent_(type, context, frameState) {
      const layer = this.getLayer();
      if (layer.hasListener(type)) {
        const event = new RenderEvent(
          type,
          this.inversePixelTransform,
          frameState,
          context,
        );
        layer.dispatchEvent(event);
      }
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @protected
     */
    preRender(context, frameState) {
      this.frameState = frameState;
      if (frameState.declutter) {
        return;
      }
      this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @protected
     */
    postRender(context, frameState) {
      if (frameState.declutter) {
        return;
      }
      this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);
    }

    /**
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     */
    renderDeferredInternal(frameState) {}

    /**
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {import('../../render/canvas/ZIndexContext.js').ZIndexContextProxy} Context.
     */
    getRenderContext(frameState) {
      if (frameState.declutter && !this.deferredContext_) {
        this.deferredContext_ = new ZIndexContext();
      }
      return frameState.declutter
        ? this.deferredContext_.getContext()
        : this.context;
    }

    /**
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @override
     */
    renderDeferred(frameState) {
      if (!frameState.declutter) {
        return;
      }
      this.dispatchRenderEvent_(
        RenderEventType.PRERENDER,
        this.context,
        frameState,
      );
      if (frameState.declutter && this.deferredContext_) {
        this.deferredContext_.draw(this.context);
        this.deferredContext_.clear();
      }
      this.renderDeferredInternal(frameState);
      this.dispatchRenderEvent_(
        RenderEventType.POSTRENDER,
        this.context,
        frameState,
      );
    }

    /**
     * Creates a transform for rendering to an element that will be rotated after rendering.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} width Width of the rendered element (in pixels).
     * @param {number} height Height of the rendered element (in pixels).
     * @param {number} offsetX Offset on the x-axis in view coordinates.
     * @protected
     * @return {!import("../../transform.js").Transform} Transform.
     */
    getRenderTransform(
      center,
      resolution,
      rotation,
      pixelRatio,
      width,
      height,
      offsetX,
    ) {
      const dx1 = width / 2;
      const dy1 = height / 2;
      const sx = pixelRatio / resolution;
      const sy = -sx;
      const dx2 = -center[0] + offsetX;
      const dy2 = -center[1];
      return compose(
        this.tempTransform,
        dx1,
        dy1,
        sx,
        sy,
        -rotation,
        dx2,
        dy2,
      );
    }

    /**
     * Clean up.
     * @override
     */
    disposeInternal() {
      delete this.frameState;
      super.disposeInternal();
    }
  }

  /**
   * @module ol/renderer/canvas/VectorLayer
   */

  /**
   * @classdesc
   * Canvas renderer for vector layers.
   * @api
   */
  class CanvasVectorLayerRenderer extends CanvasLayerRenderer {
    /**
     * @param {import("../../layer/BaseVector.js").default} vectorLayer Vector layer.
     */
    constructor(vectorLayer) {
      super(vectorLayer);

      /** @private */
      this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);

      /**
       * @private
       * @type {boolean}
       */
      this.animatingOrInteracting_;

      /**
       * @private
       * @type {ImageData|null}
       */
      this.hitDetectionImageData_ = null;

      /**
       * @private
       * @type {boolean}
       */
      this.clipped_ = false;

      /**
       * @private
       * @type {Array<import("../../Feature.js").default>}
       */
      this.renderedFeatures_ = null;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.renderedResolution_ = NaN;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedExtent_ = createEmpty();

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.wrappedRenderedExtent_ = createEmpty();

      /**
       * @private
       * @type {number}
       */
      this.renderedRotation_;

      /**
       * @private
       * @type {import("../../coordinate").Coordinate}
       */
      this.renderedCenter_ = null;

      /**
       * @private
       * @type {import("../../proj/Projection").default}
       */
      this.renderedProjection_ = null;

      /**
       * @private
       * @type {number}
       */
      this.renderedPixelRatio_ = 1;

      /**
       * @private
       * @type {import("../../render.js").OrderFunction|null}
       */
      this.renderedRenderOrder_ = null;

      /**
       * @private
       * @type {boolean}
       */
      this.renderedFrameDeclutter_;

      /**
       * @private
       * @type {import("../../render/canvas/ExecutorGroup").default}
       */
      this.replayGroup_ = null;

      /**
       * A new replay group had to be created by `prepareFrame()`
       * @type {boolean}
       */
      this.replayGroupChanged = true;

      /**
       * Clipping to be performed by `renderFrame()`
       * @type {boolean}
       */
      this.clipping = true;

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.targetContext_ = null;

      /**
       * @private
       * @type {number}
       */
      this.opacity_ = 1;
    }

    /**
     * @param {ExecutorGroup} executorGroup Executor group.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {boolean} [declutterable] `true` to only render declutterable items,
     *     `false` to only render non-declutterable items, `undefined` to render all.
     */
    renderWorlds(executorGroup, frameState, declutterable) {
      const extent = frameState.extent;
      const viewState = frameState.viewState;
      const center = viewState.center;
      const resolution = viewState.resolution;
      const projection = viewState.projection;
      const rotation = viewState.rotation;
      const projectionExtent = projection.getExtent();
      const vectorSource = this.getLayer().getSource();
      const declutter = this.getLayer().getDeclutter();
      const pixelRatio = frameState.pixelRatio;
      const viewHints = frameState.viewHints;
      const snapToPixel = !(
        viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]
      );
      const context = this.context;
      const width = Math.round((getWidth(extent) / resolution) * pixelRatio);
      const height = Math.round((getHeight(extent) / resolution) * pixelRatio);

      const multiWorld = vectorSource.getWrapX() && projection.canWrapX();
      const worldWidth = multiWorld ? getWidth(projectionExtent) : null;
      const endWorld = multiWorld
        ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1
        : 1;
      let world = multiWorld
        ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)
        : 0;
      do {
        let transform = this.getRenderTransform(
          center,
          resolution,
          0,
          pixelRatio,
          width,
          height,
          world * worldWidth,
        );
        if (frameState.declutter) {
          transform = transform.slice(0);
        }
        executorGroup.execute(
          context,
          [context.canvas.width, context.canvas.height],
          transform,
          rotation,
          snapToPixel,
          declutterable === undefined
            ? ALL
            : declutterable
              ? DECLUTTER
              : NON_DECLUTTER,
          declutterable
            ? declutter && frameState.declutter[declutter]
            : undefined,
        );
      } while (++world < endWorld);
    }

    /**
     * @private
     */
    setDrawContext_() {
      if (this.opacity_ !== 1) {
        this.targetContext_ = this.context;
        this.context = createCanvasContext2D(
          this.context.canvas.width,
          this.context.canvas.height,
          canvasPool$1,
        );
      }
    }

    /**
     * @private
     */
    resetDrawContext_() {
      if (this.opacity_ !== 1) {
        const alpha = this.targetContext_.globalAlpha;
        this.targetContext_.globalAlpha = this.opacity_;
        this.targetContext_.drawImage(this.context.canvas, 0, 0);
        this.targetContext_.globalAlpha = alpha;
        releaseCanvas(this.context);
        canvasPool$1.push(this.context.canvas);
        this.context = this.targetContext_;
        this.targetContext_ = null;
      }
    }

    /**
     * Render declutter items for this layer
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     */
    renderDeclutter(frameState) {
      if (!this.replayGroup_ || !this.getLayer().getDeclutter()) {
        return;
      }
      this.renderWorlds(this.replayGroup_, frameState, true);
    }

    /**
     * Render deferred instructions.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @override
     */
    renderDeferredInternal(frameState) {
      if (!this.replayGroup_) {
        return;
      }
      this.replayGroup_.renderDeferred();
      if (this.clipped_) {
        this.context.restore();
      }
      this.resetDrawContext_();
    }

    /**
     * Render the layer.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {HTMLElement|null} target Target that may be used to render content to.
     * @return {HTMLElement} The rendered element.
     * @override
     */
    renderFrame(frameState, target) {
      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      this.opacity_ = layerState.opacity;
      const viewState = frameState.viewState;

      this.prepareContainer(frameState, target);
      const context = this.context;

      const replayGroup = this.replayGroup_;
      let render = replayGroup && !replayGroup.isEmpty();
      if (!render) {
        const hasRenderListeners =
          this.getLayer().hasListener(RenderEventType.PRERENDER) ||
          this.getLayer().hasListener(RenderEventType.POSTRENDER);
        if (!hasRenderListeners) {
          return this.container;
        }
      }

      this.setDrawContext_();

      this.preRender(context, frameState);

      const projection = viewState.projection;

      // clipped rendering if layer extent is set
      this.clipped_ = false;
      if (render && layerState.extent && this.clipping) {
        const layerExtent = fromUserExtent(layerState.extent, projection);
        render = intersects$1(layerExtent, frameState.extent);
        this.clipped_ = render && !containsExtent(layerExtent, frameState.extent);
        if (this.clipped_) {
          this.clipUnrotated(context, frameState, layerExtent);
        }
      }

      if (render) {
        this.renderWorlds(
          replayGroup,
          frameState,
          this.getLayer().getDeclutter() ? false : undefined,
        );
      }

      if (!frameState.declutter && this.clipped_) {
        context.restore();
      }

      this.postRender(context, frameState);

      if (this.renderedRotation_ !== viewState.rotation) {
        this.renderedRotation_ = viewState.rotation;
        this.hitDetectionImageData_ = null;
      }
      if (!frameState.declutter) {
        this.resetDrawContext_();
      }
      return this.container;
    }

    /**
     * Asynchronous layer level hit detection.
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../../Feature").default>>} Promise
     * that resolves with an array of features.
     * @override
     */
    getFeatures(pixel) {
      return new Promise((resolve) => {
        if (
          this.frameState &&
          !this.hitDetectionImageData_ &&
          !this.animatingOrInteracting_
        ) {
          const size = this.frameState.size.slice();
          const center = this.renderedCenter_;
          const resolution = this.renderedResolution_;
          const rotation = this.renderedRotation_;
          const projection = this.renderedProjection_;
          const extent = this.wrappedRenderedExtent_;
          const layer = this.getLayer();
          const transforms = [];
          const width = size[0] * HIT_DETECT_RESOLUTION;
          const height = size[1] * HIT_DETECT_RESOLUTION;
          transforms.push(
            this.getRenderTransform(
              center,
              resolution,
              rotation,
              HIT_DETECT_RESOLUTION,
              width,
              height,
              0,
            ).slice(),
          );
          const source = layer.getSource();
          const projectionExtent = projection.getExtent();
          if (
            source.getWrapX() &&
            projection.canWrapX() &&
            !containsExtent(projectionExtent, extent)
          ) {
            let startX = extent[0];
            const worldWidth = getWidth(projectionExtent);
            let world = 0;
            let offsetX;
            while (startX < projectionExtent[0]) {
              --world;
              offsetX = worldWidth * world;
              transforms.push(
                this.getRenderTransform(
                  center,
                  resolution,
                  rotation,
                  HIT_DETECT_RESOLUTION,
                  width,
                  height,
                  offsetX,
                ).slice(),
              );
              startX += worldWidth;
            }
            world = 0;
            startX = extent[2];
            while (startX > projectionExtent[2]) {
              ++world;
              offsetX = worldWidth * world;
              transforms.push(
                this.getRenderTransform(
                  center,
                  resolution,
                  rotation,
                  HIT_DETECT_RESOLUTION,
                  width,
                  height,
                  offsetX,
                ).slice(),
              );
              startX -= worldWidth;
            }
          }
          const userProjection = getUserProjection();
          this.hitDetectionImageData_ = createHitDetectionImageData(
            size,
            transforms,
            this.renderedFeatures_,
            layer.getStyleFunction(),
            extent,
            resolution,
            rotation,
            getSquaredTolerance(resolution, this.renderedPixelRatio_),
            userProjection ? projection : null,
          );
        }
        resolve(
          hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_),
        );
      });
    }

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
     * @return {T|undefined} Callback result.
     * @template T
     * @override
     */
    forEachFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      callback,
      matches,
    ) {
      if (!this.replayGroup_) {
        return undefined;
      }
      const resolution = frameState.viewState.resolution;
      const rotation = frameState.viewState.rotation;
      const layer = this.getLayer();

      /** @type {!Object<string, import("../Map.js").HitMatch<T>|true>} */
      const features = {};

      /**
       * @param {import("../../Feature.js").FeatureLike} feature Feature.
       * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
       * @param {number} distanceSq The squared distance to the click position
       * @return {T|undefined} Callback result.
       */
      const featureCallback = function (feature, geometry, distanceSq) {
        const key = getUid(feature);
        const match = features[key];
        if (!match) {
          if (distanceSq === 0) {
            features[key] = true;
            return callback(feature, layer, geometry);
          }
          matches.push(
            (features[key] = {
              feature: feature,
              layer: layer,
              geometry: geometry,
              distanceSq: distanceSq,
              callback: callback,
            }),
          );
        } else if (match !== true && distanceSq < match.distanceSq) {
          if (distanceSq === 0) {
            features[key] = true;
            matches.splice(matches.lastIndexOf(match), 1);
            return callback(feature, layer, geometry);
          }
          match.geometry = geometry;
          match.distanceSq = distanceSq;
        }
        return undefined;
      };

      const declutter = this.getLayer().getDeclutter();
      return this.replayGroup_.forEachFeatureAtCoordinate(
        coordinate,
        resolution,
        rotation,
        hitTolerance,
        featureCallback,
        declutter
          ? frameState.declutter?.[declutter]?.all().map((item) => item.value)
          : null,
      );
    }

    /**
     * Perform action necessary to get the layer rendered after new fonts have loaded
     * @override
     */
    handleFontsChanged() {
      const layer = this.getLayer();
      if (layer.getVisible() && this.replayGroup_) {
        layer.changed();
      }
    }

    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */
    handleStyleImageChange_(event) {
      this.renderIfReadyAndVisible();
    }

    /**
     * Determine whether render should be called.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     * @override
     */
    prepareFrame(frameState) {
      const vectorLayer = this.getLayer();
      const vectorSource = vectorLayer.getSource();
      if (!vectorSource) {
        return false;
      }

      const animating = frameState.viewHints[ViewHint.ANIMATING];
      const interacting = frameState.viewHints[ViewHint.INTERACTING];
      const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
      const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();

      if (
        (this.ready && !updateWhileAnimating && animating) ||
        (!updateWhileInteracting && interacting)
      ) {
        this.animatingOrInteracting_ = true;
        return true;
      }
      this.animatingOrInteracting_ = false;

      const frameStateExtent = frameState.extent;
      const viewState = frameState.viewState;
      const projection = viewState.projection;
      const resolution = viewState.resolution;
      const pixelRatio = frameState.pixelRatio;
      const vectorLayerRevision = vectorLayer.getRevision();
      const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
      let vectorLayerRenderOrder = vectorLayer.getRenderOrder();

      if (vectorLayerRenderOrder === undefined) {
        vectorLayerRenderOrder = defaultOrder;
      }

      const center = viewState.center.slice();
      const extent = buffer(
        frameStateExtent,
        vectorLayerRenderBuffer * resolution,
      );
      const renderedExtent = extent.slice();
      const loadExtents = [extent.slice()];
      const projectionExtent = projection.getExtent();

      if (
        vectorSource.getWrapX() &&
        projection.canWrapX() &&
        !containsExtent(projectionExtent, frameState.extent)
      ) {
        // For the replay group, we need an extent that intersects the real world
        // (-180Â° to +180Â°). To support geometries in a coordinate range from -540Â°
        // to +540Â°, we add at least 1 world width on each side of the projection
        // extent. If the viewport is wider than the world, we need to add half of
        // the viewport width to make sure we cover the whole viewport.
        const worldWidth = getWidth(projectionExtent);
        const gutter = Math.max(getWidth(extent) / 2, worldWidth);
        extent[0] = projectionExtent[0] - gutter;
        extent[2] = projectionExtent[2] + gutter;
        wrapX$1(center, projection);
        const loadExtent = wrapX$2(loadExtents[0], projection);
        // If the extent crosses the date line, we load data for both edges of the worlds
        if (
          loadExtent[0] < projectionExtent[0] &&
          loadExtent[2] < projectionExtent[2]
        ) {
          loadExtents.push([
            loadExtent[0] + worldWidth,
            loadExtent[1],
            loadExtent[2] + worldWidth,
            loadExtent[3],
          ]);
        } else if (
          loadExtent[0] > projectionExtent[0] &&
          loadExtent[2] > projectionExtent[2]
        ) {
          loadExtents.push([
            loadExtent[0] - worldWidth,
            loadExtent[1],
            loadExtent[2] - worldWidth,
            loadExtent[3],
          ]);
        }
      }

      if (
        this.ready &&
        this.renderedResolution_ == resolution &&
        this.renderedRevision_ == vectorLayerRevision &&
        this.renderedRenderOrder_ == vectorLayerRenderOrder &&
        this.renderedFrameDeclutter_ === !!frameState.declutter &&
        containsExtent(this.wrappedRenderedExtent_, extent)
      ) {
        if (!equals$2(this.renderedExtent_, renderedExtent)) {
          this.hitDetectionImageData_ = null;
          this.renderedExtent_ = renderedExtent;
        }
        this.renderedCenter_ = center;
        this.replayGroupChanged = false;
        return true;
      }

      this.replayGroup_ = null;

      const replayGroup = new BuilderGroup(
        getTolerance(resolution, pixelRatio),
        extent,
        resolution,
        pixelRatio,
      );

      const userProjection = getUserProjection();
      let userTransform;
      if (userProjection) {
        for (let i = 0, ii = loadExtents.length; i < ii; ++i) {
          const extent = loadExtents[i];
          const userExtent = toUserExtent(extent, projection);
          vectorSource.loadFeatures(
            userExtent,
            toUserResolution(resolution, projection),
            userProjection,
          );
        }
        userTransform = getTransformFromProjections(userProjection, projection);
      } else {
        for (let i = 0, ii = loadExtents.length; i < ii; ++i) {
          vectorSource.loadFeatures(loadExtents[i], resolution, projection);
        }
      }

      const squaredTolerance = getSquaredTolerance(resolution, pixelRatio);
      let ready = true;
      const render =
        /**
         * @param {import("../../Feature.js").default} feature Feature.
         * @param {number} index Index.
         */
        (feature, index) => {
          let styles;
          const styleFunction =
            feature.getStyleFunction() || vectorLayer.getStyleFunction();
          if (styleFunction) {
            styles = styleFunction(feature, resolution);
          }
          if (styles) {
            const dirty = this.renderFeature(
              feature,
              squaredTolerance,
              styles,
              replayGroup,
              userTransform,
              this.getLayer().getDeclutter(),
              index,
            );
            ready = ready && !dirty;
          }
        };

      const userExtent = toUserExtent(extent, projection);
      /** @type {Array<import("../../Feature.js").default>} */
      const features = vectorSource.getFeaturesInExtent(userExtent);
      if (vectorLayerRenderOrder) {
        features.sort(vectorLayerRenderOrder);
      }
      for (let i = 0, ii = features.length; i < ii; ++i) {
        render(features[i], i);
      }
      this.renderedFeatures_ = features;
      this.ready = ready;

      const replayGroupInstructions = replayGroup.finish();
      const executorGroup = new ExecutorGroup(
        extent,
        resolution,
        pixelRatio,
        vectorSource.getOverlaps(),
        replayGroupInstructions,
        vectorLayer.getRenderBuffer(),
        !!frameState.declutter,
      );

      this.renderedResolution_ = resolution;
      this.renderedRevision_ = vectorLayerRevision;
      this.renderedRenderOrder_ = vectorLayerRenderOrder;
      this.renderedFrameDeclutter_ = !!frameState.declutter;
      this.renderedExtent_ = renderedExtent;
      this.wrappedRenderedExtent_ = extent;
      this.renderedCenter_ = center;
      this.renderedProjection_ = projection;
      this.renderedPixelRatio_ = pixelRatio;
      this.replayGroup_ = executorGroup;
      this.hitDetectionImageData_ = null;

      this.replayGroupChanged = true;
      return true;
    }

    /**
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {number} squaredTolerance Squared render tolerance.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
     * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
     * @param {import("../../proj.js").TransformFunction} [transform] Transform from user to view projection.
     * @param {boolean} [declutter] Enable decluttering.
     * @param {number} [index] Render order index.
     * @return {boolean} `true` if an image is loading.
     */
    renderFeature(
      feature,
      squaredTolerance,
      styles,
      builderGroup,
      transform,
      declutter,
      index,
    ) {
      if (!styles) {
        return false;
      }
      let loading = false;
      if (Array.isArray(styles)) {
        for (let i = 0, ii = styles.length; i < ii; ++i) {
          loading =
            renderFeature(
              builderGroup,
              feature,
              styles[i],
              squaredTolerance,
              this.boundHandleStyleImageChange_,
              transform,
              declutter,
              index,
            ) || loading;
        }
      } else {
        loading = renderFeature(
          builderGroup,
          feature,
          styles,
          squaredTolerance,
          this.boundHandleStyleImageChange_,
          transform,
          declutter,
          index,
        );
      }
      return loading;
    }
  }

  /**
   * @module ol/layer/Vector
   */

  /**
   * @template {import("../source/Vector.js").default<FeatureType>} [VectorSourceType=import("../source/Vector.js").default<*>]
   * @template {import('../Feature.js').FeatureLike} [FeatureType=import("./BaseVector.js").ExtractedFeatureType<VectorSourceType>]
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
   * renderer when getting features from the vector source for the rendering or hit-detection.
   * Recommended value: the size of the largest symbol, line width or label.
   * @property {VectorSourceType} [source] Source.
   * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use [map.addLayer()]{@link import("../Map.js").default#addLayer}.
   * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable
   * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the
   * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the
   * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct
   * layers or groups of layers separately, use different truthy values for `declutter`.
   * @property {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike|null} [style] Layer style. When set to `null`, only
   * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style
   * which will be used if this is not set.
   * @property {import("./Base.js").BackgroundColor} [background] Background color for the layer. If not specified, no background
   * will be rendered.
   * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will
   * be recreated during animations. This means that no vectors will be shown clipped, but the
   * setting will have a performance impact for large amounts of vector data. When set to `false`,
   * batches will be recreated when no animation is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will
   * be recreated during interactions. See also `updateWhileAnimating`.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @classdesc
   * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering
   * even during animations. Points and labels stay upright on rotated views. For very large
   * amounts of vector data, performance may suffer during pan and zoom animations. In this case,
   * try {@link module:ol/layer/VectorImage~VectorImageLayer}.
   *
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Vector.js").default<FeatureType>} [VectorSourceType=import("../source/Vector.js").default<*>]
   * @template {import('../Feature.js').FeatureLike} [FeatureType=import("./BaseVector.js").ExtractedFeatureType<VectorSourceType>]
   * @extends {BaseVectorLayer<FeatureType, VectorSourceType, CanvasVectorLayerRenderer>}
   * @api
   */
  class VectorLayer extends BaseVectorLayer {
    /**
     * @param {Options<VectorSourceType, FeatureType>} [options] Options.
     */
    constructor(options) {
      super(options);
    }

    /**
     * @override
     */
    createRenderer() {
      return new CanvasVectorLayerRenderer(this);
    }
  }

  /**
   * @module ol/featureloader
   */

  /**
   *
   * @type {boolean}
   * @private
   */
  let withCredentials = false;

  /**
   * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to
   * load features.
   *
   * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing
   * the area to be loaded, a `{number}` representing the resolution (map units per pixel), a
   * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get
   * the loaded features passed as an argument and an optional failure callback with no arguments. If
   * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and
   * `'featuresloaderror'` events. `this` within the function is bound to the
   * {@link module:ol/source/Vector~VectorSource} it's called from.
   *
   * The function is responsible for loading the features and adding them to the
   * source.
   *
   * @template {import("./Feature.js").FeatureLike} [FeatureType=import("./Feature.js").FeatureLike]
   * @typedef {(
   *           extent: import("./extent.js").Extent,
   *           resolution: number,
   *           projection: import("./proj/Projection.js").default,
   *           success?: (features: Array<FeatureType>) => void,
   *           failure?: () => void) => void} FeatureLoader
   * @api
   */

  /**
   * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to
   * get the url to load features from.
   *
   * This function takes an {@link module:ol/extent~Extent} representing the area
   * to be loaded, a `{number}` representing the resolution (map units per pixel)
   * and an {@link module:ol/proj/Projection~Projection} for the projection  as
   * arguments and returns a `{string}` representing the URL.
   * @typedef {function(import("./extent.js").Extent, number, import("./proj/Projection.js").default): string} FeatureUrlFunction
   * @api
   */

  /**
   * @template {import("./Feature.js").FeatureLike} [FeatureType=import("./Feature.js").default]
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default<FeatureType>} format Feature format.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @param {function(Array<FeatureType>, import("./proj/Projection.js").default): void} success Success
   *      Function called with the loaded features and optionally with the data projection.
   * @param {function(): void} failure Failure
   *      Function called when loading failed.
   */
  function loadFeaturesXhr(
    url,
    format,
    extent,
    resolution,
    projection,
    success,
    failure,
  ) {
    const xhr = new XMLHttpRequest();
    xhr.open(
      'GET',
      typeof url === 'function' ? url(extent, resolution, projection) : url,
      true,
    );
    if (format.getType() == 'arraybuffer') {
      xhr.responseType = 'arraybuffer';
    }
    xhr.withCredentials = withCredentials;
    /**
     * @param {Event} event Event.
     * @private
     */
    xhr.onload = function (event) {
      // status will be 0 for file:// urls
      if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {
        const type = format.getType();
        try {
          /** @type {Document|Node|Object|string|undefined} */
          let source;
          if (type == 'text' || type == 'json') {
            source = xhr.responseText;
          } else if (type == 'xml') {
            source = xhr.responseXML || xhr.responseText;
          } else if (type == 'arraybuffer') {
            source = /** @type {ArrayBuffer} */ (xhr.response);
          }
          if (source) {
            success(
              /** @type {Array<FeatureType>} */
              (
                format.readFeatures(source, {
                  extent: extent,
                  featureProjection: projection,
                })
              ),
              format.readProjection(source),
            );
          } else {
            failure();
          }
        } catch {
          failure();
        }
      } else {
        failure();
      }
    };
    /**
     * @private
     */
    xhr.onerror = failure;
    xhr.send();
  }

  /**
   * Create an XHR feature loader for a `url` and `format`. The feature loader
   * loads features (with XHR), parses the features, and adds them to the
   * vector source.
   *
   * @template {import("./Feature.js").FeatureLike} [FeatureType=import("./Feature.js").default]
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default<FeatureType>} format Feature format.
   * @return {FeatureLoader<FeatureType>} The feature loader.
   * @api
   */
  function xhr(url, format) {
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @param {function(Array<FeatureType>): void} [success] Success
     *      Function called when loading succeeded.
     * @param {function(): void} [failure] Failure
     *      Function called when loading failed.
     * @this {import("./source/Vector.js").default<FeatureType>}
     */
    return function (extent, resolution, projection, success, failure) {
      loadFeaturesXhr(
        url,
        format,
        extent,
        resolution,
        projection,
        /**
         * @param {Array<FeatureType>} features The loaded features.
         * @param {import("./proj/Projection.js").default} dataProjection Data
         * projection.
         */
        (features, dataProjection) => {
          this.addFeatures(features);
          if (success !== undefined) {
            success(features);
          }
        },
        () => {
          this.changed();
          if (failure !== undefined) {
            failure();
          }
        },
      );
    };
  }

  /**
   * @module ol/loadingstrategy
   */


  /**
   * Strategy function for loading all features with a single request.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @return {Array<import("./extent.js").Extent>} Extents.
   * @api
   */
  function all(extent, resolution) {
    return [[-Infinity, -Infinity, Infinity, Infinity]];
  }

  /**
   * Strategy function for loading features based on the view's extent and
   * resolution.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @return {Array<import("./extent.js").Extent>} Extents.
   * @api
   */
  function bbox(extent, resolution) {
    return [extent];
  }

  /**
   * Creates a strategy function for loading features based on a tile grid.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {function(import("./extent.js").Extent, number, import("./proj.js").Projection): Array<import("./extent.js").Extent>} Loading strategy.
   * @api
   */
  function tile(tileGrid) {
    return (
      /**
       * @param {import("./extent.js").Extent} extent Extent.
       * @param {number} resolution Resolution.
       * @param {import("./proj.js").Projection} projection Projection.
       * @return {Array<import("./extent.js").Extent>} Extents.
       */
      function (extent, resolution, projection) {
        const z = tileGrid.getZForResolution(
          fromUserResolution(resolution, projection),
        );
        const tileRange = tileGrid.getTileRangeForExtentAndZ(
          fromUserExtent(extent, projection),
          z,
        );
        /** @type {Array<import("./extent.js").Extent>} */
        const extents = [];
        /** @type {import("./tilecoord.js").TileCoord} */
        const tileCoord = [z, 0, 0];
        for (
          tileCoord[1] = tileRange.minX;
          tileCoord[1] <= tileRange.maxX;
          ++tileCoord[1]
        ) {
          for (
            tileCoord[2] = tileRange.minY;
            tileCoord[2] <= tileRange.maxY;
            ++tileCoord[2]
          ) {
            extents.push(
              toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection),
            );
          }
        }
        return extents;
      }
    );
  }

  var loadingstrategy = /*#__PURE__*/Object.freeze({
    __proto__: null,
    all: all,
    bbox: bbox,
    tile: tile
  });

  /**
   * @module ol/structs/RBush
   */

  /**
   * @typedef {import("rbush").BBox & {value: T}} Entry
   * @template T
   */

  /**
   * @classdesc
   * Wrapper around the RBush by Vladimir Agafonkin.
   * See https://github.com/mourner/rbush.
   *
   * @template {Object} T
   */
  class RBush {
    /**
     * @param {number} [maxEntries] Max entries.
     */
    constructor(maxEntries) {
      /**
       * @private
       * @type {RBush_<Entry<T>>}
       */
      this.rbush_ = new RBush$1(maxEntries);

      /**
       * A mapping between the objects added to this rbush wrapper
       * and the objects that are actually added to the internal rbush.
       * @private
       * @type {Object<string, Entry<T>>}
       */
      this.items_ = {};
    }

    /**
     * Insert a value into the RBush.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {T} value Value.
     */
    insert(extent, value) {
      /** @type {Entry<T>} */
      const item = {
        minX: extent[0],
        minY: extent[1],
        maxX: extent[2],
        maxY: extent[3],
        value: value,
      };

      this.rbush_.insert(item);
      this.items_[getUid(value)] = item;
    }

    /**
     * Bulk-insert values into the RBush.
     * @param {Array<import("../extent.js").Extent>} extents Extents.
     * @param {Array<T>} values Values.
     */
    load(extents, values) {
      const items = new Array(values.length);
      for (let i = 0, l = values.length; i < l; i++) {
        const extent = extents[i];
        const value = values[i];

        /** @type {Entry<T>} */
        const item = {
          minX: extent[0],
          minY: extent[1],
          maxX: extent[2],
          maxY: extent[3],
          value: value,
        };
        items[i] = item;
        this.items_[getUid(value)] = item;
      }
      this.rbush_.load(items);
    }

    /**
     * Remove a value from the RBush.
     * @param {T} value Value.
     * @return {boolean} Removed.
     */
    remove(value) {
      const uid = getUid(value);

      // get the object in which the value was wrapped when adding to the
      // internal rbush. then use that object to do the removal.
      const item = this.items_[uid];
      delete this.items_[uid];
      return this.rbush_.remove(item) !== null;
    }

    /**
     * Update the extent of a value in the RBush.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {T} value Value.
     */
    update(extent, value) {
      const item = this.items_[getUid(value)];
      const bbox = [item.minX, item.minY, item.maxX, item.maxY];
      if (!equals$1(bbox, extent)) {
        this.remove(value);
        this.insert(extent, value);
      }
    }

    /**
     * Return all values in the RBush.
     * @return {Array<T>} All.
     */
    getAll() {
      const items = this.rbush_.all();
      return items.map(function (item) {
        return item.value;
      });
    }

    /**
     * Return all values in the given extent.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {Array<T>} All in extent.
     */
    getInExtent(extent) {
      /** @type {import("rbush").BBox} */
      const bbox = {
        minX: extent[0],
        minY: extent[1],
        maxX: extent[2],
        maxY: extent[3],
      };
      const items = this.rbush_.search(bbox);
      return items.map(function (item) {
        return item.value;
      });
    }

    /**
     * Calls a callback function with each value in the tree.
     * If the callback returns a truthy value, this value is returned without
     * checking the rest of the tree.
     * @param {function(T): R} callback Callback.
     * @return {R|undefined} Callback return value.
     * @template R
     */
    forEach(callback) {
      return this.forEach_(this.getAll(), callback);
    }

    /**
     * Calls a callback function with each value in the provided extent.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(T): R} callback Callback.
     * @return {R|undefined} Callback return value.
     * @template R
     */
    forEachInExtent(extent, callback) {
      return this.forEach_(this.getInExtent(extent), callback);
    }

    /**
     * @param {Array<T>} values Values.
     * @param {function(T): R} callback Callback.
     * @return {R|undefined} Callback return value.
     * @template R
     * @private
     */
    forEach_(values, callback) {
      let result;
      for (let i = 0, l = values.length; i < l; i++) {
        result = callback(values[i]);
        if (result) {
          return result;
        }
      }
      return result;
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return isEmpty$1(this.items_);
    }

    /**
     * Remove all values from the RBush.
     */
    clear() {
      this.rbush_.clear();
      this.items_ = {};
    }

    /**
     * @param {import("../extent.js").Extent} [extent] Extent.
     * @return {import("../extent.js").Extent} Extent.
     */
    getExtent(extent) {
      const data = this.rbush_.toJSON();
      return createOrUpdate$2(data.minX, data.minY, data.maxX, data.maxY, extent);
    }

    /**
     * @param {RBush<T>} rbush R-Tree.
     */
    concat(rbush) {
      this.rbush_.load(rbush.rbush_.all());
      for (const i in rbush.items_) {
        this.items_[i] = rbush.items_[i];
      }
    }
  }

  /**
   * @module ol/source/Source
   */

  /**
   * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State
   * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
   */

  /**
   * A function that takes a {@link import("../View.js").ViewStateLayerStateExtent} and returns a string or
   * an array of strings representing source attributions.
   *
   * @typedef {function(import("../View.js").ViewStateLayerStateExtent): (string|Array<string>)} Attribution
   */

  /**
   * A type that can be used to provide attribution information for data sources.
   *
   * It represents either
   * a simple string (e.g. `'Â© Acme Inc.'`)
   * an array of simple strings (e.g. `['Â© Acme Inc.', 'Â© Bacme Inc.']`)
   * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})
   *
   * @typedef {string|Array<string>|Attribution} AttributionLike
   */

  /**
   * @typedef {Object} Options
   * @property {AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {import("./Source.js").State} [state='ready'] State.
   * @property {boolean} [wrapX=false] WrapX.
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for {@link module:ol/layer/Layer~Layer} sources.
   *
   * A generic `change` event is triggered when the state of the source changes.
   * @abstract
   * @api
   */
  class Source extends BaseObject {
    /**
     * @param {Options} options Source options.
     */
    constructor(options) {
      super();

      /**
       * @protected
       * @type {import("../proj/Projection.js").default|null}
       */
      this.projection = get$2(options.projection);

      /**
       * @private
       * @type {?Attribution}
       */
      this.attributions_ = adaptAttributions(options.attributions);

      /**
       * @private
       * @type {boolean}
       */
      this.attributionsCollapsible_ = options.attributionsCollapsible ?? true;

      /**
       * This source is currently loading data. Sources that defer loading to the
       * map's tile queue never set this to `true`.
       * @type {boolean}
       */
      this.loading = false;

      /**
       * @private
       * @type {import("./Source.js").State}
       */
      this.state_ = options.state !== undefined ? options.state : 'ready';

      /**
       * @private
       * @type {boolean}
       */
      this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;

      /**
       * @private
       * @type {boolean}
       */
      this.interpolate_ = !!options.interpolate;

      /**
       * @protected
       * @type {function(import("../View.js").ViewOptions):void}
       */
      this.viewResolver = null;

      /**
       * @protected
       * @type {function(Error):void}
       */
      this.viewRejector = null;

      const self = this;
      /**
       * @private
       * @type {Promise<import("../View.js").ViewOptions>}
       */
      this.viewPromise_ = new Promise(function (resolve, reject) {
        self.viewResolver = resolve;
        self.viewRejector = reject;
      });
    }

    /**
     * Get the attribution function for the source.
     * @return {?Attribution} Attribution function.
     * @api
     */
    getAttributions() {
      return this.attributions_;
    }

    /**
     * @return {boolean} Attributions are collapsible.
     * @api
     */
    getAttributionsCollapsible() {
      return this.attributionsCollapsible_;
    }

    /**
     * Get the projection of the source.
     * @return {import("../proj/Projection.js").default|null} Projection.
     * @api
     */
    getProjection() {
      return this.projection;
    }

    /**
     * @param {import("../proj/Projection").default} [projection] Projection.
     * @return {Array<number>|null} Resolutions.
     */
    getResolutions(projection) {
      return null;
    }

    /**
     * @return {Promise<import("../View.js").ViewOptions>} A promise for view-related properties.
     */
    getView() {
      return this.viewPromise_;
    }

    /**
     * Get the state of the source, see {@link import("./Source.js").State} for possible states.
     * @return {import("./Source.js").State} State.
     * @api
     */
    getState() {
      return this.state_;
    }

    /**
     * @return {boolean|undefined} Wrap X.
     */
    getWrapX() {
      return this.wrapX_;
    }

    /**
     * @return {boolean} Use linear interpolation when resampling.
     */
    getInterpolate() {
      return this.interpolate_;
    }

    /**
     * Refreshes the source. The source will be cleared, and data from the server will be reloaded.
     * @api
     */
    refresh() {
      this.changed();
    }

    /**
     * Set the attributions of the source.
     * @param {AttributionLike|undefined} attributions Attributions.
     *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},
     *     or `undefined`.
     * @api
     */
    setAttributions(attributions) {
      this.attributions_ = adaptAttributions(attributions);
      this.changed();
    }

    /**
     * Set the state of the source.
     * @param {import("./Source.js").State} state State.
     */
    setState(state) {
      this.state_ = state;
      this.changed();
    }
  }

  /**
   * Turns the attributions option into an attributions function.
   * @param {AttributionLike|undefined} attributionLike The attribution option.
   * @return {Attribution|null} An attribution function (or null).
   */
  function adaptAttributions(attributionLike) {
    if (!attributionLike) {
      return null;
    }
    if (typeof attributionLike === 'function') {
      return attributionLike;
    }
    if (!Array.isArray(attributionLike)) {
      attributionLike = [attributionLike];
    }
    return (frameState) => attributionLike;
  }

  /**
   * @module ol/source/VectorEventType
   */

  /**
   * @enum {string}
   */
  var VectorEventType = {
    /**
     * Triggered when a feature is added to the source.
     * @event module:ol/source/Vector.VectorSourceEvent#addfeature
     * @api
     */
    ADDFEATURE: 'addfeature',

    /**
     * Triggered when a feature is updated.
     * @event module:ol/source/Vector.VectorSourceEvent#changefeature
     * @api
     */
    CHANGEFEATURE: 'changefeature',

    /**
     * Triggered when the clear method is called on the source.
     * @event module:ol/source/Vector.VectorSourceEvent#clear
     * @api
     */
    CLEAR: 'clear',

    /**
     * Triggered when a feature is removed from the source.
     * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.
     * @event module:ol/source/Vector.VectorSourceEvent#removefeature
     * @api
     */
    REMOVEFEATURE: 'removefeature',

    /**
     * Triggered when features starts loading.
     * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart
     * @api
     */
    FEATURESLOADSTART: 'featuresloadstart',

    /**
     * Triggered when features finishes loading.
     * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend
     * @api
     */
    FEATURESLOADEND: 'featuresloadend',

    /**
     * Triggered if feature loading results in an error.
     * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror
     * @api
     */
    FEATURESLOADERROR: 'featuresloaderror',
  };

  /**
   * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes
   */

  /**
   * @module ol/source/Vector
   */


  /**
   * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and
   * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this
   * is one of the standard {@link module:ol/loadingstrategy} strategies.
   *
   * @typedef {function(import("../extent.js").Extent, number, import("../proj/Projection.js").default): Array<import("../extent.js").Extent>} LoadingStrategy
   * @api
   */

  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this
   * type.
   * @template {import("../Feature.js").FeatureLike} [FeatureType=import("../Feature.js").default]
   */
  class VectorSourceEvent extends BaseEvent {
    /**
     * @param {string} type Type.
     * @param {FeatureType} [feature] Feature.
     * @param {Array<FeatureType>} [features] Features.
     */
    constructor(type, feature, features) {
      super(type);

      /**
       * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.
       * @type {FeatureType|undefined}
       * @api
       */
      this.feature = feature;

      /**
       * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.
       * @type {Array<FeatureType>|undefined}
       * @api
       */
      this.features = features;
    }
  }

  /***
   * @template {import("../Feature.js").FeatureLike} [T=import("../Feature.js").default]
   * @typedef {T extends RenderFeature ? T|Array<T> : T} FeatureClassOrArrayOfRenderFeatures
   */

  /***
   * @template Return
   * @template {import("../Feature.js").FeatureLike} [FeatureType=import("../Feature.js").default]
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<import("./VectorEventType").VectorSourceEventTypes, VectorSourceEvent<FeatureType>, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     import("./VectorEventType").VectorSourceEventTypes, Return>} VectorSourceOnSignature
   */

  /**
   * @template {import("../Feature.js").FeatureLike} [FeatureType=import("../Feature.js").default]
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {Array<FeatureType>|Collection<FeatureType>} [features]
   * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source
   * and the collection will stay in sync.
   * @property {import("../format/Feature.js").default<FeatureType>} [format] The feature format used by the XHR
   * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
   * @property {import("../featureloader.js").FeatureLoader<FeatureType>} [loader]
   * The loader function used to load features, from a remote source for example.
   * If this is not set and `url` is set, the source will create and use an XHR
   * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events
   * will only fire if the `success` and `failure` callbacks are used.
   *
   * Example:
   *
   * ```js
   * import Vector from 'ol/source/Vector.js';
   * import GeoJSON from 'ol/format/GeoJSON.js';
   * import {bbox} from 'ol/loadingstrategy.js';
   *
   * const vectorSource = new Vector({
   *   format: new GeoJSON(),
   *   loader: function(extent, resolution, projection, success, failure) {
   *      const proj = projection.getCode();
   *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
   *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
   *          'outputFormat=application/json&srsname=' + proj + '&' +
   *          'bbox=' + extent.join(',') + ',' + proj;
   *      const xhr = new XMLHttpRequest();
   *      xhr.open('GET', url);
   *      const onError = function() {
   *        vectorSource.removeLoadedExtent(extent);
   *        failure();
   *      }
   *      xhr.onerror = onError;
   *      xhr.onload = function() {
   *        if (xhr.status == 200) {
   *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);
   *          vectorSource.addFeatures(features);
   *          success(features);
   *        } else {
   *          onError();
   *        }
   *      }
   *      xhr.send();
   *    },
   *    strategy: bbox,
   *  });
   * ```
   * @property {boolean} [overlaps=true] This source may have overlapping geometries.
   * Setting this to `false` (e.g. for sources with polygons that represent administrative
   * boundaries or TopoJSON sources) allows the renderer to optimise fill and
   * stroke operations.
   * @property {LoadingStrategy} [strategy] The loading strategy to use.
   * By default an {@link module:ol/loadingstrategy.all}
   * strategy is used, a one-off strategy which loads all features at once.
   * @property {string|import("../featureloader.js").FeatureUrlFunction} [url]
   * Setting this option instructs the source to load features using an XHR loader
   * (see {@link module:ol/featureloader.xhr}). Use a `string` and an
   * {@link module:ol/loadingstrategy.all} for a one-off download of all features from
   * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with
   * other loading strategies.
   * Requires `format` to be set as well.
   * When default XHR feature loader is provided, the features will
   * be transformed from the data projection to the view projection
   * during parsing. If your remote data source does not advertise its projection
   * properly, this transformation will be incorrect. For some formats, the
   * default projection (usually EPSG:4326) can be overridden by setting the
   * dataProjection constructor option on the format.
   * Note that if a source contains non-feature data, such as a GeoJSON geometry
   * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
   * @property {boolean} [useSpatialIndex=true]
   * By default, an RTree is used as spatial index. When features are removed and
   * added frequently, and the total number of features is low, setting this to
   * `false` may improve performance.
   *
   * Note that
   * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
   * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
   * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
   * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
   * through all features.
   *
   * When set to `false`, the features will be maintained in an
   * {@link module:ol/Collection~Collection}, which can be retrieved through
   * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
   * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
   * -180Â° and 180Â° meridians to work properly, this should be set to `false`. The
   * resulting geometry coordinates will then exceed the world bounds.
   */

  /**
   * @classdesc
   * Provides a source of features for vector layers. Vector features provided
   * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
   * vector data that is optimized for rendering.
   *
   * @fires VectorSourceEvent
   * @api
   * @template {import("../Feature.js").FeatureLike} [FeatureType=import("../Feature.js").default]
   */
  class VectorSource extends Source {
    /**
     * @param {Options<FeatureType>} [options] Vector source options.
     */
    constructor(options) {
      options = options || {};

      super({
        attributions: options.attributions,
        interpolate: true,
        projection: undefined,
        state: 'ready',
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
      });

      /***
       * @type {VectorSourceOnSignature<import("../events").EventsKey, FeatureType>}
       */
      this.on;

      /***
       * @type {VectorSourceOnSignature<import("../events").EventsKey, FeatureType>}
       */
      this.once;

      /***
       * @type {VectorSourceOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {import("../featureloader.js").FeatureLoader<import("../Feature.js").FeatureLike>}
       */
      this.loader_ = VOID;

      /**
       * @private
       * @type {import("../format/Feature.js").default<FeatureType>|null}
       */
      this.format_ = options.format || null;

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;

      /**
       * @private
       * @type {string|import("../featureloader.js").FeatureUrlFunction|undefined}
       */
      this.url_ = options.url;

      if (options.loader !== undefined) {
        this.loader_ = options.loader;
      } else if (this.url_ !== undefined) {
        assert$1(this.format_, '`format` must be set when `url` is set');
        // create a XHR feature loader for "url" and "format"
        this.loader_ = xhr(this.url_, this.format_);
      }

      /**
       * @private
       * @type {LoadingStrategy}
       */
      this.strategy_ =
        options.strategy !== undefined ? options.strategy : all;

      const useSpatialIndex =
        options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;

      /**
       * @private
       * @type {RBush<FeatureType>}
       */
      this.featuresRtree_ = useSpatialIndex ? new RBush() : null;

      /**
       * @private
       * @type {RBush<{extent: import("../extent.js").Extent}>}
       */
      this.loadedExtentsRtree_ = new RBush();

      /**
       * @type {number}
       * @private
       */
      this.loadingExtentsCount_ = 0;

      /**
       * @private
       * @type {!Object<string, FeatureType>}
       */
      this.nullGeometryFeatures_ = {};

      /**
       * A lookup of features by id (the return from feature.getId()).
       * @private
       * @type {!Object<string, import('../Feature.js').FeatureLike|Array<import('../Feature.js').FeatureLike>>}
       */
      this.idIndex_ = {};

      /**
       * A lookup of features by uid (using getUid(feature)).
       * @private
       * @type {!Object<string, FeatureType>}
       */
      this.uidIndex_ = {};

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").EventsKey>>}
       */
      this.featureChangeKeys_ = {};

      /**
       * @private
       * @type {Collection<FeatureType>|null}
       */
      this.featuresCollection_ = null;

      /** @type {Collection<FeatureType>} */
      let collection;
      /** @type {Array<FeatureType>} */
      let features;
      if (Array.isArray(options.features)) {
        features = options.features;
      } else if (options.features) {
        collection = options.features;
        features = collection.getArray();
      }
      if (!useSpatialIndex && collection === undefined) {
        collection = new Collection(features);
      }
      if (features !== undefined) {
        this.addFeaturesInternal(features);
      }
      if (collection !== undefined) {
        this.bindFeaturesCollection_(collection);
      }
    }

    /**
     * Add a single feature to the source.  If you want to add a batch of features
     * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
     * instead. A feature will not be added to the source if feature with
     * the same id is already there. The reason for this behavior is to avoid
     * feature duplication when using bbox or tile loading strategies.
     * Note: this also applies if a {@link module:ol/Collection~Collection} is used for features,
     * meaning that if a feature with a duplicate id is added in the collection, it will
     * be removed from it right away.
     * @param {FeatureType} feature Feature to add.
     * @api
     */
    addFeature(feature) {
      this.addFeatureInternal(feature);
      this.changed();
    }

    /**
     * Add a feature without firing a `change` event.
     * @param {FeatureType} feature Feature.
     * @protected
     */
    addFeatureInternal(feature) {
      const featureKey = getUid(feature);

      if (!this.addToIndex_(featureKey, feature)) {
        if (this.featuresCollection_) {
          this.featuresCollection_.remove(feature);
        }
        return;
      }

      this.setupChangeEvents_(featureKey, feature);

      const geometry = feature.getGeometry();
      if (geometry) {
        const extent = geometry.getExtent();
        if (this.featuresRtree_) {
          this.featuresRtree_.insert(extent, feature);
        }
      } else {
        this.nullGeometryFeatures_[featureKey] = feature;
      }

      this.dispatchEvent(
        new VectorSourceEvent(VectorEventType.ADDFEATURE, feature),
      );
    }

    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {FeatureType} feature The feature.
     * @private
     */
    setupChangeEvents_(featureKey, feature) {
      if (feature instanceof RenderFeature) {
        return;
      }
      this.featureChangeKeys_[featureKey] = [
        listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),
        listen(
          feature,
          ObjectEventType.PROPERTYCHANGE,
          this.handleFeatureChange_,
          this,
        ),
      ];
    }

    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {FeatureType} feature The feature.
     * @return {boolean} The feature is "valid", in the sense that it is also a
     *     candidate for insertion into the Rtree.
     * @private
     */
    addToIndex_(featureKey, feature) {
      let valid = true;
      if (feature.getId() !== undefined) {
        const id = String(feature.getId());
        if (!(id in this.idIndex_)) {
          this.idIndex_[id] = feature;
        } else if (feature instanceof RenderFeature) {
          const indexedFeature = this.idIndex_[id];
          if (!(indexedFeature instanceof RenderFeature)) {
            valid = false;
          } else if (!Array.isArray(indexedFeature)) {
            this.idIndex_[id] = [indexedFeature, feature];
          } else {
            indexedFeature.push(feature);
          }
        } else {
          valid = false;
        }
      }
      if (valid) {
        assert$1(
          !(featureKey in this.uidIndex_),
          'The passed `feature` was already added to the source',
        );
        this.uidIndex_[featureKey] = feature;
      }
      return valid;
    }

    /**
     * Add a batch of features to the source.
     * @param {Array<FeatureType>} features Features to add.
     * @api
     */
    addFeatures(features) {
      this.addFeaturesInternal(features);
      this.changed();
    }

    /**
     * Add features without firing a `change` event.
     * @param {Array<FeatureType>} features Features.
     * @protected
     */
    addFeaturesInternal(features) {
      const extents = [];
      /** @type {Array<FeatureType>} */
      const newFeatures = [];
      /** @type {Array<FeatureType>} */
      const geometryFeatures = [];

      for (let i = 0, length = features.length; i < length; i++) {
        const feature = features[i];
        const featureKey = getUid(feature);
        if (this.addToIndex_(featureKey, feature)) {
          newFeatures.push(feature);
        }
      }

      for (let i = 0, length = newFeatures.length; i < length; i++) {
        const feature = newFeatures[i];
        const featureKey = getUid(feature);
        this.setupChangeEvents_(featureKey, feature);

        const geometry = feature.getGeometry();
        if (geometry) {
          const extent = geometry.getExtent();
          extents.push(extent);
          geometryFeatures.push(feature);
        } else {
          this.nullGeometryFeatures_[featureKey] = feature;
        }
      }
      if (this.featuresRtree_) {
        this.featuresRtree_.load(extents, geometryFeatures);
      }

      if (this.hasListener(VectorEventType.ADDFEATURE)) {
        for (let i = 0, length = newFeatures.length; i < length; i++) {
          this.dispatchEvent(
            new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]),
          );
        }
      }
    }

    /**
     * @param {!Collection<FeatureType>} collection Collection.
     * @private
     */
    bindFeaturesCollection_(collection) {
      let modifyingCollection = false;
      this.addEventListener(
        VectorEventType.ADDFEATURE,
        /**
         * @param {VectorSourceEvent<FeatureType>} evt The vector source event
         */
        function (evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            collection.push(evt.feature);
            modifyingCollection = false;
          }
        },
      );
      this.addEventListener(
        VectorEventType.REMOVEFEATURE,
        /**
         * @param {VectorSourceEvent<FeatureType>} evt The vector source event
         */
        function (evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            collection.remove(evt.feature);
            modifyingCollection = false;
          }
        },
      );
      collection.addEventListener(
        CollectionEventType.ADD,
        /**
         * @param {import("../Collection.js").CollectionEvent<FeatureType>} evt The collection event
         */
        (evt) => {
          if (!modifyingCollection) {
            modifyingCollection = true;
            this.addFeature(evt.element);
            modifyingCollection = false;
          }
        },
      );
      collection.addEventListener(
        CollectionEventType.REMOVE,
        /**
         * @param {import("../Collection.js").CollectionEvent<FeatureType>} evt The collection event
         */
        (evt) => {
          if (!modifyingCollection) {
            modifyingCollection = true;
            this.removeFeature(evt.element);
            modifyingCollection = false;
          }
        },
      );
      this.featuresCollection_ = collection;
    }

    /**
     * Remove all features from the source.
     * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.
     * @api
     */
    clear(fast) {
      if (fast) {
        for (const featureId in this.featureChangeKeys_) {
          const keys = this.featureChangeKeys_[featureId];
          keys.forEach(unlistenByKey);
        }
        if (!this.featuresCollection_) {
          this.featureChangeKeys_ = {};
          this.idIndex_ = {};
          this.uidIndex_ = {};
        }
      } else {
        if (this.featuresRtree_) {
          this.featuresRtree_.forEach((feature) => {
            this.removeFeatureInternal(feature);
          });
          for (const id in this.nullGeometryFeatures_) {
            this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
          }
        }
      }
      if (this.featuresCollection_) {
        this.featuresCollection_.clear();
      }

      if (this.featuresRtree_) {
        this.featuresRtree_.clear();
      }
      this.nullGeometryFeatures_ = {};

      const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);
      this.dispatchEvent(clearEvent);
      this.changed();
    }

    /**
     * Iterate through all features on the source, calling the provided callback
     * with each one.  If the callback returns any "truthy" value, iteration will
     * stop and the function will return the same value.
     * Note: this function only iterate through the feature that have a defined geometry.
     *
     * @param {function(FeatureType): T} callback Called with each feature
     *     on the source.  Return a truthy value to stop iteration.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    forEachFeature(callback) {
      if (this.featuresRtree_) {
        return this.featuresRtree_.forEach(callback);
      }
      if (this.featuresCollection_) {
        this.featuresCollection_.forEach(callback);
      }
    }

    /**
     * Iterate through all features whose geometries contain the provided
     * coordinate, calling the callback with each feature.  If the callback returns
     * a "truthy" value, iteration will stop and the function will return the same
     * value.
     *
     * For {@link module:ol/render/Feature~RenderFeature} features, the callback will be
     * called for all features.
     *
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(FeatureType): T} callback Called with each feature
     *     whose goemetry contains the provided coordinate.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     */
    forEachFeatureAtCoordinateDirect(coordinate, callback) {
      const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];
      return this.forEachFeatureInExtent(extent, function (feature) {
        const geometry = feature.getGeometry();
        if (
          geometry instanceof RenderFeature ||
          geometry.intersectsCoordinate(coordinate)
        ) {
          return callback(feature);
        }
        return undefined;
      });
    }

    /**
     * Iterate through all features whose bounding box intersects the provided
     * extent (note that the feature's geometry may not intersect the extent),
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you are interested in features whose geometry intersects an extent, call
     * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
     *
     * When `useSpatialIndex` is set to false, this method will loop through all
     * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(FeatureType): T} callback Called with each feature
     *     whose bounding box intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    forEachFeatureInExtent(extent, callback) {
      if (this.featuresRtree_) {
        return this.featuresRtree_.forEachInExtent(extent, callback);
      }
      if (this.featuresCollection_) {
        this.featuresCollection_.forEach(callback);
      }
    }

    /**
     * Iterate through all features whose geometry intersects the provided extent,
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you only want to test for bounding box intersection, call the
     * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(FeatureType): T} callback Called with each feature
     *     whose geometry intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    forEachFeatureIntersectingExtent(extent, callback) {
      return this.forEachFeatureInExtent(
        extent,
        /**
         * @param {FeatureType} feature Feature.
         * @return {T|undefined} The return value from the last call to the callback.
         */
        function (feature) {
          const geometry = feature.getGeometry();
          if (
            geometry instanceof RenderFeature ||
            geometry.intersectsExtent(extent)
          ) {
            const result = callback(feature);
            if (result) {
              return result;
            }
          }
        },
      );
    }

    /**
     * Get the features collection associated with this source. Will be `null`
     * unless the source was configured with `useSpatialIndex` set to `false`, or
     * with a {@link module:ol/Collection~Collection} as `features`.
     * @return {Collection<FeatureType>|null} The collection of features.
     * @api
     */
    getFeaturesCollection() {
      return this.featuresCollection_;
    }

    /**
     * Get a snapshot of the features currently on the source in random order. The returned array
     * is a copy, the features are references to the features in the source.
     * @return {Array<FeatureType>} Features.
     * @api
     */
    getFeatures() {
      let features;
      if (this.featuresCollection_) {
        features = this.featuresCollection_.getArray().slice(0);
      } else if (this.featuresRtree_) {
        features = this.featuresRtree_.getAll();
        if (!isEmpty$1(this.nullGeometryFeatures_)) {
          extend$3(features, Object.values(this.nullGeometryFeatures_));
        }
      }
      return features;
    }

    /**
     * Get all features whose geometry intersects the provided coordinate.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {Array<FeatureType>} Features.
     * @api
     */
    getFeaturesAtCoordinate(coordinate) {
      /** @type {Array<FeatureType>} */
      const features = [];
      this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {
        features.push(feature);
      });
      return features;
    }

    /**
     * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of
     * all features intersecting the given extent in random order (so it may include
     * features whose geometries do not intersect the extent).
     *
     * When `useSpatialIndex` is set to false, this method will return all
     * features.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {import("../proj/Projection.js").default} [projection] Include features
     * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.
     * @return {Array<FeatureType>} Features.
     * @api
     */
    getFeaturesInExtent(extent, projection) {
      if (this.featuresRtree_) {
        const multiWorld = projection && projection.canWrapX() && this.getWrapX();

        if (!multiWorld) {
          return this.featuresRtree_.getInExtent(extent);
        }

        const extents = wrapAndSliceX(extent, projection);

        return [].concat(
          ...extents.map((anExtent) => this.featuresRtree_.getInExtent(anExtent)),
        );
      }
      if (this.featuresCollection_) {
        return this.featuresCollection_.getArray().slice(0);
      }
      return [];
    }

    /**
     * Get the closest feature to the provided coordinate.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false` and the features in this source are of type
     * {@link module:ol/Feature~Feature}.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(FeatureType):boolean} [filter] Feature filter function.
     *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}
     *     and it should return a boolean value. By default, no filtering is made.
     * @return {FeatureType} Closest feature.
     * @api
     */
    getClosestFeatureToCoordinate(coordinate, filter) {
      // Find the closest feature using branch and bound.  We start searching an
      // infinite extent, and find the distance from the first feature found.  This
      // becomes the closest feature.  We then compute a smaller extent which any
      // closer feature must intersect.  We continue searching with this smaller
      // extent, trying to find a closer feature.  Every time we find a closer
      // feature, we update the extent being searched so that any even closer
      // feature must intersect it.  We continue until we run out of features.
      const x = coordinate[0];
      const y = coordinate[1];
      let closestFeature = null;
      const closestPoint = [NaN, NaN];
      let minSquaredDistance = Infinity;
      const extent = [-Infinity, -Infinity, Infinity, Infinity];
      filter = filter ? filter : TRUE;
      this.featuresRtree_.forEachInExtent(
        extent,
        /**
         * @param {FeatureType} feature Feature.
         */
        function (feature) {
          if (filter(feature)) {
            const geometry = feature.getGeometry();
            const previousMinSquaredDistance = minSquaredDistance;
            minSquaredDistance =
              geometry instanceof RenderFeature
                ? 0
                : geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);
            if (minSquaredDistance < previousMinSquaredDistance) {
              closestFeature = feature;
              // This is sneaky.  Reduce the extent that it is currently being
              // searched while the R-Tree traversal using this same extent object
              // is still in progress.  This is safe because the new extent is
              // strictly contained by the old extent.
              const minDistance = Math.sqrt(minSquaredDistance);
              extent[0] = x - minDistance;
              extent[1] = y - minDistance;
              extent[2] = x + minDistance;
              extent[3] = y + minDistance;
            }
          }
        },
      );
      return closestFeature;
    }

    /**
     * Get the extent of the features currently in the source.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../extent.js").Extent} [extent] Destination extent. If provided, no new extent
     *     will be created. Instead, that extent's coordinates will be overwritten.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent(extent) {
      return this.featuresRtree_.getExtent(extent);
    }

    /**
     * Get a feature by its identifier (the value returned by feature.getId()). When `RenderFeature`s
     * are used, `getFeatureById()` can return an array of `RenderFeature`s. This allows for handling
     * of `GeometryCollection` geometries, where format readers create one `RenderFeature` per
     * `GeometryCollection` member.
     * Note that the index treats string and numeric identifiers as the same.  So
     * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
     *
     * @param {string|number} id Feature identifier.
     * @return {FeatureClassOrArrayOfRenderFeatures<FeatureType>|null} The feature (or `null` if not found).
     * @api
     */
    getFeatureById(id) {
      const feature = this.idIndex_[id.toString()];
      return feature !== undefined
        ? /** @type {FeatureClassOrArrayOfRenderFeatures<FeatureType>} */ (
            feature
          )
        : null;
    }

    /**
     * Get a feature by its internal unique identifier (using `getUid`).
     *
     * @param {string} uid Feature identifier.
     * @return {FeatureType|null} The feature (or `null` if not found).
     */
    getFeatureByUid(uid) {
      const feature = this.uidIndex_[uid];
      return feature !== undefined ? feature : null;
    }

    /**
     * Get the format associated with this source.
     *
     * @return {import("../format/Feature.js").default<FeatureType>|null}} The feature format.
     * @api
     */
    getFormat() {
      return this.format_;
    }

    /**
     * @return {boolean} The source can have overlapping geometries.
     */
    getOverlaps() {
      return this.overlaps_;
    }

    /**
     * Get the url associated with this source.
     *
     * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
     * @api
     */
    getUrl() {
      return this.url_;
    }

    /**
     * @param {Event} event Event.
     * @private
     */
    handleFeatureChange_(event) {
      const feature = /** @type {FeatureType} */ (event.target);
      const featureKey = getUid(feature);
      const geometry = feature.getGeometry();
      if (!geometry) {
        if (!(featureKey in this.nullGeometryFeatures_)) {
          if (this.featuresRtree_) {
            this.featuresRtree_.remove(feature);
          }
          this.nullGeometryFeatures_[featureKey] = feature;
        }
      } else {
        const extent = geometry.getExtent();
        if (featureKey in this.nullGeometryFeatures_) {
          delete this.nullGeometryFeatures_[featureKey];
          if (this.featuresRtree_) {
            this.featuresRtree_.insert(extent, feature);
          }
        } else {
          if (this.featuresRtree_) {
            this.featuresRtree_.update(extent, feature);
          }
        }
      }
      const id = feature.getId();
      if (id !== undefined) {
        const sid = id.toString();
        if (this.idIndex_[sid] !== feature) {
          this.removeFromIdIndex_(feature);
          this.idIndex_[sid] = feature;
        }
      } else {
        this.removeFromIdIndex_(feature);
        this.uidIndex_[featureKey] = feature;
      }
      this.changed();
      this.dispatchEvent(
        new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature),
      );
    }

    /**
     * Returns true if the feature is contained within the source.
     * @param {FeatureType} feature Feature.
     * @return {boolean} Has feature.
     * @api
     */
    hasFeature(feature) {
      const id = feature.getId();
      if (id !== undefined) {
        return id in this.idIndex_;
      }
      return getUid(feature) in this.uidIndex_;
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      if (this.featuresRtree_) {
        return (
          this.featuresRtree_.isEmpty() && isEmpty$1(this.nullGeometryFeatures_)
        );
      }
      if (this.featuresCollection_) {
        return this.featuresCollection_.getLength() === 0;
      }
      return true;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    loadFeatures(extent, resolution, projection) {
      const loadedExtentsRtree = this.loadedExtentsRtree_;
      const extentsToLoad = this.strategy_(extent, resolution, projection);
      for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {
        const extentToLoad = extentsToLoad[i];
        const alreadyLoaded = loadedExtentsRtree.forEachInExtent(
          extentToLoad,
          /**
           * @param {{extent: import("../extent.js").Extent}} object Object.
           * @return {boolean} Contains.
           */
          function (object) {
            return containsExtent(object.extent, extentToLoad);
          },
        );
        if (!alreadyLoaded) {
          ++this.loadingExtentsCount_;
          this.dispatchEvent(
            new VectorSourceEvent(VectorEventType.FEATURESLOADSTART),
          );
          this.loader_.call(
            this,
            extentToLoad,
            resolution,
            projection,
            /**
             * @param {Array<FeatureType>} features Loaded features
             */
            (features) => {
              --this.loadingExtentsCount_;
              this.dispatchEvent(
                new VectorSourceEvent(
                  VectorEventType.FEATURESLOADEND,
                  undefined,
                  features,
                ),
              );
            },
            () => {
              --this.loadingExtentsCount_;
              this.dispatchEvent(
                new VectorSourceEvent(VectorEventType.FEATURESLOADERROR),
              );
            },
          );
          loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});
        }
      }
      this.loading =
        this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;
    }

    /**
     * @override
     */
    refresh() {
      this.clear(true);
      this.loadedExtentsRtree_.clear();
      super.refresh();
    }

    /**
     * Remove an extent from the list of loaded extents.
     * @param {import("../extent.js").Extent} extent Extent.
     * @api
     */
    removeLoadedExtent(extent) {
      const loadedExtentsRtree = this.loadedExtentsRtree_;
      const obj = loadedExtentsRtree.forEachInExtent(extent, function (object) {
        if (equals$1(object.extent, extent)) {
          return object;
        }
      });
      if (obj) {
        loadedExtentsRtree.remove(obj);
      }
    }

    /**
     * Batch remove features from the source.  If you want to remove all features
     * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
     * instead.
     * @param {Array<FeatureType>} features Features to remove.
     * @api
     */
    removeFeatures(features) {
      let removed = false;
      for (let i = 0, ii = features.length; i < ii; ++i) {
        removed = this.removeFeatureInternal(features[i]) || removed;
      }
      if (removed) {
        this.changed();
      }
    }

    /**
     * Remove a single feature from the source. If you want to batch remove
     * features, use the {@link module:ol/source/Vector~VectorSource#removeFeatures #removeFeatures()} method
     * instead.
     * @param {FeatureType} feature Feature to remove.
     * @api
     */
    removeFeature(feature) {
      if (!feature) {
        return;
      }
      const removed = this.removeFeatureInternal(feature);
      if (removed) {
        this.changed();
      }
    }

    /**
     * Remove feature without firing a `change` event.
     * @param {FeatureType} feature Feature.
     * @return {boolean} True if the feature was removed, false if it was not found.
     * @protected
     */
    removeFeatureInternal(feature) {
      const featureKey = getUid(feature);
      if (!(featureKey in this.uidIndex_)) {
        return false;
      }

      if (featureKey in this.nullGeometryFeatures_) {
        delete this.nullGeometryFeatures_[featureKey];
      } else {
        if (this.featuresRtree_) {
          this.featuresRtree_.remove(feature);
        }
      }

      const featureChangeKeys = this.featureChangeKeys_[featureKey];
      featureChangeKeys?.forEach(unlistenByKey);
      delete this.featureChangeKeys_[featureKey];

      const id = feature.getId();
      if (id !== undefined) {
        const idString = id.toString();
        const indexedFeature = this.idIndex_[idString];
        if (indexedFeature === feature) {
          delete this.idIndex_[idString];
        } else if (Array.isArray(indexedFeature)) {
          indexedFeature.splice(indexedFeature.indexOf(feature), 1);
          if (indexedFeature.length === 1) {
            this.idIndex_[idString] = indexedFeature[0];
          }
        }
      }
      delete this.uidIndex_[featureKey];
      if (this.hasListener(VectorEventType.REMOVEFEATURE)) {
        this.dispatchEvent(
          new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature),
        );
      }
      return true;
    }

    /**
     * Remove a feature from the id index.  Called internally when the feature id
     * may have changed.
     * @param {FeatureType} feature The feature.
     * @private
     */
    removeFromIdIndex_(feature) {
      for (const id in this.idIndex_) {
        if (this.idIndex_[id] === feature) {
          delete this.idIndex_[id];
          break;
        }
      }
    }

    /**
     * Set the new loader of the source. The next render cycle will use the
     * new loader.
     * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
     * @api
     */
    setLoader(loader) {
      this.loader_ = loader;
    }

    /**
     * Points the source to a new url. The next render cycle will use the new url.
     * @param {string|import("../featureloader.js").FeatureUrlFunction} url Url.
     * @api
     */
    setUrl(url) {
      assert$1(this.format_, '`format` must be set when `url` is set');
      this.url_ = url;
      this.setLoader(xhr(url, this.format_));
    }

    /**
     * @param {boolean} overlaps The source can have overlapping geometries.
     */
    setOverlaps(overlaps) {
      this.overlaps_ = overlaps;
      this.changed();
    }
  }

  /**
   * @module ol/interaction/Draw
   */

  /**
   * @typedef {Object} Options
   * @property {import("../geom/Geometry.js").Type} type Geometry type of
   * the geometries being drawn with this instance.
   * @property {number} [clickTolerance=6] The maximum distance in pixels between
   * "down" and "up" for a "up" event to be considered a "click" event and
   * actually add a point/vertex to the geometry being drawn.  The default of `6`
   * was chosen for the draw interaction to behave correctly on mouse as well as
   * on touch devices.
   * @property {import("../Collection.js").default<Feature>} [features]
   * Destination collection for the drawn features.
   * @property {VectorSource} [source] Destination source for
   * the drawn features.
   * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown
   * before the current vertex can be dragged to its exact position.
   * @property {number} [snapTolerance=12] Pixel distance for snapping to the
   * drawing finish. Must be greater than `0`.
   * @property {boolean} [stopClick=false] Stop click, singleclick, and
   * doubleclick events from firing during drawing.
   * @property {number} [maxPoints] The number of points that can be drawn before
   * a polygon ring or line string is finished. By default there is no
   * restriction.
   * @property {number} [minPoints] The number of points that must be drawn
   * before a polygon ring or line string can be finished. Default is `3` for
   * polygon rings and `2` for line strings.
   * @property {import("../events/condition.js").Condition} [finishCondition] A function
   * that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether the drawing can be finished. Not used when drawing
   * POINT or MULTI_POINT geometries.
   * @property {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike} [style]
   * Style for sketch features. The draw interaction can have up to three sketch features, depending on the mode.
   * It will always contain a feature with a `Point` geometry that corresponds to the current cursor position.
   * If the mode is `LineString` or `Polygon`, and there is at least one drawn point, it will also contain a feature with
   * a `LineString` geometry that corresponds to the line between the already drawn points and the current cursor position.
   * If the mode is `Polygon`, and there is at least one drawn point, it will also contain a feature with a `Polygon`
   * geometry that corresponds to the polygon between the already drawn points and the current cursor position
   * (note that this polygon has only two points if only one point is drawn).
   * If the mode is `Circle`, and there is one point drawn, it will also contain a feature with a `Circle` geometry whose
   * center is the drawn point and the radius is determined by the distance between the drawn point and the cursor.
   * @property {GeometryFunction} [geometryFunction]
   * Function that is called when a geometry's coordinates are updated.
   * @property {string} [geometryName] Geometry name to use for features created
   * by the draw interaction.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,
   * adds a vertex or deactivates freehand drawing.
   * @property {boolean} [freehand=false] Operate in freehand mode for lines,
   * polygons, and circles.  This makes the interaction always operate in freehand
   * mode and takes precedence over any `freehandCondition` option.
   * @property {import("../events/condition.js").Condition} [freehandCondition]
   * Condition that activates freehand drawing for lines and polygons. This
   * function takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
   * returns a boolean to indicate whether that event should be handled. The
   * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the
   * Shift key activates freehand drawing.
   * @property {boolean|import("../events/condition.js").Condition} [trace=false] Trace a portion of another geometry.
   * Ignored when in freehand mode.
   * @property {VectorSource} [traceSource] Source for features to trace.  If tracing is active and a `traceSource` is
   * not provided, the interaction's `source` will be used.  Tracing requires that the interaction is configured with
   * either a `traceSource` or a `source`.
   * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
   * overlay.
   * @property {import("../geom/Geometry.js").GeometryLayout} [geometryLayout='XY'] Layout of the
   * feature geometries created by the draw interaction.
   */

  /**
   * Coordinate type when drawing points.
   * @typedef {import("../coordinate.js").Coordinate} PointCoordType
   */

  /**
   * Coordinate type when drawing lines.
   * @typedef {Array<import("../coordinate.js").Coordinate>} LineCoordType
   */

  /**
   * Coordinate type when drawing polygons.
   * @typedef {Array<Array<import("../coordinate.js").Coordinate>>} PolyCoordType
   */

  /**
   * Types used for drawing coordinates.
   * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType
   */

  /**
   * @typedef {Object} TraceState
   * @property {boolean} active Tracing active.
   * @property {import("../pixel.js").Pixel} [startPx] The initially clicked pixel location.
   * @property {Array<TraceTarget>} [targets] Targets available for tracing.
   * @property {number} [targetIndex] The index of the currently traced target.  A value of -1 indicates
   * that no trace target is active.
   */

  /**
   * @typedef {Object} TraceTarget
   * @property {Array<import("../coordinate.js").Coordinate>} coordinates Target coordinates.
   * @property {boolean} ring The target coordinates are a linear ring.
   * @property {number} startIndex The index of first traced coordinate.  A fractional index represents an
   * edge intersection.  Index values for rings will wrap (may be negative or larger than coordinates length).
   * @property {number} endIndex The index of last traced coordinate.  Details from startIndex also apply here.
   */

  /**
   * Function that takes an array of coordinates and an optional existing geometry
   * and a projection as arguments, and returns a geometry. The optional existing
   * geometry is the geometry that is returned when the function is called without
   * a second argument.
   * @typedef {function(!SketchCoordType, import("../geom/SimpleGeometry.js").default,
   *     import("../proj/Projection.js").default):
   *     import("../geom/SimpleGeometry.js").default} GeometryFunction
   */

  /**
   * @typedef {'Point' | 'LineString' | 'Polygon' | 'Circle'} Mode
   * Draw mode.  This collapses multi-part geometry types with their single-part
   * cousins.
   */

  /**
   * @enum {string}
   */
  const DrawEventType = {
    /**
     * Triggered upon feature draw start
     * @event DrawEvent#drawstart
     * @api
     */
    DRAWSTART: 'drawstart',
    /**
     * Triggered upon feature draw end
     * @event DrawEvent#drawend
     * @api
     */
    DRAWEND: 'drawend',
    /**
     * Triggered upon feature draw abortion
     * @event DrawEvent#drawabort
     * @api
     */
    DRAWABORT: 'drawabort',
  };

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are
   * instances of this type.
   */
  class DrawEvent extends BaseEvent {
    /**
     * @param {DrawEventType} type Type.
     * @param {Feature} feature The feature drawn.
     */
    constructor(type, feature) {
      super(type);

      /**
       * The feature being drawn.
       * @type {Feature}
       * @api
       */
      this.feature = feature;
    }
  }

  /**
   * @param {import("../coordinate.js").Coordinate} coordinate The coordinate.
   * @param {Array<Feature>} features The candidate features.
   * @return {Array<TraceTarget>} The trace targets.
   */
  function getTraceTargets(coordinate, features) {
    /**
     * @type {Array<TraceTarget>}
     */
    const targets = [];

    for (let i = 0; i < features.length; ++i) {
      const feature = features[i];
      const geometry = feature.getGeometry();
      appendGeometryTraceTargets(coordinate, geometry, targets);
    }

    return targets;
  }

  /**
   * @param {import("../coordinate.js").Coordinate} a One coordinate.
   * @param {import("../coordinate.js").Coordinate} b Another coordinate.
   * @return {number} The squared distance between the two coordinates.
   */
  function getSquaredDistance(a, b) {
    return squaredDistance$1(a[0], a[1], b[0], b[1]);
  }

  /**
   * @param {LineCoordType} coordinates The ring coordinates.
   * @param {number} index The index.  May be wrapped.
   * @return {import("../coordinate.js").Coordinate} The coordinate.
   */
  function getCoordinate(coordinates, index) {
    const count = coordinates.length;
    if (index < 0) {
      return coordinates[index + count];
    }
    if (index >= count) {
      return coordinates[index - count];
    }
    return coordinates[index];
  }

  /**
   * Get the cumulative squared distance along a ring path.  The end index index may be "wrapped" and it may
   * be less than the start index to indicate the direction of travel.  The start and end index may have
   * a fractional part to indicate a point between two coordinates.
   * @param {LineCoordType} coordinates Ring coordinates.
   * @param {number} startIndex The start index.
   * @param {number} endIndex The end index.
   * @return {number} The cumulative squared distance along the ring path.
   */
  function getCumulativeSquaredDistance(coordinates, startIndex, endIndex) {
    let lowIndex, highIndex;
    if (startIndex < endIndex) {
      lowIndex = startIndex;
      highIndex = endIndex;
    } else {
      lowIndex = endIndex;
      highIndex = startIndex;
    }
    const lowWholeIndex = Math.ceil(lowIndex);
    const highWholeIndex = Math.floor(highIndex);

    if (lowWholeIndex > highWholeIndex) {
      // both start and end are on the same segment
      const start = interpolateCoordinate(coordinates, lowIndex);
      const end = interpolateCoordinate(coordinates, highIndex);
      return getSquaredDistance(start, end);
    }

    let sd = 0;

    if (lowIndex < lowWholeIndex) {
      const start = interpolateCoordinate(coordinates, lowIndex);
      const end = getCoordinate(coordinates, lowWholeIndex);
      sd += getSquaredDistance(start, end);
    }

    if (highWholeIndex < highIndex) {
      const start = getCoordinate(coordinates, highWholeIndex);
      const end = interpolateCoordinate(coordinates, highIndex);
      sd += getSquaredDistance(start, end);
    }

    for (let i = lowWholeIndex; i < highWholeIndex - 1; ++i) {
      const start = getCoordinate(coordinates, i);
      const end = getCoordinate(coordinates, i + 1);
      sd += getSquaredDistance(start, end);
    }

    return sd;
  }

  /**
   * @param {import("../coordinate.js").Coordinate} coordinate The coordinate.
   * @param {import("../geom/Geometry.js").default} geometry The candidate geometry.
   * @param {Array<TraceTarget>} targets The trace targets.
   */
  function appendGeometryTraceTargets(coordinate, geometry, targets) {
    if (geometry instanceof LineString) {
      appendTraceTarget(coordinate, geometry.getCoordinates(), false, targets);
      return;
    }
    if (geometry instanceof MultiLineString) {
      const coordinates = geometry.getCoordinates();
      for (let i = 0, ii = coordinates.length; i < ii; ++i) {
        appendTraceTarget(coordinate, coordinates[i], false, targets);
      }
      return;
    }
    if (geometry instanceof Polygon) {
      const coordinates = geometry.getCoordinates();
      for (let i = 0, ii = coordinates.length; i < ii; ++i) {
        appendTraceTarget(coordinate, coordinates[i], true, targets);
      }
      return;
    }
    if (geometry instanceof MultiPolygon) {
      const polys = geometry.getCoordinates();
      for (let i = 0, ii = polys.length; i < ii; ++i) {
        const coordinates = polys[i];
        for (let j = 0, jj = coordinates.length; j < jj; ++j) {
          appendTraceTarget(coordinate, coordinates[j], true, targets);
        }
      }
      return;
    }
    if (geometry instanceof GeometryCollection) {
      const geometries = geometry.getGeometries();
      for (let i = 0; i < geometries.length; ++i) {
        appendGeometryTraceTargets(coordinate, geometries[i], targets);
      }
      return;
    }
    // other types cannot be traced
  }

  /**
   * @typedef {Object} TraceTargetUpdateInfo
   * @property {number} index The new target index.
   * @property {number} endIndex The new segment end index.
   */

  /**
   * @type {TraceTargetUpdateInfo}
   */
  const sharedUpdateInfo = {index: -1, endIndex: NaN};

  /**
   * @param {import("../coordinate.js").Coordinate} coordinate The coordinate.
   * @param {TraceState} traceState The trace state.
   * @param {import("../Map.js").default} map The map.
   * @param {number} snapTolerance The snap tolerance.
   * @return {TraceTargetUpdateInfo} Information about the new trace target.  The returned
   * object is reused between calls and must not be modified by the caller.
   */
  function getTraceTargetUpdate(coordinate, traceState, map, snapTolerance) {
    const x = coordinate[0];
    const y = coordinate[1];

    let closestTargetDistance = Infinity;

    let newTargetIndex = -1;
    let newEndIndex = NaN;

    for (
      let targetIndex = 0;
      targetIndex < traceState.targets.length;
      ++targetIndex
    ) {
      const target = traceState.targets[targetIndex];
      const coordinates = target.coordinates;

      let minSegmentDistance = Infinity;
      let endIndex;
      for (
        let coordinateIndex = 0;
        coordinateIndex < coordinates.length - 1;
        ++coordinateIndex
      ) {
        const start = coordinates[coordinateIndex];
        const end = coordinates[coordinateIndex + 1];
        const rel = getPointSegmentRelationship(x, y, start, end);
        if (rel.squaredDistance < minSegmentDistance) {
          minSegmentDistance = rel.squaredDistance;
          endIndex = coordinateIndex + rel.along;
        }
      }

      if (minSegmentDistance < closestTargetDistance) {
        closestTargetDistance = minSegmentDistance;
        if (target.ring && traceState.targetIndex === targetIndex) {
          // same target, maintain the same trace direction
          if (target.endIndex > target.startIndex) {
            // forward trace
            if (endIndex < target.startIndex) {
              endIndex += coordinates.length;
            }
          } else if (target.endIndex < target.startIndex) {
            // reverse trace
            if (endIndex > target.startIndex) {
              endIndex -= coordinates.length;
            }
          }
        }
        newEndIndex = endIndex;
        newTargetIndex = targetIndex;
      }
    }

    const newTarget = traceState.targets[newTargetIndex];
    let considerBothDirections = newTarget.ring;
    if (traceState.targetIndex === newTargetIndex && considerBothDirections) {
      // only consider switching trace direction if close to the start
      const newCoordinate = interpolateCoordinate(
        newTarget.coordinates,
        newEndIndex,
      );
      const pixel = map.getPixelFromCoordinate(newCoordinate);
      if (distance(pixel, traceState.startPx) > snapTolerance) {
        considerBothDirections = false;
      }
    }

    if (considerBothDirections) {
      const coordinates = newTarget.coordinates;
      const count = coordinates.length;
      const startIndex = newTarget.startIndex;
      const endIndex = newEndIndex;
      if (startIndex < endIndex) {
        const forwardDistance = getCumulativeSquaredDistance(
          coordinates,
          startIndex,
          endIndex,
        );
        const reverseDistance = getCumulativeSquaredDistance(
          coordinates,
          startIndex,
          endIndex - count,
        );
        if (reverseDistance < forwardDistance) {
          newEndIndex -= count;
        }
      } else {
        const reverseDistance = getCumulativeSquaredDistance(
          coordinates,
          startIndex,
          endIndex,
        );
        const forwardDistance = getCumulativeSquaredDistance(
          coordinates,
          startIndex,
          endIndex + count,
        );
        if (forwardDistance < reverseDistance) {
          newEndIndex += count;
        }
      }
    }

    sharedUpdateInfo.index = newTargetIndex;
    sharedUpdateInfo.endIndex = newEndIndex;
    return sharedUpdateInfo;
  }

  /**
   * @param {import("../coordinate.js").Coordinate} coordinate The clicked coordinate.
   * @param {Array<import("../coordinate.js").Coordinate>} coordinates The geometry component coordinates.
   * @param {boolean} ring The coordinates represent a linear ring.
   * @param {Array<TraceTarget>} targets The trace targets.
   */
  function appendTraceTarget(coordinate, coordinates, ring, targets) {
    const x = coordinate[0];
    const y = coordinate[1];
    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
      const start = coordinates[i];
      const end = coordinates[i + 1];
      const rel = getPointSegmentRelationship(x, y, start, end);
      if (rel.squaredDistance === 0) {
        const index = i + rel.along;
        targets.push({
          coordinates: coordinates,
          ring: ring,
          startIndex: index,
          endIndex: index,
        });
        return;
      }
    }
  }

  /**
   * @typedef {Object} PointSegmentRelationship
   * @property {number} along The closest point expressed as a fraction along the segment length.
   * @property {number} squaredDistance The squared distance of the point to the segment.
   */

  /**
   * @type {PointSegmentRelationship}
   */
  const sharedRel = {along: 0, squaredDistance: 0};

  /**
   * @param {number} x The point x.
   * @param {number} y The point y.
   * @param {import("../coordinate.js").Coordinate} start The segment start.
   * @param {import("../coordinate.js").Coordinate} end The segment end.
   * @return {PointSegmentRelationship} The point segment relationship.  The returned object is
   * shared between calls and must not be modified by the caller.
   */
  function getPointSegmentRelationship(x, y, start, end) {
    const x1 = start[0];
    const y1 = start[1];
    const x2 = end[0];
    const y2 = end[1];
    const dx = x2 - x1;
    const dy = y2 - y1;
    let along = 0;
    let px = x1;
    let py = y1;
    if (dx !== 0 || dy !== 0) {
      along = clamp(((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy), 0, 1);
      px += dx * along;
      py += dy * along;
    }

    sharedRel.along = along;
    sharedRel.squaredDistance = toFixed(squaredDistance$1(x, y, px, py), 10);
    return sharedRel;
  }

  /**
   * @param {LineCoordType} coordinates The coordinates.
   * @param {number} index The index.  May be fractional and may wrap.
   * @return {import("../coordinate.js").Coordinate} The interpolated coordinate.
   */
  function interpolateCoordinate(coordinates, index) {
    const count = coordinates.length;

    let startIndex = Math.floor(index);
    const along = index - startIndex;
    if (startIndex >= count) {
      startIndex -= count;
    } else if (startIndex < 0) {
      startIndex += count;
    }

    let endIndex = startIndex + 1;
    if (endIndex >= count) {
      endIndex -= count;
    }

    const start = coordinates[startIndex];
    const x0 = start[0];
    const y0 = start[1];
    const end = coordinates[endIndex];
    const dx = end[0] - x0;
    const dy = end[1] - y0;

    return [x0 + dx * along, y0 + dy * along];
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature
   */

  /**
   * @classdesc
   * Interaction for drawing feature geometries.
   *
   * @fires DrawEvent
   * @api
   */
  class Draw extends PointerInteraction {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (
        options
      );
      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /***
       * @type {DrawOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {DrawOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {DrawOnSignature<void>}
       */
      this.un;

      /**
       * @type {boolean}
       * @private
       */
      this.shouldHandle_ = false;

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.downPx_ = null;

      /**
       * @type {ReturnType<typeof setTimeout>}
       * @private
       */
      this.downTimeout_;

      /**
       * @type {number|undefined}
       * @private
       */
      this.lastDragTime_;

      /**
       * Pointer type of the last pointermove event
       * @type {string}
       * @private
       */
      this.pointerType_;

      /**
       * @type {boolean}
       * @private
       */
      this.freehand_ = false;

      /**
       * Target source for drawn features.
       * @type {VectorSource|null}
       * @private
       */
      this.source_ = options.source ? options.source : null;

      /**
       * Target collection for drawn features.
       * @type {import("../Collection.js").default<Feature>|null}
       * @private
       */
      this.features_ = options.features ? options.features : null;

      /**
       * Pixel distance for snapping.
       * @type {number}
       * @private
       */
      this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;

      /**
       * Geometry type.
       * @type {import("../geom/Geometry.js").Type}
       * @private
       */
      this.type_ = /** @type {import("../geom/Geometry.js").Type} */ (
        options.type
      );

      /**
       * Drawing mode (derived from geometry type.
       * @type {Mode}
       * @private
       */
      this.mode_ = getMode(this.type_);

      /**
       * Stop click, singleclick, and doubleclick events from firing during drawing.
       * Default is `false`.
       * @type {boolean}
       * @private
       */
      this.stopClick_ = !!options.stopClick;

      /**
       * The number of points that must be drawn before a polygon ring or line
       * string can be finished.  The default is 3 for polygon rings and 2 for
       * line strings.
       * @type {number}
       * @private
       */
      this.minPoints_ = options.minPoints
        ? options.minPoints
        : this.mode_ === 'Polygon'
          ? 3
          : 2;

      /**
       * The number of points that can be drawn before a polygon ring or line string
       * is finished. The default is no restriction.
       * @type {number}
       * @private
       */
      this.maxPoints_ =
        this.mode_ === 'Circle'
          ? 2
          : options.maxPoints
            ? options.maxPoints
            : Infinity;

      /**
       * A function to decide if a potential finish coordinate is permissible
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.finishCondition_ = options.finishCondition
        ? options.finishCondition
        : TRUE;

      /**
       * @private
       * @type {import("../geom/Geometry.js").GeometryLayout}
       */
      this.geometryLayout_ = options.geometryLayout
        ? options.geometryLayout
        : 'XY';

      let geometryFunction = options.geometryFunction;
      if (!geometryFunction) {
        const mode = this.mode_;
        if (mode === 'Circle') {
          /**
           * @param {!LineCoordType} coordinates The coordinates.
           * @param {import("../geom/SimpleGeometry.js").default|undefined} geometry Optional geometry.
           * @param {import("../proj/Projection.js").default} projection The view projection.
           * @return {import("../geom/SimpleGeometry.js").default} A geometry.
           */
          geometryFunction = (coordinates, geometry, projection) => {
            const circle = geometry
              ? /** @type {Circle} */ (geometry)
              : new Circle([NaN, NaN]);
            const center = fromUserCoordinate(coordinates[0], projection);
            const squaredLength = squaredDistance(
              center,
              fromUserCoordinate(coordinates[coordinates.length - 1], projection),
            );
            circle.setCenterAndRadius(
              center,
              Math.sqrt(squaredLength),
              this.geometryLayout_,
            );
            const userProjection = getUserProjection();
            if (userProjection) {
              circle.transform(projection, userProjection);
            }
            return circle;
          };
        } else {
          let Constructor;
          if (mode === 'Point') {
            Constructor = Point$1;
          } else if (mode === 'LineString') {
            Constructor = LineString;
          } else if (mode === 'Polygon') {
            Constructor = Polygon;
          }
          /**
           * @param {!LineCoordType} coordinates The coordinates.
           * @param {import("../geom/SimpleGeometry.js").default|undefined} geometry Optional geometry.
           * @param {import("../proj/Projection.js").default} projection The view projection.
           * @return {import("../geom/SimpleGeometry.js").default} A geometry.
           */
          geometryFunction = (coordinates, geometry, projection) => {
            if (geometry) {
              if (mode === 'Polygon') {
                if (coordinates[0].length) {
                  // Add a closing coordinate to match the first
                  geometry.setCoordinates(
                    [coordinates[0].concat([coordinates[0][0]])],
                    this.geometryLayout_,
                  );
                } else {
                  geometry.setCoordinates([], this.geometryLayout_);
                }
              } else {
                geometry.setCoordinates(coordinates, this.geometryLayout_);
              }
            } else {
              geometry = new Constructor(coordinates, this.geometryLayout_);
            }
            return geometry;
          };
        }
      }

      /**
       * @type {GeometryFunction}
       * @private
       */
      this.geometryFunction_ = geometryFunction;

      /**
       * @type {number}
       * @private
       */
      this.dragVertexDelay_ =
        options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;

      /**
       * Finish coordinate for the feature (first point for polygons, last point for
       * linestrings).
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.finishCoordinate_ = null;

      /**
       * Sketch feature.
       * @type {Feature<import('../geom/SimpleGeometry.js').default>}
       * @private
       */
      this.sketchFeature_ = null;

      /**
       * Sketch point.
       * @type {Feature<Point>}
       * @private
       */
      this.sketchPoint_ = null;

      /**
       * Sketch coordinates. Used when drawing a line or polygon.
       * @type {SketchCoordType}
       * @private
       */
      this.sketchCoords_ = null;

      /**
       * Sketch line. Used when drawing polygon.
       * @type {Feature<LineString>}
       * @private
       */
      this.sketchLine_ = null;

      /**
       * Sketch line coordinates. Used when drawing a polygon or circle.
       * @type {LineCoordType}
       * @private
       */
      this.sketchLineCoords_ = null;

      /**
       * Squared tolerance for handling up events.  If the squared distance
       * between a down and up event is greater than this tolerance, up events
       * will not be handled.
       * @type {number}
       * @private
       */
      this.squaredClickTolerance_ = options.clickTolerance
        ? options.clickTolerance * options.clickTolerance
        : 36;

      /**
       * Draw overlay where our sketch features are drawn.
       * @type {VectorLayer}
       * @private
       */
      this.overlay_ = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          wrapX: options.wrapX ? options.wrapX : false,
        }),
        style: options.style ? options.style : getDefaultStyleFunction$2(),
        updateWhileInteracting: true,
      });

      /**
       * Name of the geometry attribute for newly created features.
       * @type {string|undefined}
       * @private
       */
      this.geometryName_ = options.geometryName;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : noModifierKeys;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.freehandCondition_;
      if (options.freehand) {
        this.freehandCondition_ = always$1;
      } else {
        this.freehandCondition_ = options.freehandCondition
          ? options.freehandCondition
          : shiftKeyOnly;
      }

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.traceCondition_;
      this.setTrace(options.trace || false);

      /**
       * @type {TraceState}
       * @private
       */
      this.traceState_ = {active: false};

      /**
       * @type {VectorSource|null}
       * @private
       */
      this.traceSource_ = options.traceSource || options.source || null;

      this.addChangeListener(InteractionProperty.ACTIVE, this.updateState_);
    }

    /**
     * Toggle tracing mode or set a tracing condition.
     *
     * @param {boolean|import("../events/condition.js").Condition} trace A boolean to toggle tracing mode or an event
     *     condition that will be checked when a feature is clicked to determine if tracing should be active.
     */
    setTrace(trace) {
      let condition;
      if (!trace) {
        condition = never;
      } else if (trace === true) {
        condition = always$1;
      } else {
        condition = trace;
      }
      this.traceCondition_ = condition;
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default} map Map.
     * @override
     */
    setMap(map) {
      super.setMap(map);
      this.updateState_();
    }

    /**
     * Get the overlay layer that this interaction renders sketch features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    getOverlay() {
      return this.overlay_;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.
     * @param {import("../MapBrowserEvent.js").default<PointerEvent>} event Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     * @override
     */
    handleEvent(event) {
      if (event.originalEvent.type === EventType.CONTEXTMENU) {
        // Avoid context menu for long taps when drawing on mobile
        event.originalEvent.preventDefault();
      }
      this.freehand_ = this.mode_ !== 'Point' && this.freehandCondition_(event);
      let move = event.type === MapBrowserEventType.POINTERMOVE;
      let pass = true;
      if (
        !this.freehand_ &&
        this.lastDragTime_ &&
        event.type === MapBrowserEventType.POINTERDRAG
      ) {
        const now = Date.now();
        if (now - this.lastDragTime_ >= this.dragVertexDelay_) {
          this.downPx_ = event.pixel;
          this.shouldHandle_ = !this.freehand_;
          move = true;
        } else {
          this.lastDragTime_ = undefined;
        }
        if (this.shouldHandle_ && this.downTimeout_ !== undefined) {
          clearTimeout(this.downTimeout_);
          this.downTimeout_ = undefined;
        }
      }
      if (
        this.freehand_ &&
        event.type === MapBrowserEventType.POINTERDRAG &&
        this.sketchFeature_ !== null
      ) {
        this.addToDrawing_(event.coordinate);
        pass = false;
      } else if (
        this.freehand_ &&
        event.type === MapBrowserEventType.POINTERDOWN
      ) {
        pass = false;
      } else if (move && this.getPointerCount() < 2) {
        pass = event.type === MapBrowserEventType.POINTERMOVE;
        if (pass && this.freehand_) {
          this.handlePointerMove_(event);
          if (this.shouldHandle_) {
            // Avoid page scrolling when freehand drawing on mobile
            event.originalEvent.preventDefault();
          }
        } else if (
          event.originalEvent.pointerType === 'mouse' ||
          (event.type === MapBrowserEventType.POINTERDRAG &&
            this.downTimeout_ === undefined)
        ) {
          this.handlePointerMove_(event);
        }
      } else if (event.type === MapBrowserEventType.DBLCLICK) {
        pass = false;
      }

      return super.handleEvent(event) && pass;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default<PointerEvent>} event Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleDownEvent(event) {
      this.shouldHandle_ = !this.freehand_;

      if (this.freehand_) {
        this.downPx_ = event.pixel;
        if (!this.finishCoordinate_) {
          this.startDrawing_(event.coordinate);
        }
        return true;
      }

      if (!this.condition_(event)) {
        this.lastDragTime_ = undefined;
        return false;
      }

      this.lastDragTime_ = Date.now();
      this.downTimeout_ = setTimeout(() => {
        this.handlePointerMove_(
          new MapBrowserEvent(
            MapBrowserEventType.POINTERMOVE,
            event.map,
            event.originalEvent,
            false,
            event.frameState,
          ),
        );
      }, this.dragVertexDelay_);
      this.downPx_ = event.pixel;
      return true;
    }

    /**
     * @private
     */
    deactivateTrace_() {
      this.traceState_ = {active: false};
    }

    /**
     * Activate or deactivate trace state based on a browser event.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    toggleTraceState_(event) {
      if (!this.traceSource_ || !this.traceCondition_(event)) {
        return;
      }

      if (this.traceState_.active) {
        this.deactivateTrace_();
        return;
      }

      const map = this.getMap();
      const lowerLeft = map.getCoordinateFromPixel([
        event.pixel[0] - this.snapTolerance_,
        event.pixel[1] + this.snapTolerance_,
      ]);
      const upperRight = map.getCoordinateFromPixel([
        event.pixel[0] + this.snapTolerance_,
        event.pixel[1] - this.snapTolerance_,
      ]);
      const extent = boundingExtent([lowerLeft, upperRight]);
      const features = this.traceSource_.getFeaturesInExtent(extent);
      if (features.length === 0) {
        return;
      }

      const targets = getTraceTargets(event.coordinate, features);
      if (targets.length) {
        this.traceState_ = {
          active: true,
          startPx: event.pixel.slice(),
          targets: targets,
          targetIndex: -1,
        };
      }
    }

    /**
     * @param {TraceTarget} target The trace target.
     * @param {number} endIndex The new end index of the trace.
     * @private
     */
    addOrRemoveTracedCoordinates_(target, endIndex) {
      // three cases to handle:
      //  1. traced in the same direction and points need adding
      //  2. traced in the same direction and points need removing
      //  3. traced in a new direction
      const previouslyForward = target.startIndex <= target.endIndex;
      const currentlyForward = target.startIndex <= endIndex;
      if (previouslyForward === currentlyForward) {
        // same direction
        if (
          (previouslyForward && endIndex > target.endIndex) ||
          (!previouslyForward && endIndex < target.endIndex)
        ) {
          // case 1 - add new points
          this.addTracedCoordinates_(target, target.endIndex, endIndex);
        } else if (
          (previouslyForward && endIndex < target.endIndex) ||
          (!previouslyForward && endIndex > target.endIndex)
        ) {
          // case 2 - remove old points
          this.removeTracedCoordinates_(endIndex, target.endIndex);
        }
      } else {
        // case 3 - remove old points, add new points
        this.removeTracedCoordinates_(target.startIndex, target.endIndex);
        this.addTracedCoordinates_(target, target.startIndex, endIndex);
      }
    }

    /**
     * @param {number} fromIndex The start index.
     * @param {number} toIndex The end index.
     * @private
     */
    removeTracedCoordinates_(fromIndex, toIndex) {
      if (fromIndex === toIndex) {
        return;
      }

      let remove = 0;
      if (fromIndex < toIndex) {
        const start = Math.ceil(fromIndex);
        let end = Math.floor(toIndex);
        if (end === toIndex) {
          end -= 1;
        }
        remove = end - start + 1;
      } else {
        const start = Math.floor(fromIndex);
        let end = Math.ceil(toIndex);
        if (end === toIndex) {
          end += 1;
        }
        remove = start - end + 1;
      }

      if (remove > 0) {
        this.removeLastPoints_(remove);
      }
    }

    /**
     * @param {TraceTarget} target The trace target.
     * @param {number} fromIndex The start index.
     * @param {number} toIndex The end index.
     * @private
     */
    addTracedCoordinates_(target, fromIndex, toIndex) {
      if (fromIndex === toIndex) {
        return;
      }

      const coordinates = [];
      if (fromIndex < toIndex) {
        // forward trace
        const start = Math.ceil(fromIndex);
        let end = Math.floor(toIndex);
        if (end === toIndex) {
          // if end is snapped to a vertex, it will be added later
          end -= 1;
        }
        for (let i = start; i <= end; ++i) {
          coordinates.push(getCoordinate(target.coordinates, i));
        }
      } else {
        // reverse trace
        const start = Math.floor(fromIndex);
        let end = Math.ceil(toIndex);
        if (end === toIndex) {
          end += 1;
        }
        for (let i = start; i >= end; --i) {
          coordinates.push(getCoordinate(target.coordinates, i));
        }
      }
      if (coordinates.length) {
        this.appendCoordinates(coordinates);
      }
    }

    /**
     * Update the trace.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    updateTrace_(event) {
      const traceState = this.traceState_;
      if (!traceState.active) {
        return;
      }

      if (traceState.targetIndex === -1) {
        // check if we are ready to pick a target
        if (distance(traceState.startPx, event.pixel) < this.snapTolerance_) {
          return;
        }
      }

      const updatedTraceTarget = getTraceTargetUpdate(
        event.coordinate,
        traceState,
        this.getMap(),
        this.snapTolerance_,
      );

      if (traceState.targetIndex !== updatedTraceTarget.index) {
        // target changed
        if (traceState.targetIndex !== -1) {
          // remove points added during previous trace
          const oldTarget = traceState.targets[traceState.targetIndex];
          this.removeTracedCoordinates_(oldTarget.startIndex, oldTarget.endIndex);
        }
        // add points for the new target
        const newTarget = traceState.targets[updatedTraceTarget.index];
        this.addTracedCoordinates_(
          newTarget,
          newTarget.startIndex,
          updatedTraceTarget.endIndex,
        );
      } else {
        // target stayed the same
        const target = traceState.targets[traceState.targetIndex];
        this.addOrRemoveTracedCoordinates_(target, updatedTraceTarget.endIndex);
      }

      // modify the state with updated info
      traceState.targetIndex = updatedTraceTarget.index;
      const target = traceState.targets[traceState.targetIndex];
      target.endIndex = updatedTraceTarget.endIndex;

      // update event coordinate and pixel to match end point of final segment
      const coordinate = interpolateCoordinate(
        target.coordinates,
        target.endIndex,
      );
      const pixel = this.getMap().getPixelFromCoordinate(coordinate);
      event.coordinate = coordinate;
      event.pixel = [Math.round(pixel[0]), Math.round(pixel[1])];
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default<PointerEvent>} event Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleUpEvent(event) {
      let pass = true;

      if (this.getPointerCount() === 0) {
        if (this.downTimeout_) {
          clearTimeout(this.downTimeout_);
          this.downTimeout_ = undefined;
        }

        this.handlePointerMove_(event);
        const tracing = this.traceState_.active;
        this.toggleTraceState_(event);

        if (this.shouldHandle_) {
          const startingToDraw = !this.finishCoordinate_;
          if (startingToDraw) {
            this.startDrawing_(event.coordinate);
          }
          if (!startingToDraw && this.freehand_) {
            this.finishDrawing();
          } else if (
            !this.freehand_ &&
            (!startingToDraw || this.mode_ === 'Point')
          ) {
            if (this.atFinish_(event.pixel, tracing)) {
              if (this.finishCondition_(event)) {
                this.finishDrawing();
              }
            } else {
              this.addToDrawing_(event.coordinate);
            }
          }
          pass = false;
        } else if (this.freehand_) {
          this.abortDrawing();
        }
      }

      if (!pass && this.stopClick_) {
        event.preventDefault();
      }
      return pass;
    }

    /**
     * Handle move events.
     * @param {import("../MapBrowserEvent.js").default<PointerEvent>} event A move event.
     * @private
     */
    handlePointerMove_(event) {
      this.pointerType_ = event.originalEvent.pointerType;
      if (
        this.downPx_ &&
        ((!this.freehand_ && this.shouldHandle_) ||
          (this.freehand_ && !this.shouldHandle_))
      ) {
        const downPx = this.downPx_;
        const clickPx = event.pixel;
        const dx = downPx[0] - clickPx[0];
        const dy = downPx[1] - clickPx[1];
        const squaredDistance = dx * dx + dy * dy;
        this.shouldHandle_ = this.freehand_
          ? squaredDistance > this.squaredClickTolerance_
          : squaredDistance <= this.squaredClickTolerance_;
        if (!this.shouldHandle_) {
          return;
        }
      }

      if (!this.finishCoordinate_) {
        this.createOrUpdateSketchPoint_(event.coordinate.slice());
        return;
      }

      this.updateTrace_(event);
      this.modifyDrawing_(event.coordinate);
    }

    /**
     * Determine if an event is within the snapping tolerance of the start coord.
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @param {boolean} [tracing] Drawing in trace mode (only stop if at the starting point).
     * @return {boolean} The event is within the snapping tolerance of the start.
     * @private
     */
    atFinish_(pixel, tracing) {
      let at = false;
      if (this.sketchFeature_) {
        let potentiallyDone = false;
        let potentiallyFinishCoordinates = [this.finishCoordinate_];
        const mode = this.mode_;
        if (mode === 'Point') {
          at = true;
        } else if (mode === 'Circle') {
          at = this.sketchCoords_.length === 2;
        } else if (mode === 'LineString') {
          potentiallyDone =
            !tracing && this.sketchCoords_.length > this.minPoints_;
        } else if (mode === 'Polygon') {
          const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);
          potentiallyDone = sketchCoords[0].length > this.minPoints_;
          potentiallyFinishCoordinates = [
            sketchCoords[0][0],
            sketchCoords[0][sketchCoords[0].length - 2],
          ];
          if (tracing) {
            potentiallyFinishCoordinates = [sketchCoords[0][0]];
          } else {
            potentiallyFinishCoordinates = [
              sketchCoords[0][0],
              sketchCoords[0][sketchCoords[0].length - 2],
            ];
          }
        }
        if (potentiallyDone) {
          const map = this.getMap();
          for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {
            const finishCoordinate = potentiallyFinishCoordinates[i];
            const finishPixel = map.getPixelFromCoordinate(finishCoordinate);
            const dx = pixel[0] - finishPixel[0];
            const dy = pixel[1] - finishPixel[1];
            const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;
            at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;
            if (at) {
              this.finishCoordinate_ = finishCoordinate;
              break;
            }
          }
        }
      }
      return at;
    }

    /**
     * @param {import("../coordinate").Coordinate} coordinates Coordinate.
     * @private
     */
    createOrUpdateSketchPoint_(coordinates) {
      if (!this.sketchPoint_) {
        this.sketchPoint_ = new Feature(new Point$1(coordinates));
        this.updateSketchFeatures_();
      } else {
        const sketchPointGeom = this.sketchPoint_.getGeometry();
        sketchPointGeom.setCoordinates(coordinates);
      }
    }

    /**
     * @param {import("../geom/Polygon.js").default} geometry Polygon geometry.
     * @private
     */
    createOrUpdateCustomSketchLine_(geometry) {
      if (!this.sketchLine_) {
        this.sketchLine_ = new Feature();
      }
      const ring = geometry.getLinearRing(0);
      let sketchLineGeom = this.sketchLine_.getGeometry();
      if (!sketchLineGeom) {
        sketchLineGeom = new LineString(
          ring.getFlatCoordinates(),
          ring.getLayout(),
        );
        this.sketchLine_.setGeometry(sketchLineGeom);
      } else {
        sketchLineGeom.setFlatCoordinates(
          ring.getLayout(),
          ring.getFlatCoordinates(),
        );
        sketchLineGeom.changed();
      }
    }

    /**
     * Start the drawing.
     * @param {import("../coordinate.js").Coordinate} start Start coordinate.
     * @private
     */
    startDrawing_(start) {
      const projection = this.getMap().getView().getProjection();
      const stride = getStrideForLayout(this.geometryLayout_);
      while (start.length < stride) {
        start.push(0);
      }
      this.finishCoordinate_ = start;
      if (this.mode_ === 'Point') {
        this.sketchCoords_ = start.slice();
      } else if (this.mode_ === 'Polygon') {
        this.sketchCoords_ = [[start.slice(), start.slice()]];
        this.sketchLineCoords_ = this.sketchCoords_[0];
      } else {
        this.sketchCoords_ = [start.slice(), start.slice()];
      }
      if (this.sketchLineCoords_) {
        this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));
      }
      const geometry = this.geometryFunction_(
        this.sketchCoords_,
        undefined,
        projection,
      );
      this.sketchFeature_ = new Feature();
      if (this.geometryName_) {
        this.sketchFeature_.setGeometryName(this.geometryName_);
      }
      this.sketchFeature_.setGeometry(geometry);
      this.updateSketchFeatures_();
      this.dispatchEvent(
        new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_),
      );
    }

    /**
     * Modify the drawing.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @private
     */
    modifyDrawing_(coordinate) {
      const map = this.getMap();
      const geometry = this.sketchFeature_.getGeometry();
      const projection = map.getView().getProjection();
      const stride = getStrideForLayout(this.geometryLayout_);
      let coordinates, last;
      while (coordinate.length < stride) {
        coordinate.push(0);
      }
      if (this.mode_ === 'Point') {
        last = this.sketchCoords_;
      } else if (this.mode_ === 'Polygon') {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        last = coordinates[coordinates.length - 1];
        if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {
          // snap to finish
          coordinate = this.finishCoordinate_.slice();
        }
      } else {
        coordinates = this.sketchCoords_;
        last = coordinates[coordinates.length - 1];
      }
      last[0] = coordinate[0];
      last[1] = coordinate[1];
      this.geometryFunction_(
        /** @type {!LineCoordType} */ (this.sketchCoords_),
        geometry,
        projection,
      );
      if (this.sketchPoint_) {
        const sketchPointGeom = this.sketchPoint_.getGeometry();
        sketchPointGeom.setCoordinates(coordinate);
      }
      if (geometry.getType() === 'Polygon' && this.mode_ !== 'Polygon') {
        this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));
      } else if (this.sketchLineCoords_) {
        const sketchLineGeom = this.sketchLine_.getGeometry();
        sketchLineGeom.setCoordinates(this.sketchLineCoords_);
      }
      this.updateSketchFeatures_();
    }

    /**
     * Add a new coordinate to the drawing.
     * @param {!PointCoordType} coordinate Coordinate
     * @return {Feature<import("../geom/SimpleGeometry.js").default>} The sketch feature.
     * @private
     */
    addToDrawing_(coordinate) {
      const geometry = this.sketchFeature_.getGeometry();
      const projection = this.getMap().getView().getProjection();
      let done;
      let coordinates;
      const mode = this.mode_;
      if (mode === 'LineString' || mode === 'Circle') {
        this.finishCoordinate_ = coordinate.slice();
        coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
        if (coordinates.length >= this.maxPoints_) {
          if (this.freehand_) {
            coordinates.pop();
          } else {
            done = true;
          }
        }
        coordinates.push(coordinate.slice());
        this.geometryFunction_(coordinates, geometry, projection);
      } else if (mode === 'Polygon') {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        if (coordinates.length >= this.maxPoints_) {
          if (this.freehand_) {
            coordinates.pop();
          } else {
            done = true;
          }
        }
        coordinates.push(coordinate.slice());
        if (done) {
          this.finishCoordinate_ = coordinates[0];
        }
        this.geometryFunction_(this.sketchCoords_, geometry, projection);
      }
      this.createOrUpdateSketchPoint_(coordinate.slice());
      this.updateSketchFeatures_();
      if (done) {
        return this.finishDrawing();
      }
      return this.sketchFeature_;
    }

    /**
     * @param {number} n The number of points to remove.
     */
    removeLastPoints_(n) {
      if (!this.sketchFeature_) {
        return;
      }
      const geometry = this.sketchFeature_.getGeometry();
      const projection = this.getMap().getView().getProjection();
      const mode = this.mode_;
      for (let i = 0; i < n; ++i) {
        let coordinates;
        if (mode === 'LineString' || mode === 'Circle') {
          coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
          coordinates.splice(-2, 1);
          if (coordinates.length >= 2) {
            this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();
            const finishCoordinate = this.finishCoordinate_.slice();
            coordinates[coordinates.length - 1] = finishCoordinate;
            this.createOrUpdateSketchPoint_(finishCoordinate);
          }
          this.geometryFunction_(coordinates, geometry, projection);
          if (geometry.getType() === 'Polygon' && this.sketchLine_) {
            this.createOrUpdateCustomSketchLine_(
              /** @type {Polygon} */ (geometry),
            );
          }
        } else if (mode === 'Polygon') {
          coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
          coordinates.splice(-2, 1);
          const sketchLineGeom = this.sketchLine_.getGeometry();
          if (coordinates.length >= 2) {
            const finishCoordinate = coordinates[coordinates.length - 2].slice();
            coordinates[coordinates.length - 1] = finishCoordinate;
            this.createOrUpdateSketchPoint_(finishCoordinate);
          }
          sketchLineGeom.setCoordinates(coordinates);
          this.geometryFunction_(this.sketchCoords_, geometry, projection);
        }

        if (coordinates.length === 1) {
          this.abortDrawing();
          break;
        }
      }

      this.updateSketchFeatures_();
    }

    /**
     * Remove last point of the feature currently being drawn. Does not do anything when
     * drawing POINT or MULTI_POINT geometries.
     * @api
     */
    removeLastPoint() {
      this.removeLastPoints_(1);
    }

    /**
     * Stop drawing and add the sketch feature to the target layer.
     * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is
     * dispatched before inserting the feature.
     * @return {Feature<import("../geom/SimpleGeometry.js").default>|null} The drawn feature.
     * @api
     */
    finishDrawing() {
      const sketchFeature = this.abortDrawing_();
      if (!sketchFeature) {
        return null;
      }
      let coordinates = this.sketchCoords_;
      const geometry = sketchFeature.getGeometry();
      const projection = this.getMap().getView().getProjection();
      if (this.mode_ === 'LineString') {
        // remove the redundant last point
        coordinates.pop();
        this.geometryFunction_(coordinates, geometry, projection);
      } else if (this.mode_ === 'Polygon') {
        // remove the redundant last point in ring
        /** @type {PolyCoordType} */ (coordinates)[0].pop();
        this.geometryFunction_(coordinates, geometry, projection);
        coordinates = geometry.getCoordinates();
      }

      // cast multi-part geometries
      if (this.type_ === 'MultiPoint') {
        sketchFeature.setGeometry(
          new MultiPoint([/** @type {PointCoordType} */ (coordinates)]),
        );
      } else if (this.type_ === 'MultiLineString') {
        sketchFeature.setGeometry(
          new MultiLineString([/** @type {LineCoordType} */ (coordinates)]),
        );
      } else if (this.type_ === 'MultiPolygon') {
        sketchFeature.setGeometry(
          new MultiPolygon([/** @type {PolyCoordType} */ (coordinates)]),
        );
      }

      // First dispatch event to allow full set up of feature
      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));

      // Then insert feature
      if (this.features_) {
        this.features_.push(sketchFeature);
      }
      if (this.source_) {
        this.source_.addFeature(sketchFeature);
      }
      return sketchFeature;
    }

    /**
     * Stop drawing without adding the sketch feature to the target layer.
     * @return {Feature<import("../geom/SimpleGeometry.js").default>|null} The sketch feature (or null if none).
     * @private
     */
    abortDrawing_() {
      this.finishCoordinate_ = null;
      const sketchFeature = this.sketchFeature_;
      this.sketchFeature_ = null;
      this.sketchPoint_ = null;
      this.sketchLine_ = null;
      this.overlay_.getSource().clear(true);
      this.deactivateTrace_();
      return sketchFeature;
    }

    /**
     * Stop drawing without adding the sketch feature to the target layer.
     * @api
     */
    abortDrawing() {
      const sketchFeature = this.abortDrawing_();
      if (sketchFeature) {
        this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));
      }
    }

    /**
     * Append coordinates to the end of the geometry that is currently being drawn.
     * This can be used when drawing LineStrings or Polygons. Coordinates will
     * either be appended to the current LineString or the outer ring of the current
     * Polygon. If no geometry is being drawn, a new one will be created.
     * @param {!LineCoordType} coordinates Linear coordinates to be appended to
     * the coordinate array.
     * @api
     */
    appendCoordinates(coordinates) {
      const mode = this.mode_;
      const newDrawing = !this.sketchFeature_;
      if (newDrawing) {
        this.startDrawing_(coordinates[0]);
      }
      /** @type {LineCoordType} */
      let sketchCoords;
      if (mode === 'LineString' || mode === 'Circle') {
        sketchCoords = /** @type {LineCoordType} */ (this.sketchCoords_);
      } else if (mode === 'Polygon') {
        sketchCoords =
          this.sketchCoords_ && this.sketchCoords_.length
            ? /** @type {PolyCoordType} */ (this.sketchCoords_)[0]
            : [];
      } else {
        return;
      }

      if (newDrawing) {
        sketchCoords.shift();
      }

      // Remove last coordinate from sketch drawing (this coordinate follows cursor position)
      sketchCoords.pop();

      // Append coordinate list
      for (let i = 0; i < coordinates.length; i++) {
        this.addToDrawing_(coordinates[i]);
      }

      const ending = coordinates[coordinates.length - 1];
      // Duplicate last coordinate for sketch drawing (cursor position)
      this.sketchFeature_ = this.addToDrawing_(ending);
      this.modifyDrawing_(ending);
    }

    /**
     * Initiate draw mode by starting from an existing geometry which will
     * receive new additional points. This only works on features with
     * `LineString` geometries, where the interaction will extend lines by adding
     * points to the end of the coordinates array.
     * This will change the original feature, instead of drawing a copy.
     *
     * The function will dispatch a `drawstart` event.
     *
     * @param {!Feature<LineString>} feature Feature to be extended.
     * @api
     */
    extend(feature) {
      const geometry = feature.getGeometry();
      const lineString = geometry;
      this.sketchFeature_ = feature;
      this.sketchCoords_ = lineString.getCoordinates();
      const last = this.sketchCoords_[this.sketchCoords_.length - 1];
      this.finishCoordinate_ = last.slice();
      this.sketchCoords_.push(last.slice());
      this.sketchPoint_ = new Feature(new Point$1(last));
      this.updateSketchFeatures_();
      this.dispatchEvent(
        new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_),
      );
    }

    /**
     * Redraw the sketch features.
     * @private
     */
    updateSketchFeatures_() {
      const sketchFeatures = [];
      if (this.sketchFeature_) {
        sketchFeatures.push(this.sketchFeature_);
      }
      if (this.sketchLine_) {
        sketchFeatures.push(this.sketchLine_);
      }
      if (this.sketchPoint_) {
        sketchFeatures.push(this.sketchPoint_);
      }
      const overlaySource = this.overlay_.getSource();
      overlaySource.clear(true);
      overlaySource.addFeatures(sketchFeatures);
    }

    /**
     * @private
     */
    updateState_() {
      const map = this.getMap();
      const active = this.getActive();
      if (!map || !active) {
        this.abortDrawing();
      }
      this.overlay_.setMap(active ? map : null);
    }
  }

  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction$2() {
    const styles = createEditingStyle();
    return function (feature, resolution) {
      return styles[feature.getGeometry().getType()];
    };
  }

  /**
   * Get the drawing mode.  The mode for multi-part geometries is the same as for
   * their single-part cousins.
   * @param {import("../geom/Geometry.js").Type} type Geometry type.
   * @return {Mode} Drawing mode.
   */
  function getMode(type) {
    switch (type) {
      case 'Point':
      case 'MultiPoint':
        return 'Point';
      case 'LineString':
      case 'MultiLineString':
        return 'LineString';
      case 'Polygon':
      case 'MultiPolygon':
        return 'Polygon';
      case 'Circle':
        return 'Circle';
      default:
        throw new Error('Invalid type: ' + type);
    }
  }

  /**
   * @module ol/interaction/Modify
   */

  /**
   * The segment index assigned to a circle's center when
   * breaking up a circle into ModifySegmentDataType segments.
   * @type {number}
   */
  const CIRCLE_CENTER_INDEX = 0;

  /**
   * The segment index assigned to a circle's circumference when
   * breaking up a circle into ModifySegmentDataType segments.
   * @type {number}
   */
  const CIRCLE_CIRCUMFERENCE_INDEX = 1;

  const tempExtent = [0, 0, 0, 0];
  const tempSegment$1 = [];

  /**
   * @enum {string}
   */
  const ModifyEventType = {
    /**
     * Triggered upon feature modification start
     * @event ModifyEvent#modifystart
     * @api
     */
    MODIFYSTART: 'modifystart',
    /**
     * Triggered upon feature modification end
     * @event ModifyEvent#modifyend
     * @api
     */
    MODIFYEND: 'modifyend',
  };

  /**
   * @typedef {Object} SegmentData
   * @property {Array<number>} [depth] Depth.
   * @property {Feature} feature Feature.
   * @property {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @property {number} [index] Index.
   * @property {Array<Array<number>>} segment Segment.
   * @property {Array<SegmentData>} [featureSegments] FeatureSegments.
   */

  /**
   * @typedef {[SegmentData, number]} DragSegment
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event will be considered to add or move a
   * vertex to the sketch. Default is
   * {@link module:ol/events/condition.primaryAction}.
   * @property {import("../events/condition.js").Condition} [deleteCondition] A function
   * that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. By default,
   * {@link module:ol/events/condition.singleClick} with
   * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.
   * @property {import("../events/condition.js").Condition} [insertVertexCondition] A
   * function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
   * returns a boolean to indicate whether a new vertex should be added to the sketch
   * features. Default is {@link module:ol/events/condition.always}.
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
   * pointer close enough to a segment or vertex for editing.
   * @property {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike} [style]
   * Style used for the modification point or vertex. For linestrings and polygons, this will
   * be the affected vertex, for circles a point along the circle, and for points the actual
   * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).
   * When using a style function, the point feature passed to the function will have an `existing` property -
   * indicating whether there is an existing vertex underneath or not, a `features`
   * property - an array whose entries are the features that are being modified, and a `geometries`
   * property - an array whose entries are the geometries that are being modified. Both arrays are
   * in the same order. The `geometries` are only useful when modifying geometry collections, where
   * the geometry will be the particular geometry from the collection that is being modified.
   * @property {VectorSource} [source] The vector source with
   * features to modify.  If a vector source is not provided, a feature collection
   * must be provided with the `features` option.
   * @property {boolean|import("../layer/BaseVector").default} [hitDetection] When configured, point
   * features will be considered for modification based on their visual appearance, instead of being within
   * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is
   * provided, only the rendered representation of the features on that layer will be considered.
   * @property {Collection<Feature>} [features]
   * The features the interaction works on.  If a feature collection is not
   * provided, a vector source must be provided with the `source` option.
   * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
   * overlay.
   * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the
   * pointer coordinate when clicked within the `pixelTolerance`.
   */

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are
   * instances of this type.
   */
  class ModifyEvent extends BaseEvent {
    /**
     * @param {ModifyEventType} type Type.
     * @param {Collection<Feature>} features
     * The features modified.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent
     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     */
    constructor(type, features, mapBrowserEvent) {
      super(type);

      /**
       * The features being modified.
       * @type {Collection<Feature>}
       * @api
       */
      this.features = features;

      /**
       * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;
    }
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature
   */

  /**
   * @classdesc
   * Interaction for modifying feature geometries.  To modify features that have
   * been added to an existing source, construct the modify interaction with the
   * `source` option.  If you want to modify features in a collection (for example,
   * the collection used by a select interaction), construct the interaction with
   * the `features` option.  The interaction must be constructed with either a
   * `source` or `features` option.
   *
   * Cartesian distance from the pointer is used to determine the features that
   * will be modified. This means that geometries will only be considered for
   * modification when they are within the configured `pixelTolerance`. For point
   * geometries, the `hitDetection` option can be used to match their visual
   * appearance.
   *
   * By default, the interaction will allow deletion of vertices when the `alt`
   * key is pressed.  To configure the interaction with a different condition
   * for deletion, use the `deleteCondition` option.
   * @fires ModifyEvent
   * @api
   */
  class Modify extends PointerInteraction {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      super(/** @type {import("./Pointer.js").Options} */ (options));

      /***
       * @type {ModifyOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {ModifyOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {ModifyOnSignature<void>}
       */
      this.un;

      /** @private */
      this.boundHandleFeatureChange_ = this.handleFeatureChange_.bind(this);

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : primaryAction;

      /**
       * @private
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
       * @return {boolean} Combined condition result.
       */
      this.defaultDeleteCondition_ = function (mapBrowserEvent) {
        return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);
      };

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.deleteCondition_ = options.deleteCondition
        ? options.deleteCondition
        : this.defaultDeleteCondition_;

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.insertVertexCondition_ = options.insertVertexCondition
        ? options.insertVertexCondition
        : always$1;

      /**
       * Editing vertex.
       * @type {Feature<Point>}
       * @private
       */
      this.vertexFeature_ = null;

      /**
       * Segments intersecting {@link this.vertexFeature_} by segment uid.
       * @type {Object<string, boolean>}
       * @private
       */
      this.vertexSegments_ = null;

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.lastPixel_ = [0, 0];

      /**
       * Tracks if the next `singleclick` event should be ignored to prevent
       * accidental deletion right after vertex creation.
       * @type {boolean}
       * @private
       */
      this.ignoreNextSingleClick_ = false;

      /**
       * @type {Collection<Feature>}
       * @private
       */
      this.featuresBeingModified_ = null;

      /**
       * Segment RTree for each layer
       * @type {RBush<SegmentData>}
       * @private
       */
      this.rBush_ = new RBush();

      /**
       * @type {number}
       * @private
       */
      this.pixelTolerance_ =
        options.pixelTolerance !== undefined ? options.pixelTolerance : 10;

      /**
       * @type {boolean}
       * @private
       */
      this.snappedToVertex_ = false;

      /**
       * Indicate whether the interaction is currently changing a feature's
       * coordinates.
       * @type {boolean}
       * @private
       */
      this.changingFeature_ = false;

      /**
       * @type {Array<DragSegment>}
       * @private
       */
      this.dragSegments_ = [];

      /**
       * Draw overlay where sketch features are drawn.
       * @type {VectorLayer}
       * @private
       */
      this.overlay_ = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          wrapX: !!options.wrapX,
        }),
        style: options.style ? options.style : getDefaultStyleFunction$1(),
        updateWhileAnimating: true,
        updateWhileInteracting: true,
      });

      /**
       * @const
       * @private
       * @type {!Object<string, function(Feature, import("../geom/Geometry.js").default): void>}
       */
      this.SEGMENT_WRITERS_ = {
        'Point': this.writePointGeometry_.bind(this),
        'LineString': this.writeLineStringGeometry_.bind(this),
        'LinearRing': this.writeLineStringGeometry_.bind(this),
        'Polygon': this.writePolygonGeometry_.bind(this),
        'MultiPoint': this.writeMultiPointGeometry_.bind(this),
        'MultiLineString': this.writeMultiLineStringGeometry_.bind(this),
        'MultiPolygon': this.writeMultiPolygonGeometry_.bind(this),
        'Circle': this.writeCircleGeometry_.bind(this),
        'GeometryCollection': this.writeGeometryCollectionGeometry_.bind(this),
      };

      /**
       * @type {VectorSource}
       * @private
       */
      this.source_ = null;

      /**
       * @type {boolean|import("../layer/BaseVector").default}
       * @private
       */
      this.hitDetection_ = null;

      /** @type {Collection<Feature>} */
      let features;
      if (options.features) {
        features = options.features;
      } else if (options.source) {
        this.source_ = options.source;
        features = new Collection(this.source_.getFeatures());
        this.source_.addEventListener(
          VectorEventType.ADDFEATURE,
          this.handleSourceAdd_.bind(this),
        );
        this.source_.addEventListener(
          VectorEventType.REMOVEFEATURE,
          this.handleSourceRemove_.bind(this),
        );
      }
      if (!features) {
        throw new Error(
          'The modify interaction requires features, a source or a layer',
        );
      }
      if (options.hitDetection) {
        this.hitDetection_ = options.hitDetection;
      }

      /**
       * @type {Collection<Feature>}
       * @private
       */
      this.features_ = features;

      this.features_.forEach(this.addFeature_.bind(this));
      this.features_.addEventListener(
        CollectionEventType.ADD,
        this.handleFeatureAdd_.bind(this),
      );
      this.features_.addEventListener(
        CollectionEventType.REMOVE,
        this.handleFeatureRemove_.bind(this),
      );

      /**
       * @type {import("../MapBrowserEvent.js").default}
       * @private
       */
      this.lastPointerEvent_ = null;

      /**
       * Delta (x, y in map units) between matched rtree vertex and pointer vertex.
       * @type {Array<number>}
       * @private
       */
      this.delta_ = [0, 0];

      /**
       * @private
       */
      this.snapToPointer_ =
        options.snapToPointer === undefined
          ? !this.hitDetection_
          : options.snapToPointer;
    }

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    addFeature_(feature) {
      const geometry = feature.getGeometry();
      if (geometry) {
        const writer = this.SEGMENT_WRITERS_[geometry.getType()];
        if (writer) {
          writer(feature, geometry);
        }
      }
      const map = this.getMap();
      if (map && map.isRendered() && this.getActive()) {
        this.handlePointerAtPixel_(map.getCoordinateFromPixel(this.lastPixel_));
      }
      feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} evt Map browser event.
     * @param {Array<SegmentData>} segments The segments subject to modification.
     * @private
     */
    willModifyFeatures_(evt, segments) {
      if (!this.featuresBeingModified_) {
        this.featuresBeingModified_ = new Collection();
        const features = this.featuresBeingModified_.getArray();
        for (let i = 0, ii = segments.length; i < ii; ++i) {
          const feature = segments[i].feature;
          if (feature && !features.includes(feature)) {
            this.featuresBeingModified_.push(feature);
          }
        }
        if (this.featuresBeingModified_.getLength() === 0) {
          this.featuresBeingModified_ = null;
        } else {
          this.dispatchEvent(
            new ModifyEvent(
              ModifyEventType.MODIFYSTART,
              this.featuresBeingModified_,
              evt,
            ),
          );
        }
      }
    }

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    removeFeature_(feature) {
      this.removeFeatureSegmentData_(feature);
      // Remove the vertex feature if the collection of candidate features is empty.
      if (this.vertexFeature_ && this.features_.getLength() === 0) {
        this.overlay_.getSource().removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
      feature.removeEventListener(
        EventType.CHANGE,
        this.boundHandleFeatureChange_,
      );
    }

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    removeFeatureSegmentData_(feature) {
      const rBush = this.rBush_;
      /** @type {Array<SegmentData>} */
      const nodesToRemove = [];
      rBush.forEach(
        /**
         * @param {SegmentData} node RTree node.
         */
        function (node) {
          if (feature === node.feature) {
            nodesToRemove.push(node);
          }
        },
      );
      for (let i = nodesToRemove.length - 1; i >= 0; --i) {
        const nodeToRemove = nodesToRemove[i];
        for (let j = this.dragSegments_.length - 1; j >= 0; --j) {
          if (this.dragSegments_[j][0] === nodeToRemove) {
            this.dragSegments_.splice(j, 1);
          }
        }
        rBush.remove(nodeToRemove);
      }
    }

    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     * @override
     */
    setActive(active) {
      if (this.vertexFeature_ && !active) {
        this.overlay_.getSource().removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
      super.setActive(active);
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default} map Map.
     * @override
     */
    setMap(map) {
      this.overlay_.setMap(map);
      super.setMap(map);
    }

    /**
     * Get the overlay layer that this interaction renders the modification point or vertex to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    getOverlay() {
      return this.overlay_;
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    handleSourceAdd_(event) {
      if (event.feature) {
        this.features_.push(event.feature);
      }
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    handleSourceRemove_(event) {
      if (event.feature) {
        this.features_.remove(event.feature);
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<Feature>} evt Event.
     * @private
     */
    handleFeatureAdd_(evt) {
      this.addFeature_(evt.element);
    }

    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */
    handleFeatureChange_(evt) {
      if (!this.changingFeature_) {
        const feature = /** @type {Feature} */ (evt.target);
        this.removeFeature_(feature);
        this.addFeature_(feature);
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<Feature>} evt Event.
     * @private
     */
    handleFeatureRemove_(evt) {
      this.removeFeature_(evt.element);
    }

    /**
     * @param {Feature} feature Feature
     * @param {Point} geometry Geometry.
     * @private
     */
    writePointGeometry_(feature, geometry) {
      const coordinates = geometry.getCoordinates();

      /** @type {SegmentData} */
      const segmentData = {
        feature: feature,
        geometry: geometry,
        segment: [coordinates, coordinates],
      };

      this.rBush_.insert(geometry.getExtent(), segmentData);
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @private
     */
    writeMultiPointGeometry_(feature, geometry) {
      const points = geometry.getCoordinates();
      for (let i = 0, ii = points.length; i < ii; ++i) {
        const coordinates = points[i];

        /** @type {SegmentData} */
        const segmentData = {
          feature: feature,
          geometry: geometry,
          depth: [i],
          index: i,
          segment: [coordinates, coordinates],
        };

        this.rBush_.insert(geometry.getExtent(), segmentData);
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @private
     */
    writeLineStringGeometry_(feature, geometry) {
      const coordinates = geometry.getCoordinates();
      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        const segment = coordinates.slice(i, i + 2);

        /** @type {SegmentData} */
        const segmentData = {
          feature: feature,
          geometry: geometry,
          index: i,
          segment: segment,
        };

        this.rBush_.insert(boundingExtent(segment), segmentData);
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @private
     */
    writeMultiLineStringGeometry_(feature, geometry) {
      const lines = geometry.getCoordinates();
      for (let j = 0, jj = lines.length; j < jj; ++j) {
        const coordinates = lines[j];
        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          const segment = coordinates.slice(i, i + 2);

          /** @type {SegmentData} */
          const segmentData = {
            feature: feature,
            geometry: geometry,
            depth: [j],
            index: i,
            segment: segment,
          };

          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @private
     */
    writePolygonGeometry_(feature, geometry) {
      const rings = geometry.getCoordinates();
      for (let j = 0, jj = rings.length; j < jj; ++j) {
        const coordinates = rings[j];
        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          const segment = coordinates.slice(i, i + 2);

          /** @type {SegmentData} */
          const segmentData = {
            feature: feature,
            geometry: geometry,
            depth: [j],
            index: i,
            segment: segment,
          };

          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @private
     */
    writeMultiPolygonGeometry_(feature, geometry) {
      const polygons = geometry.getCoordinates();
      for (let k = 0, kk = polygons.length; k < kk; ++k) {
        const rings = polygons[k];
        for (let j = 0, jj = rings.length; j < jj; ++j) {
          const coordinates = rings[j];
          for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
            const segment = coordinates.slice(i, i + 2);

            /** @type {SegmentData} */
            const segmentData = {
              feature: feature,
              geometry: geometry,
              depth: [j, k],
              index: i,
              segment: segment,
            };

            this.rBush_.insert(boundingExtent(segment), segmentData);
          }
        }
      }
    }

    /**
     * We convert a circle into two segments.  The segment at index
     * {@link CIRCLE_CENTER_INDEX} is the
     * circle's center (a point).  The segment at index
     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is
     * the circumference, and is not a line segment.
     *
     * @param {Feature} feature Feature.
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @private
     */
    writeCircleGeometry_(feature, geometry) {
      const coordinates = geometry.getCenter();

      /** @type {SegmentData} */
      const centerSegmentData = {
        feature: feature,
        geometry: geometry,
        index: CIRCLE_CENTER_INDEX,
        segment: [coordinates, coordinates],
      };

      /** @type {SegmentData} */
      const circumferenceSegmentData = {
        feature: feature,
        geometry: geometry,
        index: CIRCLE_CIRCUMFERENCE_INDEX,
        segment: [coordinates, coordinates],
      };

      const featureSegments = [centerSegmentData, circumferenceSegmentData];
      centerSegmentData.featureSegments = featureSegments;
      circumferenceSegmentData.featureSegments = featureSegments;
      this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);
      let circleGeometry = /** @type {import("../geom/Geometry.js").default} */ (
        geometry
      );
      const userProjection = getUserProjection();
      if (userProjection && this.getMap()) {
        const projection = this.getMap().getView().getProjection();
        circleGeometry = circleGeometry
          .clone()
          .transform(userProjection, projection);
        circleGeometry = fromCircle(
          /** @type {import("../geom/Circle.js").default} */ (circleGeometry),
        ).transform(projection, userProjection);
      }
      this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @private
     */
    writeGeometryCollectionGeometry_(feature, geometry) {
      const geometries = geometry.getGeometriesArray();
      for (let i = 0; i < geometries.length; ++i) {
        const geometry = geometries[i];
        const writer = this.SEGMENT_WRITERS_[geometry.getType()];
        writer(feature, geometry);
      }
    }

    /**
     * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
     * @param {Array<Feature>} features The features being modified.
     * @param {Array<import("../geom/SimpleGeometry.js").default>} geometries The geometries being modified.
     * @param {boolean} existing The vertex represents an existing vertex.
     * @return {Feature} Vertex feature.
     * @private
     */
    createOrUpdateVertexFeature_(coordinates, features, geometries, existing) {
      let vertexFeature = this.vertexFeature_;
      if (!vertexFeature) {
        vertexFeature = new Feature(new Point$1(coordinates));
        this.vertexFeature_ = vertexFeature;
        this.overlay_.getSource().addFeature(vertexFeature);
      } else {
        const geometry = vertexFeature.getGeometry();
        geometry.setCoordinates(coordinates);
      }
      vertexFeature.set('features', features);
      vertexFeature.set('geometries', geometries);
      vertexFeature.set('existing', existing);
      return vertexFeature;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @override
     */
    handleEvent(mapBrowserEvent) {
      if (!mapBrowserEvent.originalEvent) {
        return true;
      }
      this.lastPointerEvent_ = mapBrowserEvent;

      let handled;
      if (
        !mapBrowserEvent.map.getView().getInteracting() &&
        mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&
        !this.handlingDownUpSequence
      ) {
        this.handlePointerMove_(mapBrowserEvent);
      }
      if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {
        if (
          mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||
          !this.ignoreNextSingleClick_
        ) {
          handled = this.removePoint();
        } else {
          handled = true;
        }
      }

      if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {
        this.ignoreNextSingleClick_ = false;
      }

      return super.handleEvent(mapBrowserEvent) && !handled;
    }

    findInsertVerticesAndUpdateDragSegments_(pixelCoordinate) {
      this.handlePointerAtPixel_(pixelCoordinate);
      this.dragSegments_.length = 0;
      this.featuresBeingModified_ = null;
      const vertexFeature = this.vertexFeature_;
      if (!vertexFeature) {
        return;
      }

      const projection = this.getMap().getView().getProjection();
      const insertVertices = [];
      const vertex = vertexFeature.getGeometry().getCoordinates();
      const vertexExtent = boundingExtent([vertex]);
      const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);
      const componentSegments = {};
      segmentDataMatches.sort(compareIndexes);
      for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {
        const segmentDataMatch = segmentDataMatches[i];
        const segment = segmentDataMatch.segment;
        let uid = getUid(segmentDataMatch.geometry);
        const depth = segmentDataMatch.depth;
        if (depth) {
          uid += '-' + depth.join('-'); // separate feature components
        }
        if (!componentSegments[uid]) {
          componentSegments[uid] = new Array(2);
        }

        if (
          segmentDataMatch.geometry.getType() === 'Circle' &&
          segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX
        ) {
          const closestVertex = closestOnSegmentData(
            pixelCoordinate,
            segmentDataMatch,
            projection,
          );
          if (
            equals(closestVertex, vertex) &&
            !componentSegments[uid][0]
          ) {
            this.dragSegments_.push([segmentDataMatch, 0]);
            componentSegments[uid][0] = segmentDataMatch;
          }
          continue;
        }

        if (equals(segment[0], vertex) && !componentSegments[uid][0]) {
          this.dragSegments_.push([segmentDataMatch, 0]);
          componentSegments[uid][0] = segmentDataMatch;
          continue;
        }

        if (equals(segment[1], vertex) && !componentSegments[uid][1]) {
          if (
            componentSegments[uid][0] &&
            componentSegments[uid][0].index === 0
          ) {
            let coordinates = segmentDataMatch.geometry.getCoordinates();
            switch (segmentDataMatch.geometry.getType()) {
              // prevent dragging closed linestrings by the connecting node
              case 'LineString':
              case 'MultiLineString':
                continue;
              // if dragging the first vertex of a polygon, ensure the other segment
              // belongs to the closing vertex of the linear ring
              case 'MultiPolygon':
                coordinates = coordinates[depth[1]];
              /* falls through */
              case 'Polygon':
                if (segmentDataMatch.index !== coordinates[depth[0]].length - 2) {
                  continue;
                }
                break;
              // pass
            }
          }

          this.dragSegments_.push([segmentDataMatch, 1]);
          componentSegments[uid][1] = segmentDataMatch;
          continue;
        }

        if (
          getUid(segment) in this.vertexSegments_ &&
          !componentSegments[uid][0] &&
          !componentSegments[uid][1]
        ) {
          insertVertices.push(segmentDataMatch);
        }
      }

      return insertVertices;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @override
     */
    handleDragEvent(evt) {
      this.ignoreNextSingleClick_ = false;
      this.willModifyFeatures_(
        evt,
        this.dragSegments_.map(([segment]) => segment),
      );

      const vertex = [
        evt.coordinate[0] + this.delta_[0],
        evt.coordinate[1] + this.delta_[1],
      ];
      const features = [];
      const geometries = [];
      for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {
        const dragSegment = this.dragSegments_[i];
        const segmentData = dragSegment[0];
        const feature = segmentData.feature;
        if (!features.includes(feature)) {
          features.push(feature);
        }
        const geometry = segmentData.geometry;
        if (!geometries.includes(geometry)) {
          geometries.push(geometry);
        }
        const depth = segmentData.depth;
        let coordinates;
        const segment = segmentData.segment;
        const index = dragSegment[1];

        while (vertex.length < geometry.getStride()) {
          vertex.push(segment[index][vertex.length]);
        }

        switch (geometry.getType()) {
          case 'Point':
            coordinates = vertex;
            segment[0] = vertex;
            segment[1] = vertex;
            break;
          case 'MultiPoint':
            coordinates = geometry.getCoordinates();
            coordinates[segmentData.index] = vertex;
            segment[0] = vertex;
            segment[1] = vertex;
            break;
          case 'LineString':
            coordinates = geometry.getCoordinates();
            coordinates[segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case 'MultiLineString':
            coordinates = geometry.getCoordinates();
            coordinates[depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case 'Polygon':
            coordinates = geometry.getCoordinates();
            coordinates[depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case 'MultiPolygon':
            coordinates = geometry.getCoordinates();
            coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case 'Circle':
            const circle = /** @type {import("../geom/Circle.js").default} */ (
              geometry
            );
            segment[0] = vertex;
            segment[1] = vertex;
            if (segmentData.index === CIRCLE_CENTER_INDEX) {
              this.changingFeature_ = true;
              circle.setCenter(vertex);
              this.changingFeature_ = false;
            } else {
              // We're dragging the circle's circumference:
              this.changingFeature_ = true;
              const projection = evt.map.getView().getProjection();
              let radius = distance(
                fromUserCoordinate(circle.getCenter(), projection),
                fromUserCoordinate(vertex, projection),
              );
              const userProjection = getUserProjection();
              if (userProjection) {
                const circleGeometry = circle
                  .clone()
                  .transform(userProjection, projection);
                circleGeometry.setRadius(radius);
                radius = circleGeometry
                  .transform(projection, userProjection)
                  .getRadius();
              }
              circle.setRadius(radius);
              this.changingFeature_ = false;
            }
            break;
          // pass
        }

        if (coordinates) {
          this.setGeometryCoordinates_(geometry, coordinates);
        }
      }
      this.createOrUpdateVertexFeature_(vertex, features, geometries, true);
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleDownEvent(evt) {
      if (!this.condition_(evt)) {
        return false;
      }
      const pixelCoordinate = evt.coordinate;
      const insertVertices =
        this.findInsertVerticesAndUpdateDragSegments_(pixelCoordinate);

      if (insertVertices?.length && this.insertVertexCondition_(evt)) {
        this.willModifyFeatures_(evt, insertVertices);

        if (this.vertexFeature_) {
          const vertex = this.vertexFeature_.getGeometry().getCoordinates();
          for (let j = insertVertices.length - 1; j >= 0; --j) {
            this.insertVertex_(insertVertices[j], vertex);
          }
          this.ignoreNextSingleClick_ = true;
        }
      }

      return !!this.vertexFeature_;
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleUpEvent(evt) {
      for (let i = this.dragSegments_.length - 1; i >= 0; --i) {
        const segmentData = this.dragSegments_[i][0];
        const geometry = segmentData.geometry;
        if (geometry.getType() === 'Circle') {
          const circle = /** @type {import("../geom/Circle.js").default} */ (
            geometry
          );
          // Update a circle object in the R* bush:
          const coordinates = circle.getCenter();
          const centerSegmentData = segmentData.featureSegments[0];
          const circumferenceSegmentData = segmentData.featureSegments[1];
          centerSegmentData.segment[0] = coordinates;
          centerSegmentData.segment[1] = coordinates;
          circumferenceSegmentData.segment[0] = coordinates;
          circumferenceSegmentData.segment[1] = coordinates;
          this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);
          /** @type {import("../geom/Circle.js").default | import("../geom/Polygon.js").default} */
          let circleGeometry = circle;
          const userProjection = getUserProjection();
          if (userProjection) {
            const projection = evt.map.getView().getProjection();
            circleGeometry = circleGeometry
              .clone()
              .transform(userProjection, projection);
            circleGeometry = fromCircle(circleGeometry).transform(
              projection,
              userProjection,
            );
          }
          this.rBush_.update(
            circleGeometry.getExtent(),
            circumferenceSegmentData,
          );
        } else {
          this.rBush_.update(boundingExtent(segmentData.segment), segmentData);
        }
      }
      if (this.featuresBeingModified_) {
        this.dispatchEvent(
          new ModifyEvent(
            ModifyEventType.MODIFYEND,
            this.featuresBeingModified_,
            evt,
          ),
        );
        this.featuresBeingModified_ = null;
      }
      return false;
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @private
     */
    handlePointerMove_(evt) {
      this.lastPixel_ = evt.pixel;
      this.handlePointerAtPixel_(evt.coordinate);
    }

    /**
     * @param {import("../coordinate.js").Coordinate} pixelCoordinate The pixel Coordinate.
     * @private
     */
    handlePointerAtPixel_(pixelCoordinate) {
      const map = this.getMap();
      const pixel = map.getPixelFromCoordinate(pixelCoordinate);
      const projection = map.getView().getProjection();
      const sortByDistance = function (a, b) {
        return (
          projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -
          projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection)
        );
      };

      /** @type {Array<SegmentData>|undefined} */
      let nodes;
      /** @type {Point|undefined} */
      let hitPointGeometry;
      if (this.hitDetection_) {
        const layerFilter =
          typeof this.hitDetection_ === 'object'
            ? (layer) => layer === this.hitDetection_
            : undefined;
        map.forEachFeatureAtPixel(
          pixel,
          (feature, layer, geometry) => {
            if (geometry && geometry.getType() === 'Point') {
              geometry = new Point$1(
                toUserCoordinate(geometry.getCoordinates(), projection),
              );
            }
            const geom = geometry || feature.getGeometry();

            if (
              geom &&
              geom.getType() === 'Point' &&
              feature instanceof Feature &&
              this.features_.getArray().includes(feature)
            ) {
              hitPointGeometry = /** @type {Point} */ (geom);
              const coordinate = /** @type {Point} */ (feature.getGeometry())
                .getFlatCoordinates()
                .slice(0, 2);
              nodes = [
                {
                  feature,
                  geometry: hitPointGeometry,
                  segment: [coordinate, coordinate],
                },
              ];
            }
            return true;
          },
          {layerFilter},
        );
      }
      if (!nodes) {
        const viewExtent = fromUserExtent(
          createOrUpdateFromCoordinate(pixelCoordinate, tempExtent),
          projection,
        );
        const buffer$1 = map.getView().getResolution() * this.pixelTolerance_;
        const box = toUserExtent(
          buffer(viewExtent, buffer$1, tempExtent),
          projection,
        );
        nodes = this.rBush_.getInExtent(box);
      }

      if (nodes && nodes.length > 0) {
        const node = nodes.sort(sortByDistance)[0];
        const closestSegment = node.segment;
        let vertex = closestOnSegmentData(pixelCoordinate, node, projection);
        const vertexPixel = map.getPixelFromCoordinate(vertex);
        let dist = distance(pixel, vertexPixel);
        if (hitPointGeometry || dist <= this.pixelTolerance_) {
          /** @type {Object<string, boolean>} */
          const vertexSegments = {};
          vertexSegments[getUid(closestSegment)] = true;

          if (!this.snapToPointer_) {
            this.delta_[0] = vertex[0] - pixelCoordinate[0];
            this.delta_[1] = vertex[1] - pixelCoordinate[1];
          }
          if (
            node.geometry.getType() === 'Circle' &&
            node.index === CIRCLE_CIRCUMFERENCE_INDEX
          ) {
            this.snappedToVertex_ = true;
            this.createOrUpdateVertexFeature_(
              vertex,
              [node.feature],
              [node.geometry],
              this.snappedToVertex_,
            );
          } else {
            const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
            const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
            const squaredDist1 = squaredDistance(vertexPixel, pixel1);
            const squaredDist2 = squaredDistance(vertexPixel, pixel2);
            dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
            this.snappedToVertex_ = dist <= this.pixelTolerance_;
            // Stop and cleanup overlay vertex feature if a segment was hit and new vertex creation is not allowed by the insertVertexCondition
            if (
              !this.snappedToVertex_ &&
              !this.insertVertexCondition_(this.lastPointerEvent_)
            ) {
              if (this.vertexFeature_) {
                this.overlay_.getSource().removeFeature(this.vertexFeature_);
                this.vertexFeature_ = null;
              }
              return;
            }
            if (this.snappedToVertex_) {
              vertex =
                squaredDist1 > squaredDist2
                  ? closestSegment[1]
                  : closestSegment[0];
            }
            this.createOrUpdateVertexFeature_(
              vertex,
              [node.feature],
              [node.geometry],
              this.snappedToVertex_,
            );
            const geometries = {};
            geometries[getUid(node.geometry)] = true;
            for (let i = 1, ii = nodes.length; i < ii; ++i) {
              const segment = nodes[i].segment;
              if (
                (equals(closestSegment[0], segment[0]) &&
                  equals(closestSegment[1], segment[1])) ||
                (equals(closestSegment[0], segment[1]) &&
                  equals(closestSegment[1], segment[0]))
              ) {
                const geometryUid = getUid(nodes[i].geometry);
                if (!(geometryUid in geometries)) {
                  geometries[geometryUid] = true;
                  vertexSegments[getUid(segment)] = true;
                }
              } else {
                break;
              }
            }
          }

          this.vertexSegments_ = vertexSegments;
          return;
        }
      }
      if (this.vertexFeature_) {
        this.overlay_.getSource().removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
    }

    /**
     * @param {SegmentData} segmentData Segment data.
     * @param {import("../coordinate.js").Coordinate} vertex Vertex.
     * @return {boolean} A vertex was inserted.
     * @private
     */
    insertVertex_(segmentData, vertex) {
      const segment = segmentData.segment;
      const feature = segmentData.feature;
      const geometry = segmentData.geometry;
      const depth = segmentData.depth;
      const index = segmentData.index;
      let coordinates;

      while (vertex.length < geometry.getStride()) {
        vertex.push(0);
      }

      switch (geometry.getType()) {
        case 'MultiLineString':
          coordinates = geometry.getCoordinates();
          coordinates[depth[0]].splice(index + 1, 0, vertex);
          break;
        case 'Polygon':
          coordinates = geometry.getCoordinates();
          coordinates[depth[0]].splice(index + 1, 0, vertex);
          break;
        case 'MultiPolygon':
          coordinates = geometry.getCoordinates();
          coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);
          break;
        case 'LineString':
          coordinates = geometry.getCoordinates();
          coordinates.splice(index + 1, 0, vertex);
          break;
        default:
          return false;
      }

      this.setGeometryCoordinates_(geometry, coordinates);
      const rTree = this.rBush_;
      rTree.remove(segmentData);
      this.updateSegmentIndices_(geometry, index, depth, 1);

      /** @type {SegmentData} */
      const newSegmentData = {
        segment: [segment[0], vertex],
        feature: feature,
        geometry: geometry,
        depth: depth,
        index: index,
      };

      rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);
      this.dragSegments_.push([newSegmentData, 1]);

      /** @type {SegmentData} */
      const newSegmentData2 = {
        segment: [vertex, segment[1]],
        feature: feature,
        geometry: geometry,
        depth: depth,
        index: index + 1,
      };

      rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);
      this.dragSegments_.push([newSegmentData2, 0]);
      return true;
    }

    updatePointer_(coordinate) {
      if (coordinate) {
        this.findInsertVerticesAndUpdateDragSegments_(coordinate);
      }
      return this.vertexFeature_?.getGeometry().getCoordinates();
    }

    /**
     * Get the current pointer position.
     * @return {import("../coordinate.js").Coordinate | null} The current pointer coordinate.
     */
    getPoint() {
      const coordinate = this.vertexFeature_?.getGeometry().getCoordinates();
      if (!coordinate) {
        return null;
      }
      return toUserCoordinate(
        coordinate,
        this.getMap().getView().getProjection(),
      );
    }

    /**
     * Check if a point can be removed from the current linestring or polygon at the current
     * pointer position.
     * @return {boolean} A point can be deleted at the current pointer position.
     * @api
     */
    canRemovePoint() {
      if (!this.vertexFeature_) {
        return false;
      }
      if (
        this.vertexFeature_
          .get('geometries')
          .every(
            (geometry) =>
              geometry.getType() === 'Circle' ||
              geometry.getType().endsWith('Point'),
          )
      ) {
        return false;
      }
      const coordinate = this.vertexFeature_.getGeometry().getCoordinates();
      const segments = this.rBush_.getInExtent(boundingExtent([coordinate]));
      return segments.some(
        ({segment}) =>
          equals(segment[0], coordinate) ||
          equals(segment[1], coordinate),
      );
    }

    /**
     * Removes the vertex currently being pointed from the current linestring or polygon.
     * @param {import('../coordinate.js').Coordinate} [coordinate] If provided, the pointer
     * will be set to the provided coordinate. If not, the current pointer coordinate will be used.
     * @return {boolean} True when a vertex was removed.
     * @api
     */
    removePoint(coordinate) {
      if (coordinate) {
        coordinate = fromUserCoordinate(
          coordinate,
          this.getMap().getView().getProjection(),
        );
        this.updatePointer_(coordinate);
      }
      if (
        !this.lastPointerEvent_ ||
        (this.lastPointerEvent_ &&
          this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG)
      ) {
        const evt = this.lastPointerEvent_;
        this.willModifyFeatures_(
          evt,
          this.dragSegments_.map(([segment]) => segment),
        );
        const removed = this.removeVertex_();
        if (this.featuresBeingModified_) {
          this.dispatchEvent(
            new ModifyEvent(
              ModifyEventType.MODIFYEND,
              this.featuresBeingModified_,
              evt,
            ),
          );
        }

        this.featuresBeingModified_ = null;
        return removed;
      }
      return false;
    }

    /**
     * Removes a vertex from all matching features.
     * @return {boolean} True when a vertex was removed.
     * @private
     */
    removeVertex_() {
      const dragSegments = this.dragSegments_;
      const segmentsByFeature = {};
      let deleted = false;
      let component, coordinates, dragSegment, geometry, i, index, left;
      let newIndex, right, segmentData, uid;
      for (i = dragSegments.length - 1; i >= 0; --i) {
        dragSegment = dragSegments[i];
        segmentData = dragSegment[0];
        uid = getUid(segmentData.feature);
        if (segmentData.depth) {
          // separate feature components
          uid += '-' + segmentData.depth.join('-');
        }
        if (!(uid in segmentsByFeature)) {
          segmentsByFeature[uid] = {};
        }
        if (dragSegment[1] === 0) {
          segmentsByFeature[uid].right = segmentData;
          segmentsByFeature[uid].index = segmentData.index;
        } else if (dragSegment[1] == 1) {
          segmentsByFeature[uid].left = segmentData;
          segmentsByFeature[uid].index = segmentData.index + 1;
        }
      }
      for (uid in segmentsByFeature) {
        right = segmentsByFeature[uid].right;
        left = segmentsByFeature[uid].left;
        index = segmentsByFeature[uid].index;
        newIndex = index - 1;
        if (left !== undefined) {
          segmentData = left;
        } else {
          segmentData = right;
        }
        if (newIndex < 0) {
          newIndex = 0;
        }
        geometry = segmentData.geometry;
        coordinates = geometry.getCoordinates();
        component = coordinates;
        deleted = false;
        switch (geometry.getType()) {
          case 'MultiLineString':
            if (coordinates[segmentData.depth[0]].length > 2) {
              coordinates[segmentData.depth[0]].splice(index, 1);
              deleted = true;
            }
            break;
          case 'LineString':
            if (coordinates.length > 2) {
              coordinates.splice(index, 1);
              deleted = true;
            }
            break;
          case 'MultiPolygon':
            component = component[segmentData.depth[1]];
          /* falls through */
          case 'Polygon':
            component = component[segmentData.depth[0]];
            if (component.length > 4) {
              if (index == component.length - 1) {
                index = 0;
              }
              component.splice(index, 1);
              deleted = true;
              if (index === 0) {
                // close the ring again
                component.pop();
                component.push(component[0]);
                newIndex = component.length - 1;
              }
            }
            break;
          // pass
        }

        if (deleted) {
          this.setGeometryCoordinates_(geometry, coordinates);
          const segments = [];
          if (left !== undefined) {
            this.rBush_.remove(left);
            segments.push(left.segment[0]);
          }
          if (right !== undefined) {
            this.rBush_.remove(right);
            segments.push(right.segment[1]);
          }
          if (left !== undefined && right !== undefined) {
            /** @type {SegmentData} */
            const newSegmentData = {
              depth: segmentData.depth,
              feature: segmentData.feature,
              geometry: segmentData.geometry,
              index: newIndex,
              segment: segments,
            };

            this.rBush_.insert(
              boundingExtent(newSegmentData.segment),
              newSegmentData,
            );
          }
          this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);
          if (this.vertexFeature_) {
            this.overlay_.getSource().removeFeature(this.vertexFeature_);
            this.vertexFeature_ = null;
          }
          dragSegments.length = 0;
        }
      }
      return deleted;
    }

    /**
     * Check if a point can be inserted to the current linestring or polygon at the current
     * pointer position.
     * @return {boolean} A point can be inserted at the current pointer position.
     * @api
     */
    canInsertPoint() {
      if (!this.vertexFeature_) {
        return false;
      }
      if (
        this.vertexFeature_
          .get('geometries')
          .every(
            (geometry) =>
              geometry.getType() === 'Circle' ||
              geometry.getType().endsWith('Point'),
          )
      ) {
        return false;
      }
      const coordinate = this.vertexFeature_.getGeometry().getCoordinates();
      const segments = this.rBush_.getInExtent(boundingExtent([coordinate]));
      return segments.some(
        ({segment}) =>
          !(
            equals(segment[0], coordinate) ||
            equals(segment[1], coordinate)
          ),
      );
    }

    /**
     * Inserts the vertex currently being pointed to the current linestring or polygon.
     * @param {import('../coordinate.js').Coordinate} [coordinate] If provided, the pointer
     * will be set to the provided coordinate. If not, the current pointer coordinate will be used.
     * @return {boolean} A vertex was inserted.
     * @api
     */
    insertPoint(coordinate) {
      const pixelCoordinate = coordinate
        ? fromUserCoordinate(coordinate, this.getMap().getView().getProjection())
        : this.vertexFeature_?.getGeometry().getCoordinates();
      if (!pixelCoordinate) {
        return false;
      }
      const insertVertices =
        this.findInsertVerticesAndUpdateDragSegments_(pixelCoordinate);
      return insertVertices.reduce(
        (prev, segmentData) =>
          prev || this.insertVertex_(segmentData, pixelCoordinate),
        false,
      );
    }

    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {Array} coordinates Coordinates.
     * @private
     */
    setGeometryCoordinates_(geometry, coordinates) {
      this.changingFeature_ = true;
      geometry.setCoordinates(coordinates);
      this.changingFeature_ = false;
    }

    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {number} index Index.
     * @param {Array<number>|undefined} depth Depth.
     * @param {number} delta Delta (1 or -1).
     * @private
     */
    updateSegmentIndices_(geometry, index, depth, delta) {
      this.rBush_.forEachInExtent(
        geometry.getExtent(),
        function (segmentDataMatch) {
          if (
            segmentDataMatch.geometry === geometry &&
            (depth === undefined ||
              segmentDataMatch.depth === undefined ||
              equals$2(segmentDataMatch.depth, depth)) &&
            segmentDataMatch.index > index
          ) {
            segmentDataMatch.index += delta;
          }
        },
      );
    }
  }

  /**
   * @param {SegmentData} a The first segment data.
   * @param {SegmentData} b The second segment data.
   * @return {number} The difference in indexes.
   */
  function compareIndexes(a, b) {
    return a.index - b.index;
  }

  /**
   * Returns the distance from a point to a line segment.
   *
   * @param {import("../coordinate.js").Coordinate} pointCoordinates The coordinates of the point from
   *        which to calculate the distance.
   * @param {SegmentData} segmentData The object describing the line
   *        segment we are calculating the distance to.
   * @param {import("../proj/Projection.js").default} projection The view projection.
   * @return {number} The square of the distance between a point and a line segment.
   */
  function projectedDistanceToSegmentDataSquared(
    pointCoordinates,
    segmentData,
    projection,
  ) {
    const geometry = segmentData.geometry;

    if (geometry.getType() === 'Circle') {
      let circleGeometry = /** @type {import("../geom/Circle.js").default} */ (
        geometry
      );

      if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
        const userProjection = getUserProjection();
        if (userProjection) {
          circleGeometry = circleGeometry
            .clone()
            .transform(userProjection, projection);
        }
        const distanceToCenterSquared = squaredDistance(
          circleGeometry.getCenter(),
          fromUserCoordinate(pointCoordinates, projection),
        );
        const distanceToCircumference =
          Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();
        return distanceToCircumference * distanceToCircumference;
      }
    }

    const coordinate = fromUserCoordinate(pointCoordinates, projection);
    tempSegment$1[0] = fromUserCoordinate(segmentData.segment[0], projection);
    tempSegment$1[1] = fromUserCoordinate(segmentData.segment[1], projection);
    return squaredDistanceToSegment(coordinate, tempSegment$1);
  }

  /**
   * Returns the point closest to a given line segment.
   *
   * @param {import("../coordinate.js").Coordinate} pointCoordinates The point to which a closest point
   *        should be found.
   * @param {SegmentData} segmentData The object describing the line
   *        segment which should contain the closest point.
   * @param {import("../proj/Projection.js").default} projection The view projection.
   * @return {import("../coordinate.js").Coordinate} The point closest to the specified line segment.
   */
  function closestOnSegmentData(pointCoordinates, segmentData, projection) {
    const geometry = segmentData.geometry;

    if (
      geometry.getType() === 'Circle' &&
      segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX
    ) {
      let circleGeometry = /** @type {import("../geom/Circle.js").default} */ (
        geometry
      );
      const userProjection = getUserProjection();
      if (userProjection) {
        circleGeometry = circleGeometry
          .clone()
          .transform(userProjection, projection);
      }
      return toUserCoordinate(
        circleGeometry.getClosestPoint(
          fromUserCoordinate(pointCoordinates, projection),
        ),
        projection,
      );
    }
    const coordinate = fromUserCoordinate(pointCoordinates, projection);
    tempSegment$1[0] = fromUserCoordinate(segmentData.segment[0], projection);
    tempSegment$1[1] = fromUserCoordinate(segmentData.segment[1], projection);
    return toUserCoordinate(
      closestOnSegment(coordinate, tempSegment$1),
      projection,
    );
  }

  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction$1() {
    const style = createEditingStyle();
    return function (feature, resolution) {
      return style['Point'];
    };
  }

  /**
   * @module ol/interaction/Select
   */

  /**
   * @enum {string}
   */
  const SelectEventType = {
    /**
     * Triggered when feature(s) has been (de)selected.
     * @event SelectEvent#select
     * @api
     */
    SELECT: 'select',
  };

  /**
   * A function that takes a {@link module:ol/Feature~Feature} and returns `true` if the feature may be
   * selected or `false` otherwise.
   * @typedef {function(import("../Feature.js").default, import("../layer/Layer.js").default<import("../source/Source").default>):boolean} FilterFunction
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [addCondition] A function
   * that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default, this is {@link module:ol/events/condition.never}. Use this if you
   * want to use different events for add and remove instead of `toggle`.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. This is the event
   * for the selected features as a whole. By default, this is
   * {@link module:ol/events/condition.singleClick}. Clicking on a feature selects that
   * feature and removes any that were in the selection. Clicking outside any
   * feature removes all from the selection.
   * See `toggle`, `add`, `remove` options for adding/removing extra features to/
   * from the selection.
   * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} [layers]
   * A list of layers from which features should be selected. Alternatively, a
   * filter function can be provided. The function will be called for each layer
   * in the map and should return `true` for layers that you want to be
   * selectable. If the option is absent, all visible layers will be considered
   * selectable.
   * @property {import("../style/Style.js").StyleLike|null} [style]
   * Style for the selected features. By default the default edit style is used
   * (see {@link module:ol/style/Style~Style}). Set to `null` if this interaction should not apply
   * any style changes for selected features.
   * If set to a falsey value, the selected feature's style will not change.
   * @property {import("../events/condition.js").Condition} [removeCondition] A function
   * that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default, this is {@link module:ol/events/condition.never}. Use this if you
   * want to use different events for add and remove instead of `toggle`.
   * @property {import("../events/condition.js").Condition} [toggleCondition] A function
   * that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. This is in addition
   * to the `condition` event. By default,
   * {@link module:ol/events/condition.shiftKeyOnly}, i.e. pressing `shift` as
   * well as the `condition` event, adds that feature to the current selection if
   * it is not currently selected, and removes it if it is. See `add` and `remove`
   * if you want to use different events instead of a toggle.
   * @property {boolean} [multi=false] A boolean that determines if the default
   * behaviour should select only single features or all (overlapping) features at
   * the clicked map position. The default of `false` means single select.
   * @property {Collection<Feature>} [features]
   * Collection where the interaction will place selected features. Optional. If
   * not set the interaction will create a collection. In any case the collection
   * used by the interaction is returned by
   * {@link module:ol/interaction/Select~Select#getFeatures}.
   * @property {FilterFunction} [filter] A function
   * that takes a {@link module:ol/Feature~Feature} and a
   * {@link module:ol/layer/Layer~Layer} and returns `true` if the feature may be
   * selected or `false` otherwise.
   * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside
   * the radius around the given position will be checked for features.
   */

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of
   * this type.
   */
  class SelectEvent extends BaseEvent {
    /**
     * @param {SelectEventType} type The event type.
     * @param {Array<import("../Feature.js").default>} selected Selected features.
     * @param {Array<import("../Feature.js").default>} deselected Deselected features.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Associated
     *     {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     */
    constructor(type, selected, deselected, mapBrowserEvent) {
      super(type);

      /**
       * Selected features array.
       * @type {Array<import("../Feature.js").default>}
       * @api
       */
      this.selected = selected;

      /**
       * Deselected features array.
       * @type {Array<import("../Feature.js").default>}
       * @api
       */
      this.deselected = deselected;

      /**
       * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;
    }
  }

  /**
   * Original feature styles to reset to when features are no longer selected.
   * @type {Object<number, import("../style/Style.js").default|Array<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction>}
   */
  const originalFeatureStyles = {};

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'select', SelectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'select', Return>} SelectOnSignature
   */

  /**
   * @classdesc
   * Interaction for selecting vector features. By default, selected features are
   * styled differently, so this interaction can be used for visual highlighting,
   * as well as selecting features for other actions, such as modification or
   * output. There are three ways of controlling which features are selected:
   * using the browser event as defined by the `condition` and optionally the
   * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a
   * further feature filter using the `filter` option.
   *
   * @fires SelectEvent
   * @api
   */
  class Select extends Interaction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      /***
       * @type {SelectOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {SelectOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {SelectOnSignature<void>}
       */
      this.un;

      options = options ? options : {};

      /**
       * @private
       */
      this.boundAddFeature_ = this.addFeature_.bind(this);

      /**
       * @private
       */
      this.boundRemoveFeature_ = this.removeFeature_.bind(this);

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : singleClick;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.addCondition_ = options.addCondition ? options.addCondition : never;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.removeCondition_ = options.removeCondition
        ? options.removeCondition
        : never;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.toggleCondition_ = options.toggleCondition
        ? options.toggleCondition
        : shiftKeyOnly;

      /**
       * @private
       * @type {boolean}
       */
      this.multi_ = options.multi ? options.multi : false;

      /**
       * @private
       * @type {FilterFunction}
       */
      this.filter_ = options.filter ? options.filter : TRUE;

      /**
       * @private
       * @type {number}
       */
      this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;

      /**
       * @private
       * @type {import("../style/Style.js").default|Array<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction|null}
       */
      this.style_ =
        options.style !== undefined ? options.style : getDefaultStyleFunction();

      /**
       * @private
       * @type {Collection<Feature>}
       */
      this.features_ = options.features || new Collection();

      /** @type {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} */
      let layerFilter;
      if (options.layers) {
        if (typeof options.layers === 'function') {
          layerFilter = options.layers;
        } else {
          const layers = options.layers;
          layerFilter = function (layer) {
            return layers.includes(layer);
          };
        }
      } else {
        layerFilter = TRUE;
      }

      /**
       * @private
       * @type {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean}
       */
      this.layerFilter_ = layerFilter;

      /**
       * An association between selected feature (key)
       * and layer (value)
       * @private
       * @type {Object<string, import("../layer/Layer.js").default>}
       */
      this.featureLayerAssociation_ = {};
    }

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("../layer/Layer.js").default} layer Layer.
     * @private
     */
    addFeatureLayerAssociation_(feature, layer) {
      this.featureLayerAssociation_[getUid(feature)] = layer;
    }

    /**
     * Get the selected features.
     * @return {Collection<Feature>} Features collection.
     * @api
     */
    getFeatures() {
      return this.features_;
    }

    /**
     * Returns the Hit-detection tolerance.
     * @return {number} Hit tolerance in pixels.
     * @api
     */
    getHitTolerance() {
      return this.hitTolerance_;
    }

    /**
     * Returns the associated {@link module:ol/layer/Vector~VectorLayer vector layer} of
     * a selected feature.
     * @param {import("../Feature.js").default} feature Feature
     * @return {import('../layer/Vector.js').default} Layer.
     * @api
     */
    getLayer(feature) {
      return /** @type {import('../layer/Vector.js').default} */ (
        this.featureLayerAssociation_[getUid(feature)]
      );
    }

    /**
     * Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @api
     */
    setHitTolerance(hitTolerance) {
      this.hitTolerance_ = hitTolerance;
    }

    /**
     * Remove the interaction from its current map, if any,  and attach it to a new
     * map, if any. Pass `null` to just remove the interaction from the current map.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     * @override
     */
    setMap(map) {
      const currentMap = this.getMap();
      if (currentMap && this.style_) {
        this.features_.forEach(this.restorePreviousStyle_.bind(this));
      }
      super.setMap(map);
      if (map) {
        this.features_.addEventListener(
          CollectionEventType.ADD,
          this.boundAddFeature_,
        );
        this.features_.addEventListener(
          CollectionEventType.REMOVE,
          this.boundRemoveFeature_,
        );

        if (this.style_) {
          this.features_.forEach(this.applySelectedStyle_.bind(this));
        }
      } else {
        this.features_.removeEventListener(
          CollectionEventType.ADD,
          this.boundAddFeature_,
        );
        this.features_.removeEventListener(
          CollectionEventType.REMOVE,
          this.boundRemoveFeature_,
        );
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<Feature>} evt Event.
     * @private
     */
    addFeature_(evt) {
      const feature = evt.element;
      if (this.style_) {
        this.applySelectedStyle_(feature);
      }
      if (!this.getLayer(feature)) {
        const layer = /** @type {VectorLayer} */ (
          this.getMap()
            .getAllLayers()
            .find(function (layer) {
              if (
                layer instanceof VectorLayer &&
                layer.getSource() &&
                layer.getSource().hasFeature(feature)
              ) {
                return layer;
              }
            })
        );
        if (layer) {
          this.addFeatureLayerAssociation_(feature, layer);
        }
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<Feature>} evt Event.
     * @private
     */
    removeFeature_(evt) {
      if (this.style_) {
        this.restorePreviousStyle_(evt.element);
      }
    }

    /**
     * @return {import("../style/Style.js").StyleLike|null} Select style.
     */
    getStyle() {
      return this.style_;
    }

    /**
     * @param {Feature} feature Feature
     * @private
     */
    applySelectedStyle_(feature) {
      const key = getUid(feature);
      if (!(key in originalFeatureStyles)) {
        originalFeatureStyles[key] = feature.getStyle();
      }
      feature.setStyle(this.style_);
    }

    /**
     * @param {Feature} feature Feature
     * @private
     */
    restorePreviousStyle_(feature) {
      const interactions = this.getMap().getInteractions().getArray();
      for (let i = interactions.length - 1; i >= 0; --i) {
        const interaction = interactions[i];
        if (
          interaction !== this &&
          interaction instanceof Select &&
          interaction.getStyle() &&
          interaction.getFeatures().getArray().lastIndexOf(feature) !== -1
        ) {
          feature.setStyle(interaction.getStyle());
          return;
        }
      }

      const key = getUid(feature);
      feature.setStyle(originalFeatureStyles[key]);
      delete originalFeatureStyles[key];
    }

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    removeFeatureLayerAssociation_(feature) {
      delete this.featureLayerAssociation_[getUid(feature)];
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may change the
     * selected state of features.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @override
     */
    handleEvent(mapBrowserEvent) {
      if (!this.condition_(mapBrowserEvent)) {
        return true;
      }
      const add = this.addCondition_(mapBrowserEvent);
      const remove = this.removeCondition_(mapBrowserEvent);
      const toggle = this.toggleCondition_(mapBrowserEvent);
      const set = !add && !remove && !toggle;
      const map = mapBrowserEvent.map;
      const features = this.getFeatures();

      /**
       * @type {Array<Feature>}
       */
      const deselected = [];

      /**
       * @type {Array<Feature>}
       */
      const selected = [];

      if (set) {
        // Replace the currently selected feature(s) with the feature(s) at the
        // pixel, or clear the selected feature(s) if there is no feature at
        // the pixel.
        clear$2(this.featureLayerAssociation_);
        map.forEachFeatureAtPixel(
          mapBrowserEvent.pixel,
          /**
           * @param {import("../Feature.js").FeatureLike} feature Feature.
           * @param {import("../layer/Layer.js").default} layer Layer.
           * @return {boolean|undefined} Continue to iterate over the features.
           */
          (feature, layer) => {
            if (!(feature instanceof Feature) || !this.filter_(feature, layer)) {
              return;
            }
            this.addFeatureLayerAssociation_(feature, layer);
            selected.push(feature);
            return !this.multi_;
          },
          {
            layerFilter: this.layerFilter_,
            hitTolerance: this.hitTolerance_,
          },
        );
        for (let i = features.getLength() - 1; i >= 0; --i) {
          const feature = features.item(i);
          const index = selected.indexOf(feature);
          if (index > -1) {
            // feature is already selected
            selected.splice(index, 1);
          } else {
            features.remove(feature);
            deselected.push(feature);
          }
        }
        if (selected.length !== 0) {
          features.extend(selected);
        }
      } else {
        // Modify the currently selected feature(s).
        map.forEachFeatureAtPixel(
          mapBrowserEvent.pixel,
          /**
           * @param {import("../Feature.js").FeatureLike} feature Feature.
           * @param {import("../layer/Layer.js").default} layer Layer.
           * @return {boolean|undefined} Continue to iterate over the features.
           */
          (feature, layer) => {
            if (!(feature instanceof Feature) || !this.filter_(feature, layer)) {
              return;
            }
            if ((add || toggle) && !features.getArray().includes(feature)) {
              this.addFeatureLayerAssociation_(feature, layer);
              selected.push(feature);
            } else if (
              (remove || toggle) &&
              features.getArray().includes(feature)
            ) {
              deselected.push(feature);
              this.removeFeatureLayerAssociation_(feature);
            }
            return !this.multi_;
          },
          {
            layerFilter: this.layerFilter_,
            hitTolerance: this.hitTolerance_,
          },
        );
        for (let j = deselected.length - 1; j >= 0; --j) {
          features.remove(deselected[j]);
        }
        features.extend(selected);
      }
      if (selected.length > 0 || deselected.length > 0) {
        this.dispatchEvent(
          new SelectEvent(
            SelectEventType.SELECT,
            selected,
            deselected,
            mapBrowserEvent,
          ),
        );
      }
      return true;
    }
  }

  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction() {
    const styles = createEditingStyle();
    extend$3(styles['Polygon'], styles['LineString']);
    extend$3(styles['GeometryCollection'], styles['LineString']);

    return function (feature) {
      if (!feature.getGeometry()) {
        return null;
      }
      return styles[feature.getGeometry().getType()];
    };
  }

  /**
   * @module ol/events/SnapEvent
   */

  /**
   * @enum {string}
   */
  const SnapEventType = {
    /**
     * Triggered upon snapping to vertex or edge
     * @event SnapEvent#snap
     * @api
     */
    SNAP: 'snap',
    UNSNAP: 'unsnap',
  };

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Snap~Snap} instances are instances of this
   */
  class SnapEvent extends BaseEvent {
    /**
     * @param {SnapEventType} type Type.
     * @param {Object} options Options.
     * @param {import("../coordinate.js").Coordinate} options.vertex The snapped vertex.
     * @param {import("../coordinate.js").Coordinate} options.vertexPixel The pixel of the snapped vertex.
     * @param {import("../Feature.js").default} options.feature The feature being snapped.
     * @param {Array<import("../coordinate.js").Coordinate>|null} options.segment Segment, or `null` if snapped to a vertex.
     */
    constructor(type, options) {
      super(type);
      /**
       * The Map coordinate of the snapped point.
       * @type {import("../coordinate.js").Coordinate}
       * @api
       */
      this.vertex = options.vertex;
      /**
       * The Map pixel of the snapped point.
       * @type {Array<number>&Array<number>}
       * @api
       */
      this.vertexPixel = options.vertexPixel;
      /**
       * The feature closest to the snapped point.
       * @type {import("../Feature.js").default<import("../geom/Geometry.js").default>}
       * @api
       */
      this.feature = options.feature;
      /**
       * The segment closest to the snapped point, if snapped to a segment.
       * @type {Array<import("../coordinate.js").Coordinate>|null}
       * @api
       */
      this.segment = options.segment;
    }
  }

  /**
   * @module ol/interaction/Snap
   */

  /**
   * @typedef {Array<import("../coordinate.js").Coordinate>} Segment
   * An array of two coordinates representing a line segment, or an array of one
   * coordinate representing a point.
   */

  /**
   * @typedef {Object} SegmentData
   * @property {import("../Feature.js").default} feature Feature.
   * @property {Segment} segment Segment.
   * @property {boolean} [isIntersection] Is intersection.
   */

  /**
   * @template {import("../geom/Geometry.js").default} [GeometryType=import("../geom/Geometry.js").default]
   * @typedef {(geometry: GeometryType, projection?: import("../proj/Projection.js").default) => Array<Segment>} Segmenter
   * A function taking a {@link module:ol/geom/Geometry~Geometry} as argument and returning an array of {@link Segment}s.
   */

  /**
   * Each segmenter specified here will override the default segmenter for the
   * corresponding geometry type. To exclude all geometries of a specific geometry type from being snapped to,
   * set the segmenter to `null`.
   * @typedef {Object} Segmenters
   * @property {Segmenter<import("../geom/Point.js").default>|null} [Point] Point segmenter.
   * @property {Segmenter<import("../geom/LineString.js").default>|null} [LineString] LineString segmenter.
   * @property {Segmenter<import("../geom/Polygon.js").default>|null} [Polygon] Polygon segmenter.
   * @property {Segmenter<import("../geom/Circle.js").default>|null} [Circle] Circle segmenter.
   * @property {Segmenter<import("../geom/GeometryCollection.js").default>|null} [GeometryCollection] GeometryCollection segmenter.
   * @property {Segmenter<import("../geom/MultiPoint.js").default>|null} [MultiPoint] MultiPoint segmenter.
   * @property {Segmenter<import("../geom/MultiLineString.js").default>|null} [MultiLineString] MultiLineString segmenter.
   * @property {Segmenter<import("../geom/MultiPolygon.js").default>|null} [MultiPolygon] MultiPolygon segmenter.
   */

  /**
   * @typedef {Object} Options
   * @property {import("../Collection.js").default<import("../Feature.js").default>} [features] Snap to these features. Either this option or source should be provided.
   * @property {import("../source/Vector.js").default} [source] Snap to features from this source. Either this option or features should be provided
   * @property {boolean} [edge=true] Snap to edges.
   * @property {boolean} [vertex=true] Snap to vertices.
   * @property {boolean} [intersection=false] Snap to intersections between segments.
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the pointer close enough to a segment or
   * vertex for snapping.
   * @property {Segmenters} [segmenters] Custom segmenters by {@link module:ol/geom/Geometry~Type}. By default, the
   * following segmenters are used:
   *   - `Point`: A one-dimensional segment (e.g. `[[10, 20]]`) representing the point.
   *   - `LineString`: One two-dimensional segment (e.g. `[[10, 20], [30, 40]]`) for each segment of the linestring.
   *   - `Polygon`: One two-dimensional segment for each segment of the exterior ring and the interior rings.
   *   - `Circle`: One two-dimensional segment for each segment of a regular polygon with 32 points representing the circle circumference.
   *   - `GeometryCollection`: All segments of the contained geometries.
   *   - `MultiPoint`: One one-dimensional segment for each point.
   *   - `MultiLineString`: One two-dimensional segment for each segment of the linestrings.
   *   - `MultiPolygon`: One two-dimensional segment for each segment of the polygons.
   */

  /**
   * Information about the last snapped state.
   * @typedef {Object} SnappedInfo
   * @property {import("../coordinate.js").Coordinate|null} vertex - The snapped vertex.
   * @property {import("../pixel.js").Pixel|null} vertexPixel - The pixel of the snapped vertex.
   * @property {import("../Feature.js").default|null} feature - The feature being snapped.
   * @property {Segment|null} segment - Segment, or `null` if snapped to a vertex.
   */

  /***
   * @type {Object<string, Segmenter>}
   */
  const GEOMETRY_SEGMENTERS = {
    /**
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {Array<Segment>} Segments
     */
    Circle(geometry, projection) {
      let circleGeometry = geometry;
      const userProjection = getUserProjection();
      if (userProjection) {
        circleGeometry = circleGeometry
          .clone()
          .transform(userProjection, projection);
      }
      const polygon = fromCircle(circleGeometry);
      if (userProjection) {
        polygon.transform(projection, userProjection);
      }
      return GEOMETRY_SEGMENTERS.Polygon(polygon);
    },

    /**
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {Array<Segment>} Segments
     */
    GeometryCollection(geometry, projection) {
      /** @type {Array<Array<Segment>>} */
      const segments = [];
      const geometries = geometry.getGeometriesArray();
      for (let i = 0; i < geometries.length; ++i) {
        const segmenter = GEOMETRY_SEGMENTERS[geometries[i].getType()];
        if (segmenter) {
          segments.push(segmenter(geometries[i], projection));
        }
      }
      return segments.flat();
    },

    /**
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @return {Array<Segment>} Segments
     */
    LineString(geometry) {
      /** @type {Array<Segment>} */
      const segments = [];
      const coordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      for (let i = 0, ii = coordinates.length - stride; i < ii; i += stride) {
        segments.push([
          coordinates.slice(i, i + 2),
          coordinates.slice(i + stride, i + stride + 2),
        ]);
      }
      return segments;
    },

    /**
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @return {Array<Segment>} Segments
     */
    MultiLineString(geometry) {
      /** @type {Array<Segment>} */
      const segments = [];
      const coordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      const ends = geometry.getEnds();
      let offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        for (let j = offset, jj = end - stride; j < jj; j += stride) {
          segments.push([
            coordinates.slice(j, j + 2),
            coordinates.slice(j + stride, j + stride + 2),
          ]);
        }
        offset = end;
      }
      return segments;
    },

    /**
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @return {Array<Segment>} Segments
     */
    MultiPoint(geometry) {
      /** @type {Array<Segment>} */
      const segments = [];
      const coordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      for (let i = 0, ii = coordinates.length - stride; i < ii; i += stride) {
        segments.push([coordinates.slice(i, i + 2)]);
      }
      return segments;
    },

    /**
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @return {Array<Segment>} Segments
     */
    MultiPolygon(geometry) {
      /** @type {Array<Segment>} */
      const segments = [];
      const coordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      const endss = geometry.getEndss();
      let offset = 0;
      for (let i = 0, ii = endss.length; i < ii; ++i) {
        const ends = endss[i];
        for (let j = 0, jj = ends.length; j < jj; ++j) {
          const end = ends[j];
          for (let k = offset, kk = end - stride; k < kk; k += stride) {
            segments.push([
              coordinates.slice(k, k + 2),
              coordinates.slice(k + stride, k + stride + 2),
            ]);
          }
          offset = end;
        }
      }
      return segments;
    },

    /**
     * @param {import("../geom/Point.js").default} geometry Geometry.
     * @return {Array<Segment>} Segments
     */
    Point(geometry) {
      return [[geometry.getFlatCoordinates().slice(0, 2)]];
    },

    /**
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @return {Array<Segment>} Segments
     */
    Polygon(geometry) {
      /** @type {Array<Segment>} */
      const segments = [];
      const coordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      const ends = geometry.getEnds();
      let offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        for (let j = offset, jj = end - stride; j < jj; j += stride) {
          segments.push([
            coordinates.slice(j, j + 2),
            coordinates.slice(j + stride, j + stride + 2),
          ]);
        }
        offset = end;
      }
      return segments;
    },
  };

  /**
   * @param  {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent<import("../Feature.js").default>} evt Event.
   * @return {import("../Feature.js").default|null} Feature.
   */
  function getFeatureFromEvent(evt) {
    if (
      /** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt).feature
    ) {
      return /** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt)
        .feature;
    }
    if (
      /** @type {import("../Collection.js").CollectionEvent<import("../Feature.js").default>} */ (
        evt
      ).element
    ) {
      return /** @type {import("../Collection.js").CollectionEvent<import("../Feature.js").default>} */ (
        evt
      ).element;
    }
    return null;
  }

  const tempSegment = [];
  /** @type {Array<import('../extent.js').Extent>} */
  const tempExtents = [];
  /** @type {Array<SegmentData>} */
  const tempSegmentData = [];

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'snap'|'unsnap', SnapEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'snap'|'unsnap', Return>} SnapOnSignature
   */

  /**
   * @classdesc
   * Handles snapping of vector features while modifying or drawing them.  The
   * features can come from a {@link module:ol/source/Vector~VectorSource} or {@link module:ol/Collection~Collection}
   * Any interaction object that allows the user to interact
   * with the features using the mouse can benefit from the snapping, as long
   * as it is added before.
   *
   * The snap interaction modifies map browser event `coordinate` and `pixel`
   * properties to force the snap to occur to any interaction that uses them.
   *
   * Example:
   *
   *     import Snap from 'ol/interaction/Snap.js';
   *
   *     const snap = new Snap({
   *       source: source
   *     });
   *
   *     map.addInteraction(snap);
   *
   * @fires SnapEvent
   * @api
   */
  class Snap extends PointerInteraction {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (
        options
      );

      if (!pointerOptions.handleDownEvent) {
        pointerOptions.handleDownEvent = TRUE;
      }

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /***
       * @type {SnapOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {SnapOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {SnapOnSignature<void>}
       */
      this.un;

      /**
       * @type {import("../source/Vector.js").default|null}
       * @private
       */
      this.source_ = options.source ? options.source : null;

      /**
       * @private
       * @type {boolean}
       */
      this.vertex_ = options.vertex !== undefined ? options.vertex : true;

      /**
       * @private
       * @type {boolean}
       */
      this.edge_ = options.edge !== undefined ? options.edge : true;

      /**
       * @private
       * @type {boolean}
       */
      this.intersection_ =
        options.intersection !== undefined ? options.intersection : false;

      /**
       * @type {import("../Collection.js").default<import("../Feature.js").default>|null}
       * @private
       */
      this.features_ = options.features ? options.features : null;

      /**
       * @type {Array<import("../events.js").EventsKey>}
       * @private
       */
      this.featuresListenerKeys_ = [];

      /**
       * @type {Object<string, import("../events.js").EventsKey>}
       * @private
       */
      this.featureChangeListenerKeys_ = {};

      /**
       * Extents are preserved so indexed segment can be quickly removed
       * when its feature geometry changes
       * @type {Object<string, import("../extent.js").Extent>}
       * @private
       */
      this.indexedFeaturesExtents_ = {};

      /**
       * If a feature geometry changes while a pointer drag|move event occurs, the
       * feature doesn't get updated right away.  It will be at the next 'pointerup'
       * event fired.
       * @type {!Object<string, import("../Feature.js").default>}
       * @private
       */
      this.pendingFeatures_ = {};

      /**
       * @type {number}
       * @private
       */
      this.pixelTolerance_ =
        options.pixelTolerance !== undefined ? options.pixelTolerance : 10;

      /**
       * Segment RTree for each layer
       * @type {import("../structs/RBush.js").default<SegmentData>}
       * @private
       */
      this.rBush_ = new RBush();

      /**
       * Holds information about the last snapped state.
       * @type {SnappedInfo|null}
       * @private
       */
      this.snapped_ = null;

      /**
       * @type {Object<string, Segmenter>}
       * @private
       */
      this.segmenters_ = Object.assign(
        {},
        GEOMETRY_SEGMENTERS,
        options.segmenters,
      );
    }

    /**
     * Add a feature to the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {boolean} [register] Whether to listen to the feature change or not
     *     Defaults to `true`.
     * @api
     */
    addFeature(feature, register) {
      register = register !== undefined ? register : true;
      const feature_uid = getUid(feature);
      const geometry = feature.getGeometry();
      if (geometry) {
        const segmenter = this.segmenters_[geometry.getType()];
        if (segmenter) {
          this.indexedFeaturesExtents_[feature_uid] =
            geometry.getExtent(createEmpty());
          const segments = segmenter(
            geometry,
            this.getMap().getView().getProjection(),
          );
          let segmentCount = segments.length;
          for (let i = 0; i < segmentCount; ++i) {
            const segment = segments[i];
            tempExtents[i] = boundingExtent(segment);
            tempSegmentData[i] = {
              feature: feature,
              segment: segment,
            };
          }
          tempExtents.length = segmentCount;
          tempSegmentData.length = segmentCount;

          if (this.intersection_) {
            for (let j = 0, jj = segments.length; j < jj; ++j) {
              const segment = segments[j];
              if (segment.length === 1) {
                continue;
              }
              const extent = tempExtents[j];
              // Calculate intersections with own segments
              for (let k = 0, kk = segments.length; k < kk; ++k) {
                if (j === k || j - 1 === k || j + 1 === k) {
                  // Exclude self and neighbours
                  continue;
                }
                const otherSegment = segments[k];
                if (!intersects$1(extent, tempExtents[k])) {
                  continue;
                }
                const intersection = getIntersectionPoint(segment, otherSegment);
                if (!intersection) {
                  continue;
                }
                const intersectionSegment = [intersection];
                tempExtents[segmentCount] = boundingExtent(intersectionSegment);
                tempSegmentData[segmentCount++] = {
                  feature,
                  segment: intersectionSegment,
                  isIntersection: true,
                };
              }
              // Calculate intersections with existing segments
              const otherSegments = this.rBush_.getInExtent(tempExtents[j]);
              for (const {segment: otherSegment} of otherSegments) {
                if (otherSegment.length === 1) {
                  continue;
                }
                const intersection = getIntersectionPoint(segment, otherSegment);
                if (!intersection) {
                  continue;
                }
                const intersectionSegment = [intersection];
                tempExtents[segmentCount] = boundingExtent(intersectionSegment);
                tempSegmentData[segmentCount++] = {
                  feature,
                  segment: intersectionSegment,
                  isIntersection: true,
                };
              }
            }
          }

          if (segmentCount === 1) {
            this.rBush_.insert(tempExtents[0], tempSegmentData[0]);
          } else {
            this.rBush_.load(tempExtents, tempSegmentData);
          }
        }
      }

      if (register) {
        this.featureChangeListenerKeys_[feature_uid] = listen(
          feature,
          EventType.CHANGE,
          this.handleFeatureChange_,
          this,
        );
      }
    }

    /**
     * @return {import("../Collection.js").default<import("../Feature.js").default>|Array<import("../Feature.js").default>} Features.
     * @private
     */
    getFeatures_() {
      /** @type {import("../Collection.js").default<import("../Feature.js").default>|Array<import("../Feature.js").default>} */
      let features;
      if (this.features_) {
        features = this.features_;
      } else if (this.source_) {
        features = this.source_.getFeatures();
      }
      return features;
    }

    /**
     * Checks if two snap data sets are equal.
     * Compares the segment and the feature.
     *
     * @param {SnappedInfo} data1 The first snap data set.
     * @param {SnappedInfo} data2 The second snap data set.
     * @return {boolean} `true` if the data sets are equal, otherwise `false`.
     * @private
     */
    areSnapDataEqual_(data1, data2) {
      return data1.segment === data2.segment && data1.feature === data2.feature;
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} evt Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     * @override
     */
    handleEvent(evt) {
      const result = this.snapTo(evt.pixel, evt.coordinate, evt.map);

      if (result) {
        evt.coordinate = result.vertex.slice(0, 2);
        evt.pixel = result.vertexPixel;

        // Dispatch UNSNAP event if already snapped
        if (this.snapped_ && !this.areSnapDataEqual_(this.snapped_, result)) {
          this.dispatchEvent(new SnapEvent(SnapEventType.UNSNAP, this.snapped_));
        }

        this.snapped_ = {
          vertex: evt.coordinate,
          vertexPixel: evt.pixel,
          feature: result.feature,
          segment: result.segment,
        };
        this.dispatchEvent(new SnapEvent(SnapEventType.SNAP, this.snapped_));
      } else if (this.snapped_) {
        // Dispatch UNSNAP event if no longer snapped
        this.dispatchEvent(new SnapEvent(SnapEventType.UNSNAP, this.snapped_));
        this.snapped_ = null;
      }

      return super.handleEvent(evt);
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent<import("../Feature.js").default>} evt Event.
     * @private
     */
    handleFeatureAdd_(evt) {
      const feature = getFeatureFromEvent(evt);
      if (feature) {
        this.addFeature(feature);
      }
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent<import("../Feature.js").default>} evt Event.
     * @private
     */
    handleFeatureRemove_(evt) {
      const feature = getFeatureFromEvent(evt);
      if (feature) {
        this.removeFeature(feature);
      }
    }

    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */
    handleFeatureChange_(evt) {
      const feature = /** @type {import("../Feature.js").default} */ (evt.target);
      if (this.handlingDownUpSequence) {
        const uid = getUid(feature);
        if (!(uid in this.pendingFeatures_)) {
          this.pendingFeatures_[uid] = feature;
        }
      } else {
        this.updateFeature_(feature);
      }
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @return {boolean} If the event was consumed.
     * @override
     */
    handleUpEvent(evt) {
      const featuresToUpdate = Object.values(this.pendingFeatures_);
      if (featuresToUpdate.length) {
        for (const feature of featuresToUpdate) {
          this.updateFeature_(feature);
        }
      }
      return false;
    }

    /**
     * Remove a feature from the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature
     * @param {boolean} [unlisten] Whether to unlisten to the feature change
     *     or not. Defaults to `true`.
     * @api
     */
    removeFeature(feature, unlisten) {
      const unregister = unlisten !== undefined ? unlisten : true;
      const feature_uid = getUid(feature);
      const extent = this.indexedFeaturesExtents_[feature_uid];
      if (extent) {
        const rBush = this.rBush_;
        const nodesToRemove = [];
        rBush.forEachInExtent(extent, function (node) {
          if (feature === node.feature) {
            nodesToRemove.push(node);
          }
        });
        for (let i = nodesToRemove.length - 1; i >= 0; --i) {
          rBush.remove(nodesToRemove[i]);
        }
      }

      if (unregister) {
        unlistenByKey(this.featureChangeListenerKeys_[feature_uid]);
        delete this.featureChangeListenerKeys_[feature_uid];
      }
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default} map Map.
     * @override
     */
    setMap(map) {
      const currentMap = this.getMap();
      const keys = this.featuresListenerKeys_;
      let features = this.getFeatures_();
      if (!Array.isArray(features)) {
        features = features.getArray();
      }

      if (currentMap) {
        keys.forEach(unlistenByKey);
        keys.length = 0;
        this.rBush_.clear();
        Object.values(this.featureChangeListenerKeys_).forEach(unlistenByKey);
        this.featureChangeListenerKeys_ = {};
      }
      super.setMap(map);

      if (map) {
        if (this.features_) {
          keys.push(
            listen(
              this.features_,
              CollectionEventType.ADD,
              this.handleFeatureAdd_,
              this,
            ),
            listen(
              this.features_,
              CollectionEventType.REMOVE,
              this.handleFeatureRemove_,
              this,
            ),
          );
        } else if (this.source_) {
          keys.push(
            listen(
              this.source_,
              VectorEventType.ADDFEATURE,
              this.handleFeatureAdd_,
              this,
            ),
            listen(
              this.source_,
              VectorEventType.REMOVEFEATURE,
              this.handleFeatureRemove_,
              this,
            ),
          );
        }
        for (const feature of features) {
          this.addFeature(feature);
        }
      }
    }

    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel
     * @param {import("../coordinate.js").Coordinate} pixelCoordinate Coordinate
     * @param {import("../Map.js").default} map Map.
     * @return {SnappedInfo|null} Snap result
     */
    snapTo(pixel, pixelCoordinate, map) {
      const projection = map.getView().getProjection();
      const projectedCoordinate = fromUserCoordinate(pixelCoordinate, projection);

      const box = toUserExtent(
        buffer(
          boundingExtent([projectedCoordinate]),
          map.getView().getResolution() * this.pixelTolerance_,
        ),
        projection,
      );

      const segments = this.rBush_.getInExtent(box);
      const segmentsLength = segments.length;
      if (segmentsLength === 0) {
        return null;
      }

      let closestVertex;
      let minSquaredDistance = Infinity;
      let closestFeature;
      let closestSegment = null;
      let isIntersection;

      const squaredPixelTolerance = this.pixelTolerance_ * this.pixelTolerance_;
      const getResult = () => {
        if (closestVertex) {
          const vertexPixel = map.getPixelFromCoordinate(closestVertex);
          const squaredPixelDistance = squaredDistance(pixel, vertexPixel);
          if (
            squaredPixelDistance <= squaredPixelTolerance &&
            ((isIntersection && this.intersection_) ||
              (!isIntersection && (this.vertex_ || this.edge_)))
          ) {
            return {
              vertex: closestVertex,
              vertexPixel: [
                Math.round(vertexPixel[0]),
                Math.round(vertexPixel[1]),
              ],
              feature: closestFeature,
              segment: closestSegment,
            };
          }
        }
        return null;
      };

      if (this.vertex_ || this.intersection_) {
        for (let i = 0; i < segmentsLength; ++i) {
          const segmentData = segments[i];
          if (segmentData.feature.getGeometry().getType() !== 'Circle') {
            for (const vertex of segmentData.segment) {
              const tempVertexCoord = fromUserCoordinate(vertex, projection);
              const delta = squaredDistance(projectedCoordinate, tempVertexCoord);
              if (delta < minSquaredDistance) {
                closestVertex = vertex;
                minSquaredDistance = delta;
                closestFeature = segmentData.feature;
                isIntersection = segmentData.isIntersection;
              }
            }
          }
        }
        const result = getResult();
        if (result) {
          return result;
        }
      }

      if (this.edge_) {
        for (let i = 0; i < segmentsLength; ++i) {
          let vertex = null;
          const segmentData = segments[i];
          if (segmentData.feature.getGeometry().getType() === 'Circle') {
            let circleGeometry = segmentData.feature.getGeometry();
            const userProjection = getUserProjection();
            if (userProjection) {
              circleGeometry = circleGeometry
                .clone()
                .transform(userProjection, projection);
            }
            vertex = closestOnCircle(
              projectedCoordinate,
              /** @type {import("../geom/Circle.js").default} */ (circleGeometry),
            );
          } else {
            const [segmentStart, segmentEnd] = segmentData.segment;
            // points have only one coordinate
            if (segmentEnd) {
              tempSegment[0] = fromUserCoordinate(segmentStart, projection);
              tempSegment[1] = fromUserCoordinate(segmentEnd, projection);
              vertex = closestOnSegment(projectedCoordinate, tempSegment);
            }
          }
          if (vertex) {
            const delta = squaredDistance(projectedCoordinate, vertex);
            if (delta < minSquaredDistance) {
              closestVertex = toUserCoordinate(vertex, projection);
              closestSegment =
                segmentData.feature.getGeometry().getType() === 'Circle'
                  ? null
                  : segmentData.segment;
              minSquaredDistance = delta;
              closestFeature = segmentData.feature;
            }
          }
        }

        const result = getResult();
        if (result) {
          return result;
        }
      }

      return null;
    }

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @private
     */
    updateFeature_(feature) {
      this.removeFeature(feature, false);
      this.addFeature(feature, false);
    }
  }

  /**
   * @module ol/Tile
   */

  /**
   * A function that takes a {@link module:ol/Tile~Tile} for the tile and a
   * `{string}` for the url as arguments. The default is
   * ```js
   * source.setTileLoadFunction(function(tile, src) {
   *   tile.getImage().src = src;
   * });
   * ```
   * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
   * error handling:
   *
   * ```js
   * import TileState from 'ol/TileState.js';
   *
   * source.setTileLoadFunction(function(tile, src) {
   *   const xhr = new XMLHttpRequest();
   *   xhr.responseType = 'blob';
   *   xhr.addEventListener('loadend', function (evt) {
   *     const data = this.response;
   *     if (data !== undefined) {
   *       tile.getImage().src = URL.createObjectURL(data);
   *     } else {
   *       tile.setState(TileState.ERROR);
   *     }
   *   });
   *   xhr.addEventListener('error', function () {
   *     tile.setState(TileState.ERROR);
   *   });
   *   xhr.open('GET', src);
   *   xhr.send();
   * });
   * ```
   *
   * @typedef {function(Tile, string): void} LoadFunction
   * @api
   */

  /**
   * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get
   * the url that provides a tile for a given tile coordinate.
   *
   * This function takes a {@link module:ol/tilecoord~TileCoord} for the tile
   * coordinate, a `{number}` representing the pixel ratio and a
   * {@link module:ol/proj/Projection~Projection} for the projection  as arguments
   * and returns a `{string}` representing the tile URL, or undefined if no tile
   * should be requested for the passed tile coordinate.
   *
   * @typedef {function(import("./tilecoord.js").TileCoord, number,
   *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
   * @api
   */

  /**
   * @typedef {Object} Options
   * @property {number} [transition=250] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   * @api
   */

  /**
   * @classdesc
   * Base class for tiles.
   *
   * @abstract
   */
  class Tile extends Target {
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("./TileState.js").default} state State.
     * @param {Options} [options] Tile options.
     */
    constructor(tileCoord, state, options) {
      super();

      options = options ? options : {};

      /**
       * @type {import("./tilecoord.js").TileCoord}
       */
      this.tileCoord = tileCoord;

      /**
       * @protected
       * @type {import("./TileState.js").default}
       */
      this.state = state;

      /**
       * A key assigned to the tile. This is used in conjunction with a source key
       * to determine if a cached version of this tile may be used by the renderer.
       * @type {string}
       */
      this.key = '';

      /**
       * The duration for the opacity transition.
       * @private
       * @type {number}
       */
      this.transition_ =
        options.transition === undefined ? 250 : options.transition;

      /**
       * Lookup of start times for rendering transitions.  If the start time is
       * equal to -1, the transition is complete.
       * @private
       * @type {Object<string, number>}
       */
      this.transitionStarts_ = {};

      /**
       * @type {boolean}
       */
      this.interpolate = !!options.interpolate;
    }

    /**
     * @protected
     */
    changed() {
      this.dispatchEvent(EventType.CHANGE);
    }

    /**
     * Called by the tile cache when the tile is removed from the cache due to expiry
     */
    release() {
      // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`
      this.setState(TileState.EMPTY);
    }

    /**
     * @return {string} Key.
     */
    getKey() {
      return this.key + '/' + this.tileCoord;
    }

    /**
     * Get the tile coordinate for this tile.
     * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
     * @api
     */
    getTileCoord() {
      return this.tileCoord;
    }

    /**
     * @return {import("./TileState.js").default} State.
     */
    getState() {
      return this.state;
    }

    /**
     * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
     * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
     * when the tile cannot be loaded. Otherwise the tile cannot be removed from
     * the tile queue and will block other requests.
     * @param {import("./TileState.js").default} state State.
     * @api
     */
    setState(state) {
      if (this.state === TileState.EMPTY) {
        // no more state changes
        return;
      }
      if (this.state !== TileState.ERROR && this.state > state) {
        throw new Error('Tile load sequence violation');
      }
      this.state = state;
      this.changed();
    }

    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     * @abstract
     * @api
     */
    load() {
      abstract();
    }

    /**
     * Get the alpha value for rendering.
     * @param {string} id An id for the renderer.
     * @param {number} time The render frame time.
     * @return {number} A number between 0 and 1.
     */
    getAlpha(id, time) {
      if (!this.transition_) {
        return 1;
      }

      let start = this.transitionStarts_[id];
      if (!start) {
        start = time;
        this.transitionStarts_[id] = start;
      } else if (start === -1) {
        return 1;
      }

      const delta = time - start + 1000 / 60; // avoid rendering at 0
      if (delta >= this.transition_) {
        return 1;
      }
      return easeIn(delta / this.transition_);
    }

    /**
     * Determine if a tile is in an alpha transition.  A tile is considered in
     * transition if tile.getAlpha() has not yet been called or has been called
     * and returned 1.
     * @param {string} id An id for the renderer.
     * @return {boolean} The tile is in transition.
     */
    inTransition(id) {
      if (!this.transition_) {
        return false;
      }
      return this.transitionStarts_[id] !== -1;
    }

    /**
     * Mark a transition as complete.
     * @param {string} id An id for the renderer.
     */
    endTransition(id) {
      if (this.transition_) {
        this.transitionStarts_[id] = -1;
      }
    }

    /**
     * @override
     */
    disposeInternal() {
      this.release();
      super.disposeInternal();
    }
  }

  /**
   * @module ol/DataTile
   */

  /**
   * @typedef {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap} ImageLike
   */

  /**
   * @typedef {Uint8Array|Uint8ClampedArray|Float32Array|DataView} ArrayLike
   */

  /**
   * Data that can be used with a DataTile.
   * @typedef {ArrayLike|ImageLike} Data
   */

  /**
   * @param {Data} data Tile data.
   * @return {ImageLike|null} The image-like data.
   */
  function asImageLike(data) {
    return data instanceof Image ||
      data instanceof HTMLCanvasElement ||
      data instanceof HTMLVideoElement ||
      data instanceof ImageBitmap
      ? data
      : null;
  }

  /**
   * This is set as the cancellation reason when a tile is disposed.
   */
  const disposedError = new Error('disposed');

  /**
   * @type {import('./size.js').Size}
   */
  const defaultSize = [256, 256];

  /**
   * @typedef {Object} Options
   * @property {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @property {function(): Promise<Data>} loader Data loader.  For loaders that generate images,
   * the promise should not resolve until the image is loaded.
   * @property {number} [transition=250] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   * @property {import('./size.js').Size} [size=[256, 256]] Tile size.
   * @property {AbortController} [controller] An abort controller.
   * @api
   */

  class DataTile extends Tile {
    /**
     * @param {Options} options Tile options.
     */
    constructor(options) {
      const state = TileState.IDLE;

      super(options.tileCoord, state, {
        transition: options.transition,
        interpolate: options.interpolate,
      });

      /**
       * @type {function(): Promise<Data>}
       * @private
       */
      this.loader_ = options.loader;

      /**
       * @type {Data}
       * @private
       */
      this.data_ = null;

      /**
       * @type {Error}
       * @private
       */
      this.error_ = null;

      /**
       * @type {import('./size.js').Size|null}
       * @private
       */
      this.size_ = options.size || null;

      /**
       * @type {AbortController|null}
       * @private
       */
      this.controller_ = options.controller || null;
    }

    /**
     * Get the tile size.
     * @return {import('./size.js').Size} Tile size.
     */
    getSize() {
      if (this.size_) {
        return this.size_;
      }
      const imageData = asImageLike(this.data_);
      if (imageData) {
        return [imageData.width, imageData.height];
      }
      return defaultSize;
    }

    /**
     * Get the data for the tile.
     * @return {Data} Tile data.
     * @api
     */
    getData() {
      return this.data_;
    }

    /**
     * Get any loading error.
     * @return {Error} Loading error.
     * @api
     */
    getError() {
      return this.error_;
    }

    /**
     * Load the tile data.
     * @api
     * @override
     */
    load() {
      if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {
        return;
      }
      this.state = TileState.LOADING;
      this.changed();

      const self = this;
      this.loader_()
        .then(function (data) {
          self.data_ = data;
          self.state = TileState.LOADED;
          self.changed();
        })
        .catch(function (error) {
          self.error_ = error;
          self.state = TileState.ERROR;
          self.changed();
        });
    }

    /**
     * Clean up.
     * @override
     */
    disposeInternal() {
      if (this.controller_) {
        this.controller_.abort(disposedError);
        this.controller_ = null;
      }
      super.disposeInternal();
    }
  }

  /**
   * @module ol/ImageTile
   */

  class ImageTile extends Tile {
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("./TileState.js").default} state State.
     * @param {string} src Image source URI.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @param {import("./Tile.js").Options} [options] Tile options.
     */
    constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options) {
      super(tileCoord, state, options);

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ = crossOrigin;

      /**
       * Image URI
       *
       * @private
       * @type {string}
       */
      this.src_ = src;

      this.key = src;

      /**
       * @private
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      this.image_ = new Image();
      if (crossOrigin !== null) {
        this.image_.crossOrigin = crossOrigin;
      }

      /**
       * @private
       * @type {?function():void}
       */
      this.unlisten_ = null;

      /**
       * @private
       * @type {import("./Tile.js").LoadFunction}
       */
      this.tileLoadFunction_ = tileLoadFunction;
    }

    /**
     * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @api
     */
    getImage() {
      return this.image_;
    }

    /**
     * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).
     * @param {HTMLCanvasElement|HTMLImageElement} element Element.
     */
    setImage(element) {
      this.image_ = element;
      this.state = TileState.LOADED;
      this.unlistenImage_();
      this.changed();
    }

    /**
     * Tracks loading or read errors.
     *
     * @private
     */
    handleImageError_() {
      this.state = TileState.ERROR;
      this.unlistenImage_();
      this.image_ = getBlankImage();
      this.changed();
    }

    /**
     * Tracks successful image load.
     *
     * @private
     */
    handleImageLoad_() {
      const image = /** @type {HTMLImageElement} */ (this.image_);
      if (image.naturalWidth && image.naturalHeight) {
        this.state = TileState.LOADED;
      } else {
        this.state = TileState.EMPTY;
      }
      this.unlistenImage_();
      this.changed();
    }

    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     *
     * To retry loading tiles on failed requests, use a custom `tileLoadFunction`
     * that checks for error status codes and reloads only when the status code is
     * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been
     * made already:
     *
     * ```js
     * const retryCodes = [408, 429, 500, 502, 503, 504];
     * const retries = {};
     * source.setTileLoadFunction((tile, src) => {
     *   const image = tile.getImage();
     *   fetch(src)
     *     .then((response) => {
     *       if (retryCodes.includes(response.status)) {
     *         retries[src] = (retries[src] || 0) + 1;
     *         if (retries[src] <= 3) {
     *           setTimeout(() => tile.load(), retries[src] * 1000);
     *         }
     *         return Promise.reject();
     *       }
     *       return response.blob();
     *     })
     *     .then((blob) => {
     *       const imageUrl = URL.createObjectURL(blob);
     *       image.src = imageUrl;
     *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);
     *     })
     *     .catch(() => tile.setState(3)); // error
     * });
     * ```
     * @api
     * @override
     */
    load() {
      if (this.state == TileState.ERROR) {
        this.state = TileState.IDLE;
        this.image_ = new Image();
        if (this.crossOrigin_ !== null) {
          this.image_.crossOrigin = this.crossOrigin_;
        }
      }
      if (this.state == TileState.IDLE) {
        this.state = TileState.LOADING;
        this.changed();
        this.tileLoadFunction_(this, this.src_);
        this.unlisten_ = listenImage(
          this.image_,
          this.handleImageLoad_.bind(this),
          this.handleImageError_.bind(this),
        );
      }
    }

    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */
    unlistenImage_() {
      if (this.unlisten_) {
        this.unlisten_();
        this.unlisten_ = null;
      }
    }

    /**
     * @override
     */
    disposeInternal() {
      this.unlistenImage_();
      this.image_ = null;
      super.disposeInternal();
    }
  }

  /**
   * Get a 1-pixel blank image.
   * @return {HTMLCanvasElement} Blank image.
   */
  function getBlankImage() {
    const ctx = createCanvasContext2D(1, 1);
    ctx.fillStyle = 'rgba(0,0,0,0)';
    ctx.fillRect(0, 0, 1, 1);
    return ctx.canvas;
  }

  /**
   * @module ol/reproj
   */

  let brokenDiagonalRendering_;

  /**
   * @type {Array<HTMLCanvasElement>}
   */
  const canvasPool = [];

  /**
   * This draws a small triangle into a canvas by setting the triangle as the clip region
   * and then drawing a (too large) rectangle
   *
   * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle
   * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.
   * @param {number} v1 The y-coordinate of the second point.
   * @param {number} u2 The x-coordinate of the third point.
   * @param {number} v2 The y-coordinate of the third point.
   */
  function drawTestTriangle(ctx, u1, v1, u2, v2) {
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(u1, v1);
    ctx.lineTo(u2, v2);
    ctx.closePath();
    ctx.save();
    ctx.clip();
    ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));
    ctx.restore();
  }

  /**
   * Given the data from getImageData, see if the right values appear at the provided offset.
   * Returns true if either the color or transparency is off
   *
   * @param {Uint8ClampedArray} data The data returned from getImageData
   * @param {number} offset The pixel offset from the start of data.
   * @return {boolean} true if the diagonal rendering is broken
   */
  function verifyBrokenDiagonalRendering(data, offset) {
    // the values ought to be close to the rgba(210, 0, 0, 0.75)
    return (
      Math.abs(data[offset * 4] - 210) > 2 ||
      Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2
    );
  }

  /**
   * Determines if the current browser configuration can render triangular clip regions correctly.
   * This value is cached so the function is only expensive the first time called.
   * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976
   * Chrome works, and everything seems to work on OSX and Android. This function caches the
   * result. I suppose that it is conceivably possible that a browser might flip modes while the app is
   * running, but lets hope not.
   *
   * @return {boolean} true if the Diagonal Rendering is broken.
   */
  function isBrokenDiagonalRendering() {
    if (brokenDiagonalRendering_ === undefined) {
      const ctx = createCanvasContext2D(6, 6, canvasPool);
      ctx.globalCompositeOperation = 'lighter';
      ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';
      drawTestTriangle(ctx, 4, 5, 4, 0);
      drawTestTriangle(ctx, 4, 5, 0, 5);
      const data = ctx.getImageData(0, 0, 3, 3).data;
      brokenDiagonalRendering_ =
        verifyBrokenDiagonalRendering(data, 0) ||
        verifyBrokenDiagonalRendering(data, 4) ||
        verifyBrokenDiagonalRendering(data, 8);
      releaseCanvas(ctx);
      canvasPool.push(ctx.canvas);
    }

    return brokenDiagonalRendering_;
  }

  /**
   * Calculates ideal resolution to use from the source in order to achieve
   * pixel mapping as close as possible to 1:1 during reprojection.
   * The resolution is calculated regardless of what resolutions
   * are actually available in the dataset (TileGrid, Image, ...).
   *
   * @param {import("./proj/Projection.js").default} sourceProj Source projection.
   * @param {import("./proj/Projection.js").default} targetProj Target projection.
   * @param {import("./coordinate.js").Coordinate} targetCenter Target center.
   * @param {number} targetResolution Target resolution.
   * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
   */
  function calculateSourceResolution(
    sourceProj,
    targetProj,
    targetCenter,
    targetResolution,
  ) {
    const sourceCenter = transform$1(targetCenter, targetProj, sourceProj);

    // calculate the ideal resolution of the source data
    let sourceResolution = getPointResolution(
      targetProj,
      targetResolution,
      targetCenter,
    );

    const targetMetersPerUnit = targetProj.getMetersPerUnit();
    if (targetMetersPerUnit !== undefined) {
      sourceResolution *= targetMetersPerUnit;
    }
    const sourceMetersPerUnit = sourceProj.getMetersPerUnit();
    if (sourceMetersPerUnit !== undefined) {
      sourceResolution /= sourceMetersPerUnit;
    }

    // Based on the projection properties, the point resolution at the specified
    // coordinates may be slightly different. We need to reverse-compensate this
    // in order to achieve optimal results.

    const sourceExtent = sourceProj.getExtent();
    if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {
      const compensationFactor =
        getPointResolution(sourceProj, sourceResolution, sourceCenter) /
        sourceResolution;
      if (isFinite(compensationFactor) && compensationFactor > 0) {
        sourceResolution /= compensationFactor;
      }
    }

    return sourceResolution;
  }

  /**
   * Calculates ideal resolution to use from the source in order to achieve
   * pixel mapping as close as possible to 1:1 during reprojection.
   * The resolution is calculated regardless of what resolutions
   * are actually available in the dataset (TileGrid, Image, ...).
   *
   * @param {import("./proj/Projection.js").default} sourceProj Source projection.
   * @param {import("./proj/Projection.js").default} targetProj Target projection.
   * @param {import("./extent.js").Extent} targetExtent Target extent
   * @param {number} targetResolution Target resolution.
   * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
   */
  function calculateSourceExtentResolution(
    sourceProj,
    targetProj,
    targetExtent,
    targetResolution,
  ) {
    const targetCenter = getCenter(targetExtent);
    let sourceResolution = calculateSourceResolution(
      sourceProj,
      targetProj,
      targetCenter,
      targetResolution,
    );

    if (!isFinite(sourceResolution) || sourceResolution <= 0) {
      forEachCorner(targetExtent, function (corner) {
        sourceResolution = calculateSourceResolution(
          sourceProj,
          targetProj,
          corner,
          targetResolution,
        );
        return isFinite(sourceResolution) && sourceResolution > 0;
      });
    }

    return sourceResolution;
  }

  /**
   * @typedef {Object} ImageExtent
   * @property {import("./extent.js").Extent} extent Extent.
   * @property {import("./extent.js").Extent} [clipExtent] Clip extent.
   * @property {import('./DataTile.js').ImageLike} image Image.
   */

  /**
   * Renders the source data into new canvas based on the triangulation.
   *
   * @param {number} width Width of the canvas.
   * @param {number} height Height of the canvas.
   * @param {number} pixelRatio Pixel ratio.
   * @param {number} sourceResolution Source resolution.
   * @param {import("./extent.js").Extent} sourceExtent Extent of the data source.
   * @param {number} targetResolution Target resolution.
   * @param {import("./extent.js").Extent} targetExtent Target extent.
   * @param {import("./reproj/Triangulation.js").default} triangulation Calculated triangulation.
   * @param {Array<ImageExtent>} sources Array of sources.
   * @param {number} gutter Gutter of the sources.
   * @param {boolean} [renderEdges] Render reprojection edges.
   * @param {boolean} [interpolate] Use linear interpolation when resampling.
   * @param {boolean} [drawSingle] Draw single source images directly without stitchContext.
   * @param {boolean} [clipExtent] Clip stitchContext to sourceExtent.
   * @return {HTMLCanvasElement} Canvas with reprojected data.
   */
  function render(
    width,
    height,
    pixelRatio,
    sourceResolution,
    sourceExtent,
    targetResolution,
    targetExtent,
    triangulation,
    sources,
    gutter,
    renderEdges,
    interpolate,
    drawSingle,
    clipExtent,
  ) {
    const context = createCanvasContext2D(
      Math.round(pixelRatio * width),
      Math.round(pixelRatio * height),
      canvasPool,
    );

    if (!interpolate) {
      context.imageSmoothingEnabled = false;
    }

    if (sources.length === 0) {
      return context.canvas;
    }

    context.scale(pixelRatio, pixelRatio);

    function pixelRound(value) {
      return Math.round(value * pixelRatio) / pixelRatio;
    }

    context.globalCompositeOperation = 'lighter';

    const sourceDataExtent = createEmpty();
    sources.forEach(function (src, i, arr) {
      extend$2(sourceDataExtent, src.extent);
    });

    let stitchContext;
    const stitchScale = pixelRatio / sourceResolution;
    // Round up Float32 scale values to prevent interpolation in Firefox.
    const inverseScale = (interpolate ? 1 : 1 + Math.pow(2, -24)) / stitchScale;

    {
      stitchContext = createCanvasContext2D(
        Math.round(getWidth(sourceDataExtent) * stitchScale),
        Math.round(getHeight(sourceDataExtent) * stitchScale),
        canvasPool,
      );

      if (!interpolate) {
        stitchContext.imageSmoothingEnabled = false;
      }

      sources.forEach(function (src, i, arr) {
        // This test should never fail -- but it does. Need to find a fix the upstream condition
        if (src.image.width > 0 && src.image.height > 0) {
          if (src.clipExtent) {
            stitchContext.save();
            const xPos = (src.clipExtent[0] - sourceDataExtent[0]) * stitchScale;
            const yPos = -(src.clipExtent[3] - sourceDataExtent[3]) * stitchScale;
            const width = getWidth(src.clipExtent) * stitchScale;
            const height = getHeight(src.clipExtent) * stitchScale;
            stitchContext.rect(
              interpolate ? xPos : Math.round(xPos),
              interpolate ? yPos : Math.round(yPos),
              interpolate ? width : Math.round(xPos + width) - Math.round(xPos),
              interpolate ? height : Math.round(yPos + height) - Math.round(yPos),
            );
            stitchContext.clip();
          }

          const xPos = (src.extent[0] - sourceDataExtent[0]) * stitchScale;
          const yPos = -(src.extent[3] - sourceDataExtent[3]) * stitchScale;
          const srcWidth = getWidth(src.extent) * stitchScale;
          const srcHeight = getHeight(src.extent) * stitchScale;
          stitchContext.drawImage(
            src.image,
            gutter,
            gutter,
            src.image.width - 2 * gutter,
            src.image.height - 2 * gutter,
            interpolate ? xPos : Math.round(xPos),
            interpolate ? yPos : Math.round(yPos),
            interpolate
              ? srcWidth
              : Math.round(xPos + srcWidth) - Math.round(xPos),
            interpolate
              ? srcHeight
              : Math.round(yPos + srcHeight) - Math.round(yPos),
          );

          if (src.clipExtent) {
            stitchContext.restore();
          }
        }
      });
    }
    const targetTopLeft = getTopLeft(targetExtent);

    triangulation.getTriangles().forEach(function (triangle, i, arr) {
      /* Calculate affine transform (src -> dst)
       * Resulting matrix can be used to transform coordinate
       * from `sourceProjection` to destination pixels.
       *
       * To optimize number of context calls and increase numerical stability,
       * we also do the following operations:
       * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
       * here before solving the linear system so [ui, vi] are pixel coordinates.
       *
       * Src points: xi, yi
       * Dst points: ui, vi
       * Affine coefficients: aij
       *
       * | x0 y0 1  0  0 0 |   |a00|   |u0|
       * | x1 y1 1  0  0 0 |   |a01|   |u1|
       * | x2 y2 1  0  0 0 | x |a02| = |u2|
       * |  0  0 0 x0 y0 1 |   |a10|   |v0|
       * |  0  0 0 x1 y1 1 |   |a11|   |v1|
       * |  0  0 0 x2 y2 1 |   |a12|   |v2|
       */
      const source = triangle.source;
      const target = triangle.target;
      let x0 = source[0][0],
        y0 = source[0][1];
      let x1 = source[1][0],
        y1 = source[1][1];
      let x2 = source[2][0],
        y2 = source[2][1];
      // Make sure that everything is on pixel boundaries
      const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);
      const v0 = pixelRound(
        -(target[0][1] - targetTopLeft[1]) / targetResolution,
      );
      const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);
      const v1 = pixelRound(
        -(target[1][1] - targetTopLeft[1]) / targetResolution,
      );
      const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);
      const v2 = pixelRound(
        -(target[2][1] - targetTopLeft[1]) / targetResolution,
      );

      // Shift all the source points to improve numerical stability
      // of all the subsequent calculations. The [x0, y0] is used here.
      // This is also used to simplify the linear system.
      const sourceNumericalShiftX = x0;
      const sourceNumericalShiftY = y0;
      x0 = 0;
      y0 = 0;
      x1 -= sourceNumericalShiftX;
      y1 -= sourceNumericalShiftY;
      x2 -= sourceNumericalShiftX;
      y2 -= sourceNumericalShiftY;

      const augmentedMatrix = [
        [x1, y1, 0, 0, u1 - u0],
        [x2, y2, 0, 0, u2 - u0],
        [0, 0, x1, y1, v1 - v0],
        [0, 0, x2, y2, v2 - v0],
      ];
      const affineCoefs = solveLinearSystem(augmentedMatrix);
      if (!affineCoefs) {
        return;
      }

      context.save();
      context.beginPath();

      if (isBrokenDiagonalRendering() || !interpolate) {
        // Make sure that all lines are horizontal or vertical
        context.moveTo(u1, v1);
        // This is the diagonal line. Do it in 4 steps
        const steps = 4;
        const ud = u0 - u1;
        const vd = v0 - v1;
        for (let step = 0; step < steps; step++) {
          // Go horizontally
          context.lineTo(
            u1 + pixelRound(((step + 1) * ud) / steps),
            v1 + pixelRound((step * vd) / (steps - 1)),
          );
          // Go vertically
          if (step != steps - 1) {
            context.lineTo(
              u1 + pixelRound(((step + 1) * ud) / steps),
              v1 + pixelRound(((step + 1) * vd) / (steps - 1)),
            );
          }
        }
        // We are almost at u0r, v0r
        context.lineTo(u2, v2);
      } else {
        context.moveTo(u1, v1);
        context.lineTo(u0, v0);
        context.lineTo(u2, v2);
      }

      context.clip();

      context.transform(
        affineCoefs[0],
        affineCoefs[2],
        affineCoefs[1],
        affineCoefs[3],
        u0,
        v0,
      );

      context.translate(
        sourceDataExtent[0] - sourceNumericalShiftX,
        sourceDataExtent[3] - sourceNumericalShiftY,
      );

      let image;
      if (stitchContext) {
        image = stitchContext.canvas;
        context.scale(inverseScale, -inverseScale);
      } else {
        const source = sources[0];
        const extent = source.extent;
        image = source.image;
        context.scale(
          getWidth(extent) / image.width,
          -getHeight(extent) / image.height,
        );
      }

      context.drawImage(image, 0, 0);
      context.restore();
    });

    if (stitchContext) {
      releaseCanvas(stitchContext);
      canvasPool.push(stitchContext.canvas);
    }

    if (renderEdges) {
      context.save();

      context.globalCompositeOperation = 'source-over';
      context.strokeStyle = 'black';
      context.lineWidth = 1;

      triangulation.getTriangles().forEach(function (triangle, i, arr) {
        const target = triangle.target;
        const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
        const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
        const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
        const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
        const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
        const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;

        context.beginPath();
        context.moveTo(u1, v1);
        context.lineTo(u0, v0);
        context.lineTo(u2, v2);
        context.closePath();
        context.stroke();
      });

      context.restore();
    }
    return context.canvas;
  }

  /**
   * @module ol/reproj/Triangulation
   */

  /**
   * Single triangle; consists of 3 source points and 3 target points.
   * @typedef {Object} Triangle
   * @property {Array<import("../coordinate.js").Coordinate>} source Source.
   * @property {Array<import("../coordinate.js").Coordinate>} target Target.
   */

  /**
   * Maximum number of subdivision steps during raster reprojection triangulation.
   * Prevents high memory usage and large number of proj4 calls (for certain
   * transformations and areas). At most `2*(2^this)` triangles are created for
   * each triangulated extent (tile/image).
   * @type {number}
   */
  const MAX_SUBDIVISION = 10;

  /**
   * Maximum allowed size of triangle relative to world width. When transforming
   * corners of world extent between certain projections, the resulting
   * triangulation seems to have zero error and no subdivision is performed. If
   * the triangle width is more than this (relative to world width; 0-1),
   * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
   * @type {number}
   */
  const MAX_TRIANGLE_WIDTH = 0.25;

  /**
   * @classdesc
   * Class containing triangulation of the given target extent.
   * Used for determining source data and the reprojection itself.
   */
  class Triangulation {
    /**
     * @param {import("../proj/Projection.js").default} sourceProj Source projection.
     * @param {import("../proj/Projection.js").default} targetProj Target projection.
     * @param {import("../extent.js").Extent} targetExtent Target extent to triangulate.
     * @param {import("../extent.js").Extent} maxSourceExtent Maximal source extent that can be used.
     * @param {number} errorThreshold Acceptable error (in source units).
     * @param {?number} destinationResolution The (optional) resolution of the destination.
     * @param {import("../transform.js").Transform} [sourceMatrix] Source transform matrix.
     */
    constructor(
      sourceProj,
      targetProj,
      targetExtent,
      maxSourceExtent,
      errorThreshold,
      destinationResolution,
      sourceMatrix,
    ) {
      /**
       * @type {import("../proj/Projection.js").default}
       * @private
       */
      this.sourceProj_ = sourceProj;

      /**
       * @type {import("../proj/Projection.js").default}
       * @private
       */
      this.targetProj_ = targetProj;

      /** @type {!Object<string, import("../coordinate.js").Coordinate>} */
      let transformInvCache = {};
      const transformInv = sourceMatrix
        ? createTransformFromCoordinateTransform((input) =>
            apply(
              sourceMatrix,
              transform$1(input, this.targetProj_, this.sourceProj_),
            ),
          )
        : getTransform(this.targetProj_, this.sourceProj_);

      /**
       * @param {import("../coordinate.js").Coordinate} c A coordinate.
       * @return {import("../coordinate.js").Coordinate} Transformed coordinate.
       * @private
       */
      this.transformInv_ = function (c) {
        const key = c[0] + '/' + c[1];
        if (!transformInvCache[key]) {
          transformInvCache[key] = transformInv(c);
        }
        return transformInvCache[key];
      };

      /**
       * @type {import("../extent.js").Extent}
       * @private
       */
      this.maxSourceExtent_ = maxSourceExtent;

      /**
       * @type {number}
       * @private
       */
      this.errorThresholdSquared_ = errorThreshold * errorThreshold;

      /**
       * @type {Array<Triangle>}
       * @private
       */
      this.triangles_ = [];

      /**
       * Indicates that the triangulation crosses edge of the source projection.
       * @type {boolean}
       * @private
       */
      this.wrapsXInSource_ = false;

      /**
       * @type {boolean}
       * @private
       */
      this.canWrapXInSource_ =
        this.sourceProj_.canWrapX() &&
        !!maxSourceExtent &&
        !!this.sourceProj_.getExtent() &&
        getWidth(maxSourceExtent) >= getWidth(this.sourceProj_.getExtent());

      /**
       * @type {?number}
       * @private
       */
      this.sourceWorldWidth_ = this.sourceProj_.getExtent()
        ? getWidth(this.sourceProj_.getExtent())
        : null;

      /**
       * @type {?number}
       * @private
       */
      this.targetWorldWidth_ = this.targetProj_.getExtent()
        ? getWidth(this.targetProj_.getExtent())
        : null;

      const destinationTopLeft = getTopLeft(targetExtent);
      const destinationTopRight = getTopRight(targetExtent);
      const destinationBottomRight = getBottomRight(targetExtent);
      const destinationBottomLeft = getBottomLeft(targetExtent);
      const sourceTopLeft = this.transformInv_(destinationTopLeft);
      const sourceTopRight = this.transformInv_(destinationTopRight);
      const sourceBottomRight = this.transformInv_(destinationBottomRight);
      const sourceBottomLeft = this.transformInv_(destinationBottomLeft);

      /*
       * The maxSubdivision controls how many splittings of the target area can
       * be done. The idea here is to do a linear mapping of the target areas
       * but the actual overall reprojection (can be) extremely non-linear. The
       * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256
       * tile size. However this function is also called to remap canvas rendered
       * layers which can be much larger. This calculation increases the maxSubdivision
       * value by the right factor so that each 256x256 pixel area has
       * MAX_SUBDIVISION divisions.
       */
      const maxSubdivision =
        MAX_SUBDIVISION +
        (destinationResolution
          ? Math.max(
              0,
              Math.ceil(
                Math.log2(
                  getArea$1(targetExtent) /
                    (destinationResolution * destinationResolution * 256 * 256),
                ),
              ),
            )
          : 0);

      this.addQuad_(
        destinationTopLeft,
        destinationTopRight,
        destinationBottomRight,
        destinationBottomLeft,
        sourceTopLeft,
        sourceTopRight,
        sourceBottomRight,
        sourceBottomLeft,
        maxSubdivision,
      );

      if (this.wrapsXInSource_) {
        let leftBound = Infinity;
        this.triangles_.forEach(function (triangle, i, arr) {
          leftBound = Math.min(
            leftBound,
            triangle.source[0][0],
            triangle.source[1][0],
            triangle.source[2][0],
          );
        });

        // Shift triangles to be as close to `leftBound` as possible
        // (if the distance is more than `worldWidth / 2` it can be closer.
        this.triangles_.forEach((triangle) => {
          if (
            Math.max(
              triangle.source[0][0],
              triangle.source[1][0],
              triangle.source[2][0],
            ) -
              leftBound >
            this.sourceWorldWidth_ / 2
          ) {
            const newTriangle = [
              [triangle.source[0][0], triangle.source[0][1]],
              [triangle.source[1][0], triangle.source[1][1]],
              [triangle.source[2][0], triangle.source[2][1]],
            ];
            if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) {
              newTriangle[0][0] -= this.sourceWorldWidth_;
            }
            if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) {
              newTriangle[1][0] -= this.sourceWorldWidth_;
            }
            if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) {
              newTriangle[2][0] -= this.sourceWorldWidth_;
            }

            // Rarely (if the extent contains both the dateline and prime meridian)
            // the shift can in turn break some triangles.
            // Detect this here and don't shift in such cases.
            const minX = Math.min(
              newTriangle[0][0],
              newTriangle[1][0],
              newTriangle[2][0],
            );
            const maxX = Math.max(
              newTriangle[0][0],
              newTriangle[1][0],
              newTriangle[2][0],
            );
            if (maxX - minX < this.sourceWorldWidth_ / 2) {
              triangle.source = newTriangle;
            }
          }
        });
      }

      transformInvCache = {};
    }

    /**
     * Adds triangle to the triangulation.
     * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
     * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
     * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
     * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
     * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
     * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
     * @private
     */
    addTriangle_(a, b, c, aSrc, bSrc, cSrc) {
      this.triangles_.push({
        source: [aSrc, bSrc, cSrc],
        target: [a, b, c],
      });
    }

    /**
     * Adds quad (points in clock-wise order) to the triangulation
     * (and reprojects the vertices) if valid.
     * Performs quad subdivision if needed to increase precision.
     *
     * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
     * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
     * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
     * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
     * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
     * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
     * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
     * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
     * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
     * @private
     */
    addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {
      const sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);
      const sourceCoverageX = this.sourceWorldWidth_
        ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_
        : null;
      const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);

      // when the quad is wrapped in the source projection
      // it covers most of the projection extent, but not fully
      const wrapsX =
        this.sourceProj_.canWrapX() &&
        sourceCoverageX > 0.5 &&
        sourceCoverageX < 1;

      let needsSubdivision = false;

      if (maxSubdivision > 0) {
        if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
          const targetQuadExtent = boundingExtent([a, b, c, d]);
          const targetCoverageX =
            getWidth(targetQuadExtent) / this.targetWorldWidth_;
          needsSubdivision =
            targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
        }
        if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {
          needsSubdivision =
            sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
        }
      }

      if (!needsSubdivision && this.maxSourceExtent_) {
        if (
          isFinite(sourceQuadExtent[0]) &&
          isFinite(sourceQuadExtent[1]) &&
          isFinite(sourceQuadExtent[2]) &&
          isFinite(sourceQuadExtent[3])
        ) {
          if (!intersects$1(sourceQuadExtent, this.maxSourceExtent_)) {
            // whole quad outside source projection extent -> ignore
            return;
          }
        }
      }

      let isNotFinite = 0;

      if (!needsSubdivision) {
        if (
          !isFinite(aSrc[0]) ||
          !isFinite(aSrc[1]) ||
          !isFinite(bSrc[0]) ||
          !isFinite(bSrc[1]) ||
          !isFinite(cSrc[0]) ||
          !isFinite(cSrc[1]) ||
          !isFinite(dSrc[0]) ||
          !isFinite(dSrc[1])
        ) {
          if (maxSubdivision > 0) {
            needsSubdivision = true;
          } else {
            // It might be the case that only 1 of the points is infinite. In this case
            // we can draw a single triangle with the other three points
            isNotFinite =
              (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +
              (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +
              (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +
              (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);
            if (
              isNotFinite != 1 &&
              isNotFinite != 2 &&
              isNotFinite != 4 &&
              isNotFinite != 8
            ) {
              return;
            }
          }
        }
      }

      if (maxSubdivision > 0) {
        if (!needsSubdivision) {
          const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];
          const centerSrc = this.transformInv_(center);

          let dx;
          if (wrapsX) {
            const centerSrcEstimX =
              (modulo(aSrc[0], sourceWorldWidth) +
                modulo(cSrc[0], sourceWorldWidth)) /
              2;
            dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);
          } else {
            dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
          }
          const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
          const centerSrcErrorSquared = dx * dx + dy * dy;
          needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
        }
        if (needsSubdivision) {
          if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
            // split horizontally (top & bottom)
            const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];
            const bcSrc = this.transformInv_(bc);
            const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];
            const daSrc = this.transformInv_(da);

            this.addQuad_(
              a,
              b,
              bc,
              da,
              aSrc,
              bSrc,
              bcSrc,
              daSrc,
              maxSubdivision - 1,
            );
            this.addQuad_(
              da,
              bc,
              c,
              d,
              daSrc,
              bcSrc,
              cSrc,
              dSrc,
              maxSubdivision - 1,
            );
          } else {
            // split vertically (left & right)
            const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];
            const abSrc = this.transformInv_(ab);
            const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];
            const cdSrc = this.transformInv_(cd);

            this.addQuad_(
              a,
              ab,
              cd,
              d,
              aSrc,
              abSrc,
              cdSrc,
              dSrc,
              maxSubdivision - 1,
            );
            this.addQuad_(
              ab,
              b,
              c,
              cd,
              abSrc,
              bSrc,
              cSrc,
              cdSrc,
              maxSubdivision - 1,
            );
          }
          return;
        }
      }

      if (wrapsX) {
        if (!this.canWrapXInSource_) {
          return;
        }
        this.wrapsXInSource_ = true;
      }

      // Exactly zero or one of *Src is not finite
      // The triangles must have the diagonal line as the first side
      // This is to allow easy code in reproj.s to make it straight for broken
      // browsers that can't handle diagonal clipping
      if ((isNotFinite & 0xb) == 0) {
        this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
      }
      if ((isNotFinite & 0xe) == 0) {
        this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);
      }
      if (isNotFinite) {
        // Try the other two triangles
        if ((isNotFinite & 0xd) == 0) {
          this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);
        }
        if ((isNotFinite & 0x7) == 0) {
          this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);
        }
      }
    }

    /**
     * Calculates extent of the `source` coordinates from all the triangles.
     *
     * @return {import("../extent.js").Extent} Calculated extent.
     */
    calculateSourceExtent() {
      const extent = createEmpty();

      this.triangles_.forEach(function (triangle, i, arr) {
        const src = triangle.source;
        extendCoordinate(extent, src[0]);
        extendCoordinate(extent, src[1]);
        extendCoordinate(extent, src[2]);
      });

      return extent;
    }

    /**
     * @return {Array<Triangle>} Array of the calculated triangles.
     */
    getTriangles() {
      return this.triangles_;
    }
  }

  /**
   * @module ol/reproj/common
   */

  /**
   * Default maximum allowed threshold  (in pixels) for reprojection
   * triangulation.
   * @type {number}
   */
  const ERROR_THRESHOLD = 0.5;

  /**
   * @module ol/reproj/Tile
   */


  /**
   * @typedef {function(number, number, number, number) : (import("../ImageTile.js").default)} FunctionType
   */

  /**
   * @typedef {Object} TileOffset
   * @property {import("../ImageTile.js").default} tile Tile.
   * @property {number} offset Offset.
   */

  /**
   * @classdesc
   * Class encapsulating single reprojected tile.
   * See {@link module:ol/source/TileImage~TileImage}.
   *
   */
  class ReprojTile extends Tile {
    /**
     * @param {import("../proj/Projection.js").default} sourceProj Source projection.
     * @param {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
     * @param {import("../proj/Projection.js").default} targetProj Target projection.
     * @param {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
     * @param {import("../tilecoord.js").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} gutter Gutter of the source tiles.
     * @param {FunctionType} getTileFunction
     *     Function returning source tiles (z, x, y, pixelRatio).
     * @param {number} [errorThreshold] Acceptable reprojection error (in px).
     * @param {boolean} [renderEdges] Render reprojection edges.
     * @param {import("../Tile.js").Options} [options] Tile options.
     */
    constructor(
      sourceProj,
      sourceTileGrid,
      targetProj,
      targetTileGrid,
      tileCoord,
      wrappedTileCoord,
      pixelRatio,
      gutter,
      getTileFunction,
      errorThreshold,
      renderEdges,
      options,
    ) {
      super(tileCoord, TileState.IDLE, options);

      /**
       * @private
       * @type {boolean}
       */
      this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.gutter_ = gutter;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = null;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.sourceTileGrid_ = sourceTileGrid;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.targetTileGrid_ = targetTileGrid;

      /**
       * @private
       * @type {import("../tilecoord.js").TileCoord}
       */
      this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;

      /**
       * @private
       * @type {!Array<TileOffset>}
       */
      this.sourceTiles_ = [];

      /**
       * @private
       * @type {?Array<import("../events.js").EventsKey>}
       */
      this.sourcesListenerKeys_ = null;

      /**
       * @private
       * @type {number}
       */
      this.sourceZ_ = 0;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.clipExtent_ = sourceProj.canWrapX()
        ? sourceProj.getExtent()
        : undefined;

      const targetExtent = targetTileGrid.getTileCoordExtent(
        this.wrappedTileCoord_,
      );
      const maxTargetExtent = this.targetTileGrid_.getExtent();
      let maxSourceExtent = this.sourceTileGrid_.getExtent();

      const limitedTargetExtent = maxTargetExtent
        ? getIntersection(targetExtent, maxTargetExtent)
        : targetExtent;

      if (getArea$1(limitedTargetExtent) === 0) {
        // Tile is completely outside range -> EMPTY
        // TODO: is it actually correct that the source even creates the tile ?
        this.state = TileState.EMPTY;
        return;
      }

      const sourceProjExtent = sourceProj.getExtent();
      if (sourceProjExtent) {
        if (!maxSourceExtent) {
          maxSourceExtent = sourceProjExtent;
        } else {
          maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);
        }
      }

      const targetResolution = targetTileGrid.getResolution(
        this.wrappedTileCoord_[0],
      );

      const sourceResolution = calculateSourceExtentResolution(
        sourceProj,
        targetProj,
        limitedTargetExtent,
        targetResolution,
      );

      if (!isFinite(sourceResolution) || sourceResolution <= 0) {
        // invalid sourceResolution -> EMPTY
        // probably edges of the projections when no extent is defined
        this.state = TileState.EMPTY;
        return;
      }

      const errorThresholdInPixels =
        errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;

      /**
       * @private
       * @type {!import("./Triangulation.js").default}
       */
      this.triangulation_ = new Triangulation(
        sourceProj,
        targetProj,
        limitedTargetExtent,
        maxSourceExtent,
        sourceResolution * errorThresholdInPixels,
        targetResolution,
      );

      if (this.triangulation_.getTriangles().length === 0) {
        // no valid triangles -> EMPTY
        this.state = TileState.EMPTY;
        return;
      }

      this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
      let sourceExtent = this.triangulation_.calculateSourceExtent();

      if (maxSourceExtent) {
        if (sourceProj.canWrapX()) {
          sourceExtent[1] = clamp(
            sourceExtent[1],
            maxSourceExtent[1],
            maxSourceExtent[3],
          );
          sourceExtent[3] = clamp(
            sourceExtent[3],
            maxSourceExtent[1],
            maxSourceExtent[3],
          );
        } else {
          sourceExtent = getIntersection(sourceExtent, maxSourceExtent);
        }
      }

      if (!getArea$1(sourceExtent)) {
        this.state = TileState.EMPTY;
      } else {
        let worldWidth = 0;
        let worldsAway = 0;
        if (sourceProj.canWrapX()) {
          worldWidth = getWidth(sourceProjExtent);
          worldsAway = Math.floor(
            (sourceExtent[0] - sourceProjExtent[0]) / worldWidth,
          );
        }

        const sourceExtents = wrapAndSliceX(
          sourceExtent.slice(),
          sourceProj,
          true,
        );
        sourceExtents.forEach((extent) => {
          const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(
            extent,
            this.sourceZ_,
          );

          for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
            for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
              const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);
              if (tile) {
                const offset = worldsAway * worldWidth;
                this.sourceTiles_.push({tile, offset});
              }
            }
          }
          ++worldsAway;
        });

        if (this.sourceTiles_.length === 0) {
          this.state = TileState.EMPTY;
        }
      }
    }

    /**
     * Get the HTML Canvas element for this tile.
     * @return {HTMLCanvasElement} Canvas.
     */
    getImage() {
      return this.canvas_;
    }

    /**
     * @private
     */
    reproject_() {
      const sources = [];
      this.sourceTiles_.forEach((source) => {
        const tile = source.tile;
        if (tile && tile.getState() == TileState.LOADED) {
          const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);
          extent[0] += source.offset;
          extent[2] += source.offset;
          const clipExtent = this.clipExtent_?.slice();
          if (clipExtent) {
            clipExtent[0] += source.offset;
            clipExtent[2] += source.offset;
          }
          sources.push({
            extent: extent,
            clipExtent: clipExtent,
            image: tile.getImage(),
          });
        }
      });
      this.sourceTiles_.length = 0;

      if (sources.length === 0) {
        this.state = TileState.ERROR;
      } else {
        const z = this.wrappedTileCoord_[0];
        const size = this.targetTileGrid_.getTileSize(z);
        const width = typeof size === 'number' ? size : size[0];
        const height = typeof size === 'number' ? size : size[1];
        const targetResolution = this.targetTileGrid_.getResolution(z);
        const sourceResolution = this.sourceTileGrid_.getResolution(
          this.sourceZ_,
        );

        const targetExtent = this.targetTileGrid_.getTileCoordExtent(
          this.wrappedTileCoord_,
        );

        this.canvas_ = render(
          width,
          height,
          this.pixelRatio_,
          sourceResolution,
          this.sourceTileGrid_.getExtent(),
          targetResolution,
          targetExtent,
          this.triangulation_,
          sources,
          this.gutter_,
          this.renderEdges_,
          this.interpolate,
        );

        this.state = TileState.LOADED;
      }
      this.changed();
    }

    /**
     * Load not yet loaded URI.
     * @override
     */
    load() {
      if (this.state == TileState.IDLE) {
        this.state = TileState.LOADING;
        this.changed();

        let leftToLoad = 0;

        this.sourcesListenerKeys_ = [];
        this.sourceTiles_.forEach(({tile}) => {
          const state = tile.getState();
          if (state == TileState.IDLE || state == TileState.LOADING) {
            leftToLoad++;

            const sourceListenKey = listen(tile, EventType.CHANGE, (e) => {
              const state = tile.getState();
              if (
                state == TileState.LOADED ||
                state == TileState.ERROR ||
                state == TileState.EMPTY
              ) {
                unlistenByKey(sourceListenKey);
                leftToLoad--;
                if (leftToLoad === 0) {
                  this.unlistenSources_();
                  this.reproject_();
                }
              }
            });
            this.sourcesListenerKeys_.push(sourceListenKey);
          }
        });

        if (leftToLoad === 0) {
          setTimeout(this.reproject_.bind(this), 0);
        } else {
          this.sourceTiles_.forEach(function ({tile}, i, arr) {
            const state = tile.getState();
            if (state == TileState.IDLE) {
              tile.load();
            }
          });
        }
      }
    }

    /**
     * @private
     */
    unlistenSources_() {
      this.sourcesListenerKeys_.forEach(unlistenByKey);
      this.sourcesListenerKeys_ = null;
    }

    /**
     * Remove from the cache due to expiry
     * @override
     */
    release() {
      if (this.canvas_) {
        releaseCanvas(this.canvas_.getContext('2d'));
        canvasPool.push(this.canvas_);
        this.canvas_ = null;
      }
      super.release();
    }
  }

  /**
   * @module ol/structs/LRUCache
   */


  /**
   * @typedef {Object} Entry
   * @property {string} key_ Key.
   * @property {Entry|null} newer Newer.
   * @property {Entry|null} older Older.
   * @property {*} value_ Value.
   */

  /**
   * @classdesc
   * Implements a Least-Recently-Used cache where the keys do not conflict with
   * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
   * items from the cache is the responsibility of the user.
   *
   * @fires import("../events/Event.js").default
   * @template T
   */
  class LRUCache {
    /**
     * @param {number} [highWaterMark] High water mark.
     */
    constructor(highWaterMark) {
      /**
       * Desired max cache size after expireCache(). If set to 0, no cache entries
       * will be pruned at all.
       * @type {number}
       */
      this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;

      /**
       * @private
       * @type {number}
       */
      this.count_ = 0;

      /**
       * @private
       * @type {!Object<string, Entry>}
       */
      this.entries_ = {};

      /**
       * @private
       * @type {?Entry}
       */
      this.oldest_ = null;

      /**
       * @private
       * @type {?Entry}
       */
      this.newest_ = null;
    }

    deleteOldest() {
      const entry = this.pop();
      if (entry instanceof Disposable) {
        entry.dispose();
      }
    }

    /**
     * @return {boolean} Can expire cache.
     */
    canExpireCache() {
      return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;
    }

    /**
     * Expire the cache. When the cache entry is a {@link module:ol/Disposable~Disposable},
     * the entry will be disposed.
     * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.
     */
    expireCache(keep) {
      while (this.canExpireCache()) {
        this.deleteOldest();
      }
    }

    /**
     * FIXME empty description for jsdoc
     */
    clear() {
      while (this.oldest_) {
        this.deleteOldest();
      }
    }

    /**
     * @param {string} key Key.
     * @return {boolean} Contains key.
     */
    containsKey(key) {
      return this.entries_.hasOwnProperty(key);
    }

    /**
     * @param {function(T, string, LRUCache<T>): ?} f The function
     *     to call for every entry from the oldest to the newer. This function takes
     *     3 arguments (the entry value, the entry key and the LRUCache object).
     *     The return value is ignored.
     */
    forEach(f) {
      let entry = this.oldest_;
      while (entry) {
        f(entry.value_, entry.key_, this);
        entry = entry.newer;
      }
    }

    /**
     * @param {string} key Key.
     * @param {*} [options] Options (reserved for subclasses).
     * @return {T} Value.
     */
    get(key, options) {
      const entry = this.entries_[key];
      assert$1(
        entry !== undefined,
        'Tried to get a value for a key that does not exist in the cache',
      );
      if (entry === this.newest_) {
        return entry.value_;
      }
      if (entry === this.oldest_) {
        this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);
        this.oldest_.older = null;
      } else {
        entry.newer.older = entry.older;
        entry.older.newer = entry.newer;
      }
      entry.newer = null;
      entry.older = this.newest_;
      this.newest_.newer = entry;
      this.newest_ = entry;
      return entry.value_;
    }

    /**
     * Remove an entry from the cache.
     * @param {string} key The entry key.
     * @return {T} The removed entry.
     */
    remove(key) {
      const entry = this.entries_[key];
      assert$1(
        entry !== undefined,
        'Tried to get a value for a key that does not exist in the cache',
      );
      if (entry === this.newest_) {
        this.newest_ = /** @type {Entry} */ (entry.older);
        if (this.newest_) {
          this.newest_.newer = null;
        }
      } else if (entry === this.oldest_) {
        this.oldest_ = /** @type {Entry} */ (entry.newer);
        if (this.oldest_) {
          this.oldest_.older = null;
        }
      } else {
        entry.newer.older = entry.older;
        entry.older.newer = entry.newer;
      }
      delete this.entries_[key];
      --this.count_;
      return entry.value_;
    }

    /**
     * @return {number} Count.
     */
    getCount() {
      return this.count_;
    }

    /**
     * @return {Array<string>} Keys.
     */
    getKeys() {
      const keys = new Array(this.count_);
      let i = 0;
      let entry;
      for (entry = this.newest_; entry; entry = entry.older) {
        keys[i++] = entry.key_;
      }
      return keys;
    }

    /**
     * @return {Array<T>} Values.
     */
    getValues() {
      const values = new Array(this.count_);
      let i = 0;
      let entry;
      for (entry = this.newest_; entry; entry = entry.older) {
        values[i++] = entry.value_;
      }
      return values;
    }

    /**
     * @return {T} Last value.
     */
    peekLast() {
      return this.oldest_.value_;
    }

    /**
     * @return {string} Last key.
     */
    peekLastKey() {
      return this.oldest_.key_;
    }

    /**
     * Get the key of the newest item in the cache.  Throws if the cache is empty.
     * @return {string} The newest key.
     */
    peekFirstKey() {
      return this.newest_.key_;
    }

    /**
     * Return an entry without updating least recently used time.
     * @param {string} key Key.
     * @return {T|undefined} Value.
     */
    peek(key) {
      return this.entries_[key]?.value_;
    }

    /**
     * @return {T} value Value.
     */
    pop() {
      const entry = this.oldest_;
      delete this.entries_[entry.key_];
      if (entry.newer) {
        entry.newer.older = null;
      }
      this.oldest_ = /** @type {Entry} */ (entry.newer);
      if (!this.oldest_) {
        this.newest_ = null;
      }
      --this.count_;
      return entry.value_;
    }

    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */
    replace(key, value) {
      this.get(key); // update `newest_`
      this.entries_[key].value_ = value;
    }

    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */
    set(key, value) {
      assert$1(
        !(key in this.entries_),
        'Tried to set a value for a key that is used already',
      );
      const entry = {
        key_: key,
        newer: null,
        older: this.newest_,
        value_: value,
      };
      if (!this.newest_) {
        this.oldest_ = entry;
      } else {
        this.newest_.newer = entry;
      }
      this.newest_ = entry;
      this.entries_[key] = entry;
      ++this.count_;
    }

    /**
     * Set a maximum number of entries for the cache.
     * @param {number} size Cache size.
     * @api
     */
    setSize(size) {
      this.highWaterMark = size;
    }
  }

  /**
   * @module ol/renderer/canvas/TileLayer
   */

  /**
   * @param {string} sourceKey The source key.
   * @param {number} z The tile z level.
   * @param {number} x The tile x level.
   * @param {number} y The tile y level.
   * @return {string} The cache key.
   */
  function getCacheKey(sourceKey, z, x, y) {
    return `${sourceKey},${getKeyZXY(z, x, y)}`;
  }

  /**
   * @typedef {Object<number, Set<import("../../Tile.js").default>>} TileLookup
   */

  /**
   * Add a tile to the lookup.
   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.
   * @param {import("../../Tile.js").default} tile A tile.
   * @param {number} z The zoom level.
   * @return {boolean} The tile was added to the lookup.
   */
  function addTileToLookup(tilesByZ, tile, z) {
    if (!(z in tilesByZ)) {
      tilesByZ[z] = new Set([tile]);
      return true;
    }
    const set = tilesByZ[z];
    const existing = set.has(tile);
    if (!existing) {
      set.add(tile);
    }
    return !existing;
  }

  /**
   * Remove a tile from the lookup.
   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.
   * @param {import("../../Tile.js").default} tile A tile.
   * @param {number} z The zoom level.
   * @return {boolean} The tile was removed from the lookup.
   */
  function removeTileFromLookup(tilesByZ, tile, z) {
    const set = tilesByZ[z];
    if (set) {
      return set.delete(tile);
    }
    return false;
  }

  /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {import("../../extent.js").Extent} extent The frame extent.
   * @return {import("../../extent.js").Extent} Frame extent intersected with layer extents.
   */
  function getRenderExtent(frameState, extent) {
    const layerState = frameState.layerStatesArray[frameState.layerIndex];
    if (layerState.extent) {
      extent = getIntersection(
        extent,
        fromUserExtent(layerState.extent, frameState.viewState.projection),
      );
    }
    const source = /** @type {import("../../source/Tile.js").default} */ (
      layerState.layer.getRenderSource()
    );
    if (!source.getWrapX()) {
      const gridExtent = source
        .getTileGridForProjection(frameState.viewState.projection)
        .getExtent();
      if (gridExtent) {
        extent = getIntersection(extent, gridExtent);
      }
    }
    return extent;
  }

  /**
   * @typedef {Object} Options
   * @property {number} [cacheSize=512] The cache size.
   */

  /**
   * @classdesc
   * Canvas renderer for tile layers.
   * @api
   * @template {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default} [LayerType=import("../../layer/Tile.js").default<import("../../source/Tile.js").default>|import("../../layer/VectorTile.js").default]
   * @extends {CanvasLayerRenderer<LayerType>}
   */
  class CanvasTileLayerRenderer extends CanvasLayerRenderer {
    /**
     * @param {LayerType} tileLayer Tile layer.
     * @param {Options} [options] Options.
     */
    constructor(tileLayer, options) {
      super(tileLayer);

      options = options || {};

      /**
       * Rendered extent has changed since the previous `renderFrame()` call
       * @type {boolean}
       */
      this.extentChanged = true;

      /**
       * The last call to `renderFrame` was completed with all tiles loaded
       * @type {boolean}
       */
      this.renderComplete = false;

      /**
       * @private
       * @type {?import("../../extent.js").Extent}
       */
      this.renderedExtent_ = null;

      /**
       * @protected
       * @type {number}
       */
      this.renderedPixelRatio;

      /**
       * @protected
       * @type {import("../../proj/Projection.js").default|null}
       */
      this.renderedProjection = null;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_;

      /**
       * @protected
       * @type {!Array<import("../../Tile.js").default>}
       */
      this.renderedTiles = [];

      /**
       * @private
       * @type {string}
       */
      this.renderedSourceKey_;

      /**
       * @private
       * @type {number}
       */
      this.renderedSourceRevision_;

      /**
       * @protected
       * @type {import("../../extent.js").Extent}
       */
      this.tempExtent = createEmpty();

      /**
       * @private
       * @type {import("../../TileRange.js").default}
       */
      this.tempTileRange_ = new TileRange(0, 0, 0, 0);

      /**
       * @type {import("../../tilecoord.js").TileCoord}
       * @private
       */
      this.tempTileCoord_ = createOrUpdate(0, 0, 0);

      const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;

      /**
       * @type {import("../../structs/LRUCache.js").default<import("../../Tile.js").default>}
       * @private
       */
      this.tileCache_ = new LRUCache(cacheSize);

      this.maxStaleKeys = cacheSize * 0.5;
    }

    /**
     * @return {LRUCache} Tile cache.
     */
    getTileCache() {
      return this.tileCache_;
    }

    /**
     * Get a tile from the cache or create one if needed.
     *
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {import("../../Tile.js").default|null} Tile (or null if outside source extent).
     * @protected
     */
    getOrCreateTile(z, x, y, frameState) {
      const tileCache = this.tileCache_;
      const tileLayer = this.getLayer();
      const tileSource = tileLayer.getSource();
      const cacheKey = getCacheKey(tileSource.getKey(), z, x, y);

      /** @type {import("../../Tile.js").default} */
      let tile;

      if (tileCache.containsKey(cacheKey)) {
        tile = tileCache.get(cacheKey);
      } else {
        tile = tileSource.getTile(
          z,
          x,
          y,
          frameState.pixelRatio,
          frameState.viewState.projection,
        );
        if (!tile) {
          return null;
        }
        tileCache.set(cacheKey, tile);
      }
      return tile;
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {import("../../Tile.js").default|null} Tile (or null if outside source extent).
     * @protected
     */
    getTile(z, x, y, frameState) {
      const tile = this.getOrCreateTile(z, x, y, frameState);
      if (!tile) {
        return null;
      }
      return tile;
    }

    /**
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray} Data at the pixel location.
     * @override
     */
    getData(pixel) {
      const frameState = this.frameState;
      if (!frameState) {
        return null;
      }

      const layer = this.getLayer();
      const coordinate = apply(
        frameState.pixelToCoordinateTransform,
        pixel.slice(),
      );

      const layerExtent = layer.getExtent();
      if (layerExtent) {
        if (!containsCoordinate(layerExtent, coordinate)) {
          return null;
        }
      }

      const viewState = frameState.viewState;
      const source = layer.getRenderSource();
      const tileGrid = source.getTileGridForProjection(viewState.projection);
      const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);

      for (
        let z = tileGrid.getZForResolution(viewState.resolution);
        z >= tileGrid.getMinZoom();
        --z
      ) {
        const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);
        const tile = this.getTile(z, tileCoord[1], tileCoord[2], frameState);
        if (!tile || tile.getState() !== TileState.LOADED) {
          continue;
        }

        const tileOrigin = tileGrid.getOrigin(z);
        const tileSize = toSize(tileGrid.getTileSize(z));
        const tileResolution = tileGrid.getResolution(z);

        /**
         * @type {import('../../DataTile.js').ImageLike}
         */
        let image;
        if (tile instanceof ImageTile || tile instanceof ReprojTile) {
          image = tile.getImage();
        } else if (tile instanceof DataTile) {
          image = asImageLike(tile.getData());
          if (!image) {
            continue;
          }
        } else {
          continue;
        }

        const col = Math.floor(
          tilePixelRatio *
            ((coordinate[0] - tileOrigin[0]) / tileResolution -
              tileCoord[1] * tileSize[0]),
        );

        const row = Math.floor(
          tilePixelRatio *
            ((tileOrigin[1] - coordinate[1]) / tileResolution -
              tileCoord[2] * tileSize[1]),
        );

        const gutter = Math.round(
          tilePixelRatio * source.getGutterForProjection(viewState.projection),
        );

        return this.getImageData(image, col + gutter, row + gutter);
      }

      return null;
    }

    /**
     * Determine whether render should be called.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     * @override
     */
    prepareFrame(frameState) {
      if (!this.renderedProjection) {
        this.renderedProjection = frameState.viewState.projection;
      } else if (frameState.viewState.projection !== this.renderedProjection) {
        this.tileCache_.clear();
        this.renderedProjection = frameState.viewState.projection;
      }

      const source = this.getLayer().getSource();
      if (!source) {
        return false;
      }
      const sourceRevision = source.getRevision();
      if (!this.renderedRevision_) {
        this.renderedRevision_ = sourceRevision;
      } else if (this.renderedRevision_ !== sourceRevision) {
        this.renderedRevision_ = sourceRevision;
        if (this.renderedSourceKey_ === source.getKey()) {
          this.tileCache_.clear();
        }
      }
      return true;
    }

    /**
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {import("../../extent.js").Extent} extent The extent to be rendered.
     * @param {number} initialZ The zoom level.
     * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.
     * @param {number} preload Number of additional levels to load.
     */
    enqueueTiles(frameState, extent, initialZ, tilesByZ, preload) {
      const viewState = frameState.viewState;
      const tileLayer = this.getLayer();
      const tileSource = tileLayer.getRenderSource();
      const tileGrid = tileSource.getTileGridForProjection(viewState.projection);

      const tileSourceKey = getUid(tileSource);
      if (!(tileSourceKey in frameState.wantedTiles)) {
        frameState.wantedTiles[tileSourceKey] = {};
      }

      const wantedTiles = frameState.wantedTiles[tileSourceKey];

      const map = tileLayer.getMapInternal();
      const minZ = Math.max(
        initialZ - preload,
        tileGrid.getMinZoom(),
        tileGrid.getZForResolution(
          Math.min(
            tileLayer.getMaxResolution(),
            map
              ? map
                  .getView()
                  .getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0))
              : tileGrid.getResolution(0),
          ),
          tileSource.zDirection,
        ),
      );
      const rotation = viewState.rotation;
      const viewport = rotation
        ? getRotatedViewport(
            viewState.center,
            viewState.resolution,
            rotation,
            frameState.size,
          )
        : undefined;
      for (let z = initialZ; z >= minZ; --z) {
        const tileRange = tileGrid.getTileRangeForExtentAndZ(
          extent,
          z,
          this.tempTileRange_,
        );

        const tileResolution = tileGrid.getResolution(z);

        for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {
          for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {
            if (
              rotation &&
              !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)
            ) {
              continue;
            }
            const tile = this.getTile(z, x, y, frameState);
            if (!tile) {
              continue;
            }
            const added = addTileToLookup(tilesByZ, tile, z);
            if (!added) {
              continue;
            }

            const tileQueueKey = tile.getKey();
            wantedTiles[tileQueueKey] = true;

            if (tile.getState() === TileState.IDLE) {
              if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {
                const tileCoord = createOrUpdate(z, x, y, this.tempTileCoord_);
                frameState.tileQueue.enqueue([
                  tile,
                  tileSourceKey,
                  tileGrid.getTileCoordCenter(tileCoord),
                  tileResolution,
                ]);
              }
            }
          }
        }
      }
    }

    /**
     * Look for tiles covering the provided tile coordinate at an alternate
     * zoom level.  Loaded tiles will be added to the provided tile texture lookup.
     * @param {import("../../tilecoord.js").TileCoord} tileCoord The target tile coordinate.
     * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.
     * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.
     * @private
     */
    findStaleTile_(tileCoord, tilesByZ) {
      const tileCache = this.tileCache_;
      const z = tileCoord[0];
      const x = tileCoord[1];
      const y = tileCoord[2];
      const staleKeys = this.getStaleKeys();
      for (let i = 0; i < staleKeys.length; ++i) {
        const cacheKey = getCacheKey(staleKeys[i], z, x, y);
        if (tileCache.containsKey(cacheKey)) {
          const tile = tileCache.peek(cacheKey);
          if (tile.getState() === TileState.LOADED) {
            tile.endTransition(getUid(this));
            addTileToLookup(tilesByZ, tile, z);
            return true;
          }
        }
      }
      return false;
    }

    /**
     * Look for tiles covering the provided tile coordinate at an alternate
     * zoom level.  Loaded tiles will be added to the provided tile texture lookup.
     * @param {import("../../tilegrid/TileGrid.js").default} tileGrid The tile grid.
     * @param {import("../../tilecoord.js").TileCoord} tileCoord The target tile coordinate.
     * @param {number} altZ The alternate zoom level.
     * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.
     * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.
     * @private
     */
    findAltTiles_(tileGrid, tileCoord, altZ, tilesByZ) {
      const tileRange = tileGrid.getTileRangeForTileCoordAndZ(
        tileCoord,
        altZ,
        this.tempTileRange_,
      );

      if (!tileRange) {
        return false;
      }

      let covered = true;
      const tileCache = this.tileCache_;
      const source = this.getLayer().getRenderSource();
      const sourceKey = source.getKey();
      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {
        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {
          const cacheKey = getCacheKey(sourceKey, altZ, x, y);
          let loaded = false;
          if (tileCache.containsKey(cacheKey)) {
            const tile = tileCache.peek(cacheKey);
            if (tile.getState() === TileState.LOADED) {
              addTileToLookup(tilesByZ, tile, altZ);
              loaded = true;
            }
          }
          if (!loaded) {
            covered = false;
          }
        }
      }
      return covered;
    }

    /**
     * Render the layer.
     *
     * The frame rendering logic has three parts:
     *
     *  1. Enqueue tiles
     *  2. Find alt tiles for those that are not yet loaded
     *  3. Render loaded tiles
     *
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target that may be used to render content to.
     * @return {HTMLElement} The rendered element.
     * @override
     */
    renderFrame(frameState, target) {
      this.renderComplete = true;

      /**
       * TODO:
       *  maybe skip transition when not fully opaque
       *  decide if this.renderComplete is useful
       */

      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      const viewState = frameState.viewState;
      const projection = viewState.projection;
      const viewResolution = viewState.resolution;
      const viewCenter = viewState.center;
      const pixelRatio = frameState.pixelRatio;

      const tileLayer = this.getLayer();
      const tileSource = tileLayer.getSource();
      const tileGrid = tileSource.getTileGridForProjection(projection);
      const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);
      const tileResolution = tileGrid.getResolution(z);

      const sourceKey = tileSource.getKey();
      if (!this.renderedSourceKey_) {
        this.renderedSourceKey_ = sourceKey;
      } else if (this.renderedSourceKey_ !== sourceKey) {
        this.prependStaleKey(this.renderedSourceKey_);
        this.renderedSourceKey_ = sourceKey;
      }

      let frameExtent = frameState.extent;
      const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);

      this.prepareContainer(frameState, target);

      // desired dimensions of the canvas in pixels
      const width = this.context.canvas.width;
      const height = this.context.canvas.height;

      const layerExtent =
        layerState.extent && fromUserExtent(layerState.extent, projection);
      if (layerExtent) {
        frameExtent = getIntersection(
          frameExtent,
          fromUserExtent(layerState.extent, projection),
        );
      }

      const dx = (tileResolution * width) / 2 / tilePixelRatio;
      const dy = (tileResolution * height) / 2 / tilePixelRatio;
      const canvasExtent = [
        viewCenter[0] - dx,
        viewCenter[1] - dy,
        viewCenter[0] + dx,
        viewCenter[1] + dy,
      ];

      /**
       * @type {TileLookup}
       */
      const tilesByZ = {};

      this.renderedTiles.length = 0;

      /**
       * Part 1: Enqueue tiles
       */

      const preload = tileLayer.getPreload();
      if (frameState.nextExtent) {
        const targetZ = tileGrid.getZForResolution(
          viewState.nextResolution,
          tileSource.zDirection,
        );
        const nextExtent = getRenderExtent(frameState, frameState.nextExtent);
        this.enqueueTiles(frameState, nextExtent, targetZ, tilesByZ, preload);
      }

      const renderExtent = getRenderExtent(frameState, frameExtent);
      this.enqueueTiles(frameState, renderExtent, z, tilesByZ, 0);
      if (preload > 0) {
        setTimeout(() => {
          this.enqueueTiles(
            frameState,
            renderExtent,
            z - 1,
            tilesByZ,
            preload - 1,
          );
        }, 0);
      }

      if (!(z in tilesByZ)) {
        return this.container;
      }

      /**
       * Part 2: Find alt tiles for those that are not yet loaded
       */

      const uid = getUid(this);
      const time = frameState.time;

      // look for cached tiles to use if a target tile is not ready
      for (const tile of tilesByZ[z]) {
        const tileState = tile.getState();
        if (tileState === TileState.EMPTY) {
          continue;
        }
        const tileCoord = tile.tileCoord;

        if (tileState === TileState.LOADED) {
          const alpha = tile.getAlpha(uid, time);
          if (alpha === 1) {
            // no need to look for alt tiles
            tile.endTransition(uid);
            continue;
          }
        }
        if (tileState !== TileState.ERROR) {
          this.renderComplete = false;
        }

        const hasStaleTile = this.findStaleTile_(tileCoord, tilesByZ);
        if (hasStaleTile) {
          // use the stale tile before the new tile's transition has completed
          removeTileFromLookup(tilesByZ, tile, z);
          frameState.animate = true;
          continue;
        }

        // first look for child tiles (at z + 1)
        const coveredByChildren = this.findAltTiles_(
          tileGrid,
          tileCoord,
          z + 1,
          tilesByZ,
        );

        if (coveredByChildren) {
          continue;
        }

        // next look for parent tiles
        const minZoom = tileGrid.getMinZoom();
        for (let parentZ = z - 1; parentZ >= minZoom; --parentZ) {
          const coveredByParent = this.findAltTiles_(
            tileGrid,
            tileCoord,
            parentZ,
            tilesByZ,
          );

          if (coveredByParent) {
            break;
          }
        }
      }

      /**
       * Part 3: Render loaded tiles
       */

      const canvasScale =
        ((tileResolution / viewResolution) * pixelRatio) / tilePixelRatio;

      const context = this.getRenderContext(frameState);

      // set scale transform for calculating tile positions on the canvas
      compose(
        this.tempTransform,
        width / 2,
        height / 2,
        canvasScale,
        canvasScale,
        0,
        -width / 2,
        -height / 2,
      );

      if (layerState.extent) {
        this.clipUnrotated(context, frameState, layerExtent);
      }

      if (!tileSource.getInterpolate()) {
        context.imageSmoothingEnabled = false;
      }

      this.preRender(context, frameState);

      /** @type {Array<number>} */
      const zs = Object.keys(tilesByZ).map(Number);
      zs.sort(ascending);

      let currentClip;
      const clips = [];
      const clipZs = [];
      for (let i = zs.length - 1; i >= 0; --i) {
        const currentZ = zs[i];
        const currentTilePixelSize = tileSource.getTilePixelSize(
          currentZ,
          pixelRatio,
          projection,
        );
        const currentResolution = tileGrid.getResolution(currentZ);
        const currentScale = currentResolution / tileResolution;
        const dx = currentTilePixelSize[0] * currentScale * canvasScale;
        const dy = currentTilePixelSize[1] * currentScale * canvasScale;
        const originTileCoord = tileGrid.getTileCoordForCoordAndZ(
          getTopLeft(canvasExtent),
          currentZ,
        );
        const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);
        const origin = apply(this.tempTransform, [
          (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /
            tileResolution,
          (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /
            tileResolution,
        ]);
        const tileGutter =
          tilePixelRatio * tileSource.getGutterForProjection(projection);
        for (const tile of tilesByZ[currentZ]) {
          if (tile.getState() !== TileState.LOADED) {
            continue;
          }
          const tileCoord = tile.tileCoord;

          // Calculate integer positions and sizes so that tiles align
          const xIndex = originTileCoord[1] - tileCoord[1];
          const nextX = Math.round(origin[0] - (xIndex - 1) * dx);
          const yIndex = originTileCoord[2] - tileCoord[2];
          const nextY = Math.round(origin[1] - (yIndex - 1) * dy);
          const x = Math.round(origin[0] - xIndex * dx);
          const y = Math.round(origin[1] - yIndex * dy);
          const w = nextX - x;
          const h = nextY - y;
          const transition = zs.length === 1;

          let contextSaved = false;

          // Clip mask for regions in this tile that already filled by a higher z tile
          currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];
          for (let i = 0, ii = clips.length; i < ii; ++i) {
            if (!transition && currentZ < clipZs[i]) {
              const clip = clips[i];
              if (
                intersects$1(
                  [x, y, x + w, y + h],
                  [clip[0], clip[3], clip[4], clip[7]],
                )
              ) {
                if (!contextSaved) {
                  context.save();
                  contextSaved = true;
                }
                context.beginPath();
                // counter-clockwise (outer ring) for current tile
                context.moveTo(currentClip[0], currentClip[1]);
                context.lineTo(currentClip[2], currentClip[3]);
                context.lineTo(currentClip[4], currentClip[5]);
                context.lineTo(currentClip[6], currentClip[7]);
                // clockwise (inner ring) for higher z tile
                context.moveTo(clip[6], clip[7]);
                context.lineTo(clip[4], clip[5]);
                context.lineTo(clip[2], clip[3]);
                context.lineTo(clip[0], clip[1]);
                context.clip();
              }
            }
          }
          clips.push(currentClip);
          clipZs.push(currentZ);

          this.drawTile(tile, frameState, x, y, w, h, tileGutter, transition);
          if (contextSaved) {
            context.restore();
          }
          this.renderedTiles.unshift(tile);

          // TODO: decide if this is necessary
          this.updateUsedTiles(frameState.usedTiles, tileSource, tile);
        }
      }

      this.renderedResolution = tileResolution;
      this.extentChanged =
        !this.renderedExtent_ || !equals$1(this.renderedExtent_, canvasExtent);
      this.renderedExtent_ = canvasExtent;
      this.renderedPixelRatio = pixelRatio;

      this.postRender(this.context, frameState);

      if (layerState.extent) {
        context.restore();
      }
      context.imageSmoothingEnabled = true;

      if (this.renderComplete) {
        /**
         * @param {import("../../Map.js").default} map Map.
         * @param {import("../../Map.js").FrameState} frameState Frame state.
         */
        const postRenderFunction = (map, frameState) => {
          const tileSourceKey = getUid(tileSource);
          const wantedTiles = frameState.wantedTiles[tileSourceKey];
          const tilesCount = wantedTiles ? Object.keys(wantedTiles).length : 0;
          this.updateCacheSize(tilesCount);
          this.tileCache_.expireCache();
        };

        frameState.postRenderFunctions.push(postRenderFunction);
      }

      return this.container;
    }

    /**
     * Increases the cache size if needed
     * @param {number} tileCount Minimum number of tiles needed.
     */
    updateCacheSize(tileCount) {
      this.tileCache_.highWaterMark = Math.max(
        this.tileCache_.highWaterMark,
        tileCount * 2,
      );
    }

    /**
     * @param {import("../../Tile.js").default} tile Tile.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {number} x Left of the tile.
     * @param {number} y Top of the tile.
     * @param {number} w Width of the tile.
     * @param {number} h Height of the tile.
     * @param {number} gutter Tile gutter.
     * @param {boolean} transition Apply an alpha transition.
     * @protected
     */
    drawTile(tile, frameState, x, y, w, h, gutter, transition) {
      let image;
      if (tile instanceof DataTile) {
        image = asImageLike(tile.getData());
        if (!image) {
          throw new Error('Rendering array data is not yet supported');
        }
      } else {
        image = this.getTileImage(
          /** @type {import("../../ImageTile.js").default} */ (tile),
        );
      }
      if (!image) {
        return;
      }
      const context = this.getRenderContext(frameState);
      const uid = getUid(this);
      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      const alpha =
        layerState.opacity *
        (transition ? tile.getAlpha(uid, frameState.time) : 1);
      const alphaChanged = alpha !== context.globalAlpha;
      if (alphaChanged) {
        context.save();
        context.globalAlpha = alpha;
      }
      context.drawImage(
        image,
        gutter,
        gutter,
        image.width - 2 * gutter,
        image.height - 2 * gutter,
        x,
        y,
        w,
        h,
      );

      if (alphaChanged) {
        context.restore();
      }
      if (alpha !== layerState.opacity) {
        frameState.animate = true;
      } else if (transition) {
        tile.endTransition(uid);
      }
    }

    /**
     * @return {HTMLCanvasElement} Image
     */
    getImage() {
      const context = this.context;
      return context ? context.canvas : null;
    }

    /**
     * Get the image from a tile.
     * @param {import("../../ImageTile.js").default} tile Tile.
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @protected
     */
    getTileImage(tile) {
      return tile.getImage();
    }

    /**
     * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
     * @param {import("../../source/Tile.js").default} tileSource Tile source.
     * @param {import('../../Tile.js').default} tile Tile.
     * @protected
     */
    updateUsedTiles(usedTiles, tileSource, tile) {
      // FIXME should we use tilesToDrawByZ instead?
      const tileSourceKey = getUid(tileSource);
      if (!(tileSourceKey in usedTiles)) {
        usedTiles[tileSourceKey] = {};
      }
      usedTiles[tileSourceKey][tile.getKey()] = true;
    }
  }

  /**
   * @module ol/layer/TileProperty
   */

  /**
   * @enum {string}
   */
  var TileProperty = {
    PRELOAD: 'preload',
    USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',
  };

  /**
   * @module ol/layer/BaseTile
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
   *     import("./Layer.js").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<import("../render/EventType").LayerRenderEventTypes, import("../render/Event").default, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|
   *   import("./Layer.js").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import("../render/EventType").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature
   */

  /**
   * @template {import("../source/Tile.js").default} TileSourceType
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
   * means no preloading.
   * @property {TileSourceType} [source] Source for this layer.
   * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link import("../Map.js").default#addLayer map.addLayer()}.
   * @property {import("./Base.js").BackgroundColor} [background] Background color for the layer. If not specified, no background
   * will be rendered.
   * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   * @property {number} [cacheSize=512] The internal tile cache size.  This needs to be large enough to render
   * two zoom levels worth of tiles.
   */

  /**
   * @classdesc
   * For layer sources that provide pre-rendered, tiled images in grids that are
   * organized by zoom levels for specific resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Tile.js").default} TileSourceType
   * @template {import("../renderer/Layer.js").default} RendererType
   * @extends {Layer<TileSourceType, RendererType>}
   * @api
   */
  class BaseTileLayer extends Layer {
    /**
     * @param {Options<TileSourceType>} [options] Tile layer options.
     */
    constructor(options) {
      options = options ? options : {};

      const baseOptions = Object.assign({}, options);

      const cacheSize = options.cacheSize;
      delete options.cacheSize;

      delete baseOptions.preload;
      delete baseOptions.useInterimTilesOnError;
      super(baseOptions);

      /***
       * @type {BaseTileLayerOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {BaseTileLayerOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {BaseTileLayerOnSignature<void>}
       */
      this.un;

      /**
       * @type {number|undefined}
       * @private
       */
      this.cacheSize_ = cacheSize;

      this.setPreload(options.preload !== undefined ? options.preload : 0);
      this.setUseInterimTilesOnError(
        options.useInterimTilesOnError !== undefined
          ? options.useInterimTilesOnError
          : true,
      );
    }

    /**
     * @return {number|undefined} The suggested cache size
     * @protected
     */
    getCacheSize() {
      return this.cacheSize_;
    }

    /**
     * Return the level as number to which we will preload tiles up to.
     * @return {number} The level to preload tiles up to.
     * @observable
     * @api
     */
    getPreload() {
      return /** @type {number} */ (this.get(TileProperty.PRELOAD));
    }

    /**
     * Set the level as number to which we will preload tiles up to.
     * @param {number} preload The level to preload tiles up to.
     * @observable
     * @api
     */
    setPreload(preload) {
      this.set(TileProperty.PRELOAD, preload);
    }

    /**
     * Deprecated.  Whether we use interim tiles on error.
     * @return {boolean} Use interim tiles on error.
     * @observable
     * @api
     */
    getUseInterimTilesOnError() {
      return /** @type {boolean} */ (
        this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)
      );
    }

    /**
     * Deprecated.  Set whether we use interim tiles on error.
     * @param {boolean} useInterimTilesOnError Use interim tiles on error.
     * @observable
     * @api
     */
    setUseInterimTilesOnError(useInterimTilesOnError) {
      this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
    }

    /**
     * Get data for a pixel location.  The return type depends on the source data.  For image tiles,
     * a four element RGBA array will be returned.  For data tiles, the array length will match the
     * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.
     * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.
     *
     * ```js
     * // display layer data on every pointer move
     * map.on('pointermove', (event) => {
     *   console.log(layer.getData(event.pixel));
     * });
     * ```
     * @param {import("../pixel").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
     * @api
     * @override
     */
    getData(pixel) {
      return super.getData(pixel);
    }
  }

  /**
   * @module ol/layer/Tile
   */

  /**
   * @classdesc
   * For layer sources that provide pre-rendered, tiled images in grids that are
   * organized by zoom levels for specific resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Tile.js").default} [TileSourceType=import("../source/Tile.js").default]
   * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>
   * @api
   */
  class TileLayer extends BaseTileLayer {
    /**
     * @param {import("./BaseTile.js").Options<TileSourceType>} [options] Tile layer options.
     */
    constructor(options) {
      super(options);
    }

    /**
     * @override
     */
    createRenderer() {
      return new CanvasTileLayerRenderer(this, {
        cacheSize: this.getCacheSize(),
      });
    }
  }

  /**
   * @module ol/proj/proj4
   */

  /**
   * @type {import("proj4")|null}
   */
  let registered = null;

  /**
   * @return {boolean} Proj4 has been registered.
   */
  function isRegistered() {
    return !!registered;
  }

  /**
   * Unsets the shared proj4 previously set with register.
   */
  function unregister() {
    registered = null;
  }

  /**
   * Make projections defined in proj4 (with `proj4.defs()`) available in
   * OpenLayers. Requires proj4 >= 2.8.0.
   *
   * This function should be called whenever changes are made to the proj4
   * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be
   * modified by this function.
   *
   * @param {import("proj4")} proj4 Proj4.
   * @api
   */
  function register(proj4) {
    registered = proj4;

    const projCodes = Object.keys(proj4.defs);
    const len = projCodes.length;
    let i, j;
    for (i = 0; i < len; ++i) {
      const code = projCodes[i];
      if (!get$4(code)) {
        const def = proj4.defs(code);
        let units = /** @type {import("./Units.js").Units} */ (def.units);
        if (!units && def.projName === 'longlat') {
          units = 'degrees';
        }
        addProjection(
          new Projection$1({
            code: code,
            axisOrientation: def.axis,
            metersPerUnit: def.to_meter,
            units,
          }),
        );
      }
    }
    for (i = 0; i < len; ++i) {
      const code1 = projCodes[i];
      const proj1 = get$4(code1);
      for (j = 0; j < len; ++j) {
        const code2 = projCodes[j];
        const proj2 = get$4(code2);
        if (!get$3(code1, code2)) {
          if (proj4.defs[code1] === proj4.defs[code2]) {
            addEquivalentProjections([proj1, proj2]);
          } else {
            const transform = proj4(code1, code2);
            addCoordinateTransforms(
              proj1,
              proj2,
              createSafeCoordinateTransform(proj1, proj2, transform.forward),
              createSafeCoordinateTransform(proj2, proj1, transform.inverse),
            );
          }
        }
      }
    }
  }

  /**
   * @param {number} code The EPSG code.
   * @return {Promise<string>} The proj4 definition.
   */
  let epsgLookup = async function (code) {
    const response = await fetch(`https://epsg.io/${code}.proj4`);
    if (!response.ok) {
      throw new Error(`Unexpected response from epsg.io: ${response.status}`);
    }
    return response.text();
  };

  /**
   * Set the lookup function for getting proj4 definitions given an EPSG code.
   * By default, the {@link module:ol/proj/proj4.fromEPSGCode} function uses the
   * epsg.io website for proj4 definitions.  This can be changed by providing a
   * different lookup function.
   *
   * @param {function(number):Promise<string>} func The lookup function.
   * @api
   */
  function setEPSGLookup(func) {
    epsgLookup = func;
  }

  /**
   * Get the current EPSG lookup function.
   *
   * @return {function(number):Promise<string>} The EPSG lookup function.
   */
  function getEPSGLookup() {
    return epsgLookup;
  }

  /**
   * Get a projection from an EPSG code.  This function fetches the projection
   * definition from the epsg.io website, registers this definition for use with
   * proj4, and returns a configured projection.  You must call import proj4 and
   * call {@link module:ol/proj/proj4.register} before using this function.
   *
   * If the projection definition is already registered with proj4, it will not
   * be fetched again (so it is ok to call this function multiple times with the
   * same code).
   *
   * @param {number|string} code The EPSG code (e.g. 4326 or 'EPSG:4326').
   * @return {Promise<Projection>} The projection.
   * @api
   */
  async function fromEPSGCode(code) {
    if (typeof code === 'string') {
      code = parseInt(code.split(':').pop(), 10);
    }

    const proj4 = registered;
    if (!proj4) {
      throw new Error('Proj4 must be registered first with register(proj4)');
    }

    const epsgCode = 'EPSG:' + code;
    if (proj4.defs(epsgCode)) {
      return get$4(epsgCode);
    }

    proj4.defs(epsgCode, await epsgLookup(code));
    register(proj4);

    return get$4(epsgCode);
  }

  /**
   * Generate an EPSG lookup function which uses the MapTiler Coordinates API to find projection
   * definitions which do not require proj4 to be configured to handle `+nadgrids` parameters.
   * Call {@link module:ol/proj/proj4.setEPSGLookup} use the function for lookups
   * `setEPSGLookup(epsgLookupMapTiler('{YOUR_MAPTILER_API_KEY_HERE}'))`.
   *
   * @param {string} key MapTiler API key.  Get your own API key at https://www.maptiler.com/cloud/.
   * @return {function(number):Promise<string>} The EPSG lookup function.
   * @api
   */
  function epsgLookupMapTiler(key) {
    return async function (code) {
      const response = await fetch(
        `https://api.maptiler.com/coordinates/search/code:${code}.json?transformations=true&exports=true&key=${key}`,
      );
      if (!response.ok) {
        throw new Error(
          `Unexpected response from maptiler.com: ${response.status}`,
        );
      }
      return response.json().then((json) => {
        const results = json['results'];
        if (results?.length > 0) {
          const result = results.filter(
            (r) =>
              r['id']?.['authority'] === 'EPSG' && r['id']?.['code'] === code,
          )[0];
          if (result) {
            const transforms = result['transformations'];
            if (transforms?.length > 0) {
              // use default transform if it does not require grids
              const defaultTransform = result['default_transformation'];
              if (
                transforms.filter(
                  (t) =>
                    t['id']?.['authority'] === defaultTransform?.['authority'] &&
                    t['id']?.['code'] === defaultTransform?.['code'] &&
                    t['grids']?.length === 0,
                ).length > 0
              ) {
                return result['exports']?.['proj4'];
              }
              // otherwise use most accurate alternative without grids
              const transform = transforms
                .filter(
                  (t) =>
                    t['grids']?.length === 0 &&
                    t['target_crs']?.['authority'] === 'EPSG' &&
                    t['target_crs']?.['code'] === 4326 &&
                    t['deprecated'] === false &&
                    t['usable'] === true,
                )
                .sort((t1, t2) => t1['accuracy'] - t2['accuracy'])[0]?.[
                'exports'
              ]?.['proj4'];
              if (transform) {
                return transform;
              }
            }
            // fallback to default
            return result['exports']?.['proj4'];
          }
        }
      });
    };
  }

  var projProj4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    epsgLookupMapTiler: epsgLookupMapTiler,
    fromEPSGCode: fromEPSGCode,
    getEPSGLookup: getEPSGLookup,
    isRegistered: isRegistered,
    register: register,
    setEPSGLookup: setEPSGLookup,
    unregister: unregister
  });

  /**
   * @module ol/tilegrid
   */

  /**
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {!TileGrid} Default tile grid for the
   * passed projection.
   */
  function getForProjection(projection) {
    let tileGrid = projection.getDefaultTileGrid();
    if (!tileGrid) {
      tileGrid = createForProjection(projection);
      projection.setDefaultTileGrid(tileGrid);
    }
    return tileGrid;
  }

  /**
   * @param {TileGrid} tileGrid Tile grid.
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {import("./tilecoord.js").TileCoord} Tile coordinate.
   */
  function wrapX(tileGrid, tileCoord, projection) {
    const z = tileCoord[0];
    const center = tileGrid.getTileCoordCenter(tileCoord);
    const projectionExtent = extentFromProjection(projection);
    if (!containsCoordinate(projectionExtent, center)) {
      const worldWidth = getWidth(projectionExtent);
      const worldsAway = Math.ceil(
        (projectionExtent[0] - center[0]) / worldWidth,
      );
      center[0] += worldWidth * worldsAway;
      return tileGrid.getTileCoordForCoordAndZ(center, z);
    }
    return tileCoord;
  }

  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} [maxZoom] Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size} [tileSize] Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {import("./extent.js").Corner} [corner] Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForExtent(extent, maxZoom, tileSize, corner) {
    corner = corner !== undefined ? corner : 'top-left';

    const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);

    return new TileGrid({
      extent: extent,
      origin: getCorner(extent, corner),
      resolutions: resolutions,
      tileSize: tileSize,
    });
  }

  /**
   * @typedef {Object} XYZOptions
   * @property {import("./extent.js").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the
   * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution
   * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.
   * @property {number} [maxResolution] Resolution at level zero.
   * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels
   * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.
   * @property {number} [minZoom=0] Minimum zoom.
   * @property {number|import("./size.js").Size} [tileSize=[256, 256]] Tile size in pixels.
   */

  /**
   * Creates a tile grid with a standard XYZ tiling scheme.
   * @param {XYZOptions} [options] Tile grid options.
   * @return {!TileGrid} Tile grid instance.
   * @api
   */
  function createXYZ(options) {
    const xyzOptions = options || {};

    const extent = xyzOptions.extent || get$2('EPSG:3857').getExtent();

    const gridOptions = {
      extent: extent,
      minZoom: xyzOptions.minZoom,
      tileSize: xyzOptions.tileSize,
      resolutions: resolutionsFromExtent(
        extent,
        xyzOptions.maxZoom,
        xyzOptions.tileSize,
        xyzOptions.maxResolution,
      ),
    };
    return new TileGrid(gridOptions);
  }

  /**
   * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} [maxZoom] Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size} [tileSize] Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {number} [maxResolution] Resolution at level zero.
   * @return {!Array<number>} Resolutions array.
   */
  function resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {
    maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;
    tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);

    const height = getHeight(extent);
    const width = getWidth(extent);

    maxResolution =
      maxResolution > 0
        ? maxResolution
        : Math.max(width / tileSize[0], height / tileSize[1]);

    const length = maxZoom + 1;
    const resolutions = new Array(length);
    for (let z = 0; z < length; ++z) {
      resolutions[z] = maxResolution / Math.pow(2, z);
    }
    return resolutions;
  }

  /**
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @param {number} [maxZoom] Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size} [tileSize] Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {import("./extent.js").Corner} [corner] Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForProjection(projection, maxZoom, tileSize, corner) {
    const extent = extentFromProjection(projection);
    return createForExtent(extent, maxZoom, tileSize, corner);
  }

  /**
   * Generate a tile grid extent from a projection.  If the projection has an
   * extent, it is used.  If not, a global extent is assumed.
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @return {import("./extent.js").Extent} Extent.
   */
  function extentFromProjection(projection) {
    projection = get$2(projection);
    let extent = projection.getExtent();
    if (!extent) {
      const half =
        (180 * METERS_PER_UNIT$1.degrees) / projection.getMetersPerUnit();
      extent = createOrUpdate$2(-half, -half, half, half);
    }
    return extent;
  }

  /**
   * @module ol/uri
   */


  /**
   * Appends query parameters to a URI.
   *
   * @param {string} uri The original URI, which may already have query data.
   * @param {!Object} params An object where keys are URI-encoded parameter keys,
   *     and the values are arbitrary types or arrays.
   * @return {string} The new URI.
   */
  function appendParams(uri, params) {
    /** @type {Array<string>} */
    const keyParams = [];
    // Skip any null or undefined parameter values
    Object.keys(params).forEach(function (k) {
      if (params[k] !== null && params[k] !== undefined) {
        keyParams.push(k + '=' + encodeURIComponent(params[k]));
      }
    });
    const qs = keyParams.join('&');
    // remove any trailing ? or &
    uri = uri.replace(/[?&]$/, '');
    // append ? or & depending on whether uri has existing parameters
    uri += uri.includes('?') ? '&' : '?';
    return uri + qs;
  }

  const zRegEx = /\{z\}/g;
  const xRegEx = /\{x\}/g;
  const yRegEx = /\{y\}/g;
  const dashYRegEx = /\{-y\}/g;

  /**
   * @param {string} template The URL template.  Should have `{x}`, `{y}`, and `{z}` placeholders.  If
   * the template has a `{-y}` placeholder, the `maxY` parameter must be supplied.
   * @param {number} z The tile z coordinate.
   * @param {number} x The tile x coordinate.
   * @param {number} y The tile y coordinate.
   * @param {number} [maxY] The maximum y coordinate at the given z level.
   * @return {string} The URL.
   */
  function renderXYZTemplate(template, z, x, y, maxY) {
    return template
      .replace(zRegEx, z.toString())
      .replace(xRegEx, x.toString())
      .replace(yRegEx, y.toString())
      .replace(dashYRegEx, function () {
        if (maxY === undefined) {
          throw new Error(
            'If the URL template has a {-y} placeholder, the grid extent must be known',
          );
        }
        return (maxY - y).toString();
      });
  }

  /**
   * @param {string} url URL.
   * @return {Array<string>} Array of urls.
   */
  function expandUrl(url) {
    const urls = [];
    let match = /\{([a-z])-([a-z])\}/.exec(url);
    if (match) {
      // char range
      const startCharCode = match[1].charCodeAt(0);
      const stopCharCode = match[2].charCodeAt(0);
      let charCode;
      for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
        urls.push(url.replace(match[0], String.fromCharCode(charCode)));
      }
      return urls;
    }
    match = /\{(\d+)-(\d+)\}/.exec(url);
    if (match) {
      // number range
      const stop = parseInt(match[2], 10);
      for (let i = parseInt(match[1], 10); i <= stop; i++) {
        urls.push(url.replace(match[0], i.toString()));
      }
      return urls;
    }
    urls.push(url);
    return urls;
  }

  /**
   * @module ol/tileurlfunction
   */

  /**
   * @param {string} template Template.
   * @param {import("./tilegrid/TileGrid.js").default|null} tileGrid Tile grid.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTemplate(template, tileGrid) {
    return (
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function (tileCoord, pixelRatio, projection) {
        if (!tileCoord) {
          return undefined;
        }
        let maxY;
        const z = tileCoord[0];
        if (tileGrid) {
          // The `{-y}` placeholder only works for sources that have a tile grid at construction
          const range = tileGrid.getFullTileRange(z);
          if (range) {
            maxY = range.getHeight() - 1;
          }
        }
        return renderXYZTemplate(template, z, tileCoord[1], tileCoord[2], maxY);
      }
    );
  }

  /**
   * @param {Array<string>} templates Templates.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTemplates(templates, tileGrid) {
    const len = templates.length;
    const tileUrlFunctions = new Array(len);
    for (let i = 0; i < len; ++i) {
      tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
    }
    return createFromTileUrlFunctions(tileUrlFunctions);
  }

  /**
   * @param {Array<import("./Tile.js").UrlFunction>} tileUrlFunctions Tile URL Functions.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTileUrlFunctions(tileUrlFunctions) {
    if (tileUrlFunctions.length === 1) {
      return tileUrlFunctions[0];
    }
    return (
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function (tileCoord, pixelRatio, projection) {
        if (!tileCoord) {
          return undefined;
        }
        const h = hash(tileCoord);
        const index = modulo(h, tileUrlFunctions.length);
        return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
      }
    );
  }

  /**
   * @module ol/source/Tile
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<import("./TileEventType").TileSourceEventTypes, TileSourceEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     import("./TileEventType").TileSourceEventTypes, Return>} TileSourceOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.
   * @property {number} [tilePixelRatio] TilePixelRatio.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection.
   * @property {import("./Source.js").State} [state] State.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] TileGrid.
   * @property {boolean} [wrapX=false] WrapX.
   * @property {number} [transition] Transition.
   * @property {string} [key] Key.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0] ZDirection.
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for sources providing images divided into a tile grid.
   *
   * @template {import("../Tile.js").default} [TileType=import("../Tile.js").default]
   * @abstract
   * @api
   */
  class TileSource extends Source {
    /**
     * @param {Options} options SourceTile source options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        projection: options.projection,
        state: options.state,
        wrapX: options.wrapX,
        interpolate: options.interpolate,
      });

      /***
       * @type {TileSourceOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {TileSourceOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {TileSourceOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {number}
       */
      this.tilePixelRatio_ =
        options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;

      /**
       * @type {import("../tilegrid/TileGrid.js").default|null}
       * @protected
       */
      this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;

      const tileSize = [256, 256];
      if (this.tileGrid) {
        toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);
      }

      /**
       * @protected
       * @type {import("../size.js").Size}
       */
      this.tmpSize = [0, 0];

      /**
       * @private
       * @type {string}
       */
      this.key_ = options.key || getUid(this);

      /**
       * @protected
       * @type {import("../Tile.js").Options}
       */
      this.tileOptions = {
        transition: options.transition,
        interpolate: options.interpolate,
      };

      /**
       * zDirection hint, read by the renderer. Indicates which resolution should be used
       * by a renderer if the views resolution does not match any resolution of the tile source.
       * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
       * will be used. If -1, the nearest higher resolution will be used.
       * @type {number|import("../array.js").NearestDirectionFunction}
       */
      this.zDirection = options.zDirection ? options.zDirection : 0;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {number} Gutter.
     */
    getGutterForProjection(projection) {
      return 0;
    }

    /**
     * Return the key to be used for all tiles in the source.
     * @return {string} The key for all tiles.
     */
    getKey() {
      return this.key_;
    }

    /**
     * Set the value to be used as the key for all tiles in the source.
     * @param {string} key The key for tiles.
     * @protected
     */
    setKey(key) {
      if (this.key_ !== key) {
        this.key_ = key;
        this.changed();
      }
    }

    /**
     * @param {import("../proj/Projection").default} [projection] Projection.
     * @return {Array<number>|null} Resolutions.
     * @override
     */
    getResolutions(projection) {
      const tileGrid = projection
        ? this.getTileGridForProjection(projection)
        : this.tileGrid;
      if (!tileGrid) {
        return null;
      }
      return tileGrid.getResolutions();
    }

    /**
     * @abstract
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {TileType|null} Tile.
     */
    getTile(z, x, y, pixelRatio, projection) {
      return abstract();
    }

    /**
     * Return the tile grid of the tile source.
     * @return {import("../tilegrid/TileGrid.js").default|null} Tile grid.
     * @api
     */
    getTileGrid() {
      return this.tileGrid;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
     */
    getTileGridForProjection(projection) {
      if (!this.tileGrid) {
        return getForProjection(projection);
      }
      return this.tileGrid;
    }

    /**
     * Get the tile pixel ratio for this source. Subclasses may override this
     * method, which is meant to return a supported pixel ratio that matches the
     * provided `pixelRatio` as close as possible.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Tile pixel ratio.
     */
    getTilePixelRatio(pixelRatio) {
      return this.tilePixelRatio_;
    }

    /**
     * @param {number} z Z.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../size.js").Size} Tile size.
     */
    getTilePixelSize(z, pixelRatio, projection) {
      const tileGrid = this.getTileGridForProjection(projection);
      const tilePixelRatio = this.getTilePixelRatio(pixelRatio);
      const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
      if (tilePixelRatio == 1) {
        return tileSize;
      }
      return scale(tileSize, tilePixelRatio, this.tmpSize);
    }

    /**
     * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
     * is outside the resolution and extent range of the tile grid, `null` will be
     * returned.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../proj/Projection.js").default} [projection] Projection.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
     *     null if no tile URL should be created for the passed `tileCoord`.
     */
    getTileCoordForTileUrlFunction(tileCoord, projection) {
      const gridProjection =
        projection !== undefined ? projection : this.getProjection();
      const tileGrid =
        projection !== undefined
          ? this.getTileGridForProjection(gridProjection)
          : this.tileGrid || this.getTileGridForProjection(gridProjection);
      if (this.getWrapX() && gridProjection.isGlobal()) {
        tileCoord = wrapX(tileGrid, tileCoord, gridProjection);
      }
      return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;
    }

    /**
     * Remove all cached reprojected tiles from the source. The next render cycle will create new tiles.
     * @api
     */
    clear() {}

    /**
     * @override
     */
    refresh() {
      this.clear();
      super.refresh();
    }
  }

  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
   * type.
   */
  class TileSourceEvent extends BaseEvent {
    /**
     * @param {string} type Type.
     * @param {import("../Tile.js").default} tile The tile.
     */
    constructor(type, tile) {
      super(type);

      /**
       * The tile related to the event.
       * @type {import("../Tile.js").default}
       * @api
       */
      this.tile = tile;
    }
  }

  /**
   * @module ol/source/TileEventType
   */

  /**
   * @enum {string}
   */
  var TileEventType = {
    /**
     * Triggered when a tile starts loading.
     * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
     * @api
     */
    TILELOADSTART: 'tileloadstart',

    /**
     * Triggered when a tile finishes loading, either when its data is loaded,
     * or when loading was aborted because the tile is no longer needed.
     * @event module:ol/source/Tile.TileSourceEvent#tileloadend
     * @api
     */
    TILELOADEND: 'tileloadend',

    /**
     * Triggered if tile loading results in an error. Note that this is not the
     * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}
     * for details.
     * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
     * @api
     */
    TILELOADERROR: 'tileloaderror',
  };

  /**
   * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes
   */

  /**
   * @module ol/source/UrlTile
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection.
   * @property {import("./Source.js").State} [state] State.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] TileGrid.
   * @property {import("../Tile.js").LoadFunction} tileLoadFunction TileLoadFunction.
   * @property {number} [tilePixelRatio] TilePixelRatio.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function
   * for the url option instead.
   * @property {string} [url] Url.
   * @property {Array<string>} [urls] Urls.
   * @property {boolean} [wrapX=true] WrapX.
   * @property {number} [transition] Transition.
   * @property {string} [key] Key.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0] ZDirection.
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   */

  /**
   * @deprecated Use the ol/source/ImageTile.js instead.
   *
   * @fires import("./Tile.js").TileSourceEvent
   */
  class UrlTile extends TileSource {
    /**
     * @param {Options} options Image tile options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        projection: options.projection,
        state: options.state,
        tileGrid: options.tileGrid,
        tilePixelRatio: options.tilePixelRatio,
        wrapX: options.wrapX,
        transition: options.transition,
        interpolate: options.interpolate,
        key: options.key,
        attributionsCollapsible: options.attributionsCollapsible,
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {boolean}
       */
      this.generateTileUrlFunction_ =
        this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;

      /**
       * @protected
       * @type {import("../Tile.js").LoadFunction}
       */
      this.tileLoadFunction = options.tileLoadFunction;

      if (options.tileUrlFunction) {
        this.tileUrlFunction = options.tileUrlFunction;
      }

      /**
       * @protected
       * @type {!Array<string>|null}
       */
      this.urls = null;

      if (options.urls) {
        this.setUrls(options.urls);
      } else if (options.url) {
        this.setUrl(options.url);
      }

      /**
       * @private
       * @type {!Object<string, boolean>}
       */
      this.tileLoadingKeys_ = {};
    }

    /**
     * Deprecated.  Use an ImageTile source instead.
     * Return the tile load function of the source.
     * @return {import("../Tile.js").LoadFunction} TileLoadFunction
     * @api
     */
    getTileLoadFunction() {
      return this.tileLoadFunction;
    }

    /**
     * Deprecated.  Use an ImageTile source instead.
     * Return the tile URL function of the source.
     * @return {import("../Tile.js").UrlFunction} TileUrlFunction
     * @api
     */
    getTileUrlFunction() {
      return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction
        ? this.tileUrlFunction.bind(this)
        : this.tileUrlFunction;
    }

    /**
     * Deprecated.  Use an ImageTile source instead.
     * Return the URLs used for this source.
     * When a tileUrlFunction is used instead of url or urls,
     * null will be returned.
     * @return {!Array<string>|null} URLs.
     * @api
     */
    getUrls() {
      return this.urls;
    }

    /**
     * Handle tile change events.
     * @param {import("../events/Event.js").default} event Event.
     * @protected
     */
    handleTileChange(event) {
      const tile = /** @type {import("../Tile.js").default} */ (event.target);
      const uid = getUid(tile);
      const tileState = tile.getState();
      let type;
      if (tileState == TileState.LOADING) {
        this.tileLoadingKeys_[uid] = true;
        type = TileEventType.TILELOADSTART;
      } else if (uid in this.tileLoadingKeys_) {
        delete this.tileLoadingKeys_[uid];
        type =
          tileState == TileState.ERROR
            ? TileEventType.TILELOADERROR
            : tileState == TileState.LOADED
              ? TileEventType.TILELOADEND
              : undefined;
      }
      if (type != undefined) {
        this.dispatchEvent(new TileSourceEvent(type, tile));
      }
    }

    /**
     * Deprecated.  Use an ImageTile source instead.
     * Set the tile load function of the source.
     * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @api
     */
    setTileLoadFunction(tileLoadFunction) {
      this.tileLoadFunction = tileLoadFunction;
      this.changed();
    }

    /**
     * Deprecated.  Use an ImageTile source instead.
     * Set the tile URL function of the source.
     * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
     * @param {string} [key] Optional new tile key for the source.
     * @api
     */
    setTileUrlFunction(tileUrlFunction, key) {
      this.tileUrlFunction = tileUrlFunction;
      if (typeof key !== 'undefined') {
        this.setKey(key);
      } else {
        this.changed();
      }
    }

    /**
     * Set the URL to use for requests.
     * @param {string} url URL.
     * @api
     */
    setUrl(url) {
      const urls = expandUrl(url);
      this.urls = urls;
      this.setUrls(urls);
    }

    /**
     * Deprecated.  Use an ImageTile source instead.
     * Set the URLs to use for requests.
     * @param {Array<string>} urls URLs.
     * @api
     */
    setUrls(urls) {
      this.urls = urls;
      const key = urls.join('\n');
      if (this.generateTileUrlFunction_) {
        this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);
      } else {
        this.setKey(key);
      }
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {string|undefined} Tile URL.
     */
    tileUrlFunction(tileCoord, pixelRatio, projection) {
      return undefined;
    }
  }

  /**
   * @module ol/source/TileImage
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("./Source.js").State} [state] Source state.
   * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
   * service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function
   * for the url option instead.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
   * used instead of defining each one separately in the `urls` option.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
   * request out-of-bounds tiles from the server. When set to `false`, only one
   * world will be rendered. When set to `true`, tiles will be requested for one
   * world only, but they will be wrapped horizontally to render multiple worlds.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {string} [key] Optional tile key for proper cache fetching
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @deprecated Use the ol/source/ImageTile.js instead.
   *
   * @fires import("./Tile.js").TileSourceEvent
   * @api
   */
  class TileImage extends UrlTile {
    /**
     * @param {!Options} options Image tile options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        projection: options.projection,
        state: options.state,
        tileGrid: options.tileGrid,
        tileLoadFunction: options.tileLoadFunction
          ? options.tileLoadFunction
          : defaultTileLoadFunction,
        tilePixelRatio: options.tilePixelRatio,
        tileUrlFunction: options.tileUrlFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX,
        transition: options.transition,
        interpolate:
          options.interpolate !== undefined ? options.interpolate : true,
        key: options.key,
        attributionsCollapsible: options.attributionsCollapsible,
        zDirection: options.zDirection,
      });

      /**
       * @protected
       * @type {?string}
       */
      this.crossOrigin =
        options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @protected
       * @type {typeof ImageTile}
       */
      this.tileClass =
        options.tileClass !== undefined ? options.tileClass : ImageTile;

      /**
       * @protected
       * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
       */
      this.tileGridForProjection = {};

      /**
       * @private
       * @type {number|undefined}
       */
      this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;

      /**
       * @private
       * @type {boolean}
       */
      this.renderReprojectionEdges_ = false;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {number} Gutter.
     * @override
     */
    getGutterForProjection(projection) {
      if (
        this.getProjection() &&
        projection &&
        !equivalent$1(this.getProjection(), projection)
      ) {
        return 0;
      }
      return this.getGutter();
    }

    /**
     * @return {number} Gutter.
     */
    getGutter() {
      return 0;
    }

    /**
     * Return the key to be used for all tiles in the source.
     * @return {string} The key for all tiles.
     * @override
     */
    getKey() {
      let key = super.getKey();
      if (!this.getInterpolate()) {
        key += ':disable-interpolation';
      }
      return key;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
     * @override
     */
    getTileGridForProjection(projection) {
      const thisProj = this.getProjection();
      if (this.tileGrid && (!thisProj || equivalent$1(thisProj, projection))) {
        return this.tileGrid;
      }
      const projKey = getUid(projection);
      if (!(projKey in this.tileGridForProjection)) {
        this.tileGridForProjection[projKey] =
          getForProjection(projection);
      }
      return this.tileGridForProjection[projKey];
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {string} key The key set on the tile.
     * @return {!ImageTile} Tile.
     * @private
     */
    createTile_(z, x, y, pixelRatio, projection, key) {
      const tileCoord = [z, x, y];
      const urlTileCoord = this.getTileCoordForTileUrlFunction(
        tileCoord,
        projection,
      );
      const tileUrl = urlTileCoord
        ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)
        : undefined;
      const tile = new this.tileClass(
        tileCoord,
        tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,
        tileUrl !== undefined ? tileUrl : '',
        this.crossOrigin,
        this.tileLoadFunction,
        this.tileOptions,
      );
      tile.key = key;
      tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));
      return tile;
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!(ImageTile|ReprojTile)} Tile.
     * @override
     */
    getTile(z, x, y, pixelRatio, projection) {
      const sourceProjection = this.getProjection();
      if (
        !sourceProjection ||
        !projection ||
        equivalent$1(sourceProjection, projection)
      ) {
        return this.getTileInternal(
          z,
          x,
          y,
          pixelRatio,
          sourceProjection || projection,
        );
      }
      const tileCoord = [z, x, y];
      const key = this.getKey();
      const sourceTileGrid = this.getTileGridForProjection(sourceProjection);
      const targetTileGrid = this.getTileGridForProjection(projection);
      const wrappedTileCoord = this.getTileCoordForTileUrlFunction(
        tileCoord,
        projection,
      );
      const tile = new ReprojTile(
        sourceProjection,
        sourceTileGrid,
        projection,
        targetTileGrid,
        tileCoord,
        wrappedTileCoord,
        this.getTilePixelRatio(pixelRatio),
        this.getGutter(),
        (z, x, y, pixelRatio) =>
          this.getTileInternal(z, x, y, pixelRatio, sourceProjection),
        this.reprojectionErrorThreshold_,
        this.renderReprojectionEdges_,
        this.tileOptions,
      );
      tile.key = key;
      return tile;
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {!import("../proj/Projection.js").default} projection Projection.
     * @return {!ImageTile} Tile.
     * @protected
     */
    getTileInternal(z, x, y, pixelRatio, projection) {
      const key = this.getKey();
      return this.createTile_(z, x, y, pixelRatio, projection, key);
    }

    /**
     * Sets whether to render reprojection edges or not (usually for debugging).
     * @param {boolean} render Render the edges.
     * @api
     */
    setRenderReprojectionEdges(render) {
      if (this.renderReprojectionEdges_ == render) {
        return;
      }
      this.renderReprojectionEdges_ = render;
      this.changed();
    }

    /**
     * Sets the tile grid to use when reprojecting the tiles to the given
     * projection instead of the default tile grid for the projection.
     *
     * This can be useful when the default tile grid cannot be created
     * (e.g. projection has no extent defined) or
     * for optimization reasons (custom tile size, resolutions, ...).
     *
     * @param {import("../proj.js").ProjectionLike} projection Projection.
     * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
     * @api
     */
    setTileGridForProjection(projection, tilegrid) {
      const proj = get$2(projection);
      if (proj) {
        const projKey = getUid(proj);
        if (!(projKey in this.tileGridForProjection)) {
          this.tileGridForProjection[projKey] = tilegrid;
        }
      }
    }
  }

  /**
   * @param {ImageTile} imageTile Image tile.
   * @param {string} src Source.
   */
  function defaultTileLoadFunction(imageTile, src) {
    /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =
      src;
  }

  /**
   * @module ol/source/BingMaps
   */


  /**
   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.
   * @return {string} Quad key.
   */
  function quadKey(tileCoord) {
    const z = tileCoord[0];
    const digits = new Array(z);
    let mask = 1 << (z - 1);
    let i, charCode;
    for (i = 0; i < z; ++i) {
      // 48 is charCode for 0 - '0'.charCodeAt(0)
      charCode = 48;
      if (tileCoord[1] & mask) {
        charCode += 1;
      }
      if (tileCoord[2] & mask) {
        charCode += 2;
      }
      digits[i] = String.fromCharCode(charCode);
      mask >>= 1;
    }
    return digits.join('');
  }

  /**
   * The attribution containing a link to the MicrosoftÂ® Bingâ¢ Maps Platform APIsâ
   * Terms Of Use.
   * @const
   * @type {string}
   */
  const TOS_ATTRIBUTION =
    '<a class="ol-attribution-bing-tos" ' +
    'href="https://www.microsoft.com/maps/product/terms.html" target="_blank">' +
    'Terms of Use</a>';

  /**
   * @typedef {Object} Options
   * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.
   * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.
   * @property {string} [culture='en-us'] Culture code.
   * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.
   * @property {string} imagerySet Type of imagery.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   * @property {boolean} [placeholderTiles] Whether to show BingMaps placeholder tiles when zoomed past the maximum level provided in an area. When `false`, requests beyond
   * the maximum zoom level will return no tile. When `true`, the placeholder tile will be returned. When not set, the default behaviour of the imagery set takes place,
   * which is unique for each imagery set in BingMaps.
   */

  /**
   * @typedef {Object} BingMapsImageryMetadataResponse
   * @property {number} statusCode The response status code
   * @property {string} statusDescription The response status description
   * @property {string} authenticationResultCode The authentication result code
   * @property {Array<ResourceSet>} resourceSets The array of resource sets
   */

  /**
   * @typedef {Object} ResourceSet
   * @property {Array<Resource>} resources Resources.
   */

  /**
   * @typedef {Object} Resource
   * @property {number} imageHeight The image height
   * @property {number} imageWidth The image width
   * @property {number} zoomMin The minimum zoom level
   * @property {number} zoomMax The maximum zoom level
   * @property {string} imageUrl The image URL
   * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation
   * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders
   */

  /**
   * @typedef {Object} ImageryProvider
   * @property {Array<CoverageArea>} coverageAreas The coverage areas
   * @property {string} [attribution] The attribution
   */

  /**
   * @typedef {Object} CoverageArea
   * @property {number} zoomMin The minimum zoom
   * @property {number} zoomMax The maximum zoom
   * @property {Array<number>} bbox The coverage bounding box
   */

  /**
   * @classdesc
   * Layer source for Bing Maps tile data.
   * @api
   */
  class BingMaps extends TileImage {
    /**
     * @param {Options} options Bing Maps options.
     */
    constructor(options) {
      const hidpi = options.hidpi !== undefined ? options.hidpi : false;

      super({
        cacheSize: options.cacheSize,
        crossOrigin: 'anonymous',
        interpolate: options.interpolate,
        projection: get$2('EPSG:3857'),
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        state: 'loading',
        tileLoadFunction: options.tileLoadFunction,
        tilePixelRatio: hidpi ? 2 : 1,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition,
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = hidpi;

      /**
       * @private
       * @type {string}
       */
      this.culture_ = options.culture !== undefined ? options.culture : 'en-us';

      /**
       * @private
       * @type {number}
       */
      this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;

      /**
       * @private
       * @type {string}
       */
      this.apiKey_ = options.key;

      /**
       * @private
       * @type {string}
       */
      this.imagerySet_ = options.imagerySet;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.placeholderTiles_ = options.placeholderTiles;

      const url =
        'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +
        this.imagerySet_ +
        '?uriScheme=https&include=ImageryProviders&key=' +
        this.apiKey_ +
        '&c=' +
        this.culture_;

      fetch(url)
        .then((response) => response.json())
        .then((json) => this.handleImageryMetadataResponse(json));
    }

    /**
     * Get the api key used for this source.
     *
     * @return {string} The api key.
     * @api
     */
    getApiKey() {
      return this.apiKey_;
    }

    /**
     * Get the imagery set associated with this source.
     *
     * @return {string} The imagery set.
     * @api
     */
    getImagerySet() {
      return this.imagerySet_;
    }

    /**
     * @param {BingMapsImageryMetadataResponse} response Response.
     */
    handleImageryMetadataResponse(response) {
      if (
        response.statusCode != 200 ||
        response.statusDescription != 'OK' ||
        response.authenticationResultCode != 'ValidCredentials' ||
        response.resourceSets.length != 1 ||
        response.resourceSets[0].resources.length != 1
      ) {
        this.setState('error');
        return;
      }

      const resource = response.resourceSets[0].resources[0];
      const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;

      const sourceProjection = this.getProjection();
      const extent = extentFromProjection(sourceProjection);
      const scale = this.hidpi_ ? 2 : 1;
      const tileSize =
        resource.imageWidth == resource.imageHeight
          ? resource.imageWidth / scale
          : [resource.imageWidth / scale, resource.imageHeight / scale];

      const tileGrid = createXYZ({
        extent: extent,
        minZoom: resource.zoomMin,
        maxZoom: maxZoom,
        tileSize: tileSize,
      });
      this.tileGrid = tileGrid;

      const culture = this.culture_;
      const hidpi = this.hidpi_;
      const placeholderTiles = this.placeholderTiles_;
      this.tileUrlFunction = createFromTileUrlFunctions(
        resource.imageUrlSubdomains.map(function (subdomain) {
          /** @type {import('../tilecoord.js').TileCoord} */
          const quadKeyTileCoord = [0, 0, 0];
          const imageUrl = resource.imageUrl
            .replace('{subdomain}', subdomain)
            .replace('{culture}', culture);
          return (
            /**
             * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
             * @param {number} pixelRatio Pixel ratio.
             * @param {import("../proj/Projection.js").default} projection Projection.
             * @return {string|undefined} Tile URL.
             */
            function (tileCoord, pixelRatio, projection) {
              if (!tileCoord) {
                return undefined;
              }
              createOrUpdate(
                tileCoord[0],
                tileCoord[1],
                tileCoord[2],
                quadKeyTileCoord,
              );
              const url = new URL(
                imageUrl.replace('{quadkey}', quadKey(quadKeyTileCoord)),
              );
              const params = url.searchParams;
              if (hidpi) {
                params.set('dpi', 'd1');
                params.set('device', 'mobile');
              }
              if (placeholderTiles === true) {
                params.delete('n');
              } else if (placeholderTiles === false) {
                params.set('n', 'z');
              }
              return url.toString();
            }
          );
        }),
      );

      if (resource.imageryProviders) {
        const transform = getTransformFromProjections(
          get$2('EPSG:4326'),
          this.getProjection(),
        );

        this.setAttributions((frameState) => {
          const attributions = [];
          const viewState = frameState.viewState;
          const tileGrid = this.getTileGrid();
          const z = tileGrid.getZForResolution(
            viewState.resolution,
            this.zDirection,
          );
          const tileCoord = tileGrid.getTileCoordForCoordAndZ(
            viewState.center,
            z,
          );
          const zoom = tileCoord[0];
          resource.imageryProviders.map(function (imageryProvider) {
            let intersecting = false;
            const coverageAreas = imageryProvider.coverageAreas;
            for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {
              const coverageArea = coverageAreas[i];
              if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {
                const bbox = coverageArea.bbox;
                const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];
                const extent = applyTransform(epsg4326Extent, transform);
                if (intersects$1(extent, frameState.extent)) {
                  intersecting = true;
                  break;
                }
              }
            }
            if (intersecting) {
              attributions.push(imageryProvider.attribution);
            }
          });

          attributions.push(TOS_ATTRIBUTION);
          return attributions;
        });
      }

      this.setState('ready');
    }
  }

  /**
   * @module ol/source/XYZ
   */


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.
   * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.
   * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Deprecated.  Use an ImageTile source with a loader
   * instead.  Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
   * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
   * Not used if `tileGrid` is provided.
   * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.
   * This allows artifacts of rendering at tile edges to be ignored.
   * Supported images should be wider and taller than the tile size by a value of `2 x gutter`.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function
   * for the url option instead.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
   * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
   * may be used instead of defining each one separately in the `urls` option.
   * @property {Array<string>} [urls] Deprecated.  Use an ImageTile source and provide an array of URLs for the
   * url option instead.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition=250] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for tile data with URLs in a set XYZ format that are
   * defined in a URL template. By default, this follows the widely-used
   * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
   * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
   * using the `{-y}` placeholder in the URL template, so long as the
   * source does not have a custom tile grid. In this case
   * a `tileUrlFunction` can be used, such as:
   * ```js
   *  tileUrlFunction: function(coordinate) {
   *    return 'http://mapserver.com/' + coordinate[0] + '/' +
   *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';
   *  }
   * ```
   * @api
   */
  let XYZ$1 = class XYZ extends TileImage {
    /**
     * @param {Options} [options] XYZ options.
     */
    constructor(options) {
      options = options || {};

      const projection =
        options.projection !== undefined ? options.projection : 'EPSG:3857';

      const tileGrid =
        options.tileGrid !== undefined
          ? options.tileGrid
          : createXYZ({
              extent: extentFromProjection(projection),
              maxResolution: options.maxResolution,
              maxZoom: options.maxZoom,
              minZoom: options.minZoom,
              tileSize: options.tileSize,
            });

      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        interpolate: options.interpolate,
        projection: projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileGrid: tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        tilePixelRatio: options.tilePixelRatio,
        tileUrlFunction: options.tileUrlFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition,
        attributionsCollapsible: options.attributionsCollapsible,
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {number}
       */
      this.gutter_ = options.gutter !== undefined ? options.gutter : 0;
    }

    /**
     * @return {number} Gutter.
     * @override
     */
    getGutter() {
      return this.gutter_;
    }
  };

  /**
   * @module ol/source/Cluster
   */


  /**
   * @template {import("../Feature.js").FeatureLike} [FeatureType=import("../Feature.js").FeatureLike]
   * @typedef {(feature: FeatureType) => (Point|null)} GeometryFunction
   */

  /**
   * @template {import("../Feature.js").FeatureLike} [FeatureType=import("../Feature.js").default]
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [distance=20] Distance in pixels within which features will
   * be clustered together.
   * @property {number} [minDistance=0] Minimum distance in pixels between clusters.
   * Will be capped at the configured distance.
   * By default no minimum distance is guaranteed. This config can be used to avoid
   * overlapping icons. As a tradoff, the cluster feature's position will no longer be
   * the center of all its features.
   * @property {GeometryFunction<FeatureType>} [geometryFunction]
   * Function that takes a {@link module:ol/Feature~Feature} as argument and returns a
   * {@link module:ol/geom/Point~Point} as cluster calculation point for the feature. When a
   * feature should not be considered for clustering, the function should return
   * `null`. The default, which works when the underlying source contains point
   * features only, is
   * ```js
   * function(feature) {
   *   return feature.getGeometry();
   * }
   * ```
   * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster
   * calculation point for polygons.
   * @property {function(Point, Array<FeatureType>):Feature} [createCluster]
   * Function that takes the cluster's center {@link module:ol/geom/Point~Point} and an array
   * of {@link module:ol/Feature~Feature} included in this cluster. Must return a
   * {@link module:ol/Feature~Feature} that will be used to render. Default implementation is:
   * ```js
   * function(point, features) {
   *   return new Feature({
   *     geometry: point,
   *     features: features
   *   });
   * }
   * ```
   * @property {VectorSource<FeatureType>} [source=null] Source.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   */

  /**
   * @classdesc
   * Layer source to cluster vector data. Works out of the box with point
   * geometries. For other geometry types, or if not all geometries should be
   * considered for clustering, a custom `geometryFunction` can be defined.
   *
   * If the instance is disposed without also disposing the underlying
   * source `setSource(null)` has to be called to remove the listener reference
   * from the wrapped source.
   * @api
   * @template {import('../Feature.js').FeatureLike} [FeatureType=import('../Feature.js').default]
   * @extends {VectorSource<Feature<import("../geom/Geometry.js").default>>}
   */
  class Cluster extends VectorSource {
    /**
     * @param {Options<FeatureType>} [options] Cluster options.
     */
    constructor(options) {
      options = options || {};
      super({
        attributions: options.attributions,
        wrapX: options.wrapX,
      });

      /**
       * @type {number|undefined}
       * @protected
       */
      this.resolution = undefined;

      /**
       * @type {number}
       * @protected
       */
      this.distance = options.distance !== undefined ? options.distance : 20;

      /**
       * @type {number}
       * @protected
       */
      this.minDistance = options.minDistance || 0;

      /**
       * @type {number}
       * @protected
       */
      this.interpolationRatio = 0;

      /**
       * @type {Array<Feature>}
       * @protected
       */
      this.features = [];

      /**
       * @type {GeometryFunction<import("../Feature.js").FeatureLike>}
       * @protected
       */
      this.geometryFunction =
        options.geometryFunction ||
        function (feature) {
          const geometry = /** @type {Point} */ (feature.getGeometry());
          assert$1(
            !geometry || geometry.getType() === 'Point',
            'The default `geometryFunction` can only handle `Point` or null geometries',
          );
          return geometry;
        };

      /**
       * @type {function(Point, Array<FeatureType>):Feature}
       * @private
       */
      this.createCustomCluster_ = options.createCluster;

      /**
       * @type {VectorSource<FeatureType>|null}
       * @protected
       */
      this.source = null;

      /**
       * @private
       */
      this.boundRefresh_ = this.refresh.bind(this);

      this.updateDistance(this.distance, this.minDistance);
      this.setSource(options.source || null);
    }

    /**
     * Remove all features from the source.
     * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/VectorEventType~VectorEventType#removefeature} events.
     * @api
     * @override
     */
    clear(fast) {
      this.features.length = 0;
      super.clear(fast);
    }

    /**
     * Get the distance in pixels between clusters.
     * @return {number} Distance.
     * @api
     */
    getDistance() {
      return this.distance;
    }

    /**
     * Get a reference to the wrapped source.
     * @return {VectorSource<FeatureType>|null} Source.
     * @api
     */
    getSource() {
      return this.source;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @override
     */
    loadFeatures(extent, resolution, projection) {
      this.source?.loadFeatures(extent, resolution, projection);
      if (resolution !== this.resolution) {
        this.resolution = resolution;
        this.refresh();
      }
    }

    /**
     * Set the distance within which features will be clusterd together.
     * @param {number} distance The distance in pixels.
     * @api
     */
    setDistance(distance) {
      this.updateDistance(distance, this.minDistance);
    }

    /**
     * Set the minimum distance between clusters. Will be capped at the
     * configured distance.
     * @param {number} minDistance The minimum distance in pixels.
     * @api
     */
    setMinDistance(minDistance) {
      this.updateDistance(this.distance, minDistance);
    }

    /**
     * The configured minimum distance between clusters.
     * @return {number} The minimum distance in pixels.
     * @api
     */
    getMinDistance() {
      return this.minDistance;
    }

    /**
     * Replace the wrapped source.
     * @param {VectorSource<FeatureType>|null} source The new source for this instance.
     * @api
     */
    setSource(source) {
      if (this.source) {
        this.source.removeEventListener(EventType.CHANGE, this.boundRefresh_);
      }
      this.source = source;
      if (source) {
        source.addEventListener(EventType.CHANGE, this.boundRefresh_);
      }
      this.refresh();
    }

    /**
     * Handle the source changing.
     * @override
     */
    refresh() {
      this.clear();
      this.cluster();
      this.addFeatures(this.features);
    }

    /**
     * Update the distances and refresh the source if necessary.
     * @param {number} distance The new distance.
     * @param {number} minDistance The new minimum distance.
     */
    updateDistance(distance, minDistance) {
      const ratio =
        distance === 0 ? 0 : Math.min(minDistance, distance) / distance;
      const changed =
        distance !== this.distance || this.interpolationRatio !== ratio;
      this.distance = distance;
      this.minDistance = minDistance;
      this.interpolationRatio = ratio;
      if (changed) {
        this.refresh();
      }
    }

    /**
     * @protected
     */
    cluster() {
      if (this.resolution === undefined || !this.source) {
        return;
      }
      const extent = createEmpty();
      const mapDistance = this.distance * this.resolution;
      const features = this.source.getFeatures();

      /** @type {Object<string, true>} */
      const clustered = {};

      for (let i = 0, ii = features.length; i < ii; i++) {
        const feature = features[i];
        if (!(getUid(feature) in clustered)) {
          const geometry = this.geometryFunction(feature);
          if (geometry) {
            const coordinates = geometry.getCoordinates();
            createOrUpdateFromCoordinate(coordinates, extent);
            buffer(extent, mapDistance, extent);

            const neighbors = this.source
              .getFeaturesInExtent(extent)
              .filter(function (neighbor) {
                const uid = getUid(neighbor);
                if (uid in clustered) {
                  return false;
                }
                clustered[uid] = true;
                return true;
              });
            this.features.push(this.createCluster(neighbors, extent));
          }
        }
      }
    }

    /**
     * @param {Array<FeatureType>} features Features
     * @param {import("../extent.js").Extent} extent The searched extent for these features.
     * @return {Feature} The cluster feature.
     * @protected
     */
    createCluster(features, extent) {
      const centroid = [0, 0];
      for (let i = features.length - 1; i >= 0; --i) {
        const geometry = this.geometryFunction(features[i]);
        if (geometry) {
          add$3(centroid, geometry.getCoordinates());
        } else {
          features.splice(i, 1);
        }
      }
      scale$2(centroid, 1 / features.length);
      const searchCenter = getCenter(extent);
      const ratio = this.interpolationRatio;
      const geometry = new Point$1([
        centroid[0] * (1 - ratio) + searchCenter[0] * ratio,
        centroid[1] * (1 - ratio) + searchCenter[1] * ratio,
      ]);
      if (this.createCustomCluster_) {
        return this.createCustomCluster_(geometry, features);
      }
      return new Feature({
        geometry,
        features,
      });
    }
  }

  /**
   * @module ol/source/common
   */


  /**
   * Number of decimal digits to consider in integer values when rounding.
   * @type {number}
   */
  const DECIMALS = 4;

  /**
   * @module ol/source/wms
   */


  /**
   * Default WMS version.
   * @type {string}
   */
  const DEFAULT_VERSION = '1.3.0';

  /**
   * @api
   * @typedef {'carmentaserver' | 'geoserver' | 'mapserver' | 'qgis'} ServerType
   * Set the server type to use implementation-specific parameters beyond the WMS specification.
   *  - `'carmentaserver'`: HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)
   *  - `'geoserver'`: HiDPI support for [GeoServer](https://geoserver.org/)
   *  - `'mapserver'`: HiDPI support for [MapServer](https://mapserver.org/)
   *  - `'qgis'`: HiDPI support for [QGIS](https://qgis.org/)
   */

  /**
   * @param {string} baseUrl Base URL.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {import("../size.js").Size} size Size.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @param {Object} params WMS params. Will be modified in place.
   * @return {string} Request URL.
   */
  function getRequestUrl(baseUrl, extent, size, projection, params) {
    params['WIDTH'] = size[0];
    params['HEIGHT'] = size[1];

    const axisOrientation = projection.getAxisOrientation();
    const v13 = compareVersions(params['VERSION'], '1.3') >= 0;
    params[v13 ? 'CRS' : 'SRS'] = projection.getCode();
    const bbox =
      v13 && axisOrientation.startsWith('ne')
        ? [extent[1], extent[0], extent[3], extent[2]]
        : extent;
    params['BBOX'] = bbox.join(',');

    return appendParams(baseUrl, params);
  }

  /**
   * @param {import("../extent").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio pixel ratio.
   * @param {import("../proj.js").Projection} projection Projection.
   * @param {string} url WMS service url.
   * @param {Object} params WMS params.
   * @param {import("./wms.js").ServerType} serverType The type of the remote WMS server.
   * @return {string} Image src.
   */
  function getImageSrc(
    extent,
    resolution,
    pixelRatio,
    projection,
    url,
    params,
    serverType,
  ) {
    params = Object.assign({REQUEST: 'GetMap'}, params);

    const imageResolution = resolution / pixelRatio;

    const imageSize = [
      round(getWidth(extent) / imageResolution, DECIMALS),
      round(getHeight(extent) / imageResolution, DECIMALS),
    ];

    if (pixelRatio != 1) {
      switch (serverType) {
        case 'geoserver':
          const dpi = (90 * pixelRatio + 0.5) | 0;
          if ('FORMAT_OPTIONS' in params) {
            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;
          } else {
            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;
          }
          break;
        case 'mapserver':
          params['MAP_RESOLUTION'] = 90 * pixelRatio;
          break;
        case 'carmentaserver':
        case 'qgis':
          params['DPI'] = 90 * pixelRatio;
          break;
        default:
          throw new Error('Unknown `serverType` configured');
      }
    }

    const src = getRequestUrl(url, extent, imageSize, projection, params);
    return src;
  }

  /**
   * @param {Object} params WMS params.
   * @param {string} request WMS `REQUEST`.
   * @return {Object} WMS params with required properties set.
   */
  function getRequestParams(params, request) {
    return Object.assign(
      {
        'REQUEST': request,
        'SERVICE': 'WMS',
        'VERSION': DEFAULT_VERSION,
        'FORMAT': 'image/png',
        'STYLES': '',
        'TRANSPARENT': 'TRUE',
      },
      params,
    );
  }

  /**
   * @module ol/source/OSM
   */


  /**
   * The attribution containing a link to the OpenStreetMap Copyright and License
   * page.
   * @const
   * @type {string}
   * @api
   */
  const ATTRIBUTION =
    '&#169; ' +
    '<a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> ' +
    'contributors.';

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.
   * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {number} [maxZoom=19] Max zoom.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [transition=250] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.
   * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for the OpenStreetMap tile server.
   * @api
   */
  class OSM extends XYZ$1 {
    /**
     * @param {Options} [options] Open Street Map options.
     */
    constructor(options) {
      options = options || {};

      let attributions;
      if (options.attributions !== undefined) {
        attributions = options.attributions;
      } else {
        attributions = [ATTRIBUTION];
      }

      const crossOrigin =
        options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';

      const url =
        options.url !== undefined
          ? options.url
          : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';

      super({
        attributions: attributions,
        attributionsCollapsible: false,
        cacheSize: options.cacheSize,
        crossOrigin: crossOrigin,
        interpolate: options.interpolate,
        maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileLoadFunction: options.tileLoadFunction,
        transition: options.transition,
        url: url,
        wrapX: options.wrapX,
        zDirection: options.zDirection,
      });
    }
  }

  /**
   * @module ol/source/TileWMS
   */


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {Object<string,*>} params WMS request parameters.
   * At least a `LAYERS` param is required. `STYLES` is
   * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`
   * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.
   * @property {number} [gutter=0]
   * The size in pixels of the gutter around image tiles to ignore. By setting
   * this property to a non-zero value, images will be requested that are wider
   * and taller than the tile size by a value of `2 x gutter`.
   * Using a non-zero value allows artifacts of rendering at tile edges to be
   * ignored. If you control the WMS service it is recommended to address
   * "artifacts at tile edges" issues by properly configuring the WMS service. For
   * example, MapServer has a `tile_map_edge_buffer` configuration parameter for
   * this. See https://mapserver.org/output/tile_mode.html.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
   * the image from the remote server.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid. Base this on the resolutions,
   * tilesize and extent supported by the server.
   * If this is not defined, a default grid will be used: if there is a projection
   * extent, the grid will be based on that; if not, a grid based on a global
   * extent with origin at 0,0 will be used.
   * @property {import("./wms.js").ServerType} [serverType] The type of
   * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.
   * Only needed if `hidpi` is `true`.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {string} [url] WMS service URL.
   * @property {Array<string>} [urls] WMS service urls.
   * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * When set to `false`, only one world
   * will be rendered. When `true`, tiles will be requested for one world only,
   * but they will be wrapped horizontally to render multiple worlds.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for tile data from WMS servers.
   * @api
   */
  class TileWMS extends TileImage {
    /**
     * @param {Options} [options] Tile WMS options.
     */
    constructor(options) {
      options = options ? options : /** @type {Options} */ ({});

      const params = Object.assign({}, options.params);

      super({
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        interpolate: options.interpolate,
        projection: options.projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileClass: options.tileClass,
        tileGrid: options.tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition,
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {number}
       */
      this.gutter_ = options.gutter !== undefined ? options.gutter : 0;

      /**
       * @private
       * @type {!Object}
       */
      this.params_ = params;

      /**
       * @private
       * @type {boolean}
       */
      this.v13_ = true;

      /**
       * @private
       * @type {import("./wms.js").ServerType}
       */
      this.serverType_ = options.serverType;

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.tmpExtent_ = createEmpty();

      this.updateV13_();
      this.setKey(this.getKeyForParams_());
    }

    /**
     * Return the GetFeatureInfo URL for the passed coordinate, resolution, and
     * projection. Return `undefined` if the GetFeatureInfo URL cannot be
     * constructed.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {import("../proj.js").ProjectionLike} projection Projection.
     * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should
     *     be provided. If `QUERY_LAYERS` is not provided then the layers specified
     *     in the `LAYERS` parameter will be used. `VERSION` should not be
     *     specified here.
     * @return {string|undefined} GetFeatureInfo URL.
     * @api
     */
    getFeatureInfoUrl(coordinate, resolution, projection, params) {
      const projectionObj = get$2(projection);
      const sourceProjectionObj = this.getProjection() || projectionObj;

      let tileGrid = this.getTileGrid();
      if (!tileGrid) {
        tileGrid = this.getTileGridForProjection(sourceProjectionObj);
      }

      const sourceProjCoord = transform$1(
        coordinate,
        projectionObj,
        sourceProjectionObj,
      );
      const sourceResolution = calculateSourceResolution(
        sourceProjectionObj,
        projectionObj,
        coordinate,
        resolution,
      );

      const z = tileGrid.getZForResolution(sourceResolution, this.zDirection);
      const tileResolution = tileGrid.getResolution(z);
      const tileCoord = tileGrid.getTileCoordForCoordAndZ(sourceProjCoord, z);

      if (tileGrid.getResolutions().length <= tileCoord[0]) {
        return undefined;
      }

      let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);

      const gutter = this.gutter_;
      if (gutter !== 0) {
        tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);
      }

      const baseParams = {
        'QUERY_LAYERS': this.params_['LAYERS'],
      };
      Object.assign(
        baseParams,
        getRequestParams(this.params_, 'GetFeatureInfo'),
        params,
      );

      const x = Math.floor((sourceProjCoord[0] - tileExtent[0]) / tileResolution);
      const y = Math.floor((tileExtent[3] - sourceProjCoord[1]) / tileResolution);

      baseParams[this.v13_ ? 'I' : 'X'] = x;
      baseParams[this.v13_ ? 'J' : 'Y'] = y;

      return this.getRequestUrl_(
        tileCoord,
        tileExtent,
        1,
        sourceProjectionObj || projectionObj,
        baseParams,
      );
    }

    /**
     * Return the GetLegendGraphic URL, optionally optimized for the passed
     * resolution and possibly including any passed specific parameters. Returns
     * `undefined` if the GetLegendGraphic URL cannot be constructed.
     *
     * @param {number} [resolution] Resolution. If set to undefined, `SCALE`
     *     will not be calculated and included in URL.
     * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the
     *     request is generated for this wms layer, else it will try to use the
     *     configured wms layer. Default `FORMAT` is `image/png`.
     *     `VERSION` should not be specified here.
     * @return {string|undefined} GetLegendGraphic URL.
     * @api
     */
    getLegendUrl(resolution, params) {
      if (this.urls[0] === undefined) {
        return undefined;
      }

      const baseParams = {
        'SERVICE': 'WMS',
        'VERSION': DEFAULT_VERSION,
        'REQUEST': 'GetLegendGraphic',
        'FORMAT': 'image/png',
      };

      if (params === undefined || params['LAYER'] === undefined) {
        const layers = this.params_.LAYERS;
        const isSingleLayer = !Array.isArray(layers) || layers.length === 1;
        if (!isSingleLayer) {
          return undefined;
        }
        baseParams['LAYER'] = layers;
      }

      if (resolution !== undefined) {
        const mpu = this.getProjection()
          ? this.getProjection().getMetersPerUnit()
          : 1;
        const pixelSize = 0.00028;
        baseParams['SCALE'] = (resolution * mpu) / pixelSize;
      }

      Object.assign(baseParams, params);

      return appendParams(/** @type {string} */ (this.urls[0]), baseParams);
    }

    /**
     * @return {number} Gutter.
     * @override
     */
    getGutter() {
      return this.gutter_;
    }

    /**
     * Get the user-provided params, i.e. those passed to the constructor through
     * the "params" option, and possibly updated using the updateParams method.
     * @return {Object} Params.
     * @api
     */
    getParams() {
      return this.params_;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../extent.js").Extent} tileExtent Tile extent.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {Object} params Params.
     * @return {string|undefined} Request URL.
     * @private
     */
    getRequestUrl_(tileCoord, tileExtent, pixelRatio, projection, params) {
      const urls = this.urls;
      if (!urls) {
        return undefined;
      }
      let url;
      if (urls.length == 1) {
        url = urls[0];
      } else {
        const index = modulo(hash(tileCoord), urls.length);
        url = urls[index];
      }

      return getImageSrc(
        tileExtent,
        (
          this.tileGrid || this.getTileGridForProjection(projection)
        ).getResolution(tileCoord[0]),
        pixelRatio,
        projection,
        url,
        params,
        this.serverType_,
      );
    }

    /**
     * Get the tile pixel ratio for this source.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Tile pixel ratio.
     * @override
     */
    getTilePixelRatio(pixelRatio) {
      return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;
    }

    /**
     * @private
     * @return {string} The key for the current params.
     */
    getKeyForParams_() {
      let i = 0;
      const res = [];
      for (const key in this.params_) {
        res[i++] = key + '-' + this.params_[key];
      }
      return res.join('/');
    }

    /**
     * @param {Object} params New URL paremeters.
     * @private
     */
    setParams_(params) {
      this.params_ = params;
      this.updateV13_();
      this.setKey(this.getKeyForParams_());
    }

    /**
     * Set the URL parameters passed to the WMS source.
     * @param {Object} params New URL paremeters.
     * @api
     */
    setParams(params) {
      this.setParams_(Object.assign({}, params));
    }

    /**
     * Update the URL parameters. This method can be used to update a subset of the WMS
     * parameters. Call `setParams` to set all of the parameters.
     * @param {Object} params Updated URL parameters.
     * @api
     */
    updateParams(params) {
      this.setParams_(Object.assign(this.params_, params));
    }

    /**
     * @private
     */
    updateV13_() {
      const version = this.params_['VERSION'] || DEFAULT_VERSION;
      this.v13_ = compareVersions(version, '1.3') >= 0;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord The tile coordinate
     * @param {number} pixelRatio The pixel ratio
     * @param {import("../proj/Projection.js").default} projection The projection
     * @return {string|undefined} The tile URL
     * @override
     */
    tileUrlFunction(tileCoord, pixelRatio, projection) {
      let tileGrid = this.getTileGrid();
      if (!tileGrid) {
        tileGrid = this.getTileGridForProjection(projection);
      }

      if (tileGrid.getResolutions().length <= tileCoord[0]) {
        return undefined;
      }

      if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {
        pixelRatio = 1;
      }

      const tileResolution = tileGrid.getResolution(tileCoord[0]);
      let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);

      const gutter = this.gutter_;
      if (gutter !== 0) {
        tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);
      }

      const baseParams = Object.assign(
        {},
        getRequestParams(this.params_, 'GetMap'),
      );

      return this.getRequestUrl_(
        tileCoord,
        tileExtent,
        pixelRatio,
        projection,
        baseParams,
      );
    }
  }

  /**
   * @module ol/source/WMTS
   */


  /**
   * Request encoding. One of 'KVP', 'REST'.
   * @typedef {'KVP' | 'REST'} RequestEncoding
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {import("../tilegrid/WMTS.js").default} tileGrid Tile grid.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.
   * @property {string} layer Layer name as advertised in the WMTS capabilities.
   * @property {string} style Style name as advertised in the WMTS capabilities.
   * @property {typeof import("../ImageTile.js").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
   * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.
   * @property {string} [version='1.0.0'] WMTS version.
   * @property {string} matrixSet Matrix set.
   * @property {!Object} [dimensions] Additional "dimensions" for tile requests.
   * This is an object with properties named like the advertised WMTS dimensions.
   * @property {string} [url]  A URL for the service.
   * For the RESTful request encoding, this is a URL
   * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,
   * for example `subdomain{a-f}.domain.com`, may be used instead of defining
   * each one separately in the `urls` option.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {Array<string>} [urls] An array of URLs.
   * Requests will be distributed among the URLs in this array.
   * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for tile data from WMTS servers.
   * @api
   */
  class WMTS extends TileImage {
    /**
     * @param {Options} options WMTS options.
     */
    constructor(options) {
      // TODO: add support for TileMatrixLimits

      const requestEncoding =
        options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';

      // FIXME: should we create a default tileGrid?
      // we could issue a getCapabilities xhr to retrieve missing configuration
      const tileGrid = options.tileGrid;

      let urls = options.urls;
      if (urls === undefined && options.url !== undefined) {
        urls = expandUrl(options.url);
      }

      super({
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        interpolate: options.interpolate,
        projection: options.projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileClass: options.tileClass,
        tileGrid: tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        tilePixelRatio: options.tilePixelRatio,
        urls: urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : false,
        transition: options.transition,
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {string}
       */
      this.version_ = options.version !== undefined ? options.version : '1.0.0';

      /**
       * @private
       * @type {string}
       */
      this.format_ = options.format !== undefined ? options.format : 'image/jpeg';

      /**
       * @private
       * @type {!Object}
       */
      this.dimensions_ =
        options.dimensions !== undefined ? options.dimensions : {};

      /**
       * @private
       * @type {string}
       */
      this.layer_ = options.layer;

      /**
       * @private
       * @type {string}
       */
      this.matrixSet_ = options.matrixSet;

      /**
       * @private
       * @type {string}
       */
      this.style_ = options.style;

      // FIXME: should we guess this requestEncoding from options.url(s)
      //        structure? that would mean KVP only if a template is not provided.

      /**
       * @private
       * @type {RequestEncoding}
       */
      this.requestEncoding_ = requestEncoding;

      this.setKey(this.getKeyForDimensions_());

      if (urls && urls.length > 0) {
        this.tileUrlFunction = createFromTileUrlFunctions(
          urls.map(this.createFromWMTSTemplate.bind(this)),
        );
      }
    }

    /**
     * Set the URLs to use for requests.
     * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.
     * @param {Array<string>} urls URLs.
     * @override
     */
    setUrls(urls) {
      this.urls = urls;
      const key = urls.join('\n');
      this.setTileUrlFunction(
        createFromTileUrlFunctions(
          urls.map(this.createFromWMTSTemplate.bind(this)),
        ),
        key,
      );
    }

    /**
     * Get the dimensions, i.e. those passed to the constructor through the
     * "dimensions" option, and possibly updated using the updateDimensions
     * method.
     * @return {!Object} Dimensions.
     * @api
     */
    getDimensions() {
      return this.dimensions_;
    }

    /**
     * Return the image format of the WMTS source.
     * @return {string} Format.
     * @api
     */
    getFormat() {
      return this.format_;
    }

    /**
     * Return the layer of the WMTS source.
     * @return {string} Layer.
     * @api
     */
    getLayer() {
      return this.layer_;
    }

    /**
     * Return the matrix set of the WMTS source.
     * @return {string} MatrixSet.
     * @api
     */
    getMatrixSet() {
      return this.matrixSet_;
    }

    /**
     * Return the request encoding, either "KVP" or "REST".
     * @return {RequestEncoding} Request encoding.
     * @api
     */
    getRequestEncoding() {
      return this.requestEncoding_;
    }

    /**
     * Return the style of the WMTS source.
     * @return {string} Style.
     * @api
     */
    getStyle() {
      return this.style_;
    }

    /**
     * Return the version of the WMTS source.
     * @return {string} Version.
     * @api
     */
    getVersion() {
      return this.version_;
    }

    /**
     * @private
     * @return {string} The key for the current dimensions.
     */
    getKeyForDimensions_() {
      const res = this.urls ? this.urls.slice(0) : [];
      for (const key in this.dimensions_) {
        res.push(key + '-' + this.dimensions_[key]);
      }
      return res.join('/');
    }

    /**
     * Update the dimensions.
     * @param {Object} dimensions Dimensions.
     * @api
     */
    updateDimensions(dimensions) {
      Object.assign(this.dimensions_, dimensions);
      this.setKey(this.getKeyForDimensions_());
    }

    /**
     * @param {string} template Template.
     * @return {import("../Tile.js").UrlFunction} Tile URL function.
     */
    createFromWMTSTemplate(template) {
      const requestEncoding = this.requestEncoding_;

      // context property names are lower case to allow for a case insensitive
      // replacement as some services use different naming conventions
      const context = {
        'layer': this.layer_,
        'style': this.style_,
        'tilematrixset': this.matrixSet_,
      };

      if (requestEncoding == 'KVP') {
        Object.assign(context, {
          'Service': 'WMTS',
          'Request': 'GetTile',
          'Version': this.version_,
          'Format': this.format_,
        });
      }

      // TODO: we may want to create our own appendParams function so that params
      // order conforms to wmts spec guidance, and so that we can avoid to escape
      // special template params

      template =
        requestEncoding == 'KVP'
          ? appendParams(template, context)
          : template.replace(/\{(\w+?)\}/g, function (m, p) {
              return p.toLowerCase() in context ? context[p.toLowerCase()] : m;
            });

      const tileGrid = /** @type {import("../tilegrid/WMTS.js").default} */ (
        this.tileGrid
      );
      const dimensions = this.dimensions_;

      return (
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        function (tileCoord, pixelRatio, projection) {
          if (!tileCoord) {
            return undefined;
          }
          const localContext = {
            'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),
            'TileCol': tileCoord[1],
            'TileRow': tileCoord[2],
          };
          Object.assign(localContext, dimensions);
          let url = template;
          if (requestEncoding == 'KVP') {
            url = appendParams(url, localContext);
          } else {
            url = url.replace(/\{(\w+?)\}/g, function (m, p) {
              return encodeURIComponent(localContext[p]);
            });
          }
          return url;
        }
      );
    }
  }

  // Openlayers imports used in this package
  // Will be used both in the sources & the build


  const ol = {
    control: control$1,
    coordinate: coordinate,
    events: {
      condition: condition,
    },
    extent: extent,
    Feature: Feature,
    format: { // Not all formats are used & the total file is big
      GeoJSON: GeoJSON,
      GPX: GPX,
      KML: KML,
      OSMXML: OSMXML,
    },
    Geolocation: Geolocation,
    geom: geom,
    interaction: {
      Draw: Draw,
      Modify: Modify,
      MouseWheelZoom: MouseWheelZoom,
      Pointer: PointerInteraction,
      Select: Select,
      Snap: Snap,
    },
    layer: {
      Tile: TileLayer,
      Vector: VectorLayer,
    },
    Map: Map,
    loadingstrategy: loadingstrategy,
    proj: {
      ...proj,
      proj4: projProj4,
    },
    source: {
      BingMaps: BingMaps,
      Cluster: Cluster,
      OSM: OSM,
      TileWMS: TileWMS,
      Vector: VectorSource,
      WMTS: WMTS,
      XYZ: XYZ$1,
    },
    sphere: sphere$1,
    style: style,
    tilegrid: {
      WMTS: WMTSTileGrid,
    },
    util: {
      VERSION: VERSION$1,
    },
    View: View,
  };

  // Export as globals if not already defined
  window.ol ||= ol;

  /**
   * Abstract class to be used by other control buttons definitions
   * Add some usefull controls with displayed buttons
   */
  //BEST redesign button hover & touch
  //BEST click sur in/out file / ...


  class Button extends Control {
    constructor(opt) {
      const options = {
        label: ' ', // An ascii or unicode character to decorate the button (OR : css button::after)
        className: '', // To be added to the control.element

        // Sub menu, by priority :
        // subMenuId : 'id', // Html id-fr or Id containing the scrolling menu
        // subMenuHTMLfr: '', // html code of the scrolling menu in locale lang
        subMenuHTML: '', // html code of the scrolling menu
        // title: '', // html title for button hovering by a mouse
        // buttonAction() {}, // (evt, active) To run when an <input> ot <a> of the subMenu is clicked / hovered, ...
        // subMenuAction() {}, // (evt) To run when the button is clicked / hovered, ...

        // All ol.control.Control options

        ...opt,
      };

      super({
        element: document.createElement('div'),
        ...options,
      });

      this.options = options;

      if (options.buttonAction) this.buttonAction = options.buttonAction;
      if (options.subMenuAction) this.subMenuAction = options.subMenuAction;

      // Create a button
      this.buttonEl = document.createElement('button');
      this.buttonEl.setAttribute('type', 'button');
      this.buttonEl.innerHTML = options.label;
      if (options.title)
        this.buttonEl.setAttribute('title', options.title);

      // Add submenu below the button
      this.subMenuEl =
        document.getElementById(options.subMenuId + '-' + navigator.language.match(/[a-z]+/u)) ||
        document.getElementById(options.subMenuId) ||
        document.createElement('div');
      this.subMenuEl.innerHTML ||=
        options['subMenuHTML' + navigator.language.match(/[a-z]+/u)] ||
        options.subMenuHTML;

      // Populate the control
      this.element.className = 'ol-control myol-button ' + options.className;
      this.element.appendChild(this.buttonEl); // Add the button
      this.element.appendChild(this.subMenuEl); // Add the submenu
    }

    setMap(map) {
      // Add listeners to the buttons
      this.element.addEventListener('mouseover', evt => this.buttonListener(evt));
      this.element.addEventListener('mouseout', evt => this.buttonListener(evt));
      this.buttonEl.addEventListener('click', evt => this.buttonListener(evt));

      // Add listeners in the sub-menus
      this.subMenuEl.querySelectorAll('a, input')
        .forEach(el => ['click', 'change'].forEach(type =>
          el.addEventListener(type, evt =>
            this.subMenuAction(evt)
          )));

      // Close the sub-menu when click or touch the map
      map.on('click', () => this.element.classList.remove('myol-button-selected'));

      return super.setMap(map);
    }

    buttonListener(evt) {
      if (evt.type === 'mouseover')
        this.element.classList.add('myol-button-hover');
      else // mouseout | click
        this.element.classList.remove('myol-button-hover');

      if (evt.type === 'click') // Mouse click & touch
        this.element.classList.toggle('myol-button-selected');

      // Close other open buttons
      for (const el of document.getElementsByClassName('myol-button'))
        if (el !== this.element && evt.type === 'click')
          el.classList.remove('myol-button-selected');

      // Trigger action on the selected button
      this.buttonAction(evt, this.element.classList.contains('myol-button-selected'));
    }

    buttonAction() {}

    subMenuAction() {}
  }

  /**
   * Download control to download vectors features
   * Supports GPX, KML, GeoJSON formats
   */

  const subMenuHTML$3 = '\
  <p><a mime="application/gpx+xml">GPX</a></p>\
  <p><a mime="vnd.google-earth.kml+xml">KML</a></p>\
  <p><a mime="application/json">GeoJSON</a></p>',

    subMenuHTMLfr$3 = '\
  <p>Cliquer sur un format ci-dessous pour obtenir\
  un fichier contenant les Ã©lÃ©ments visibles dans la fenÃªtre:</p>' +
    subMenuHTML$3;

  //BEST BUG incompatible with clusters
  class Download extends Button {
    constructor(opt) {
      const options = {
        // Button options
        className: 'myol-button-download',
        subMenuId: 'myol-button-download',
        subMenuHTML: subMenuHTML$3,
        subMenuHTMLfr: subMenuHTMLfr$3,

        // savedLayer: layer, // Layer to download
        fileName: document.title || 'openlayers', // Name of the file to be downloaded 
        //BEST name from feature

        ...opt,
      };

      super(options);

      // Add a hidden element to handle the download
      this.hiddenEl = document.createElement('a');
      this.hiddenEl.target = '_self';
      this.hiddenEl.style = 'display:none';
      this.element.appendChild(this.hiddenEl);
    }

    subMenuAction(evt) {
      const map = this.getMap(),
        formatName = evt.target.innerText,
        downloadFormat = new format[formatName](),
        mime = evt.target.getAttribute('mime'),
        mapExtent = map.getView().calculateExtent();

      let featuresToSave = [];

      if (this.options.savedLayer)
        featuresToSave = this.options.savedLayer.getSource().getFeatures();
      else
        // Get all visible features
        map.getLayers().forEach(l => {
          if (!l.getProperties().marker &&
            l.getSource() && l.getSource().forEachFeatureInExtent) // For vector layers only
            l.getSource().forEachFeatureInExtent(mapExtent, feature =>
              featuresToSave.push(feature)
            );
        });

      if (formatName === 'GPX')
        // Transform *Polygons in linestrings
        for (const f in featuresToSave) {
          const geometry = featuresToSave[f].getGeometry();

          if (geometry.getType().includes('Polygon')) {
            geometry.getCoordinates().forEach(coords => {
              if (typeof coords[0][0] === 'number')
                // Polygon
                featuresToSave.push(new Feature(new LineString(coords)));
              else
                // MultiPolygon
                coords.forEach(subCoords =>
                  featuresToSave.push(new Feature(new LineString(subCoords)))
                );
            });
          }
        }

      const data = downloadFormat.writeFeatures(featuresToSave, {
          dataProjection: 'EPSG:4326',
          featureProjection: map.getView().getProjection(), // Map projection
          decimals: 5,
        })
        // Beautify the output
        .replace(/<[a-z]*>(0|null|[[object Object]|[NTZa:-]*)<\/[a-z]*>/gu, '')
        .replace(/<Data name="[a-z_]*"\/>|<Data name="[a-z_]*"><\/Data>|,"[a-z_]*":""/gu, '')
        .replace(/<Data name="copy"><value>[a-z_.]*<\/value><\/Data>|,"copy":"[a-z_.]*"/gu, '')
        .replace(/(<\/gpx|<\/?wpt|<\/?trk>|<\/?rte>|<\/kml|<\/?Document)/gu, '\n$1')
        .replace(/(<\/?Placemark|POINT|LINESTRING|POLYGON|<Point|"[a-z_]*":|\})/gu, '\n$1')
        .replace(/(<name|<ele|<sym|<link|<type|<rtept|<\/?trkseg|<\/?ExtendedData)/gu, '\n\t$1')
        .replace(/(<trkpt|<Data|<LineString|<\/?Polygon|<Style)/gu, '\n\t\t$1')
        .replace(/(<[a-z]+BoundaryIs)/gu, '\n\t\t\t$1')
        .replace(/ ([cvx])/gu, '\n\t$1');

      const file = new Blob([data], {
        type: mime,
      });

      this.hiddenEl.download = this.options.fileName + '.' + formatName.toLowerCase();
      this.hiddenEl.href = URL.createObjectURL(file);
      this.hiddenEl.click();

      // Close the submenu
      this.element.classList.remove('myol-display-submenu');
    }
  }

  /**
   * Many simplified display of various tiles layers services
   */


  /**
   * Virtual class to factorise XYZ layers code
   */
  class XYZ extends TileLayer {
    constructor(options) {
      super({
        source: new XYZ$1(options),
        ...options,
      });
    }
  }

  /**
   * Simple layer to be used when a layer is out of extent
   * API : https://api-docs.carto.com/
   */
  class Positron extends XYZ {
    constructor(options) {
      super({
        url: 'https://basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}.png',
        attributions: '<a href="https://carto.com/attribution/">CartoDB</a>',
        ...options,
      });
    }
  }

  /**
   * Simple layer to be used when a layer is out of scope
   */
  class NoTile extends XYZ {
    constructor(options) {
      super({
        url: 'https://ecn.t0.tiles.virtualearth.net/tiles/r000000000000000000.jpeg?g=1',
        attributions: 'Out of zoom',

        ...options,
      });
    }
  }

  /**
   * OpenStreetMap & co
   * Map : https://www.openstreetmap.org/
   * API : https://wiki.openstreetmap.org/wiki/API/
   */
  class OpenStreetMap extends TileLayer {
    constructor(options) {
      super({
        source: new OSM(options),
        ...options,
      });
    }
  }

  /**
   * Nice OSM style
   * Map : opentopomap.org
   * API : https://www.opentopodata.org/#public-api
   */
  class OpenTopo extends OpenStreetMap {
    constructor() {
      super({
        url: 'https://{a-c}.tile.opentopomap.org/{z}/{x}/{y}.png',
        maxZoom: 17,
        attributions: '<a href="https://opentopomap.org">OpenTopoMap</a> ' +
          '(<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)',
      });
    }
  }

  /**
   * Maps of https://www.refuges.info/
   * Map : https://maps.refuges.info/
   * Doc : https://wiki.openstreetmap.org/wiki/Hiking/mri
   */
  class MRI extends OpenStreetMap {
    constructor() {
      super({
        url: 'https://maps.refuges.info/hiking/{z}/{x}/{y}.png',
        maxZoom: 18,
        attributions: '<a href="https://wiki.openstreetmap.org/wiki/Hiking/mri">Refuges.info</a>',
      });
    }
  }

  /**
   * Germany maps
   * Map : https://www.kompass.de/wanderkarte/
   * Doc : https://www.kompass.de/
   */
  class Kompass extends OpenStreetMap { // Austria
    constructor(options = {}) {
      super({
        hidden: !options.key && options.subLayer !== 'osm', // For LayerSwitcher
        url: options.key ?
          'https://map{1-4}.kompass.de/{z}/{x}/{y}/kompass_' + options.subLayer + '?key=' + options.key : // Specific
          'https://map{1-5}.tourinfra.com/tiles/kompass_' + options.subLayer + '/{z}/{x}/{y}.png', // No key
        maxZoom: 17,
        attributions: '<a href="https://www.kompass.de/">Kompass</a>',

        ...options,
      });
    }
  }

  /**
   * OSM originated maps
   * Doc : https://www.thunderforest.com/maps/
   * Key : https://manage.thunderforest.com/dashboard
   */
  class Thunderforest extends OpenStreetMap {
    constructor(options = {}) {
      super({
        hidden: !options.key, // For LayerSwitcher
        url: 'https://{a-c}.tile.thunderforest.com/' + options.subLayer + '/{z}/{x}/{y}.png?apikey=' + options.key,
        maxZoom: 22,
        // subLayer: 'outdoors', ...
        // key: '...',
        attributions: '<a href="https://www.thunderforest.com/">Thunderforest</a>',

        ...options, // Include key
      });
    }
  }

  /**
   * IGN France
   * Doc & API : https://geoservices.ign.fr/services-web
   * Key : https://cartes.gouv.fr
   */
  class IGN extends TileLayer {
    constructor(options = {}) {
      const IGNresolutions = [],
        IGNmatrixIds = [];

      for (let i = 0; i < 18; i++) {
        IGNresolutions[i] = getWidth(get$2('EPSG:3857').getExtent()) / 256 / (2 ** i);
        IGNmatrixIds[i] = i.toString();
      }

      super({
        source: new WMTS({
          // WMTS options
          url: options.key ? 'https://data.geopf.fr/private/wmts?apikey=' + options.key : 'https://wmts.geopf.fr/wmts',
          style: 'normal',
          matrixSet: 'PM',
          format: 'image/jpeg',
          attributions: '&copy; <a href="https://www.geoportail.gouv.fr/" target="_blank">IGN</a>',
          tileGrid: new WMTSTileGrid({
            origin: [-20037508, 20037508],
            resolutions: IGNresolutions,
            matrixIds: IGNmatrixIds,
          }),

          // IGN options
          ...options, // Include layer
        }),

        ...options, // For layer limits
      });
    }
  }

  /**
   * Swisstopo https://api.geo.admin.ch/
   * Don't need key nor referer
   * API : https://api3.geo.admin.ch/services/sdiservices.html#wmts
   */
  class SwissTopo extends TileLayer {
    constructor(opt) {
      const options = {
        host: 'https://wmts2{0-4}.geo.admin.ch/1.0.0/',
        subLayer: 'ch.swisstopo.pixelkarte-farbe',
        maxResolution: 2000, // Resolution limit above which we switch to a more global service
        extent: [640000, 5730000, 1200000, 6100000],
        attributions: '&copy <a href="https://map.geo.admin.ch/">SwissTopo</a>',

        ...opt,
      };

      const projectionExtent = get$2('EPSG:3857').getExtent(),
        resolutions = [],
        matrixIds = [];

      for (let r = 0; r < 18; ++r) {
        resolutions[r] = getWidth(projectionExtent) / 256 / (2 ** r);
        matrixIds[r] = r;
      }

      super({
        source: new WMTS(({
          url: options.host + options.subLayer +
            '/default/current/3857/{TileMatrix}/{TileCol}/{TileRow}.jpeg',
          tileGrid: new WMTSTileGrid({
            origin: getTopLeft(projectionExtent),
            resolutions: resolutions,
            matrixIds: matrixIds,
          }),
          requestEncoding: 'REST',
        })),

        ...options, // For layer limits
      });
    }
  }

  /**
   * Spain IGN
   * Map : https://www.ign.es/iberpix/visor
   * API : https://api-maps.ign.es/
   */
  class IgnES extends XYZ {
    constructor(opt) {
      const options = {
        host: 'https://www.ign.es/wmts/',
        server: 'mapa-raster',
        subLayer: 'MTN',
        maxZoom: 20,
        attributions: '&copy; <a href="https://www.ign.es/">IGN EspaÃ±a</a>',

        ...opt,
      };

      super({
        url: options.host + options.server +
          '?layer=' + options.subLayer +
          '&Service=WMTS&Request=GetTile&Version=1.0.0' +
          '&Format=image/jpeg' +
          '&style=default&tilematrixset=GoogleMapsCompatible' +
          '&TileMatrix={z}&TileCol={x}&TileRow={y}',

        ...options,
      });
    }
  }

  /**
   * Italy IGM
   * Doc : https://gn.mase.gov.it/
   * Map : http://www.pcn.minambiente.it/viewer/
   */
  class IGM extends TileLayer {
    constructor() {
      super({
        source: new TileWMS({
          url: 'https://chemineur.fr/assets/proxy/?s=minambiente.it', // Not available via https
          attributions: '&copy <a href="https://gn.mase.gov.it/">IGM</a>',
        }),
        maxResolution: 120,
        extent: [720000, 4380000, 2070000, 5970000],
      });
    }

    setMapInternal(map) {
      const view = map.getView();

      view.on('change:resolution', () => this.updateResolution(view));
      this.updateResolution(view);

      return super.setMapInternal(map);
    }

    updateResolution(view) {
      const mapResolution = view.getResolutionForZoom(view.getZoom());
      let layerResolution = 25000; // mapResolution < 10

      if (mapResolution > 10) layerResolution = 100000;
      if (mapResolution > 30) layerResolution = 250000;

      this.getSource().updateParams({
        type: 'png',
        map: '/ms_ogc/WMS_v1.3/raster/IGM_' + layerResolution + '.map',
        layers: (layerResolution === 100000 ? 'MB.IGM' : 'CB.IGM') + layerResolution,
      });
    }
  }

  /**
   * Ordnance Survey : Great Britain
   * API & key : https://osdatahub.os.uk/
   */
  class OS extends XYZ {
    constructor(opt) {
      const options = {
        hidden: !opt.key, // For LayerSwitcher
        subLayer: 'Outdoor_3857',
        minZoom: 7,
        maxZoom: 16,
        extent: [-1198263, 6365000, 213000, 8702260],
        attributions: '&copy <a href="https://explore.osmaps.com/">UK Ordnancesurvey maps</a>',

        ...opt,
      };

      super({
        url: 'https://api.os.uk/maps/raster/v1/zxy/' +
          options.subLayer +
          '/{z}/{x}/{y}.png' +
          '?key=' + options.key,

        ...options,
      });
    }
  }

  /**
   * ArcGIS (Esri)
   * Map : https://www.arcgis.com/home/webmap/viewer.html
   * API : https://developers.arcgis.com/javascript/latest/
   * No key
   */
  class ArcGIS extends XYZ {
    constructor(opt) {
      const options = {
        host: 'https://server.arcgisonline.com/ArcGIS/rest/services/',
        subLayer: 'World_Imagery',
        maxZoom: 19,
        attributions: '&copy; <a href="https://www.arcgis.com/">ArcGIS (Esri)</a>',

        ...opt,
      };

      super({
        url: options.host + options.subLayer + '/MapServer/tile/{z}/{y}/{x}',
        ...options,
      });
    }
  }

  /**
   * Maxbox (Maxar)
   * Key : https://www.mapbox.com/
   */
  class Maxbox extends XYZ {
    constructor(options = {}) {
      super({
        hidden: !options.key, // For LayerSwitcher
        url: 'https://api.mapbox.com/v4/' + options.tileset + '/{z}/{x}/{y}@2x.webp?access_token=' + options.key,
        // No maxZoom
        attributions: '&copy; <a href="https://www.mapbox.com/">Mapbox</a>',
      });
    }
  }

  /**
   * Google
   */
  class Google extends XYZ {
    constructor(opt) {
      const options = {
        subLayers: 'p', // Terrain
        maxZoom: 22,
        attributions: '&copy; <a href="https://www.google.com/maps">Google</a>',

        ...opt,
      };

      super({
        url: 'https://mt{0-3}.google.com/vt/lyrs=' + options.subLayers + '&hl=fr&x={x}&y={y}&z={z}',
        ...options,
      });
    }
  }

  /**
   * Bing (Microsoft)
   * Doc: https://docs.microsoft.com/en-us/bingmaps/getting-started/
   * Key : https://www.bingmapsportal.com/
   */
  let Bing$1 = class Bing extends TileLayer {
    constructor(options = {}) {
      super({
        hidden: !options.key, // For LayerSwitcher

        // Mandatory
        // 'key',
        imagerySet: 'Road',

        // No explicit zoom
        // attributions, defined by ol.source.BingMaps

        ...options,
      });

      //HACK : Avoid to call https://dev.virtualearth.net/... if no bing layer is visible
      this.on('change:visible', evt => {
        if (evt.target.getVisible() && // When the layer becomes visible
          !this.getSource()) // Only once
          this.setSource(new BingMaps(options));
      });
    }
  };

  /**
   * RGB elevation (Mapbox)
   * Each pixel color encode the elevation
   * Doc: https://docs.mapbox.com/data/tilesets/guides/access-elevation-data/
   * elevation = -10000 + (({R} * 256 * 256 + {G} * 256 + {B}) * 0.1)
   * Key : https://www.mapbox.com/
   */
  class MapboxElevation extends Maxbox {
    constructor(options = {}) {
      super({
        hidden: !options.key, // For LayerSwitcher
        ...options,
        tileset: 'mapbox.terrain-rgb',
      });
    }
  }

  /**
   * RGB elevation (MapTiler)
   * Doc: https://cloud.maptiler.com/tiles/terrain-rgb-v2/
   * Doc: https://documentation.maptiler.com/hc/en-us/articles/4405444055313-RGB-Terrain-by-MapTiler
   * elevation = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1
   * Key : https://cloud.maptiler.com/account/keys/
   */
  /*// Backup of Maxbox elevation
  export class MapTilerElevation extends XYZ {
    constructor(options = {}) {
      super({
        hidden: !options.key, // For LayerSwitcher
        url: 'https://api.maptiler.com/tiles/terrain-rgb/{z}/{x}/{y}.png?key=' + options.key,
        maxZoom: 12,
        attributions: '<a href="https://www.maptiler.com/copyright/"">&copy; MapTiler</a> ' + '<a href="https://www.openstreetmap.org/copyright"">&copy; OpenStreetMap contributors</a>',
  	  
        ...options,
      });
    }
  }*/

  /**
   * Tile layers examples
   */
  function collection$2(options = {}) {
    return {
      'OSM': new OpenStreetMap(),
      'OSM outdoors': new Thunderforest({
        key: options.thunderforest, // For simplified options
        ...options.thunderforest, // Include key
        subLayer: 'outdoors',
      }),
      'OpenTopo': new OpenTopo(),
      'OSM transports': new Thunderforest({
        key: options.thunderforest, // For simplified options
        ...options.thunderforest, // Include key
        subLayer: 'transport',
      }),
      'OSM cyclo': new OpenStreetMap({
        url: 'https://{a-c}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png',
      }),
      'Refuges.info': new MRI(),

      'IGN TOP25': new IGN({
        layer: 'GEOGRAPHICALGRIDSYSTEMS.MAPS',
        key: options.ign, // Include key
        ...options.ign, // Include key
      }),
      'IGN V2': new IGN({
        layer: 'GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2',
        format: 'image/png',
      }),
      'IGN N+1': new IGN({
        layer: 'GEOGRAPHICALGRIDSYSTEMS.MAPS.BDUNI.J1',
        format: 'image/png',
      }),
      'IGN cartes 1950': new IGN({
        layer: 'GEOGRAPHICALGRIDSYSTEMS.MAPS.SCAN50.1950',
        extent: [-58e4, 506000, 1070000, 6637000],
        minZoom: 6,
      }),

      'SwissTopo': new SwissTopo(),
      'Ãsterreich Kompass': new Kompass({
        subLayer: 'osm', // No key
      }),
      'Kompas winter': new Kompass({
        key: options.kompass, // For simplified options
        ...options.kompass, // Include key
        subLayer: 'winter',
        maxZoom: 22,
      }),
      'England': new OS({
        key: options.os, // For simplified options
        ...options.os, // Include key
      }),
      'Italie': new IGM(),
      'EspaÃ±a': new IgnES(),
      'Google': new Google(),

      'Maxar': new Maxbox({
        key: options.mapbox, // For simplified options
        ...options.mapbox, // Include key
        tileset: 'mapbox.satellite',
      }),
      'Photo Google': new Google({
        subLayers: 's',
      }),
      'Photo ArcGIS': new ArcGIS(),
      'Photo Bing': new Bing$1({
        key: options.bing, // For simplified options
        ...options.bing, // Include key
        imagerySet: 'Aerial',
      }),

      'Photo IGN': new IGN({
        layer: 'ORTHOIMAGERY.ORTHOPHOTOS',
      }),
      'Photo IGN 1950-65': new IGN({
        layer: 'ORTHOIMAGERY.ORTHOPHOTOS.1950-1965',
        style: 'BDORTHOHISTORIQUE',
        format: 'image/png',
        extent: [-58e4, 506000, 1070000, 6637000],
        minZoom: 12,
      }),
      'IGN E.M. 1820-66': new IGN({
        layer: 'GEOGRAPHICALGRIDSYSTEMS.ETATMAJOR40',
        extent: [-58e4, 506000, 1070000, 6637000],
        minZoom: 6,
      }),
      'Cadastre': new IGN({
        layer: 'CADASTRALPARCELS.PARCELLAIRE_EXPRESS',
        format: 'image/png',
        extent: [-58e4, 506000, 1070000, 6637000],
        minZoom: 6,
      }),
      /* //BEST Cassini ? clÃ©
  	'IGN Cassini': new IGN({
        ...options.ign,
        layer: 'GEOGRAPHICALGRIDSYSTEMS.CASSINI',
        key: 'an7nvfzojv5wa96dsga5nk8w', //BEST use owner key
      }),
  	*/
    };
  }

  function examples(options = {}) {
    return {
      ...collection$2(options),

      'OSM fr': new OpenStreetMap({
        url: 'https://{a-c}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png',
      }),
      'OSM orthos FR': new OpenStreetMap({
        url: 'https://wms.openstreetmap.fr/tms/1.0.0/tous_fr/{z}/{x}/{y}',
      }),

      'ThF cycle': new Thunderforest({
        key: options.thunderforest, // For simplified options
        ...options.thunderforest, // Include key
        subLayer: 'cycle',
        maxZoom: 14,
      }),
      'ThF trains': new Thunderforest({
        key: options.thunderforest, // For simplified options
        ...options.thunderforest, // Include key
        subLayer: 'pioneer',
      }),
      'ThF villes': new Thunderforest({
        key: options.thunderforest, // For simplified options
        ...options.thunderforest, // Include key
        subLayer: 'neighbourhood',
      }),
      'ThF landscape': new Thunderforest({
        key: options.thunderforest, // For simplified options
        ...options.thunderforest, // Include key
        subLayer: 'landscape',
      }),
      'ThF contraste': new Thunderforest({
        key: options.thunderforest, // For simplified options
        ...options.thunderforest, // Include key
        subLayer: 'mobile-atlas',
      }),

      'OS light': new OS({
        key: options.os, // For simplified options
        ...options.os, // Include key
        subLayer: 'Light_3857',
      }),
      'OS road': new OS({
        key: options.os, // For simplified options
        ...options.os, // Include key
        subLayer: 'Road_3857',
      }),
      'Kompas topo': new Kompass({
        key: options.kompass, // For simplified options
        ...options.kompass, // Include key
        subLayer: 'topo',
      }),

      'Bing': new Bing$1({
        key: options.bing, // For simplified options
        ...options.bing, // Include key
        imagerySet: 'Road',
      }),
      'Bing hybrid': new Bing$1({
        key: options.bing, // For simplified options
        ...options.bing, // Include key
        imagerySet: 'AerialWithLabels',
      }),

      'Photo Swiss': new SwissTopo({
        subLayer: 'ch.swisstopo.swissimage',
      }),
      'Photo EspaÃ±a': new IgnES({
        server: 'pnoa-ma',
        subLayer: 'OI.OrthoimageCoverage',
      }),

      'Google road': new Google({
        subLayers: 'm', // Roads
      }),
      'Google hybrid': new Google({
        subLayers: 's,h',
      }),

      'MapBox elevation': new MapboxElevation({
        key: options.mapbox, // For simplified options
        ...options.mapbox, // Include key
      }),

      'Positron': new Positron(),
      'No tile': new NoTile(),
      'Blank': new TileLayer(),
    };
  }

  var tileLayercollection = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ArcGIS: ArcGIS,
    Bing: Bing$1,
    Google: Google,
    IGM: IGM,
    IGN: IGN,
    IgnES: IgnES,
    Kompass: Kompass,
    MRI: MRI,
    MapboxElevation: MapboxElevation,
    Maxbox: Maxbox,
    NoTile: NoTile,
    OS: OS,
    OpenStreetMap: OpenStreetMap,
    OpenTopo: OpenTopo,
    Positron: Positron,
    SwissTopo: SwissTopo,
    Thunderforest: Thunderforest,
    collection: collection$2,
    examples: examples
  });

  /**
   * Layer to show around partial layer
   * Outside of layer resolution or extent
   * Must be added to map before partial layers
   */


  class BackgroundLayer extends Positron {
    constructor(options) {
      // High resolution background layer
      super({
        minResolution: 20,
        visible: false,

        ...options,
      });

      // Low resolution background layer
      this.lowResLayer = new NoTile({
        maxResolution: this.getMinResolution(),
        visible: false,
      });
    }

    setMapInternal(map) {
      map.addLayer(this.lowResLayer); // Substitution for low resoltions
      map.on('precompose', () => this.tuneDisplay(map));

      return super.setMapInternal(map);
    }

    tuneDisplay(map) {
      const mapExtent = map.getView().calculateExtent(map.getSize());

      let needed = true;

      map.getLayers().forEach(l => {
        if (l.getUseInterimTilesOnError && // Is a tile layer
          l !== this && l !== this.lowResLayer && // Not one of the background layers
          l.isVisible() && // Is visible
          containsExtent(l.getExtent() || mapExtent, mapExtent))
          needed = false;
      });

      this.setVisible(needed);
      this.lowResLayer.setVisible(needed);
    }
  }

  /**
   * LayerSwitcher control for both tiled & vectors layers
   */


  //BEST how do we do on touch terminal ? alt key to switch layers / transparency
  //BEST slider transparency doesn't work out of range (no BackgroundLayer)
  //BEST BUG Attribution must be set before LayerSwitcher
  class LayerSwitcher extends Button {
    constructor(options) {
      super({
        // Button options
        className: 'myol-button-switcher',
        subMenuHTML: '<div>',

        ...options,
      });

      this.selectExtId = options.selectExtId;

      // Filter null or hidden layers
      this.layers = {};
      for (const name in options.layers)
        if (options.layers[name] && !options.layers[name].getProperties().hidden)
          this.layers[name] = options.layers[name];

      // Get baselayer from url hash (#baselayer=...) if any
      const bl = location.href.match(/baselayer=([^&]+)/u);

      if (bl)
        localStorage.myolBaselayer = decodeURI(bl[1]);

      this.sliderEl = document.createElement('input');
      this.sliderEl.type = 'range';
      this.sliderEl.title = 'Glisser pour faire varier la tranparence';
      this.sliderEl.oninput = () => this.displayTransparencyRange();
    }

    setMap(map) {
      map.addLayer(new BackgroundLayer());

      for (const name in this.layers) {
        // Build html layers selectors
        this.subMenuEl.insertAdjacentHTML('beforeend', '<label><input type="checkbox" name="baselayer" value="' + name + '">' + name + '</label>');

        // Make layers available for display
        this.layers[name].setVisible(false); // Don't begin to get the tiles yet (Necessary for Bing)
        map.addLayer(this.layers[name]);
      }
      this.selectorEls = this.element.querySelectorAll('input[name="baselayer"]');
      this.action(); // Display active layer
      this.subMenuEl.insertAdjacentHTML('beforeend', '<p>Ctrl+click: multicouches</p>');

      // Attach html additional selector (must be there to be after base layers)
      const selectExtEl = document.getElementById(this.selectExtId);

      if (selectExtEl) {
        selectExtEl.classList.add('select-ext');
        this.subMenuEl.appendChild(selectExtEl);
        selectExtEl.style.display = ''; // Unmask the selector if it has been at the declaration
      }

      // Register action listeners
      this.element.querySelectorAll('input[name=baselayer]')
        .forEach(el =>
          el.addEventListener('click', evt =>
            this.action(evt)
          )
        );

      // Hide the selector when the cursor is out of the selector
      map.on('pointermove', evt => {
        const maxX = map.getTargetElement().offsetWidth - this.element.offsetWidth - 20,
          maxY = this.element.offsetHeight + 20;

        if (evt.pixel[0] < maxX || evt.pixel[1] > maxY)
          this.element.classList.remove('myol-button-switcher-open');
      });

      return super.setMap(map);
    }

    action(evt) {
      // Clean checks
      if (evt && !evt.ctrlKey) {
        this.selectorEls.forEach(el => {
          el.checked = false;
        });
        evt.target.checked = true;
      }
      if (!this.element.querySelector('input[name="baselayer"]:checked'))
        (this.element.querySelector('input[value="' + localStorage.myolBaselayer + '"]') ||
          this.selectorEls[0]
        ).checked = true;

      const selectedEls = this.element.querySelectorAll('input[name="baselayer"]:checked');

      localStorage.myolBaselayer = selectedEls[0].value;
      this.sliderEl.value = 50;
      this.sliderEl.remove();
      this.transparentlayer = null;

      // Display the layers & slider
      this.selectorEls.forEach(el => {
        this.layers[el.value].setVisible(el.checked);
        this.layers[el.value].setOpacity(1);

        if (el.checked && selectedEls.length > 1) {
          el.parentElement.after(this.sliderEl);
          this.transparentlayer = this.layers[el.value];
        }
      });

      this.displayTransparencyRange();
    }

    displayTransparencyRange() {
      if (this.transparentlayer)
        this.transparentlayer.setOpacity(this.sliderEl.value / 100);
    }
  }

  /**
   * LengthLine control to display the length of an hovered line
   */


  class LengthLine extends Control {
    constructor() {
      super({
        element: document.createElement('div'), //HACK button not visible
      });

      this.element.className = 'ol-control myol-length-line';
    }

    setMap(map) {
      map.on('pointermove', evt => {
        this.element.innerHTML = ''; // Clear the measure if hover no feature

        // Find new features to hover
        map.forEachFeatureAtPixel(
          evt.pixel,
          feature => this.calculateLength(feature), {
            hitTolerance: 6, // Default is 0
          });
      });

      return super.setMap(map);
    }

    //BEST calculate distance to the ends
    calculateLength(feature) {
      if (feature) {
        const geometry = feature.getGeometry(),
          length = getLength(geometry),
          fcs = this.getFlatCoordinates(geometry);
        let denivPos = 0,
          denivNeg = 0;

        // Height difference calculation
        for (let c = 5; c < fcs.length; c += 3) {
          const d = fcs[c] - fcs[c - 3];

          if (d > 0)
            denivPos += d;
          else
            denivNeg -= d;
        }

        // Display
        //BEST BUG display length of GPS colimator
        if (length) {
          this.element.innerHTML =
            // Line length
            length < 1000 ?
            (Math.round(length)) + ' m' :
            (Math.round(length / 10) / 100) + ' km' +
            // Height difference
            (denivPos ? ' +' + denivPos + ' m' : '') +
            (denivNeg ? ' -' + denivNeg + ' m' : '');

          return false; // Continue detection (for editor that has temporary layers)
        }
      }
    }

    getFlatCoordinates(geometry) {
      let fcs = [];

      if (geometry.stride === 3)
        fcs = geometry.flatCoordinates;

      if (geometry.getType() === 'GeometryCollection')
        for (const g of geometry.getGeometries())
          fcs.push(...this.getFlatCoordinates(g));

      return fcs;
    }
  }

  /**
   * Load control to load vectors features
   * Supports any format supported by Openlayers
   */


  const subMenuHTML$2 = '<input type="file" accept=".gpx,.kml,.json,.geojson">',
    subMenuHTMLfr$2 = '<p>Importer un fichier de points ou de traces</p>' + subMenuHTML$2;

  class Load extends Button {
    constructor(options) {
      super({
        className: 'myol-button-load', // Button options
        subMenuId: 'myol-button-load',
        subMenuHTML: subMenuHTML$2,
        subMenuHTMLfr: subMenuHTMLfr$2,
        // loadedStyleOptions: {}, // Style of the loaded features
        // receivingLayer: layer, // Layer to addFeatures when loaded

        ...options,
      });

      this.reader = new FileReader();
    }

    subMenuAction(evt) {
      const blob = evt.target.files[0];

      if (evt.type === 'change' && evt.target.files)
        this.reader.readAsText(blob);

      this.reader.onload = () => this.loadText(this.reader.result, blob.name);
    }

    // Method to load a geoJson layer from an url
    loadUrl(url) {
      if (url)
        fetch(url)
        .then(response => response.text())
        .then(text => this.loadText(text, url));
    }

    // Method to load features from a GeoJSON text
    loadText(text, url) {
      const map = this.getMap(),
        formatName = url.split('.').pop().toUpperCase(), // Extract extension to be used as format name
        loadFormat = new format[formatName in format ? formatName : 'GeoJSON']({ // Find existing format
          extractStyles: false, // For KML
        }),
        receivedLat = text.match(/lat="-?([0-9]+)/u); // Received projection depending on the first value

      const receivedProjection =
        receivedLat &&
        receivedLat.length &&
        (parseInt(receivedLat[1], 10) > 100 ? 'EPSG:3857' : 'EPSG:4326');

      const features = loadFormat.readFeatures(text, {
        dataProjection: receivedProjection,
        featureProjection: map.getView().getProjection(), // Map projection
      });

      const gpxSource = new VectorSource({
        format: loadFormat,
        features: features,
        wrapX: false,
      });

      const fileExtent = gpxSource.getExtent();

      if (isEmpty(fileExtent))
        alert(url + ' ne comporte pas de point ni de trace.');
      else {
        // Add received features to the layer defined in potion
        if (this.options.receivingLayer)
          this.options.receivingLayer.getSource().addFeatures(features);
        // Or create a new layer
        else {
          map.addLayer(new VectorLayer({
            source: gpxSource,

            style: feature => {
              const properties = feature.getProperties();

              return new Style({
                stroke: new Stroke({
                  color: 'blue',
                  width: 2,
                }),
                image: properties.sym ? new Icon({
                  src: 'https://chemineur.fr/ext/Dominique92/GeoBB/icones/' + properties.sym + '.svg',
                }) : null,

                ...this.options.loadedStyleOptions,
              });
            },
          }));
        }

        // Zoom the map on the added features
        map.getView().fit(
          fileExtent, {
            minResolution: 1,
            padding: [5, 5, 5, 5],
          });
      }

      // Close the submenu
      this.element.classList.remove('myol-display-submenu');
    }
  }

  var containerId = "gcd-container";
  var buttonControlId = "gcd-button-control";
  var inputQueryId = "gcd-input-query";
  var inputSearchId = "gcd-input-search";
  var cssClasses = {
  	namespace: "ol-geocoder",
  	spin: "gcd-pseudo-rotate",
  	hidden: "gcd-hidden",
  	country: "gcd-country",
  	city: "gcd-city",
  	road: "gcd-road",
  	olControl: "ol-control",
  	glass: {
  		container: "gcd-gl-container",
  		control: "gcd-gl-control",
  		button: "gcd-gl-btn",
  		input: "gcd-gl-input",
  		expanded: "gcd-gl-expanded",
  		search: "gcd-gl-search",
  		result: "gcd-gl-result"
  	},
  	inputText: {
  		container: "gcd-txt-container",
  		control: "gcd-txt-control",
  		label: "gcd-txt-label",
  		input: "gcd-txt-input",
  		search: "gcd-txt-search",
  		icon: "gcd-txt-glass",
  		result: "gcd-txt-result"
  	}
  };
  var VARS = {
  	containerId: containerId,
  	buttonControlId: buttonControlId,
  	inputQueryId: inputQueryId,
  	inputSearchId: inputSearchId,
  	cssClasses: cssClasses
  };

  const EVENT_TYPE = {
    ADDRESSCHOSEN: 'addresschosen',
  };

  const CONTROL_TYPE = {
    NOMINATIM: 'nominatim',
    REVERSE: 'reverse',
  };

  const TARGET_TYPE = {
    GLASS: 'glass-button',
    INPUT: 'text-input',
  };

  const FEATURE_SRC = 'data:image/svg+xml;charset=utf-8,' +
    '<svg width="26" height="42" viewBox="0 0 26 42" xmlns="http://www.w3.org/2000/svg">' +
    '<polygon points="1,18 14,42 25,18" fill="rgb(75,75,75)" />' +
    '<ellipse cx="13" cy="13" rx="13" ry="13" fill="rgb(75,75,75)" />' +
    '<ellipse cx="13" cy="14" rx="6" ry="6" fill="yellow" />' +
    '</svg>'; // #285

  const PROVIDERS = {
    BING: 'bing',
    MAPQUEST: 'mapquest',
    OPENCAGE: 'opencage',
    OSM: 'osm',
    PHOTON: 'photon',
  };

  const APIS = {
    BING: 'https://dev.virtualearth.net/REST/v1/Locations',
    MAPQUEST: 'https://nominatim.openstreetmap.org/search', // #286
    OPENCAGE: 'https://api.opencagedata.com/geocode/v1/json?',
    OSM: 'https://nominatim.openstreetmap.org/search',
    PHOTON: 'https://photon.komoot.io/api/',
  };

  const DEFAULT_OPTIONS = {
    provider: PROVIDERS.OSM,
    label: '',
    placeholder: 'Search for an address',
    featureStyle: null,
    targetType: TARGET_TYPE.GLASS,
    lang: 'en-US',
    limit: 5,
    keepOpen: false,
    preventDefault: false,
    preventPanning: false,
    preventMarker: false,
    defaultFlyResolution: 10, // Meters per pixel
    debug: false,
  };

  /* global window, performance */

  function assert(condition, message = 'Assertion failed') {
    if (!condition) {
      if (typeof Error !== 'undefined') throw new Error(message);

      throw message; // Fallback
    }
  }

  function now() {
    // Polyfill for window.performance.now()
    // @license http://opensource.org/licenses/MIT
    // copyright Paul Irish 2015
    // https://gist.github.com/paulirish/5438650
    if ('performance' in window === false) {
      window.performance = {};
    }

    if ('now' in window.performance === false) {
      let nowOffset = Date.now();

      if (performance.timing && performance.timing.navigationStart) {
        nowOffset = performance.timing.navigationStart;
      }

      window.performance.now = () => Date.now() - nowOffset;
    }

    return window.performance.now();
  }

  function randomId(prefix) {
    const id = now().toString(36);

    return prefix ? prefix + id : id;
  }

  /* global window, document, HTMLElement */


  /**
   * @param {Element|Array<Element>} element DOM node or array of nodes.
   * @param {String|Array<String>} classname Class or array of classes.
   * For example: 'class1 class2' or ['class1', 'class2']
   * @param {Number|undefined} timeout Timeout to remove a class.
   */
  function addClass(element, classname, timeout) {
    if (Array.isArray(element)) {
      element.forEach((each) => addClass(each, classname));

      return;
    }

    const array = Array.isArray(classname) ? classname : classname.split(/\s+/u);

    let i = array.length;

    while (i--) {
      if (!hasClass(element, array[i])) {
        _addClass(element, array[i]);
      }
    }
  }

  /**
   * @param {Element|Array<Element>} element DOM node or array of nodes.
   * @param {String|Array<String>} classname Class or array of classes.
   * For example: 'class1 class2' or ['class1', 'class2']
   * @param {Number|undefined} timeout Timeout to add a class.
   */
  function removeClass(element, classname, timeout) {
    if (Array.isArray(element)) {
      element.forEach((each) => removeClass(each, classname));

      return;
    }

    const array = Array.isArray(classname) ? classname : classname.split(/\s+/u);

    let i = array.length;

    while (i--) {
      if (hasClass(element, array[i])) {
        _removeClass(element, array[i]);
      }
    }
  }

  /**
   * @param {Element} element DOM node.
   * @param {String} classname Classname.
   * @return {Boolean}
   */
  function hasClass(element, c) {
    // use native if available
    return element.classList ? element.classList.contains(c) : classRegex(c).test(element.className);
  }

  function removeAllChildren(node) {
    while (node.firstChild) node.firstChild.remove();
  }

  function template(html, row) {
    return html.replace(/\{\s*([\w-]+)\s*\}/gu, (htm, key) => {
      const value = row[key] === undefined ? '' : row[key];

      return htmlEscape(value);
    });
  }

  function htmlEscape(str) {
    return String(str)
      .replaceAll('&', '&amp;')
      .replaceAll('<', '&lt;')
      .replaceAll('>', '&gt;')
      .replaceAll('"', '&quot;')
      .replaceAll("'", '&#039;');
  }

  function createElement(node, html) {
    let elem;

    if (Array.isArray(node)) {
      elem = document.createElement(node[0]);

      if (node[1].id) elem.id = node[1].id;

      if (node[1].classname) elem.className = node[1].classname;

      if (node[1].attr) {
        const {
          attr
        } = node[1];

        if (Array.isArray(attr)) {
          let i = -1;

          while (++i < attr.length) {
            elem.setAttribute(attr[i].name, attr[i].value);
          }
        } else {
          elem.setAttribute(attr.name, attr.value);
        }
      }
    } else {
      elem = document.createElement(node);
    }

    elem.innerHTML = html;

    const frag = document.createDocumentFragment();

    while (elem.childNodes[0]) frag.append(elem.childNodes[0]);

    elem.append(frag);

    return elem;
  }

  function classRegex(classname) {
    return new RegExp(`(^|\\s+) ${classname} (\\s+|$)`, 'u');
  }

  function _addClass(el, klass, timeout) {
    // use native if available
    if (el.classList) {
      el.classList.add(klass);
    } else {
      el.className = `${el.className} ${klass}`.trim();
    }
  }

  function _removeClass(el, klass, timeout) {
    if (el.classList) {
      el.classList.remove(klass);
    } else {
      el.className = el.className.replace(classRegex(klass), ' ').trim();
    }
  }

  const klasses$1 = VARS.cssClasses;

  /**
   * @class Html
   */
  class Html {
    /**
     * @constructor
     * @param {object} options Options.
     */
    constructor(options) {
      this.options = options;
      this.els = this.createControl();
    }

    createControl() {
      let container;
      let containerClass;
      let elements;

      if (this.options.targetType === TARGET_TYPE.INPUT) {
        containerClass = `${klasses$1.namespace} ${klasses$1.inputText.container}`;
        container = createElement(
          ['div', {
            id: VARS.containerId,
            classname: containerClass
          }],
          Html.input
        );
        elements = {
          container,
          control: container.querySelector(`.${klasses$1.inputText.control}`),
          label: container.querySelector(`.${klasses$1.inputText.label}`), // #198
          input: container.querySelector(`.${klasses$1.inputText.input}`),
          search: container.querySelector(`.${klasses$1.inputText.search}`),
          result: container.querySelector(`.${klasses$1.inputText.result}`),
        };
        elements.label.innerHTML = this.options.label;
      } else {
        containerClass = `${klasses$1.namespace} ${klasses$1.glass.container}`;
        container = createElement(
          ['div', {
            id: VARS.containerId,
            classname: containerClass
          }],
          Html.glass
        );
        elements = {
          container,
          control: container.querySelector(`.${klasses$1.glass.control}`),
          button: container.querySelector(`.${klasses$1.glass.button}`),
          input: container.querySelector(`.${klasses$1.glass.input}`),
          search: container.querySelector(`.${klasses$1.glass.search}`),
          result: container.querySelector(`.${klasses$1.glass.result}`),
        };
      }

      // set placeholder from options
      elements.input.placeholder = this.options.placeholder;

      return elements;
    }
  }

  Html.glass = `
  <div class="${klasses$1.glass.control} ${klasses$1.olControl}">
    <button type="button" id="${VARS.buttonControlId}" class="${klasses$1.glass.button}"></button>
    <input type="text" id="${VARS.inputQueryId}" class="${klasses$1.glass.input}" autocomplete="off" placeholder="Search ...">
    <a id="${VARS.inputSearchId}" class="${klasses$1.glass.search} ${klasses$1.hidden}"></a>
  </div>
  <ul class="${klasses$1.glass.result}"></ul>
`;

  Html.input = `
  <div class="${klasses$1.inputText.control}">
    <label type="button" id="${VARS.inputSearchId}" class="${klasses$1.inputText.label}"></label>
    <input type="text" id="${VARS.inputQueryId}" class="${klasses$1.inputText.input}" autocomplete="off" placeholder="Search ...">
    <span class="${klasses$1.inputText.icon}"></span>
    <button type="button" id="${VARS.inputSearchId}" class="${klasses$1.inputText.search} ${klasses$1.hidden}"></button>
  </div>
  <ul class="${klasses$1.inputText.result}"></ul>
`;

  /* global window, document, fetch, setTimeout */

  function json(obj) {
    return new Promise((resolve, reject) => {
      const url = encodeUrlXhr(obj.url, obj.data);
      const config = {
        method: 'GET',
        mode: 'cors',
        credentials: 'same-origin',
      };

      if (obj.jsonp) {
        jsonp(url, obj.callbackName, resolve);
      } else {
        fetch(url, config)
          .then((r) => r.json())
          .then(resolve)
          .catch(reject);
      }
    });
  }

  function toQueryString(obj) {
    return Object.keys(obj)
      .reduce((acc, k) => {
        acc.push(
          typeof obj[k] === 'object' ?
          toQueryString(obj[k]) :
          `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`
        );

        return acc;
      }, [])
      .join('&');
  }

  function encodeUrlXhr(url, data) {
    if (data && typeof data === 'object') {
      url += (/\?/u.test(url) ? '&' : '?') + toQueryString(data);
    }

    return url;
  }

  function jsonp(url, key, callback) {
    // https://github.com/Fresheyeball/micro-jsonp/blob/master/src/jsonp.js
    const {
      head
    } = document;
    const script = document.createElement('script');
    // generate minimally unique name for callback function
    const callbackName = `f${Math.round(Math.random() * Date.now())}`;

    // set request url
    script.setAttribute(
      'src',
      // add callback parameter to the url
      //    where key is the parameter key supplied
      //    and callbackName is the parameter value
      `${url + (url.indexOf('?') > 0 ? '&' : '?') + key}=${callbackName}`
    );

    // place jsonp callback on window,
    //  the script sent by the server should call this
    //  function as it was passed as a url parameter
    window[callbackName] = (data) => {
      window[callbackName] = undefined;

      // clean up script tag created for request
      setTimeout(() => head.removeChild(script), 0);

      // hand data back to the user
      callback(data);
    };

    // actually make the request
    head.append(script);
  }

  /**
   * @class Bing
   */
  class Bing {
    /**
     * @constructor
     */
    constructor() {
      this.settings = {
        url: APIS.BING,
        callbackName: 'jsonp',

        params: {
          query: '',
          key: '',
          includeNeighborhood: 0,
          maxResults: 10,
        },
      };
    }

    getParameters(options) {
      return {
        url: this.settings.url,
        callbackName: this.settings.callbackName,

        params: {
          query: options.query,
          key: options.key,

          includeNeighborhood: options.includeNeighborhood || this.settings.params.includeNeighborhood,

          maxResults: options.maxResults || this.settings.params.maxResults,
        },
      };
    }

    handleResponse(results) {
      const {
        resources
      } = results.resourceSets[0];

      if (resources.length === 0) return [];

      return resources.map((result) => ({
        lon: result.point.coordinates[1],
        lat: result.point.coordinates[0],

        address: {
          name: result.name,
        },

        original: {
          formatted: result.address.formattedAddress,
          details: result.address,
        },
      }));
    }
  }

  /**
   * @class MapQuest
   */
  class MapQuest {
    /**
     * @constructor
     */
    constructor() {
      this.settings = {
        url: APIS.MAPQUEST,

        params: {
          q: '',
          key: '',
          format: 'json',
          addressdetails: 1,
          limit: 10,
          countrycodes: '',
          'accept-language': 'en-US',
        },
      };
    }

    getParameters(options) {
      return {
        url: this.settings.url,

        params: {
          q: options.query,
          key: options.key,
          format: 'json',
          addressdetails: 1,
          limit: options.limit || this.settings.params.limit,
          countrycodes: options.countrycodes || this.settings.params.countrycodes,

          'accept-language': options.lang || this.settings.params['accept-language'],
        },
      };
    }

    handleResponse(results) {
      if (results.length === 0) return [];

      return results.map((result) => ({
        lon: result.lon,
        lat: result.lat,

        address: {
          name: result.address.neighbourhood || '',
          road: result.address.road || '',
          postcode: result.address.postcode,
          city: result.address.city || result.address.town,
          state: result.address.state,
          country: result.address.country,
        },

        original: {
          formatted: result.display_name,
          details: result.address,
        },
      }));
    }
  }

  /**
   * @class OpenCage
   */
  class OpenCage {
    /**
     * @constructor
     */
    constructor() {
      this.settings = {
        url: APIS.OPENCAGE,

        params: {
          q: '',
          key: '',
          limit: 10,
          countrycode: '',
          pretty: 1,
          no_annotations: 1,
        },
      };
    }

    getParameters(options) {
      return {
        url: this.settings.url,

        params: {
          q: options.query,
          key: options.key,
          limit: options.limit || this.settings.params.limit,
          countrycode: options.countrycodes || this.settings.params.countrycodes,
        },
      };
    }

    handleResponse(results) {
      if (results.results.length === 0) return [];

      return results.results.map((result) => ({
        lon: result.geometry.lng,
        lat: result.geometry.lat,

        address: {
          name: result.components.house_number || '',
          road: result.components.road || '',
          postcode: result.components.postcode,
          city: result.components.city || result.components.town,
          state: result.components.state,
          country: result.components.country,
        },

        original: {
          formatted: result.formatted,
          details: result.components,
        },
      }));
    }
  }

  /**
   * @class OpenStreet
   */
  class OpenStreet {
    /**
     * @constructor
     */
    constructor(options) {
      this.settings = {
        url: APIS.OSM,
        ...options, // #266 Allow custom URL for osm provider
        params: {
          q: '',
          format: 'json',
          addressdetails: 1,
          limit: 10,
          countrycodes: '',
          viewbox: '',
          'accept-language': 'en-US',
        },
      };
    }

    getParameters(opt) {
      return {
        url: this.settings.url,

        params: {
          q: opt.query,
          format: this.settings.params.format,
          addressdetails: this.settings.params.addressdetails,
          limit: opt.limit || this.settings.params.limit,
          countrycodes: opt.countrycodes || this.settings.params.countrycodes,
          viewbox: opt.viewbox || this.settings.params.viewbox, // #260
          'accept-language': opt.lang || this.settings.params['accept-language'],
        },
      };
    }

    handleResponse(results) {
      if (results.length === 0) return [];

      return results.map((result) => ({
        lon: result.lon,
        lat: result.lat,
        bbox: result.boundingbox,

        address: {
          name: result.display_name,
          road: result.address.road || '',
          houseNumber: result.address.house_number || '',
          postcode: result.address.postcode,
          city: result.address.city || result.address.town,
          state: result.address.state,
          country: result.address.country,
        },

        original: {
          formatted: result.display_name,
          details: result.address,
        },
      }));
    }
  }

  /**
   * @class Photon
   */
  class Photon {
    /**
     * @constructor
     */
    constructor() {
      this.settings = {
        url: APIS.PHOTON,

        params: {
          q: '',
          limit: 10,
          lang: 'en',
        },

        langs: ['de', 'it', 'fr', 'en'],
      };
    }

    getParameters(options) {
      options.lang = options.lang.toLowerCase();

      return {
        url: this.settings.url,

        params: {
          q: options.query,
          limit: options.limit || this.settings.params.limit,

          lang: this.settings.langs.includes(options.lang) ? options.lang : this.settings.params.lang,
        },
      };
    }

    handleResponse(results) {
      if (results.features.length === 0) return [];

      return results.features.map((result) => ({
        lon: result.geometry.coordinates[0],
        lat: result.geometry.coordinates[1],

        address: {
          name: result.properties.name,
          postcode: result.properties.postcode,
          city: result.properties.city,
          state: result.properties.state,
          country: result.properties.country,
        },

        original: {
          formatted: result.properties.name,
          details: result.properties,
        },
      }));
    }
  }

  /* global window, console */


  const klasses = VARS.cssClasses;

  /**
   * @class Nominatim
   */
  class Nominatim {
    /**
     * @constructor
     * @param {Function} base Base class.
     */
    constructor(base, els) {
      this.Base = base;

      this.layerName = randomId('geocoder-layer-');
      this.layer = new VectorLayer({
        background: 'transparent', // #282
        name: this.layerName,
        source: new VectorSource(),
        displayInLayerSwitcher: false, // #256 Remove search layer from legend
      });

      this.options = base.options;
      // provider is either the name of a built-in provider as a string or an
      // object that implements the provider API
      this.options.provider =
        typeof this.options.provider === 'string' ?
        this.options.provider.toLowerCase() :
        this.options.provider;
      this.provider = this.newProvider();

      this.els = els;
      this.container = this.els.container;
      this.registeredListeners = {
        mapClick: false,
      };
      this.setListeners();
    }

    setListeners() {
      const openSearch = (evt) => {
        evt.stopPropagation();
        hasClass(this.els.control, klasses.glass.expanded) ? this.collapse() : this.expand();
      };
      const query = (evt) => {
        const value = evt.target.value.trim();
        const hit = evt.key ?
          evt.key === 'Enter' :
          evt.which ?
          evt.which === 13 :
          evt.keyCode ?
          evt.keyCode === 13 :
          false;

        if (hit) {
          evt.preventDefault();
          this.query(value);
        }
      };
      const stopBubbling = (evt) => evt.stopPropagation();
      const search = () => { // #255
        this.els.input.focus();
        this.query(this.els.input.value);
      };
      const handleValue = (evt) => {
        const value = evt.target.value.trim();

        value.length !== 0 ?
          removeClass(this.els.search, klasses.hidden) :
          addClass(this.els.search, klasses.hidden);
      };

      this.els.input.addEventListener('keypress', query, false);
      this.els.input.addEventListener('click', stopBubbling, false);
      this.els.input.addEventListener('input', handleValue, false);
      this.els.search.addEventListener('click', search, false);

      if (this.options.targetType === TARGET_TYPE.GLASS) {
        this.els.button.addEventListener('click', openSearch, false);
      }
    }

    query(q) {
      // lazy provider
      if (!this.provider) {
        this.provider = this.newProvider();
      }

      const parameters = this.provider.getParameters({
        query: q,
        key: this.options.key,
        lang: this.options.lang,
        countrycodes: this.options.countrycodes,
        viewbox: this.options.viewbox,
        limit: this.options.limit,
      });

      this.clearResults(this.options.keepOpen === false); // #284
      addClass(this.els.search, klasses.spin);

      const ajax = {
        url: parameters.url,
        data: parameters.params,
      };

      if (parameters.callbackName) {
        ajax.jsonp = true;
        ajax.callbackName = parameters.callbackName;
      }

      json(ajax)
        .then((res) => {
          this.options.debug && console.info(res);

          removeClass(this.els.search, klasses.spin);

          // will be fullfiled according to provider
          const res_ = this.provider.handleResponse(res);

          if (res_) {
            this.createList(res_);
            this.listenMapClick();
          }
        })
        .catch(() => {
          removeClass(this.els.search, klasses.spin);

          const li = createElement('li', '<h5>Error! No internet connection?</h5>');

          this.els.result.append(li);
        });
    }

    createList(response) {
      const ul = this.els.result;

      response.forEach((row) => {
        let addressHtml;

        switch (this.options.provider) {
          case PROVIDERS.OSM:
            addressHtml = `<span class="${klasses.road}">${row.address.name}</span>`;
            break;

          default:
            addressHtml = this.addressTemplate(row.address);
        }

        if (response.length === 1) {
          // #206 Direct access if options.limit: 1
          this.chosen(row, addressHtml, row.address, row.original);
        } else {
          const li = createElement('li', `<a href="#">${addressHtml}</a>`);

          li.addEventListener(
            'click',
            (evt) => {
              evt.preventDefault();
              this.chosen(row, addressHtml, row.address, row.original);
            },
            false
          );

          ul.append(li);
        }
      });
    }

    chosen(place, addressHtml, addressObj, addressOriginal) {
      const map = this.Base.getMap();
      const coord_ = [Number.parseFloat(place.lon), Number.parseFloat(place.lat)];
      const projection = map.getView().getProjection();
      const coord = transform$1(coord_, 'EPSG:4326', projection);

      let {
        bbox
      } = place;

      if (bbox) {
        bbox = transformExtent(
          // #274 https://nominatim.org/release-docs/latest/api/Output/#boundingbox
          // Requires parseFloat on negative bbox entries
          [parseFloat(bbox[2]), parseFloat(bbox[0]), parseFloat(bbox[3]), parseFloat(bbox[1])], // SNWE -> WSEN
          'EPSG:4326',
          projection
        );
      }

      const address = {
        formatted: addressHtml,
        details: addressObj,
        original: addressOriginal,
      };

      this.clearResults(true); // #284

      // #239
      if (this.options.preventDefault === true || this.options.preventMarker === true) {
        // No display change
        this.Base.dispatchEvent({
          type: EVENT_TYPE.ADDRESSCHOSEN,
          address,
          coordinate: coord,
          bbox,
          place,
        });
      } else {
        // Display a marker
        const feature = this.createFeature(coord, address);

        this.Base.dispatchEvent({
          type: EVENT_TYPE.ADDRESSCHOSEN,
          address,
          feature,
          coordinate: coord,
          bbox,
          place,
        });
      }

      // #239
      if (this.options.preventDefault !== true && this.options.preventPanning !== true) {
        // Move & zoom to the position
        if (bbox) {
          map.getView().fit(bbox, {
            duration: 500,
          });
        } else if (this.options.defaultFlyZoom) {
          map.getView().animate({
            center: coord,
            // #235 ol-geocoder results are too much zoomed in
            zoom: this.options.defaultFlyZoom,
            duration: 500,
          });
        } else {
          map.getView().animate({
            center: coord,
            // #235 ol-geocoder results are too much zoomed in
            resolution: this.options.defaultFlyResolution,
            duration: 500,
          });
        }
      }
    }

    createFeature(coord) {
      const feature = new Feature(new Point$1(coord));

      this.addLayer();
      feature.setStyle(this.options.featureStyle);
      feature.setId(randomId('geocoder-ft-'));
      this.getSource().addFeature(feature);

      return feature;
    }

    addressTemplate(address) {
      const html = [];

      if (address.name) {
        html.push(['<span class="', klasses.road, '">{name}</span>'].join(''));
      }

      if (address.road || address.building || address.house_number) {
        html.push(
          ['<span class="', klasses.road, '">{building} {road} {house_number}</span>'].join('')
        );
      }

      if (address.city || address.town || address.village) {
        html.push(
          ['<span class="', klasses.city, '">{postcode} {city} {town} {village}</span>'].join('')
        );
      }

      if (address.state || address.country) {
        html.push(['<span class="', klasses.country, '">{state} {country}</span>'].join(''));
      }

      return template(html.join('<br>'), address);
    }

    newProvider() {
      switch (this.options.provider) {
        case PROVIDERS.OSM:
          return new OpenStreet(this.options);
        case PROVIDERS.MAPQUEST:
          return new MapQuest();
        case PROVIDERS.PHOTON:
          return new Photon();
        case PROVIDERS.BING:
          return new Bing();
        case PROVIDERS.OPENCAGE:
          return new OpenCage();

        default:
          return this.options.provider;
      }
    }

    expand() {
      removeClass(this.els.input, klasses.spin);
      addClass(this.els.control, klasses.glass.expanded);
      window.setTimeout(() => this.els.input.focus(), 100);
      this.listenMapClick();
    }

    collapse() {
      this.els.input.value = '';
      this.els.input.blur();
      addClass(this.els.search, klasses.hidden);
      removeClass(this.els.control, klasses.glass.expanded);
      removeAllChildren(this.els.result); // #284
    }

    listenMapClick() {
      // already registered
      if (this.registeredListeners.mapClick) return;

      const that = this;
      const mapElement = this.Base.getMap().getTargetElement();

      this.registeredListeners.mapClick = true;

      // one-time fire click
      mapElement.addEventListener(
        'click', {
          handleEvent(evt) {
            that.clearResults(true);
            mapElement.removeEventListener(evt.type, this, false);
            that.registeredListeners.mapClick = false;
          },
        },
        false
      );
    }

    clearResults(collapse) {
      collapse && this.options.targetType === TARGET_TYPE.GLASS ?
        this.collapse() :
        removeAllChildren(this.els.result);
    }

    getSource() {
      return this.layer.getSource();
    }

    addLayer() {
      let found = false;

      const map = this.Base.getMap();

      map.getLayers().forEach((layer) => {
        if (layer === this.layer) found = true;
      });

      if (!found) map.addLayer(this.layer);
    }
  }

  /**
   * @class Base
   * @extends {ol.control.Control}
   */
  class Base extends Control {
    /**
     * @constructor
     * @param {string} type nominatim|reverse.
     * @param {object} options Options.
     */
    constructor(type = CONTROL_TYPE.NOMINATIM, options = {}) {
      assert(typeof type === 'string', '@param `type` should be string!');
      assert(
        type === CONTROL_TYPE.NOMINATIM || type === CONTROL_TYPE.REVERSE,
        `@param 'type' should be '${CONTROL_TYPE.NOMINATIM}'
      or '${CONTROL_TYPE.REVERSE}'!`
      );
      assert(typeof options === 'object', '@param `options` should be object!');

      let container;
      let $nominatim;
      const $html = new Html(options);

      if (type === CONTROL_TYPE.NOMINATIM) {
        container = $html.els.container;
      }

      super({
        element: container,
        ...options, // Allows to add ol.control.Control options (as target:)
      });

      this.container = container;
      this.options = {
        ...DEFAULT_OPTIONS,
        featureStyle: [
          new Style({
            image: new Icon({
              anchor: [0.5, 1], // #285
              src: FEATURE_SRC,
            })
          }),
        ],
        ...options,
      };

      if (type === CONTROL_TYPE.NOMINATIM) {
        $nominatim = new Nominatim(this, $html.els);
        this.layer = $nominatim.layer;
      }
    }

    /**
     * @return {ol.layer.Vector} Returns the layer created by this control
     */
    getLayer() {
      return this.layer;
    }

    /**
     * @return {ol.source.Vector} Returns the source created by this control
     */
    getSource() {
      return this.getLayer().getSource();
    }

    /**
     * Set a new provider
     * @param {String} provider
     */
    setProvider(provider) {
      this.options.provider = provider;
    }

    /**
     * Set provider key
     * @param {String} key
     */
    setProviderKey(key) {
      this.options.key = key;
    }

    /**
     * @return {String} Returns the version & build date
     */
    getVersion() {
      return '4.3.3-4';
    }
  }

  /**
   * MyGeocoder control that overloads ol-geocoder
   * From https://github.com/jonataswalker/ol-geocoder
   * Corrected https://github.com/kirtan-desai/ol-geocoder
   * Corrected https://github.com/Dominique92/ol-geocoder
   */


  class MyGeocoder extends Base {
    constructor(options) {
      super('nominatim', {
        // See https://github.com/kirtan-desai/ol-geocoder#user-content-api
        placeholder: 'Recherche par nom sur la carte', // Initialization of the input field

        ...options,
      });

      this.element.classList.add('ol-control');

      // Avoid submit of a form including the map
      this.element.getElementsByTagName('input')[0]
        .addEventListener('keypress', evt =>
          evt.stopImmediatePropagation()
        );

      // Close other opened buttons when hover with a mouse
      this.element.addEventListener('pointerover', () => {
        for (const el of document.getElementsByClassName('myol-button-selected'))
          el.classList.remove('myol-button-selected');
      });

      // Close submenu when hover another button
      document.addEventListener('pointerout', evt => {
        const hoveredEl = document.elementFromPoint(evt.x, evt.y),
          controlEl = this.element.firstElementChild;

        if (hoveredEl && hoveredEl.tagName === 'BUTTON')
          controlEl.classList.remove('gcd-gl-expanded');
      });
    }
  }

  /**
   * MyGeolocation control to isplay status, altitude & speed
   */


  //BEST move this in html
  const subMenuHTML$1 = '<p>\
  <input type="radio" name="myol-gps-source" value="0" checked="checked">None &nbsp;\
  <input type="radio" name="myol-gps-source" value="1">Outdoor &nbsp;\
  <input type="radio" name="myol-gps-source" value="2">Indoor &nbsp;\
  </p><hr><p>\
  <input type="radio" name="myol-gps-display" value="0" checked="checked">Free map&nbsp;\
  <input type="radio" name="myol-gps-display" value="1">Center &nbsp;\
  <input type="radio" name="myol-gps-display" value="2">Center & orient &nbsp;\
  </p>',

    subMenuHTMLfr$1 = '\
  <p>Localisation GPS:</p>\
  <label>\
    <input type="radio" name="myol-gps-source" value="0" checked="checked">\
    Inactif</label><label>\
    <input type="radio" name="myol-gps-source" value="1">\
    Position GPS <span>(1) extÃ©rieur</span></label><label>\
    <input type="radio" name="myol-gps-source" value="2">\
    Position GPS ou IP <span>(2) intÃ©rieur</span></label>\
  <hr><label>\
    <input type="radio" name="myol-gps-display" value="0" checked="checked">\
    Graticule, carte libre</label><label>\
    <input type="radio" name="myol-gps-display" value="1">\
    Centre la carte, nord en haut</label><label>\
    <input type="radio" name="myol-gps-display" value="2">\
    Centre et oriente la carte <span>(3)</span></label>\
  <hr>\
  <p>(1) plus prÃ©cis en extÃ©rieur mais plus lent Ã  initialiser,\
    nÃ©cessite un capteur et une rÃ©ception GPS.</p>\
  <p>(2) plus prÃ©cis et rapide en intÃ©rieur ou en zone urbaine\
    mais peut Ãªtre trÃ¨s erronÃ© en extÃ©rieur Ã  l\'initialisation.\
    Utilise les position des points WiFi proches en plus du GPS dont il peut se passer.</p>\
  <p>(3) nÃ©cessite un capteur magnÃ©tique et un explorateur le supportant.</p>';

  class MyGeolocation extends Button {
    constructor(options) {
      super(
        location.href.match(/(https|localhost)/u) ? {
          // Button options
          className: 'myol-button-geolocation',
          subMenuId: 'myol-button-geolocation',
          subMenuHTML: subMenuHTML$1,
          subMenuHTMLfr: subMenuHTMLfr$1,

          // ol.Geolocation options
          // https://www.w3.org/TR/geolocation/#position_options_interface
          enableHighAccuracy: true,
          maximumAge: 1000,
          timeout: 1000,

          ...options,
        } :
        // Hide if http
        {
          className: 'myol-button-hide',
        });

      // Add status display element
      this.statusEl = document.createElement('p');
      this.element.appendChild(this.statusEl);

      this.addGraticule();

      // Browser heading from the inertial & magnetic sensors
      window.addEventListener('deviceorientationabsolute', evt => {
        this.heading = evt.alpha || evt.webkitCompassHeading; // Android || iOS
        this.subMenuAction(evt);
      });
    } // End constructor

    addGraticule() {
      this.graticuleFeature = new Feature();
      this.northGraticuleFeature = new Feature();

      this.graticuleFeature.setStyle(new Style({
        stroke: new Stroke({
          color: '#00f',
          lineDash: [16, 14],
          width: 1,
        }),
      }));

      this.northGraticuleFeature.setStyle(new Style({
        stroke: new Stroke({
          color: '#c00',
          lineDash: [16, 14],
          width: 1,
        }),
      }));

      this.graticuleLayer = new VectorLayer({
        source: new VectorSource({
          features: [this.graticuleFeature, this.northGraticuleFeature],
        }),
        wrapX: false,
        zIndex: 300, // Above the features
      });
    }

    setMap(map) {
      map.addLayer(this.graticuleLayer);
      map.on('moveend', evt => this.subMenuAction(evt)); // Refresh graticule after map zoom

      this.geolocation = new Geolocation({
        projection: map.getView().getProjection(),
        trackingOptions: this.options,

        ...this.options,
      });
      this.geolocation.on('change', evt => this.subMenuAction(evt));
      this.geolocation.on('error', error => {
        console.log('Geolocation error: ' + error.message);
      });

      return super.setMap(map);
    }

    buttonAction(evt, active) {
      const sourceEls = document.getElementsByName('myol-gps-source');

      if (evt.type === 'click' && active && sourceEls[0].checked)
        sourceEls[1].click();
    }

    subMenuAction(evt) {
      const sourceLevelEl = document.querySelector('input[name="myol-gps-source"]:checked'),
        displayEls = document.getElementsByName('myol-gps-display'),
        displayLevelEl = document.querySelector('input[name="myol-gps-display"]:checked'),
        sourceLevel = sourceLevelEl ? parseInt(sourceLevelEl.value, 10) : 0, // On/off, GPS, GPS&WiFi
        displayLevel = displayLevelEl ? parseInt(displayLevelEl.value, 10) : 0, // Graticule & sourceLevel
        map = this.getMap(),
        view = map ? map.getView() : null;

      // Tune the tracking level
      if (evt.target.name === 'myol-gps-source') {
        this.geolocation.setTracking(sourceLevel > 0);
        this.graticuleLayer.setVisible(false);
        if (!sourceLevel)
          displayEls[0].checked = true;
        if (sourceLevel && displayLevel === 0)
          displayEls[2].checked = true;
      }

      // Get geolocation values
      ['Position', 'AccuracyGeometry', 'Speed', 'Altitude'].forEach(valueName => {
        const value = this.geolocation['get' + valueName]();

        if (value)
          this[valueName.toLowerCase()] = value;
      });

      // State 1 only takes positions from the GPS which have an altitude
      if (sourceLevel === 0 ||
        (sourceLevel === 1 && !this.altitude))
        this.position = null;

      // Aware all who needs
      map.dispatchEvent({
        type: 'myol:gpspositionchanged',
        position: this.position,
      });

      // Render position & graticule
      if (map && view && sourceLevel && this.position) {
        // Estimate the viewport size to draw a visible graticule
        const p = this.position,
          hg = map.getCoordinateFromPixel([0, 0]),
          bd = map.getCoordinateFromPixel(map.getSize()),
          far = Math.hypot(hg[0] - bd[0], hg[1] - bd[1]) * 10;

        const // The graticule
          geometry = [
            new MultiLineString([
              [
                [p[0] - far, p[1]],
                [p[0] + far, p[1]]
              ],
              [
                [p[0], p[1]],
                [p[0], p[1] - far]
              ],
            ]),
          ],
          // Color north in red
          northGeometry = [
            new LineString([
              [p[0], p[1]],
              [p[0], p[1] + far]
            ]),
          ];

        // The accuracy circle
        if (this.accuracygeometry)
          geometry.push(this.accuracygeometry);

        this.graticuleFeature.setGeometry(new GeometryCollection(geometry));
        this.northGraticuleFeature.setGeometry(new GeometryCollection(northGeometry));

        // Center the map
        if (displayLevel > 0)
          view.setCenter(p);

        // Orientation
        if (!sourceLevel || displayLevel === 1)
          view.setRotation(0);
        else if (this.heading && displayLevel === 2)
          view.setRotation(
            Math.PI / 180 * (this.heading - screen.orientation.angle) // Delivered Â° reverse clockwize
          );

        // Zoom on the area
        if (!this.isZoomed) { // Only the first time after activation
          this.isZoomed = true;
          view.setZoom(17);

          // Close submenu when GPS locates
          this.element.classList.remove('myol-button-hover');
          this.element.classList.remove('myol-button-selected');
        }
        this.graticuleLayer.setVisible(true);
      } else
        view.setRotation(0); // Return to inactive state

      // Display data under the button
      let status = this.position ? '' : 'Sync...';
      if (this.altitude) {
        status = Math.round(this.altitude) + ' m';
        if (this.speed)
          status += ' ' + (Math.round(this.speed * 36) / 10) + ' km/h';
      }
      if (this.statusEl)
        this.statusEl.innerHTML = sourceLevel ? status : '';

      // Close the submenu
      if (evt.target.name) // Only when an input is hit
        this.element.classList.remove('myol-display-submenu');
    } // End subMenuAction
  }

  /**
   * MyMousePosition control to display the mouse position
   * Improve style
   */


  class MyMousePosition extends MousePosition {
    constructor(options) {
      super({
        // From MousePosition options
        className: 'ol-control myol-mouse-position',
        projection: 'EPSG:4326',
        placeholder: String.fromCharCode(0), // Hide control when mouse is out of the map
        coordinateFormat: c => this.display(c),

        ...options,
      });
    }

    setMap(map) {
      map.on('myol:gpspositionchanged', evt => {
        this.position = evt.position;
      });

      return super.setMap(map);
    }

    display(coordinates) {
      if (this.position) {
        const ll4326 = transform$1(this.position, 'EPSG:3857', 'EPSG:4326'),
          distance = getDistance(coordinates, ll4326);

        return distance < 1000 ?
          (Math.round(distance)) + ' m' :
          (Math.round(distance / 10) / 100) + ' km';
      }
      return createStringXY(4)(coordinates);
    }
  }

  /**
   * Permalink control
   * "map" url hash or localStorage: zoom=<ZOOM> lon=<LON> lat=<LAT>
   * Don't set view when you declare the map
   */


  class Permalink extends Control {
    constructor(opt) {
      const options = {
        // display: false, // {false | true} Display permalink link the map.
        // init: false, // {undefined | false | true | [<zoom>, <lon>, <lat>]} use url hash or localStorage to position the map.
        default: [6, 2, 47], // France
        // setUrl: false, // {false | true} Change url hash when moving the map.
        hash: '?', // {?, #} the permalink delimiter after the url

        ...opt,
      };

      super({
        element: document.createElement('div'),

        ...options,
      });

      this.options = options;

      if (options.display) {
        this.element.className = 'ol-control myol-permalink';
        this.linkEl = document.createElement('a');
        this.linkEl.innerHTML = 'Permalink';
        this.linkEl.title = 'Generate a link with map zoom & position';
        this.element.appendChild(this.linkEl);
      }
    }

    render(evt) {
      const view = evt.map.getView(),
        //BEST init with res=<resolution> or extent (not zoom, lon, lat)
        urlMod = (typeof this.options.init === 'object' ? // init: [<zoom>, <lon>, <lat>]
          'zoom=' + this.options.init[0] + '&lon=' + this.options.init[1] + '&lat=' + this.options.init[2] + ',' :
          '') +
        location.href.replace( // Get value from params with priority url / ? / #
          /map=([0-9.]+)\/(-?[0-9.]+)\/(-?[0-9.]+)/u, // map=<zoom>/<lon>/<lat>
          'zoom=$1&lon=$2&lat=$3' // zoom=<zoom>&lon=<lon>&lat=<lat>
        ) + ',' +
        // Last values
        'zoom=' + localStorage.myolZoom + ',' +
        'lon=' + localStorage.myolLon + ',' +
        'lat=' + localStorage.myolLat + ',' +
        // Default
        'zoom=' + this.options.default[0] + '&lon=' + this.options.default[1] + '&lat=' + this.options.default[2];

      // Set center & zoom at the init
      if (this.options.init) {
        this.options.init = false; // Only once

        view.setZoom(urlMod.match(/zoom=([0-9.]+)/u)[1]);

        view.setCenter(transform$1([
          urlMod.match(/lon=(-?[0-9.]+)/u)[1],
          urlMod.match(/lat=(-?[0-9.]+)/u)[1],
        ], 'EPSG:4326', 'EPSG:3857'));
      }

      // Set the permalink with current map zoom & position
      if (view.getCenter()) {
        const ll4326 = transform$1(view.getCenter(), 'EPSG:3857', 'EPSG:4326'),
          newParams = 'map=' +
          (localStorage.myolZoom = Math.round(view.getZoom() * 10) / 10) + '/' +
          (localStorage.myolLon = Math.round(ll4326[0] * 10000) / 10000) + '/' +
          (localStorage.myolLat = Math.round(ll4326[1] * 10000) / 10000);

        if (this.linkEl) {
          this.linkEl.href = this.options.hash + newParams;

          if (this.options.setUrl)
            location.href = '#' + newParams;
        }
      }

      return super.render(evt);
    }
  }

  /**
   * Print control
   */


  const subMenuHTML = '\
  <label><input type="radio" name="myol-print-orientation" value="0">Portrait</label>\
  <label><input type="radio" name="myol-print-orientation" value="1">Landscape</label>\
  <p><a id="myol-print">Print</a></p>',

    subMenuHTMLfr = '\
  <p style="float:right" title="Cancel"><a onclick="location.reload()">&#10006;</a></p>\
  <p style="width:175px">Choisir le format et recadrer</p>' +
    subMenuHTML
    .replace('Landscape', 'Paysage')
    .replace('Print', 'Imprimer');

  class Print extends Button {
    constructor(options) {
      super({
        // Button options
        className: 'myol-button-print',
        subMenuId: 'myol-button-print',
        subMenuHTML: subMenuHTML,
        subMenuHTMLfr: subMenuHTMLfr,

        ...options,
      });

      // To return without print
      document.addEventListener('keydown', evt => {
        if (evt.key === 'Escape')
          setTimeout(() => { // Delay reload for FF & Opera
            location.reload();
          });
      });
    }

    subMenuAction(evt) {
      const map = this.getMap(),
        mapEl = map.getTargetElement(),
        poEl = this.element.querySelector('input:checked'), // Selected orientation inputs
        orientation = poEl && poEl.value === '1' ? 'landscape' : 'portrait';

      // Fix resolution to an available tiles resolution
      map.getView().setConstrainResolution(true);

      // Set or replace the page style
      if (document.head.lastChild.textContent.match(/^@page\{size:/u))
        document.head.lastChild.remove();
      document.head.insertAdjacentHTML('beforeend', '<style>@page{size: A4 ' + orientation + '}</style>');

      // Parent the map to the top of the page
      document.body.appendChild(mapEl);
      mapEl.className = 'myol-print-' + orientation;

      // Finally print if required
      if (evt.target.id === 'myol-print') {
        if (poEl) { // If a format is set, the full page is already loaded
          window.print();
          location.reload();
        } else // Direct print : wait for full format rendering
          map.once('rendercomplete', () => {
            window.print();
            location.reload();
          });
      }
    }
  }

  /**
   * This file defines the myol.control exports
   */


  /**
   * Basic list of controls
   */
  function collection$1(options = {}) {
    return [
      // Top left
      new Zoom(options.zoom),
      new FullScreen(options.fullScreen),
      new MyGeocoder(options.geocoder),
      new MyGeolocation(options.geolocation),
      new Load(options.load),
      new Download(options.download),
      new Print(options.print),

      // Bottom left
      new LengthLine(options.lengthLine),
      new MyMousePosition(options.myMousePosition),
      new ScaleLine(options.scaleLine),

      // Bottom right
      new Attribution(options.attribution),
    ];
  }

  var control = {
    Button: Button,
    Download: Download,
    LengthLine: LengthLine,
    LayerSwitcher: LayerSwitcher,
    Load: Load,
    MyGeocoder: MyGeocoder,
    MyGeolocation: MyGeolocation,
    MyMousePosition: MyMousePosition,
    Permalink: Permalink,
    Print: Print,
    collection: collection$1,
  };

  /**
   * VectorEditor layer to edit GeoJSON lines & polygons
   */


  class VectorEditor extends VectorLayer {
    constructor(opt) {
      const options = {
        geoJsonId: 'geojson',
        format: new GeoJSON(),
        dataProjection: 'EPSG:4326',
        featureProjection: 'EPSG:3857',
        decimals: 5, //Output precision
        tolerance: 7, // Px
        // direction: false, // Add arrows to each line segment to show the direction
        // canMerge: false, // Merge lines having a common end
        // withPolys: false, // Can edit polygons
        // withHoles: false, // Allow holes in polygons
        // baseStyleOptions: {},
        // selectedStyleOptions: {},

        writeGeoJson: () => // writeGeoJson (features, lines, polys, options)
          this.options.format.writeFeatures(
            this.editedSource.getFeatures(),
            this.options,
          ),

        ...opt,
      };

      // Read data in an html element
      const geoJsonEl = document.getElementById(options.geoJsonId) ||
        document.createElement('textarea'),
        geoJson = geoJsonEl.value.trim() ||
        geoJsonEl.innerHTML.trim() ||
        '{"type":"FeatureCollection","features":[]}';

      // The editor source
      const editedSource = new VectorSource({
        features: options.format.readFeatures(geoJson, options),
        wrapX: false,

        ...options,
      });

      // The editor layer
      super({
        source: editedSource,
        zIndex: 400, // Editor & cursor above the features
        style: new Style({
          stroke: new Stroke({
            color: 'blue',
            width: 2,
          }),
          fill: new Fill({
            color: 'rgba(0,0,255,0.2)',
          }),

          ...options.baseStyleOptions,
        }),

        ...options,
      });

      this.options = options;
      this.geoJsonEl = geoJsonEl;
      this.editedSource = editedSource;
      this.snapSource = new VectorSource({});
    } // End constructor

    setMapInternal(map) {
      super.setMapInternal(map);
      this.map = map;

      // Interactions
      this.selectInteraction = new Select({
        hitTolerance: this.options.tolerance, // Default is 0
        toggleCondition: never, // No deselection on shift click
        filter: (f, layer) => layer && (layer.getSource() === this.editedSource),
        style: (f, r) => this.selectStyles(f, r),
      });

      this.modifyInteraction = new Modify({
        features: this.selectInteraction.getFeatures(),
        pixelTolerance: this.options.tolerance, // Default is 10
      });

      if (this.options.withPolys)
        this.drawPolyInteraction = new Draw({ // Draw line
          type: 'Polygon',
          source: this.editedSource,
          traceSource: this.snapSource,
          trace: true,
          stopClick: true, // Avoid zoom when finish drawing by doubleclick
          style: f => this.selectStyles(f),
        });

      this.drawLineInteraction = new Draw({ // Draw line
        type: 'LineString',
        source: this.editedSource,
        traceSource: this.snapSource,
        trace: true,
        stopClick: true, // Avoid zoom when finish drawing by doubleclick
        style: f => this.selectStyles(f),
      });

      this.snapInteraction = new Snap({
        source: this.editedSource,
        pixelTolerance: this.options.tolerance, // Default is 10
      });

      // Buttons
      const buttonsName = this.options.withPolys ? ['modify', 'drawPoly', 'drawLine'] : ['modify', 'drawLine'];

      buttonsName.forEach(intName => {
        const buttonEl = document.createElement('button'),
          element = document.createElement('div');

        buttonEl.setAttribute('type', 'button');
        element.className = 'ol-unselectable ol-control edit-button edit-button-' + intName;
        element.appendChild(buttonEl);

        const helpEl = document.getElementById('edit-help-' + intName);
        if (helpEl)
          element.appendChild(helpEl);

        buttonEl.addEventListener('click', () => this.restartInteractions(intName));

        // Add the button to the map
        map.addControl(new Control({
          element: element,
        }));
      });

      // Interactions listeners
      this.selectInteraction.on('select', () => this.optimiseAndSave()); // Merge old separated segments

      this.modifyInteraction.on('modifystart', evt => {
        const oEvt = evt.mapBrowserEvent.originalEvent,
          selectedFeature = this.selectInteraction.getFeatures().item(0),
          coordinates = selectedFeature.getGeometry().getCoordinates();

        // Shift + click : reverse line direction
        if (oEvt.shiftKey && !oEvt.ctrlKey && !oEvt.altKey &&
          typeof coordinates[0][0] === 'number') {
          this.editedSource.removeFeature(selectedFeature);

          this.editedSource.addFeature(new Feature({
            geometry: new LineString(coordinates.reverse()),
          }));
        }

        // Ctrl+Alt+click on segment : delete the line or poly
        if (!oEvt.shiftKey && oEvt.ctrlKey && oEvt.altKey)
          this.editedSource.removeFeature(selectedFeature);
      });

      this.editedSource.on('addfeature', () => {
        this.optimiseAndSave();
        this.restartInteractions('modify');
      });

      this.modifyInteraction.on('modifyend', () => this.optimiseAndSave());

      // At init
      this.map.once('loadend', () => {
        this.coordinate = this.map.getView().getCenter();

        this.optimiseAndSave();
        this.restartInteractions('modify');
      });

      map.on('pointermove', evt => {
        this.coordinate = evt.coordinate;

        // Change pointer if a feature is hovered
        const selectedFeatures = this.selectInteraction.getFeatures();

        this.map.getTargetElement().classList.remove('edit-pointed');
        if (selectedFeatures.getLength()) {
          this.map.forEachFeatureAtPixel(
            evt.pixel,
            feature => {
              if (feature !== selectedFeatures.item(0))
                this.map.getTargetElement().classList.add('edit-pointed');
            }, {
              layerFilter: (layer) => layer.getSource() === this.editedSource, // Only the edited layer
              hitTolerance: this.options.tolerance, // Default is 0
            },
          );
        }
      });

      map.on('click', evt => {
        const oEvt = evt.originalEvent;

        if (!oEvt.shiftKey && oEvt.ctrlKey && !oEvt.altKey)
          this.optimiseAndSave(
            this.snapInteraction.snapTo(
              evt.pixel,
              evt.coordinate,
              map,
            ).vertex
          );
      });
    } // End setMapInternal

    restartInteractions(intName) {
      const interactionName = this.options.withPolys ? ['select', 'modify', 'drawPoly', 'drawLine', 'snap'] : ['select', 'modify', 'drawLine', 'snap'];

      interactionName.forEach(i =>
        this.map.removeInteraction(this[i + 'Interaction'])
      );

      if (intName === 'modify')
        this.map.addInteraction(this.selectInteraction);

      this.map.addInteraction(this[intName + 'Interaction']);
      this.map.addInteraction(this.snapInteraction); // Must be added after the others

      this.map.getTargetElement().firstChild.className = 'ol-viewport edit-view-' + intName;

      // For snap & traceSource : register again the full list of features as addFeature manages already registered
      this.snapSource.clear();
      this.map.getLayers().forEach(layer => {
        if (layer.getSource() !== this.editedSource &&
          layer.getSource() &&
          layer.getSource().getFeatures) // Vector layers only
          layer.getSource().getFeatures().forEach(feature => {
            this.snapInteraction.addFeature(feature);
            this.snapSource.addFeature(feature);
          });
      });
    }

    optimiseAndSave(splitCord) {
      if (!this.semaphore) { // Avoid recursion when adding the features
        this.semaphore = true;

        // Get optimized coords
        const editedFeatures = this.editedSource.getFeatures(), // Get edited features
          coordinates = editedFeatures.map(
            f => this.flatFeatures(f.getGeometry()) // Get flat coordinates
          ),
          // Get all edited features as array of lines coordinates
          lines = this.flatCoord(coordinates, splitCord),
          polys = [];

        // Merge lines having a common end
        if (this.options.canMerge)
          for (const a in lines) {
            for (let b = 0; b < a; b++) { // Once each combination
              if (lines[b]) {
                const m = [a, b];

                for (let i = 4; i; i--) // 4 times
                  if (lines[m[0]] && lines[m[1]]) { // Test if the line has been removed
                    // Shake lines end to explore all possibilities
                    m.reverse();
                    lines[m[0]].reverse();

                    // Merge 2 lines having 2 ends in common
                    if (this.compareCoords(lines[m[0]][lines[m[0]].length - 1], lines[m[1]][0], splitCord)) {
                      lines[m[0]] = lines[m[0]].concat(lines[m[1]].slice(1)).reverse();
                      delete lines[m[1]]; // Remove the line but don't renumber the array keys
                    }
                  }
              }
            }
          }

        // Make polygons with looped lines
        if (this.options.withPolys)
          for (const a in lines)
            if (this.compareCoords(lines[a]) && // If this line is closed
              !this.compareCoords(splitCord, lines[a][0])) { // Except if we just split it
              polys.push([lines[a]]); // Add the polygon
              delete lines[a]; // Forget the line
            }

        // Makes holes if a polygon is included in a biggest one
        if (this.options.withHoles)
          for (const p1 in polys) { // Explore all Polygons combinaison
            const fs = new Polygon(polys[p1]);

            for (const p2 in polys)
              if (polys[p2] && p1 !== p2) {
                let intersects = true;

                for (const c in polys[p2][0])
                  if (!fs.intersectsCoordinate(polys[p2][0][c]))
                    intersects = false;

                if (intersects) { // If one intersects a bigger
                  polys[p1].push(polys[p2][0]); // Include the smaler in the bigger
                  delete polys[p2]; // Forget the smaller
                }
              }
          }

        // Recreate features
        this.editedSource.clear();
        lines.forEach(l => {
          this.editedSource.addFeature(new Feature({
            geometry: new LineString(l),
          }));
        });
        polys.forEach(p => {
          this.editedSource.addFeature(new Feature({
            geometry: new Polygon(p),
          }));
        });

        // Save geometries in <EL> as geoJSON at every change
        if (this.geoJsonEl)
          this.geoJsonEl.value = this.options.writeGeoJson(
            this.editedSource.getFeatures(),
            lines.filter(Boolean),
            polys.filter(Boolean),
            this.options,
          ).replaceAll(',"properties":null', '');

        // Select the feature closest to the mouse position
        //TODO do it also when loading a file
        const selectedFeatures = this.selectInteraction.getFeatures();

        if (this.editedSource.getFeatures().length) {
          selectedFeatures.clear();
          selectedFeatures.push(
            this.editedSource.getClosestFeatureToCoordinate(this.coordinate)
          );
        }
        delete this.semaphore;
      }
    } // End optimiseAndSave

    flatFeatures(geom) {
      if (geom.getType().match(/collection/iu)) // Recurse Collections
        return geom.getGeometries().map(g => this.flatFeatures(g));
      return geom.getCoordinates();
    }

    // Get all lines fragments (lines, polylines, polygons, multipolygons, hole polygons, ...) at the same level
    flatCoord(coords, splitCord) {
      const lines = [];

      coords.forEach(segmentCoords => {
        if (typeof segmentCoords[0] === 'object') {
          if (typeof segmentCoords[0][0] === 'object') // Recurse for multi* or polys
            lines.push(...this.flatCoord(segmentCoords, splitCord));
          else if (typeof segmentCoords[0][0] === 'number') { // Lines
            if (splitCord) {
              lines.push([]);
              segmentCoords.forEach(p => {
                lines[lines.length - 1].push(p);
                // Split segments if required
                if (this.compareCoords(splitCord, p))
                  lines.push([p]);
              });
            } else
              lines.push(segmentCoords);
          }
        }
      });

      return lines;
    }

    compareCoords(a, b, splitCord) {
      if (!a) return false;
      if (this.compareCoords(splitCord, a)) return false; // Except if we just split it
      if (!b) return this.compareCoords(a[0], a[a.length - 1]); // Compare start with end
      return a[0] === b[0] && a[1] === b[1]; // 2 coordinates
    }

    // Style to color selected features with arrows, begin & end points
    selectStyles(feature, resolution) {
      const geometry = feature.getGeometry(),

        selectedStyleOptions = {
          // Lines
          stroke: new Stroke({
            color: 'red',
            width: 2,
          }),
          // Polygons
          fill: new Fill({
            color: 'rgba(255,0,0,0.2)',
          }),
          // Begin & end marker
          radius: 3,

          ...this.options.selectedStyleOptions,
        },

        circle = new CircleStyle(selectedStyleOptions),

        featureStyles = [
          new Style({
            // Line & Poly
            ...selectedStyleOptions,
            // Draw marker
            image: circle,
          }),
        ];

      // Circle at the ends of the line
      if (geometry.getCoordinates) {
        const coordinates = geometry.getCoordinates(),
          circlesCoords = [coordinates[0]];

        if (!this.options.direction)
          circlesCoords.push(coordinates[coordinates.length - 1]);

        circlesCoords.forEach(cc => {
          featureStyles.push(
            new Style({
              geometry: new Point$1(cc),
              image: circle,
            }),
          );
        });
      }

      // Arrows to show the line direction
      if (this.options.direction && geometry.forEachSegment && resolution) {
        let last = null;

        geometry.forEachSegment((start, end) => {
          if (!last) last = start;

          const dx = end[0] - last[0],
            dy = end[1] - last[1];

          if (Math.abs(dx) + Math.abs(dy) > resolution * 50) {
            last = end;
            featureStyles.push(
              new Style({
                geometry: new Point$1(end),
                image: new Icon({
                  rotateWithView: true,
                  rotation: -Math.atan2(dy, dx),
                  src: 'data:image/svg+xml;utf8,\
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 6 6" width="10" height="10">\
<path stroke="red" d="M0 0 4 3 M4 3 0 6" />\
</svg>',
                }),
              }),
            );
          }
        });
      }

      return featureStyles;
    };
  }

  /**
   * Hover & click management
   * Display the hovered feature with the hover style
   * Go to the link property when click a feature
   */


  class Hover extends VectorLayer {
    constructor(options) {
      super({
        source: new VectorSource(),
        zIndex: 500, // Above all layers
        wrapX: false,

        ...options,
      });
    }

    // Attach an hover & click listener to the map
    setMapInternal(map) {
      const mapEl = map.getTargetElement();

      // Basic listeners
      map.on(['pointermove', 'click'], evt => this.mouseListener(evt));

      // Leaving the map reset hovering
      window.addEventListener('mousemove', evt => {
        if (mapEl) {
          const divRect = mapEl.getBoundingClientRect();

          // The mouse is outside of the map
          if (evt.clientX < divRect.left || divRect.right < evt.clientX ||
            evt.clientY < divRect.top || divRect.bottom < evt.clientY)
            this.getSource().clear();
        }
      });

      return super.setMapInternal(map);
    }

    mouseListener(evt) {
      const map = evt.map,
        resolution = map.getView().getResolution(),
        source = this.getSource();

      // Find the first hovered feature & layer
      let hoveredLayer = null;
      const hoveredFeature = map.forEachFeatureAtPixel(
          map.getEventPixel(evt.originalEvent),
          (f, l) => {
            if ((l && l.options && l.options.hoverStylesOptions) ||
              l === this) {
              hoveredLayer = l;
              return f; // Return feature & stop the search
            }
          }, {
            hitTolerance: 6, // For lines / Default 0
          }
        ),
        hoveredSubFeature = hoveredFeature;

      if (hoveredFeature) {
        const hoveredProperties = hoveredFeature.getProperties(),
          hoveredSubProperties = hoveredSubFeature.getProperties();

        // Click
        if (evt.type === 'click' &&
          !(hoveredLayer.options && hoveredLayer.options.noClick)) {
          // Click cluster
          if (hoveredSubProperties.cluster) {
            map.getView().animate({
              zoom: map.getView().getZoom() + 2,
              center: hoveredSubProperties.geometry.getCoordinates(),
            });
            source.clear();
          }
          // Click link
          else if (hoveredSubProperties.link) {
            // Open a new tag
            if (evt.originalEvent.ctrlKey)
              window.open(hoveredSubProperties.link, '_blank').focus();
            else
              // Open a new window
              if (evt.originalEvent.shiftKey)
                window.open(hoveredSubProperties.link, '_blank', 'resizable=yes').focus();
              // Go on the same window
              else
                window.location.href = hoveredSubProperties.link;
          }
        }
        // Hover
        else if (hoveredSubFeature !== map.lastHoveredSubFeature &&
          !(hoveredLayer.options && hoveredLayer.options.noHover)) {
          const f = hoveredSubFeature.clone();

          if (hoveredLayer.options && hoveredLayer.options.hoverStylesOptions)
            f.setStyle(
              new Style(hoveredLayer.options.hoverStylesOptions(f, resolution, hoveredLayer))
            );

          source.clear();
          source.addFeature(f);

          map.getViewport().style.cursor =
            (hoveredProperties.link || hoveredProperties.cluster) &&
            !(hoveredLayer.options && hoveredLayer.options.noClick) ?
            'pointer' :
            '';
        }
      }
      // Reset hoverLayer, style & cursor
      else {
        source.clear();
        map.getViewport().style.cursor = '';
      }

      // Mem hovered feature for next change
      map.lastHoveredSubFeature = hoveredSubFeature;
    }
  }

  function globals(defs) {
    defs('EPSG:4326', "+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees");
    defs('EPSG:4269', "+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees");
    defs('EPSG:3857', "+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs");
    // UTM WGS84
    for (var i = 1; i <= 60; ++i) {
      defs('EPSG:' + (32600 + i), "+proj=utm +zone=" + i + " +datum=WGS84 +units=m");
      defs('EPSG:' + (32700 + i), "+proj=utm +zone=" + i + " +south +datum=WGS84 +units=m");
    }

    defs.WGS84 = defs['EPSG:4326'];
    defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857
    defs.GOOGLE = defs['EPSG:3857'];
    defs['EPSG:900913'] = defs['EPSG:3857'];
    defs['EPSG:102113'] = defs['EPSG:3857'];
  }

  var PJD_3PARAM = 1;
  var PJD_7PARAM = 2;
  var PJD_GRIDSHIFT = 3;
  var PJD_WGS84 = 4; // WGS84 or equivalent
  var PJD_NODATUM = 5; // WGS84 or equivalent
  var SRS_WGS84_SEMIMAJOR = 6378137.0;  // only used in grid shift transforms
  var SRS_WGS84_SEMIMINOR = 6356752.314;  // only used in grid shift transforms
  var SRS_WGS84_ESQUARED = 0.0066943799901413165; // only used in grid shift transforms
  var SEC_TO_RAD = 4.84813681109535993589914102357e-6;
  var HALF_PI = Math.PI/2;
  // ellipoid pj_set_ell.c
  var SIXTH = 0.1666666666666666667;
  /* 1/6 */
  var RA4 = 0.04722222222222222222;
  /* 17/360 */
  var RA6 = 0.02215608465608465608;
  var EPSLN = 1.0e-10;
  // you'd think you could use Number.EPSILON above but that makes
  // Mollweide get into an infinate loop.

  var D2R$1 = 0.01745329251994329577;
  var R2D = 57.29577951308232088;
  var FORTPI = Math.PI/4;
  var TWO_PI = Math.PI * 2;
  // SPI is slightly greater than Math.PI, so values that exceed the -180..180
  // degree range by a tiny amount don't get wrapped. This prevents points that
  // have drifted from their original location along the 180th meridian (due to
  // floating point error) from changing their sign.
  var SPI = 3.14159265359;

  var exports$2 = {};

  exports$2.greenwich = 0.0; //"0dE",
  exports$2.lisbon = -9.131906111111; //"9d07'54.862\"W",
  exports$2.paris = 2.337229166667; //"2d20'14.025\"E",
  exports$2.bogota = -74.080916666667; //"74d04'51.3\"W",
  exports$2.madrid = -3.687938888889; //"3d41'16.58\"W",
  exports$2.rome = 12.452333333333; //"12d27'8.4\"E",
  exports$2.bern = 7.439583333333; //"7d26'22.5\"E",
  exports$2.jakarta = 106.807719444444; //"106d48'27.79\"E",
  exports$2.ferro = -17.666666666667; //"17d40'W",
  exports$2.brussels = 4.367975; //"4d22'4.71\"E",
  exports$2.stockholm = 18.058277777778; //"18d3'29.8\"E",
  exports$2.athens = 23.7163375; //"23d42'58.815\"E",
  exports$2.oslo = 10.722916666667; //"10d43'22.5\"E"

  var units = {
    'mm': {to_meter: 0.001},
    'cm': {to_meter: 0.01},
    'ft': {to_meter: 0.3048},
    'us-ft': {to_meter: 1200 / 3937},
    'fath': {to_meter: 1.8288},
    'kmi': {to_meter: 1852},
    'us-ch': {to_meter: 20.1168402336805},
    'us-mi': {to_meter: 1609.34721869444},
    'km': {to_meter: 1000},
    'ind-ft': {to_meter: 0.30479841},
    'ind-yd': {to_meter: 0.91439523},
    'mi': {to_meter: 1609.344},
    'yd': {to_meter: 0.9144},
    'ch': {to_meter: 20.1168},
    'link': {to_meter: 0.201168},
    'dm': {to_meter: 0.01},
    'in': {to_meter: 0.0254},
    'ind-ch': {to_meter: 20.11669506},
    'us-in': {to_meter: 0.025400050800101},
    'us-yd': {to_meter: 0.914401828803658}
  };

  var ignoredChar = /[\s_\-\/\(\)]/g;
  function match(obj, key) {
    if (obj[key]) {
      return obj[key];
    }
    var keys = Object.keys(obj);
    var lkey = key.toLowerCase().replace(ignoredChar, '');
    var i = -1;
    var testkey, processedKey;
    while (++i < keys.length) {
      testkey = keys[i];
      processedKey = testkey.toLowerCase().replace(ignoredChar, '');
      if (processedKey === lkey) {
        return obj[testkey];
      }
    }
  }

  function projStr(defData) {
    var self = {};
    var paramObj = defData.split('+').map(function(v) {
      return v.trim();
    }).filter(function(a) {
      return a;
    }).reduce(function(p, a) {
      var split = a.split('=');
      split.push(true);
      p[split[0].toLowerCase()] = split[1];
      return p;
    }, {});
    var paramName, paramVal, paramOutname;
    var params = {
      proj: 'projName',
      datum: 'datumCode',
      rf: function(v) {
        self.rf = parseFloat(v);
      },
      lat_0: function(v) {
        self.lat0 = v * D2R$1;
      },
      lat_1: function(v) {
        self.lat1 = v * D2R$1;
      },
      lat_2: function(v) {
        self.lat2 = v * D2R$1;
      },
      lat_ts: function(v) {
        self.lat_ts = v * D2R$1;
      },
      lon_0: function(v) {
        self.long0 = v * D2R$1;
      },
      lon_1: function(v) {
        self.long1 = v * D2R$1;
      },
      lon_2: function(v) {
        self.long2 = v * D2R$1;
      },
      alpha: function(v) {
        self.alpha = parseFloat(v) * D2R$1;
      },
      gamma: function(v) {
        self.rectified_grid_angle = parseFloat(v);
      },
      lonc: function(v) {
        self.longc = v * D2R$1;
      },
      x_0: function(v) {
        self.x0 = parseFloat(v);
      },
      y_0: function(v) {
        self.y0 = parseFloat(v);
      },
      k_0: function(v) {
        self.k0 = parseFloat(v);
      },
      k: function(v) {
        self.k0 = parseFloat(v);
      },
      a: function(v) {
        self.a = parseFloat(v);
      },
      b: function(v) {
        self.b = parseFloat(v);
      },
      r: function(v) {
        self.a = self.b = parseFloat(v);
      },
      r_a: function() {
        self.R_A = true;
      },
      zone: function(v) {
        self.zone = parseInt(v, 10);
      },
      south: function() {
        self.utmSouth = true;
      },
      towgs84: function(v) {
        self.datum_params = v.split(",").map(function(a) {
          return parseFloat(a);
        });
      },
      to_meter: function(v) {
        self.to_meter = parseFloat(v);
      },
      units: function(v) {
        self.units = v;
        var unit = match(units, v);
        if (unit) {
          self.to_meter = unit.to_meter;
        }
      },
      from_greenwich: function(v) {
        self.from_greenwich = v * D2R$1;
      },
      pm: function(v) {
        var pm = match(exports$2, v);
        self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R$1;
      },
      nadgrids: function(v) {
        if (v === '@null') {
          self.datumCode = 'none';
        }
        else {
          self.nadgrids = v;
        }
      },
      axis: function(v) {
        var legalAxis = "ewnsud";
        if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {
          self.axis = v;
        }
      },
      approx: function() {
        self.approx = true;
      }
    };
    for (paramName in paramObj) {
      paramVal = paramObj[paramName];
      if (paramName in params) {
        paramOutname = params[paramName];
        if (typeof paramOutname === 'function') {
          paramOutname(paramVal);
        }
        else {
          self[paramOutname] = paramVal;
        }
      }
      else {
        self[paramName] = paramVal;
      }
    }
    if(typeof self.datumCode === 'string' && self.datumCode !== "WGS84"){
      self.datumCode = self.datumCode.toLowerCase();
    }
    return self;
  }

  var NEUTRAL = 1;
  var KEYWORD = 2;
  var NUMBER = 3;
  var QUOTED = 4;
  var AFTERQUOTE = 5;
  var ENDED = -1;
  var whitespace = /\s/;
  var latin = /[A-Za-z]/;
  var keyword = /[A-Za-z84_]/;
  var endThings = /[,\]]/;
  var digets = /[\d\.E\-\+]/;
  // const ignoredChar = /[\s_\-\/\(\)]/g;
  function Parser(text) {
    if (typeof text !== 'string') {
      throw new Error('not a string');
    }
    this.text = text.trim();
    this.level = 0;
    this.place = 0;
    this.root = null;
    this.stack = [];
    this.currentObject = null;
    this.state = NEUTRAL;
  }
  Parser.prototype.readCharicter = function() {
    var char = this.text[this.place++];
    if (this.state !== QUOTED) {
      while (whitespace.test(char)) {
        if (this.place >= this.text.length) {
          return;
        }
        char = this.text[this.place++];
      }
    }
    switch (this.state) {
      case NEUTRAL:
        return this.neutral(char);
      case KEYWORD:
        return this.keyword(char)
      case QUOTED:
        return this.quoted(char);
      case AFTERQUOTE:
        return this.afterquote(char);
      case NUMBER:
        return this.number(char);
      case ENDED:
        return;
    }
  };
  Parser.prototype.afterquote = function(char) {
    if (char === '"') {
      this.word += '"';
      this.state = QUOTED;
      return;
    }
    if (endThings.test(char)) {
      this.word = this.word.trim();
      this.afterItem(char);
      return;
    }
    throw new Error('havn\'t handled "' +char + '" in afterquote yet, index ' + this.place);
  };
  Parser.prototype.afterItem = function(char) {
    if (char === ',') {
      if (this.word !== null) {
        this.currentObject.push(this.word);
      }
      this.word = null;
      this.state = NEUTRAL;
      return;
    }
    if (char === ']') {
      this.level--;
      if (this.word !== null) {
        this.currentObject.push(this.word);
        this.word = null;
      }
      this.state = NEUTRAL;
      this.currentObject = this.stack.pop();
      if (!this.currentObject) {
        this.state = ENDED;
      }

      return;
    }
  };
  Parser.prototype.number = function(char) {
    if (digets.test(char)) {
      this.word += char;
      return;
    }
    if (endThings.test(char)) {
      this.word = parseFloat(this.word);
      this.afterItem(char);
      return;
    }
    throw new Error('havn\'t handled "' +char + '" in number yet, index ' + this.place);
  };
  Parser.prototype.quoted = function(char) {
    if (char === '"') {
      this.state = AFTERQUOTE;
      return;
    }
    this.word += char;
    return;
  };
  Parser.prototype.keyword = function(char) {
    if (keyword.test(char)) {
      this.word += char;
      return;
    }
    if (char === '[') {
      var newObjects = [];
      newObjects.push(this.word);
      this.level++;
      if (this.root === null) {
        this.root = newObjects;
      } else {
        this.currentObject.push(newObjects);
      }
      this.stack.push(this.currentObject);
      this.currentObject = newObjects;
      this.state = NEUTRAL;
      return;
    }
    if (endThings.test(char)) {
      this.afterItem(char);
      return;
    }
    throw new Error('havn\'t handled "' +char + '" in keyword yet, index ' + this.place);
  };
  Parser.prototype.neutral = function(char) {
    if (latin.test(char)) {
      this.word = char;
      this.state = KEYWORD;
      return;
    }
    if (char === '"') {
      this.word = '';
      this.state = QUOTED;
      return;
    }
    if (digets.test(char)) {
      this.word = char;
      this.state = NUMBER;
      return;
    }
    if (endThings.test(char)) {
      this.afterItem(char);
      return;
    }
    throw new Error('havn\'t handled "' +char + '" in neutral yet, index ' + this.place);
  };
  Parser.prototype.output = function() {
    while (this.place < this.text.length) {
      this.readCharicter();
    }
    if (this.state === ENDED) {
      return this.root;
    }
    throw new Error('unable to parse string "' +this.text + '". State is ' + this.state);
  };

  function parseString(txt) {
    var parser = new Parser(txt);
    return parser.output();
  }

  function mapit(obj, key, value) {
    if (Array.isArray(key)) {
      value.unshift(key);
      key = null;
    }
    var thing = key ? {} : obj;

    var out = value.reduce(function(newObj, item) {
      sExpr(item, newObj);
      return newObj
    }, thing);
    if (key) {
      obj[key] = out;
    }
  }

  function sExpr(v, obj) {
    if (!Array.isArray(v)) {
      obj[v] = true;
      return;
    }
    var key = v.shift();
    if (key === 'PARAMETER') {
      key = v.shift();
    }
    if (v.length === 1) {
      if (Array.isArray(v[0])) {
        obj[key] = {};
        sExpr(v[0], obj[key]);
        return;
      }
      obj[key] = v[0];
      return;
    }
    if (!v.length) {
      obj[key] = true;
      return;
    }
    if (key === 'TOWGS84') {
      obj[key] = v;
      return;
    }
    if (key === 'AXIS') {
      if (!(key in obj)) {
        obj[key] = [];
      }
      obj[key].push(v);
      return;
    }
    if (!Array.isArray(key)) {
      obj[key] = {};
    }

    var i;
    switch (key) {
      case 'UNIT':
      case 'PRIMEM':
      case 'VERT_DATUM':
        obj[key] = {
          name: v[0].toLowerCase(),
          convert: v[1]
        };
        if (v.length === 3) {
          sExpr(v[2], obj[key]);
        }
        return;
      case 'SPHEROID':
      case 'ELLIPSOID':
        obj[key] = {
          name: v[0],
          a: v[1],
          rf: v[2]
        };
        if (v.length === 4) {
          sExpr(v[3], obj[key]);
        }
        return;
      case 'EDATUM':
      case 'ENGINEERINGDATUM':
      case 'LOCAL_DATUM':
      case 'DATUM':
      case 'VERT_CS':
      case 'VERTCRS':
      case 'VERTICALCRS':
        v[0] = ['name', v[0]];
        mapit(obj, key, v);
        return;
      case 'COMPD_CS':
      case 'COMPOUNDCRS':
      case 'FITTED_CS':
      // the followings are the crs defined in
      // https://github.com/proj4js/proj4js/blob/1da4ed0b865d0fcb51c136090569210cdcc9019e/lib/parseCode.js#L11
      case 'PROJECTEDCRS':
      case 'PROJCRS':
      case 'GEOGCS':
      case 'GEOCCS':
      case 'PROJCS':
      case 'LOCAL_CS':
      case 'GEODCRS':
      case 'GEODETICCRS':
      case 'GEODETICDATUM':
      case 'ENGCRS':
      case 'ENGINEERINGCRS':
        v[0] = ['name', v[0]];
        mapit(obj, key, v);
        obj[key].type = key;
        return;
      default:
        i = -1;
        while (++i < v.length) {
          if (!Array.isArray(v[i])) {
            return sExpr(v, obj[key]);
          }
        }
        return mapit(obj, key, v);
    }
  }

  var D2R = 0.01745329251994329577;

  var knownTypes = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS', 'GEOCCS', 'PROJCS', 'LOCAL_CS', 'GEODCRS',
    'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];

  function rename(obj, params) {
    var outName = params[0];
    var inName = params[1];
    if (!(outName in obj) && (inName in obj)) {
      obj[outName] = obj[inName];
      if (params.length === 3) {
        obj[outName] = params[2](obj[outName]);
      }
    }
  }

  function d2r(input) {
    return input * D2R;
  }

  function cleanWKT(wkt) {
    var keys = Object.keys(wkt);
    for (var i = 0, ii = keys.length; i <ii; ++i) {
      var key = keys[i];
      // the followings are the crs defined in
      // https://github.com/proj4js/proj4js/blob/1da4ed0b865d0fcb51c136090569210cdcc9019e/lib/parseCode.js#L11
      if (knownTypes.indexOf(key) !== -1) {
        setPropertiesFromWkt(wkt[key]);
      }
      if (typeof wkt[key] === 'object') {
        cleanWKT(wkt[key]);
      }
    }
  }

  function setPropertiesFromWkt(wkt) {
    if (wkt.AUTHORITY) {
      var authority = Object.keys(wkt.AUTHORITY)[0];
      if (authority && authority in wkt.AUTHORITY) {
        wkt.title = authority + ':' + wkt.AUTHORITY[authority];
      }
    }
    if (wkt.type === 'GEOGCS') {
      wkt.projName = 'longlat';
    } else if (wkt.type === 'LOCAL_CS') {
      wkt.projName = 'identity';
      wkt.local = true;
    } else {
      if (typeof wkt.PROJECTION === 'object') {
        wkt.projName = Object.keys(wkt.PROJECTION)[0];
      } else {
        wkt.projName = wkt.PROJECTION;
      }
    }
    if (wkt.AXIS) {
      var axisOrder = '';
      for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {
        var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];
        if (axis[0].indexOf('north') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north')) {
          axisOrder += 'n';
        } else if (axis[0].indexOf('south') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south')) {
          axisOrder += 's';
        } else if (axis[0].indexOf('east') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east')) {
          axisOrder += 'e';
        } else if (axis[0].indexOf('west') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west')) {
          axisOrder += 'w';
        }
      }
      if (axisOrder.length === 2) {
        axisOrder += 'u';
      }
      if (axisOrder.length === 3) {
        wkt.axis = axisOrder;
      }
    }
    if (wkt.UNIT) {
      wkt.units = wkt.UNIT.name.toLowerCase();
      if (wkt.units === 'metre') {
        wkt.units = 'meter';
      }
      if (wkt.UNIT.convert) {
        if (wkt.type === 'GEOGCS') {
          if (wkt.DATUM && wkt.DATUM.SPHEROID) {
            wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;
          }
        } else {
          wkt.to_meter = wkt.UNIT.convert;
        }
      }
    }
    var geogcs = wkt.GEOGCS;
    if (wkt.type === 'GEOGCS') {
      geogcs = wkt;
    }
    if (geogcs) {
      //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){
      //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;
      //}
      if (geogcs.DATUM) {
        wkt.datumCode = geogcs.DATUM.name.toLowerCase();
      } else {
        wkt.datumCode = geogcs.name.toLowerCase();
      }
      if (wkt.datumCode.slice(0, 2) === 'd_') {
        wkt.datumCode = wkt.datumCode.slice(2);
      }
      if (wkt.datumCode === 'new_zealand_1949') {
        wkt.datumCode = 'nzgd49';
      }
      if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {
        if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {
          wkt.sphere = true;
        }
        wkt.datumCode = 'wgs84';
      }
      if (wkt.datumCode === 'belge_1972') {
        wkt.datumCode = 'rnb72';
      }
      if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {
        wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\_18/, 'clrk');
        if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {
          wkt.ellps = 'intl';
        }

        wkt.a = geogcs.DATUM.SPHEROID.a;
        wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);
      }

      if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {
        wkt.datum_params = geogcs.DATUM.TOWGS84;
      }
      if (~wkt.datumCode.indexOf('osgb_1936')) {
        wkt.datumCode = 'osgb36';
      }
      if (~wkt.datumCode.indexOf('osni_1952')) {
        wkt.datumCode = 'osni52';
      }
      if (~wkt.datumCode.indexOf('tm65')
        || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {
        wkt.datumCode = 'ire65';
      }
      if (wkt.datumCode === 'ch1903+') {
        wkt.datumCode = 'ch1903';
      }
      if (~wkt.datumCode.indexOf('israel')) {
        wkt.datumCode = 'isr93';
      }
    }
    if (wkt.b && !isFinite(wkt.b)) {
      wkt.b = wkt.a;
    }

    function toMeter(input) {
      var ratio = wkt.to_meter || 1;
      return input * ratio;
    }
    var renamer = function(a) {
      return rename(wkt, a);
    };
    var list = [
      ['standard_parallel_1', 'Standard_Parallel_1'],
      ['standard_parallel_1', 'Latitude of 1st standard parallel'],
      ['standard_parallel_2', 'Standard_Parallel_2'],
      ['standard_parallel_2', 'Latitude of 2nd standard parallel'],
      ['false_easting', 'False_Easting'],
      ['false_easting', 'False easting'],
      ['false-easting', 'Easting at false origin'],
      ['false_northing', 'False_Northing'],
      ['false_northing', 'False northing'],
      ['false_northing', 'Northing at false origin'],
      ['central_meridian', 'Central_Meridian'],
      ['central_meridian', 'Longitude of natural origin'],
      ['central_meridian', 'Longitude of false origin'],
      ['latitude_of_origin', 'Latitude_Of_Origin'],
      ['latitude_of_origin', 'Central_Parallel'],
      ['latitude_of_origin', 'Latitude of natural origin'],
      ['latitude_of_origin', 'Latitude of false origin'],
      ['scale_factor', 'Scale_Factor'],
      ['k0', 'scale_factor'],
      ['latitude_of_center', 'Latitude_Of_Center'],
      ['latitude_of_center', 'Latitude_of_center'],
      ['lat0', 'latitude_of_center', d2r],
      ['longitude_of_center', 'Longitude_Of_Center'],
      ['longitude_of_center', 'Longitude_of_center'],
      ['longc', 'longitude_of_center', d2r],
      ['x0', 'false_easting', toMeter],
      ['y0', 'false_northing', toMeter],
      ['long0', 'central_meridian', d2r],
      ['lat0', 'latitude_of_origin', d2r],
      ['lat0', 'standard_parallel_1', d2r],
      ['lat1', 'standard_parallel_1', d2r],
      ['lat2', 'standard_parallel_2', d2r],
      ['azimuth', 'Azimuth'],
      ['alpha', 'azimuth', d2r],
      ['srsCode', 'name']
    ];
    list.forEach(renamer);
    if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {
      wkt.long0 = wkt.longc;
    }
    if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {
      wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);
      wkt.lat_ts = wkt.lat1;
    } else if (!wkt.lat_ts && wkt.lat0 && wkt.projName === 'Polar_Stereographic') {
      wkt.lat_ts = wkt.lat0;
      wkt.lat0 = d2r(wkt.lat0 > 0 ? 90 : -90);
    }
  }
  function wkt(wkt) {
    var lisp = parseString(wkt);
    var type = lisp[0];
    var obj = {};
    sExpr(lisp, obj);
    cleanWKT(obj);
    return obj[type];
  }

  function defs(name) {
    /*global console*/
    var that = this;
    if (arguments.length === 2) {
      var def = arguments[1];
      if (typeof def === 'string') {
        if (def.charAt(0) === '+') {
          defs[name] = projStr(arguments[1]);
        }
        else {
          defs[name] = wkt(arguments[1]);
        }
      } else {
        defs[name] = def;
      }
    }
    else if (arguments.length === 1) {
      if (Array.isArray(name)) {
        return name.map(function(v) {
          if (Array.isArray(v)) {
            defs.apply(that, v);
          }
          else {
            defs(v);
          }
        });
      }
      else if (typeof name === 'string') {
        if (name in defs) {
          return defs[name];
        }
      }
      else if ('EPSG' in name) {
        defs['EPSG:' + name.EPSG] = name;
      }
      else if ('ESRI' in name) {
        defs['ESRI:' + name.ESRI] = name;
      }
      else if ('IAU2000' in name) {
        defs['IAU2000:' + name.IAU2000] = name;
      }
      else {
        console.log(name);
      }
      return;
    }


  }
  globals(defs);

  function testObj(code){
    return typeof code === 'string';
  }
  function testDef(code){
    return code in defs;
  }
  var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];
  function testWKT(code){
    return codeWords.some(function (word) {
      return code.indexOf(word) > -1;
    });
  }
  var codes = ['3857', '900913', '3785', '102113'];
  function checkMercator(item) {
    var auth = match(item, 'authority');
    if (!auth) {
      return;
    }
    var code = match(auth, 'epsg');
    return code && codes.indexOf(code) > -1;
  }
  function checkProjStr(item) {
    var ext = match(item, 'extension');
    if (!ext) {
      return;
    }
    return match(ext, 'proj4');
  }
  function testProj(code){
    return code[0] === '+';
  }
  function parse(code){
    if (testObj(code)) {
      //check to see if this is a WKT string
      if (testDef(code)) {
        return defs[code];
      }
      if (testWKT(code)) {
        var out = wkt(code);
        // test of spetial case, due to this being a very common and often malformed
        if (checkMercator(out)) {
          return defs['EPSG:3857'];
        }
        var maybeProjStr = checkProjStr(out);
        if (maybeProjStr) {
          return projStr(maybeProjStr);
        }
        return out;
      }
      if (testProj(code)) {
        return projStr(code);
      }
    }else {
      return code;
    }
  }

  function extend(destination, source) {
    destination = destination || {};
    var value, property;
    if (!source) {
      return destination;
    }
    for (property in source) {
      value = source[property];
      if (value !== undefined) {
        destination[property] = value;
      }
    }
    return destination;
  }

  function msfnz(eccent, sinphi, cosphi) {
    var con = eccent * sinphi;
    return cosphi / (Math.sqrt(1 - con * con));
  }

  function sign(x) {
    return x<0 ? -1 : 1;
  }

  function adjust_lon(x) {
    return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));
  }

  function tsfnz(eccent, phi, sinphi) {
    var con = eccent * sinphi;
    var com = 0.5 * eccent;
    con = Math.pow(((1 - con) / (1 + con)), com);
    return (Math.tan(0.5 * (HALF_PI - phi)) / con);
  }

  function phi2z(eccent, ts) {
    var eccnth = 0.5 * eccent;
    var con, dphi;
    var phi = HALF_PI - 2 * Math.atan(ts);
    for (var i = 0; i <= 15; i++) {
      con = eccent * Math.sin(phi);
      dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;
      phi += dphi;
      if (Math.abs(dphi) <= 0.0000000001) {
        return phi;
      }
    }
    //console.log("phi2z has NoConvergence");
    return -9999;
  }

  function init$x() {
    var con = this.b / this.a;
    this.es = 1 - con * con;
    if(!('x0' in this)){
      this.x0 = 0;
    }
    if(!('y0' in this)){
      this.y0 = 0;
    }
    this.e = Math.sqrt(this.es);
    if (this.lat_ts) {
      if (this.sphere) {
        this.k0 = Math.cos(this.lat_ts);
      }
      else {
        this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
      }
    }
    else {
      if (!this.k0) {
        if (this.k) {
          this.k0 = this.k;
        }
        else {
          this.k0 = 1;
        }
      }
    }
  }

  /* Mercator forward equations--mapping lat,long to x,y
    --------------------------------------------------*/

  function forward$v(p) {
    var lon = p.x;
    var lat = p.y;
    // convert to radians
    if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {
      return null;
    }

    var x, y;
    if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {
      return null;
    }
    else {
      if (this.sphere) {
        x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);
        y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));
      }
      else {
        var sinphi = Math.sin(lat);
        var ts = tsfnz(this.e, lat, sinphi);
        x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);
        y = this.y0 - this.a * this.k0 * Math.log(ts);
      }
      p.x = x;
      p.y = y;
      return p;
    }
  }

  /* Mercator inverse equations--mapping x,y to lat/long
    --------------------------------------------------*/
  function inverse$v(p) {

    var x = p.x - this.x0;
    var y = p.y - this.y0;
    var lon, lat;

    if (this.sphere) {
      lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));
    }
    else {
      var ts = Math.exp(-y / (this.a * this.k0));
      lat = phi2z(this.e, ts);
      if (lat === -9999) {
        return null;
      }
    }
    lon = adjust_lon(this.long0 + x / (this.a * this.k0));

    p.x = lon;
    p.y = lat;
    return p;
  }

  var names$x = ["Mercator", "Popular Visualisation Pseudo Mercator", "Mercator_1SP", "Mercator_Auxiliary_Sphere", "merc"];
  var merc = {
    init: init$x,
    forward: forward$v,
    inverse: inverse$v,
    names: names$x
  };

  function init$w() {
    //no-op for longlat
  }

  function identity(pt) {
    return pt;
  }
  var names$w = ["longlat", "identity"];
  var longlat = {
    init: init$w,
    forward: identity,
    inverse: identity,
    names: names$w
  };

  var projs = [merc, longlat];
  var names$v = {};
  var projStore = [];

  function add(proj, i) {
    var len = projStore.length;
    if (!proj.names) {
      console.log(i);
      return true;
    }
    projStore[len] = proj;
    proj.names.forEach(function(n) {
      names$v[n.toLowerCase()] = len;
    });
    return this;
  }

  function get(name) {
    if (!name) {
      return false;
    }
    var n = name.toLowerCase();
    if (typeof names$v[n] !== 'undefined' && projStore[names$v[n]]) {
      return projStore[names$v[n]];
    }
  }

  function start() {
    projs.forEach(add);
  }
  var projections = {
    start: start,
    add: add,
    get: get
  };

  var exports$1 = {};
  exports$1.MERIT = {
    a: 6378137.0,
    rf: 298.257,
    ellipseName: "MERIT 1983"
  };

  exports$1.SGS85 = {
    a: 6378136.0,
    rf: 298.257,
    ellipseName: "Soviet Geodetic System 85"
  };

  exports$1.GRS80 = {
    a: 6378137.0,
    rf: 298.257222101,
    ellipseName: "GRS 1980(IUGG, 1980)"
  };

  exports$1.IAU76 = {
    a: 6378140.0,
    rf: 298.257,
    ellipseName: "IAU 1976"
  };

  exports$1.airy = {
    a: 6377563.396,
    b: 6356256.910,
    ellipseName: "Airy 1830"
  };

  exports$1.APL4 = {
    a: 6378137,
    rf: 298.25,
    ellipseName: "Appl. Physics. 1965"
  };

  exports$1.NWL9D = {
    a: 6378145.0,
    rf: 298.25,
    ellipseName: "Naval Weapons Lab., 1965"
  };

  exports$1.mod_airy = {
    a: 6377340.189,
    b: 6356034.446,
    ellipseName: "Modified Airy"
  };

  exports$1.andrae = {
    a: 6377104.43,
    rf: 300.0,
    ellipseName: "Andrae 1876 (Den., Iclnd.)"
  };

  exports$1.aust_SA = {
    a: 6378160.0,
    rf: 298.25,
    ellipseName: "Australian Natl & S. Amer. 1969"
  };

  exports$1.GRS67 = {
    a: 6378160.0,
    rf: 298.2471674270,
    ellipseName: "GRS 67(IUGG 1967)"
  };

  exports$1.bessel = {
    a: 6377397.155,
    rf: 299.1528128,
    ellipseName: "Bessel 1841"
  };

  exports$1.bess_nam = {
    a: 6377483.865,
    rf: 299.1528128,
    ellipseName: "Bessel 1841 (Namibia)"
  };

  exports$1.clrk66 = {
    a: 6378206.4,
    b: 6356583.8,
    ellipseName: "Clarke 1866"
  };

  exports$1.clrk80 = {
    a: 6378249.145,
    rf: 293.4663,
    ellipseName: "Clarke 1880 mod."
  };

  exports$1.clrk80ign = {
    a: 6378249.2,
    b: 6356515,
    rf: 293.4660213,
    ellipseName: "Clarke 1880 (IGN)"
  };

  exports$1.clrk58 = {
    a: 6378293.645208759,
    rf: 294.2606763692654,
    ellipseName: "Clarke 1858"
  };

  exports$1.CPM = {
    a: 6375738.7,
    rf: 334.29,
    ellipseName: "Comm. des Poids et Mesures 1799"
  };

  exports$1.delmbr = {
    a: 6376428.0,
    rf: 311.5,
    ellipseName: "Delambre 1810 (Belgium)"
  };

  exports$1.engelis = {
    a: 6378136.05,
    rf: 298.2566,
    ellipseName: "Engelis 1985"
  };

  exports$1.evrst30 = {
    a: 6377276.345,
    rf: 300.8017,
    ellipseName: "Everest 1830"
  };

  exports$1.evrst48 = {
    a: 6377304.063,
    rf: 300.8017,
    ellipseName: "Everest 1948"
  };

  exports$1.evrst56 = {
    a: 6377301.243,
    rf: 300.8017,
    ellipseName: "Everest 1956"
  };

  exports$1.evrst69 = {
    a: 6377295.664,
    rf: 300.8017,
    ellipseName: "Everest 1969"
  };

  exports$1.evrstSS = {
    a: 6377298.556,
    rf: 300.8017,
    ellipseName: "Everest (Sabah & Sarawak)"
  };

  exports$1.fschr60 = {
    a: 6378166.0,
    rf: 298.3,
    ellipseName: "Fischer (Mercury Datum) 1960"
  };

  exports$1.fschr60m = {
    a: 6378155.0,
    rf: 298.3,
    ellipseName: "Fischer 1960"
  };

  exports$1.fschr68 = {
    a: 6378150.0,
    rf: 298.3,
    ellipseName: "Fischer 1968"
  };

  exports$1.helmert = {
    a: 6378200.0,
    rf: 298.3,
    ellipseName: "Helmert 1906"
  };

  exports$1.hough = {
    a: 6378270.0,
    rf: 297.0,
    ellipseName: "Hough"
  };

  exports$1.intl = {
    a: 6378388.0,
    rf: 297.0,
    ellipseName: "International 1909 (Hayford)"
  };

  exports$1.kaula = {
    a: 6378163.0,
    rf: 298.24,
    ellipseName: "Kaula 1961"
  };

  exports$1.lerch = {
    a: 6378139.0,
    rf: 298.257,
    ellipseName: "Lerch 1979"
  };

  exports$1.mprts = {
    a: 6397300.0,
    rf: 191.0,
    ellipseName: "Maupertius 1738"
  };

  exports$1.new_intl = {
    a: 6378157.5,
    b: 6356772.2,
    ellipseName: "New International 1967"
  };

  exports$1.plessis = {
    a: 6376523.0,
    rf: 6355863.0,
    ellipseName: "Plessis 1817 (France)"
  };

  exports$1.krass = {
    a: 6378245.0,
    rf: 298.3,
    ellipseName: "Krassovsky, 1942"
  };

  exports$1.SEasia = {
    a: 6378155.0,
    b: 6356773.3205,
    ellipseName: "Southeast Asia"
  };

  exports$1.walbeck = {
    a: 6376896.0,
    b: 6355834.8467,
    ellipseName: "Walbeck"
  };

  exports$1.WGS60 = {
    a: 6378165.0,
    rf: 298.3,
    ellipseName: "WGS 60"
  };

  exports$1.WGS66 = {
    a: 6378145.0,
    rf: 298.25,
    ellipseName: "WGS 66"
  };

  exports$1.WGS7 = {
    a: 6378135.0,
    rf: 298.26,
    ellipseName: "WGS 72"
  };

  var WGS84 = exports$1.WGS84 = {
    a: 6378137.0,
    rf: 298.257223563,
    ellipseName: "WGS 84"
  };

  exports$1.sphere = {
    a: 6370997.0,
    b: 6370997.0,
    ellipseName: "Normal Sphere (r=6370997)"
  };

  function eccentricity(a, b, rf, R_A) {
    var a2 = a * a; // used in geocentric
    var b2 = b * b; // used in geocentric
    var es = (a2 - b2) / a2; // e ^ 2
    var e = 0;
    if (R_A) {
      a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));
      a2 = a * a;
      es = 0;
    } else {
      e = Math.sqrt(es); // eccentricity
    }
    var ep2 = (a2 - b2) / b2; // used in geocentric
    return {
      es: es,
      e: e,
      ep2: ep2
    };
  }
  function sphere(a, b, rf, ellps, sphere) {
    if (!a) { // do we have an ellipsoid?
      var ellipse = match(exports$1, ellps);
      if (!ellipse) {
        ellipse = WGS84;
      }
      a = ellipse.a;
      b = ellipse.b;
      rf = ellipse.rf;
    }

    if (rf && !b) {
      b = (1.0 - 1.0 / rf) * a;
    }
    if (rf === 0 || Math.abs(a - b) < EPSLN) {
      sphere = true;
      b = a;
    }
    return {
      a: a,
      b: b,
      rf: rf,
      sphere: sphere
    };
  }

  var datums = {
    wgs84: {
      towgs84: "0,0,0",
      ellipse: "WGS84",
      datumName: "WGS84"
    },
    ch1903: {
      towgs84: "674.374,15.056,405.346",
      ellipse: "bessel",
      datumName: "swiss"
    },
    ggrs87: {
      towgs84: "-199.87,74.79,246.62",
      ellipse: "GRS80",
      datumName: "Greek_Geodetic_Reference_System_1987"
    },
    nad83: {
      towgs84: "0,0,0",
      ellipse: "GRS80",
      datumName: "North_American_Datum_1983"
    },
    nad27: {
      nadgrids: "@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",
      ellipse: "clrk66",
      datumName: "North_American_Datum_1927"
    },
    potsdam: {
      towgs84: "598.1,73.7,418.2,0.202,0.045,-2.455,6.7",
      ellipse: "bessel",
      datumName: "Potsdam Rauenberg 1950 DHDN"
    },
    carthage: {
      towgs84: "-263.0,6.0,431.0",
      ellipse: "clark80",
      datumName: "Carthage 1934 Tunisia"
    },
    hermannskogel: {
      towgs84: "577.326,90.129,463.919,5.137,1.474,5.297,2.4232",
      ellipse: "bessel",
      datumName: "Hermannskogel"
    },
    mgi: {
      towgs84: "577.326,90.129,463.919,5.137,1.474,5.297,2.4232",
      ellipse: "bessel",
      datumName: "Militar-Geographische Institut",
    },
    osni52: {
      towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
      ellipse: "airy",
      datumName: "Irish National"
    },
    ire65: {
      towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
      ellipse: "mod_airy",
      datumName: "Ireland 1965"
    },
    rassadiran: {
      towgs84: "-133.63,-157.5,-158.62",
      ellipse: "intl",
      datumName: "Rassadiran"
    },
    nzgd49: {
      towgs84: "59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",
      ellipse: "intl",
      datumName: "New Zealand Geodetic Datum 1949"
    },
    osgb36: {
      towgs84: "446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",
      ellipse: "airy",
      datumName: "Ordnance Survey of Great Britain 1936"
    },
    s_jtsk: {
      towgs84: "589,76,480",
      ellipse: 'bessel',
      datumName: 'S-JTSK (Ferro)'
    },
    beduaram: {
      towgs84: '-106,-87,188',
      ellipse: 'clrk80',
      datumName: 'Beduaram'
    },
    gunung_segara: {
      towgs84: '-403,684,41',
      ellipse: 'bessel',
      datumName: 'Gunung Segara Jakarta'
    },
    rnb72: {
      towgs84: "106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",
      ellipse: "intl",
      datumName: "Reseau National Belge 1972"
    }
  };

  for (var key in datums) {
    var datum$1 = datums[key];
    datums[datum$1.datumName] = datum$1;
  }

  function datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {
    var out = {};

    if (datumCode === undefined || datumCode === 'none') {
      out.datum_type = PJD_NODATUM;
    } else {
      out.datum_type = PJD_WGS84;
    }

    if (datum_params) {
      out.datum_params = datum_params.map(parseFloat);
      if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {
        out.datum_type = PJD_3PARAM;
      }
      if (out.datum_params.length > 3) {
        if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {
          out.datum_type = PJD_7PARAM;
          out.datum_params[3] *= SEC_TO_RAD;
          out.datum_params[4] *= SEC_TO_RAD;
          out.datum_params[5] *= SEC_TO_RAD;
          out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;
        }
      }
    }

    if (nadgrids) {
      out.datum_type = PJD_GRIDSHIFT;
      out.grids = nadgrids;
    }
    out.a = a; //datum object also uses these values
    out.b = b;
    out.es = es;
    out.ep2 = ep2;
    return out;
  }

  /**
   * Resources for details of NTv2 file formats:
   * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf
   * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm
   */

  var loadedNadgrids = {};

  /**
   * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file
   * as an ArrayBuffer.
   */
  function nadgrid(key, data) {
    var view = new DataView(data);
    var isLittleEndian = detectLittleEndian(view);
    var header = readHeader(view, isLittleEndian);
    var subgrids = readSubgrids(view, header, isLittleEndian);
    var nadgrid = {header: header, subgrids: subgrids};
    loadedNadgrids[key] = nadgrid;
    return nadgrid;
  }

  /**
   * Given a proj4 value for nadgrids, return an array of loaded grids
   */
  function getNadgrids(nadgrids) {
    // Format details: http://proj.maptools.org/gen_parms.html
    if (nadgrids === undefined) { return null; }
    var grids = nadgrids.split(',');
    return grids.map(parseNadgridString);
  }

  function parseNadgridString(value) {
    if (value.length === 0) {
      return null;
    }
    var optional = value[0] === '@';
    if (optional) {
      value = value.slice(1);
    }
    if (value === 'null') {
      return {name: 'null', mandatory: !optional, grid: null, isNull: true};
    }
    return {
      name: value,
      mandatory: !optional,
      grid: loadedNadgrids[value] || null,
      isNull: false
    };
  }

  function secondsToRadians(seconds) {
    return (seconds / 3600) * Math.PI / 180;
  }

  function detectLittleEndian(view) {
    var nFields = view.getInt32(8, false);
    if (nFields === 11) {
      return false;
    }
    nFields = view.getInt32(8, true);
    if (nFields !== 11) {
      console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');
    }
    return true;
  }

  function readHeader(view, isLittleEndian) {
    return {
      nFields: view.getInt32(8, isLittleEndian),
      nSubgridFields: view.getInt32(24, isLittleEndian),
      nSubgrids: view.getInt32(40, isLittleEndian),
      shiftType: decodeString(view, 56, 56 + 8).trim(),
      fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),
      fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),
      toSemiMajorAxis: view.getFloat64(152, isLittleEndian),
      toSemiMinorAxis: view.getFloat64(168, isLittleEndian),
    };
  }

  function decodeString(view, start, end) {
    return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));
  }

  function readSubgrids(view, header, isLittleEndian) {
    var gridOffset = 176;
    var grids = [];
    for (var i = 0; i < header.nSubgrids; i++) {
      var subHeader = readGridHeader(view, gridOffset, isLittleEndian);
      var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);
      var lngColumnCount = Math.round(
        1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);
      var latColumnCount = Math.round(
        1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);
      // Proj4 operates on radians whereas the coordinates are in seconds in the grid
      grids.push({
        ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],
        del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],
        lim: [lngColumnCount, latColumnCount],
        count: subHeader.gridNodeCount,
        cvs: mapNodes(nodes)
      });
      gridOffset += 176 + subHeader.gridNodeCount * 16;
    }
    return grids;
  }

  function mapNodes(nodes) {
    return nodes.map(function (r) {return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];});
  }

  function readGridHeader(view, offset, isLittleEndian) {
    return {
      name: decodeString(view, offset + 8, offset + 16).trim(),
      parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),
      lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),
      upperLatitude: view.getFloat64(offset + 88, isLittleEndian),
      lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),
      upperLongitude: view.getFloat64(offset + 120, isLittleEndian),
      latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),
      longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),
      gridNodeCount: view.getInt32(offset + 168, isLittleEndian)
    };
  }

  function readGridNodes(view, offset, gridHeader, isLittleEndian) {
    var nodesOffset = offset + 176;
    var gridRecordLength = 16;
    var gridShiftRecords = [];
    for (var i = 0; i < gridHeader.gridNodeCount; i++) {
      var record = {
        latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),
        longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),
        latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),
        longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian),
      };
      gridShiftRecords.push(record);
    }
    return gridShiftRecords;
  }

  function Projection(srsCode,callback) {
    if (!(this instanceof Projection)) {
      return new Projection(srsCode);
    }
    callback = callback || function(error){
      if(error){
        throw error;
      }
    };
    var json = parse(srsCode);
    if(typeof json !== 'object'){
      callback('Could not parse to valid json: ' + srsCode);
      return;
    }
    var ourProj = Projection.projections.get(json.projName);
    if(!ourProj){
      callback('Could not get projection name from: ' + srsCode);
      return;
    }
    if (json.datumCode && json.datumCode !== 'none') {
      var datumDef = match(datums, json.datumCode);
      if (datumDef) {
        json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);
        json.ellps = datumDef.ellipse;
        json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;
      }
    }
    json.k0 = json.k0 || 1.0;
    json.axis = json.axis || 'enu';
    json.ellps = json.ellps || 'wgs84';
    json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this

    var sphere_ = sphere(json.a, json.b, json.rf, json.ellps, json.sphere);
    var ecc = eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);
    var nadgrids = getNadgrids(json.nadgrids);
    var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2,
      nadgrids);

    extend(this, json); // transfer everything over from the projection because we don't know what we'll need
    extend(this, ourProj); // transfer all the methods from the projection

    // copy the 4 things over we calculated in deriveConstants.sphere
    this.a = sphere_.a;
    this.b = sphere_.b;
    this.rf = sphere_.rf;
    this.sphere = sphere_.sphere;

    // copy the 3 things we calculated in deriveConstants.eccentricity
    this.es = ecc.es;
    this.e = ecc.e;
    this.ep2 = ecc.ep2;

    // add in the datum object
    this.datum = datumObj;

    // init the projection
    this.init();

    // legecy callback from back in the day when it went to spatialreference.org
    callback(null, this);

  }
  Projection.projections = projections;
  Projection.projections.start();

  function compareDatums(source, dest) {
    if (source.datum_type !== dest.datum_type) {
      return false; // false, datums are not equal
    } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {
      // the tolerance for es is to ensure that GRS80 and WGS84
      // are considered identical
      return false;
    } else if (source.datum_type === PJD_3PARAM) {
      return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);
    } else if (source.datum_type === PJD_7PARAM) {
      return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);
    } else {
      return true; // datums are equal
    }
  } // cs_compare_datums()

  /*
   * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates
   * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),
   * according to the current ellipsoid parameters.
   *
   *    Latitude  : Geodetic latitude in radians                     (input)
   *    Longitude : Geodetic longitude in radians                    (input)
   *    Height    : Geodetic height, in meters                       (input)
   *    X         : Calculated Geocentric X coordinate, in meters    (output)
   *    Y         : Calculated Geocentric Y coordinate, in meters    (output)
   *    Z         : Calculated Geocentric Z coordinate, in meters    (output)
   *
   */
  function geodeticToGeocentric(p, es, a) {
    var Longitude = p.x;
    var Latitude = p.y;
    var Height = p.z ? p.z : 0; //Z value not always supplied

    var Rn; /*  Earth radius at location  */
    var Sin_Lat; /*  Math.sin(Latitude)  */
    var Sin2_Lat; /*  Square of Math.sin(Latitude)  */
    var Cos_Lat; /*  Math.cos(Latitude)  */

    /*
     ** Don't blow up if Latitude is just a little out of the value
     ** range as it may just be a rounding issue.  Also removed longitude
     ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.
     */
    if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {
      Latitude = -HALF_PI;
    } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {
      Latitude = HALF_PI;
    } else if (Latitude < -HALF_PI) {
      /* Latitude out of range */
      //..reportError('geocent:lat out of range:' + Latitude);
      return { x: -Infinity, y: -Infinity, z: p.z };
    } else if (Latitude > HALF_PI) {
      /* Latitude out of range */
      return { x: Infinity, y: Infinity, z: p.z };
    }

    if (Longitude > Math.PI) {
      Longitude -= (2 * Math.PI);
    }
    Sin_Lat = Math.sin(Latitude);
    Cos_Lat = Math.cos(Latitude);
    Sin2_Lat = Sin_Lat * Sin_Lat;
    Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));
    return {
      x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),
      y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),
      z: ((Rn * (1 - es)) + Height) * Sin_Lat
    };
  } // cs_geodetic_to_geocentric()

  function geocentricToGeodetic(p, es, a, b) {
    /* local defintions and variables */
    /* end-criterium of loop, accuracy of sin(Latitude) */
    var genau = 1e-12;
    var genau2 = (genau * genau);
    var maxiter = 30;

    var P; /* distance between semi-minor axis and location */
    var RR; /* distance between center and location */
    var CT; /* sin of geocentric latitude */
    var ST; /* cos of geocentric latitude */
    var RX;
    var RK;
    var RN; /* Earth radius at location */
    var CPHI0; /* cos of start or old geodetic latitude in iterations */
    var SPHI0; /* sin of start or old geodetic latitude in iterations */
    var CPHI; /* cos of searched geodetic latitude */
    var SPHI; /* sin of searched geodetic latitude */
    var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */
    var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */

    var X = p.x;
    var Y = p.y;
    var Z = p.z ? p.z : 0.0; //Z value not always supplied
    var Longitude;
    var Latitude;
    var Height;

    P = Math.sqrt(X * X + Y * Y);
    RR = Math.sqrt(X * X + Y * Y + Z * Z);

    /*      special cases for latitude and longitude */
    if (P / a < genau) {

      /*  special case, if P=0. (X=0., Y=0.) */
      Longitude = 0.0;

      /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis
       *  of ellipsoid (=center of mass), Latitude becomes PI/2 */
      if (RR / a < genau) {
        Latitude = HALF_PI;
        Height = -b;
        return {
          x: p.x,
          y: p.y,
          z: p.z
        };
      }
    } else {
      /*  ellipsoidal (geodetic) longitude
       *  interval: -PI < Longitude <= +PI */
      Longitude = Math.atan2(Y, X);
    }

    /* --------------------------------------------------------------
     * Following iterative algorithm was developped by
     * "Institut for Erdmessung", University of Hannover, July 1988.
     * Internet: www.ife.uni-hannover.de
     * Iterative computation of CPHI,SPHI and Height.
     * Iteration of CPHI and SPHI to 10**-12 radian resp.
     * 2*10**-7 arcsec.
     * --------------------------------------------------------------
     */
    CT = Z / RR;
    ST = P / RR;
    RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);
    CPHI0 = ST * (1.0 - es) * RX;
    SPHI0 = CT * RX;
    iter = 0;

    /* loop to find sin(Latitude) resp. Latitude
     * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */
    do {
      iter++;
      RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);

      /*  ellipsoidal (geodetic) height */
      Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);

      RK = es * RN / (RN + Height);
      RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);
      CPHI = ST * (1.0 - RK) * RX;
      SPHI = CT * RX;
      SDPHI = SPHI * CPHI0 - CPHI * SPHI0;
      CPHI0 = CPHI;
      SPHI0 = SPHI;
    }
    while (SDPHI * SDPHI > genau2 && iter < maxiter);

    /*      ellipsoidal (geodetic) latitude */
    Latitude = Math.atan(SPHI / Math.abs(CPHI));
    return {
      x: Longitude,
      y: Latitude,
      z: Height
    };
  } // cs_geocentric_to_geodetic()

  /****************************************************************/
  // pj_geocentic_to_wgs84( p )
  //  p = point to transform in geocentric coordinates (x,y,z)


  /** point object, nothing fancy, just allows values to be
      passed back and forth by reference rather than by value.
      Other point classes may be used as long as they have
      x and y properties, which will get modified in the transform method.
  */
  function geocentricToWgs84(p, datum_type, datum_params) {

    if (datum_type === PJD_3PARAM) {
      // if( x[io] === HUGE_VAL )
      //    continue;
      return {
        x: p.x + datum_params[0],
        y: p.y + datum_params[1],
        z: p.z + datum_params[2],
      };
    } else if (datum_type === PJD_7PARAM) {
      var Dx_BF = datum_params[0];
      var Dy_BF = datum_params[1];
      var Dz_BF = datum_params[2];
      var Rx_BF = datum_params[3];
      var Ry_BF = datum_params[4];
      var Rz_BF = datum_params[5];
      var M_BF = datum_params[6];
      // if( x[io] === HUGE_VAL )
      //    continue;
      return {
        x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,
        y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,
        z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF
      };
    }
  } // cs_geocentric_to_wgs84

  /****************************************************************/
  // pj_geocentic_from_wgs84()
  //  coordinate system definition,
  //  point to transform in geocentric coordinates (x,y,z)
  function geocentricFromWgs84(p, datum_type, datum_params) {

    if (datum_type === PJD_3PARAM) {
      //if( x[io] === HUGE_VAL )
      //    continue;
      return {
        x: p.x - datum_params[0],
        y: p.y - datum_params[1],
        z: p.z - datum_params[2],
      };

    } else if (datum_type === PJD_7PARAM) {
      var Dx_BF = datum_params[0];
      var Dy_BF = datum_params[1];
      var Dz_BF = datum_params[2];
      var Rx_BF = datum_params[3];
      var Ry_BF = datum_params[4];
      var Rz_BF = datum_params[5];
      var M_BF = datum_params[6];
      var x_tmp = (p.x - Dx_BF) / M_BF;
      var y_tmp = (p.y - Dy_BF) / M_BF;
      var z_tmp = (p.z - Dz_BF) / M_BF;
      //if( x[io] === HUGE_VAL )
      //    continue;

      return {
        x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,
        y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,
        z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp
      };
    } //cs_geocentric_from_wgs84()
  }

  function checkParams(type) {
    return (type === PJD_3PARAM || type === PJD_7PARAM);
  }

  function datum_transform(source, dest, point) {
    // Short cut if the datums are identical.
    if (compareDatums(source, dest)) {
      return point; // in this case, zero is sucess,
      // whereas cs_compare_datums returns 1 to indicate TRUE
      // confusing, should fix this
    }

    // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest
    if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {
      return point;
    }

    // If this datum requires grid shifts, then apply it to geodetic coordinates.
    var source_a = source.a;
    var source_es = source.es;
    if (source.datum_type === PJD_GRIDSHIFT) {
      var gridShiftCode = applyGridShift(source, false, point);
      if (gridShiftCode !== 0) {
        return undefined;
      }
      source_a = SRS_WGS84_SEMIMAJOR;
      source_es = SRS_WGS84_ESQUARED;
    }

    var dest_a = dest.a;
    var dest_b = dest.b;
    var dest_es = dest.es;
    if (dest.datum_type === PJD_GRIDSHIFT) {
      dest_a = SRS_WGS84_SEMIMAJOR;
      dest_b = SRS_WGS84_SEMIMINOR;
      dest_es = SRS_WGS84_ESQUARED;
    }

    // Do we need to go through geocentric coordinates?
    if (source_es === dest_es && source_a === dest_a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {
      return point;
    }

    // Convert to geocentric coordinates.
    point = geodeticToGeocentric(point, source_es, source_a);
    // Convert between datums
    if (checkParams(source.datum_type)) {
      point = geocentricToWgs84(point, source.datum_type, source.datum_params);
    }
    if (checkParams(dest.datum_type)) {
      point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);
    }
    point = geocentricToGeodetic(point, dest_es, dest_a, dest_b);

    if (dest.datum_type === PJD_GRIDSHIFT) {
      var destGridShiftResult = applyGridShift(dest, true, point);
      if (destGridShiftResult !== 0) {
        return undefined;
      }
    }

    return point;
  }

  function applyGridShift(source, inverse, point) {
    if (source.grids === null || source.grids.length === 0) {
      console.log('Grid shift grids not found');
      return -1;
    }
    var input = {x: -point.x, y: point.y};
    var output = {x: Number.NaN, y: Number.NaN};
    var attemptedGrids = [];
    outer:
    for (var i = 0; i < source.grids.length; i++) {
      var grid = source.grids[i];
      attemptedGrids.push(grid.name);
      if (grid.isNull) {
        output = input;
        break;
      }
      grid.mandatory;
      if (grid.grid === null) {
        if (grid.mandatory) {
          console.log("Unable to find mandatory grid '" + grid.name + "'");
          return -1;
        }
        continue;
      }
      var subgrids = grid.grid.subgrids;
      for (var j = 0, jj = subgrids.length; j < jj; j++) {
        var subgrid = subgrids[j];
        // skip tables that don't match our point at all
        var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 10000.0;
        var minX = subgrid.ll[0] - epsilon;
        var minY = subgrid.ll[1] - epsilon;
        var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;
        var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;
        if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x ) {
          continue;
        }
        output = applySubgridShift(input, inverse, subgrid);
        if (!isNaN(output.x)) {
          break outer;
        }
      }
    }
    if (isNaN(output.x)) {
      console.log("Failed to find a grid shift table for location '"+
        -input.x * R2D + " " + input.y * R2D + " tried: '" + attemptedGrids + "'");
      return -1;
    }
    point.x = -output.x;
    point.y = output.y;
    return 0;
  }

  function applySubgridShift(pin, inverse, ct) {
    var val = {x: Number.NaN, y: Number.NaN};
    if (isNaN(pin.x)) { return val; }
    var tb = {x: pin.x, y: pin.y};
    tb.x -= ct.ll[0];
    tb.y -= ct.ll[1];
    tb.x = adjust_lon(tb.x - Math.PI) + Math.PI;
    var t = nadInterpolate(tb, ct);
    if (inverse) {
      if (isNaN(t.x)) {
        return val;
      }
      t.x = tb.x - t.x;
      t.y = tb.y - t.y;
      var i = 9, tol = 1e-12;
      var dif, del;
      do {
        del = nadInterpolate(t, ct);
        if (isNaN(del.x)) {
          console.log("Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.");
          break;
        }
        dif = {x: tb.x - (del.x + t.x), y: tb.y - (del.y + t.y)};
        t.x += dif.x;
        t.y += dif.y;
      } while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);
      if (i < 0) {
        console.log("Inverse grid shift iterator failed to converge.");
        return val;
      }
      val.x = adjust_lon(t.x + ct.ll[0]);
      val.y = t.y + ct.ll[1];
    } else {
      if (!isNaN(t.x)) {
        val.x = pin.x + t.x;
        val.y = pin.y + t.y;
      }
    }
    return val;
  }

  function nadInterpolate(pin, ct) {
    var t = {x: pin.x / ct.del[0], y: pin.y / ct.del[1]};
    var indx = {x: Math.floor(t.x), y: Math.floor(t.y)};
    var frct = {x: t.x - 1.0 * indx.x, y: t.y - 1.0 * indx.y};
    var val= {x: Number.NaN, y: Number.NaN};
    var inx;
    if (indx.x < 0 || indx.x >= ct.lim[0]) {
      return val;
    }
    if (indx.y < 0 || indx.y >= ct.lim[1]) {
      return val;
    }
    inx = (indx.y * ct.lim[0]) + indx.x;
    var f00 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};
    inx++;
    var f10= {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};
    inx += ct.lim[0];
    var f11 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};
    inx--;
    var f01 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};
    var m11 = frct.x * frct.y, m10 = frct.x * (1.0 - frct.y),
      m00 = (1.0 - frct.x) * (1.0 - frct.y), m01 = (1.0 - frct.x) * frct.y;
    val.x = (m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x);
    val.y = (m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y);
    return val;
  }

  function adjust_axis(crs, denorm, point) {
    var xin = point.x,
      yin = point.y,
      zin = point.z || 0.0;
    var v, t, i;
    var out = {};
    for (i = 0; i < 3; i++) {
      if (denorm && i === 2 && point.z === undefined) {
        continue;
      }
      if (i === 0) {
        v = xin;
        if ("ew".indexOf(crs.axis[i]) !== -1) {
          t = 'x';
        } else {
          t = 'y';
        }

      }
      else if (i === 1) {
        v = yin;
        if ("ns".indexOf(crs.axis[i]) !== -1) {
          t = 'y';
        } else {
          t = 'x';
        }
      }
      else {
        v = zin;
        t = 'z';
      }
      switch (crs.axis[i]) {
      case 'e':
        out[t] = v;
        break;
      case 'w':
        out[t] = -v;
        break;
      case 'n':
        out[t] = v;
        break;
      case 's':
        out[t] = -v;
        break;
      case 'u':
        if (point[t] !== undefined) {
          out.z = v;
        }
        break;
      case 'd':
        if (point[t] !== undefined) {
          out.z = -v;
        }
        break;
      default:
        //console.log("ERROR: unknow axis ("+crs.axis[i]+") - check definition of "+crs.projName);
        return null;
      }
    }
    return out;
  }

  function common (array){
    var out = {
      x: array[0],
      y: array[1]
    };
    if (array.length>2) {
      out.z = array[2];
    }
    if (array.length>3) {
      out.m = array[3];
    }
    return out;
  }

  function checkSanity (point) {
    checkCoord(point.x);
    checkCoord(point.y);
  }
  function checkCoord(num) {
    if (typeof Number.isFinite === 'function') {
      if (Number.isFinite(num)) {
        return;
      }
      throw new TypeError('coordinates must be finite numbers');
    }
    if (typeof num !== 'number' || num !== num || !isFinite(num)) {
      throw new TypeError('coordinates must be finite numbers');
    }
  }

  function checkNotWGS(source, dest) {
    return (
      (source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM || source.datum.datum_type === PJD_GRIDSHIFT) && dest.datumCode !== 'WGS84') ||
      ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM || dest.datum.datum_type === PJD_GRIDSHIFT) && source.datumCode !== 'WGS84');
  }

  function transform(source, dest, point, enforceAxis) {
    var wgs84;
    if (Array.isArray(point)) {
      point = common(point);
    } else {
      // Clone the point object so inputs don't get modified
      point = {
        x: point.x,
        y: point.y,
        z: point.z,
        m: point.m
      };
    }
    var hasZ = point.z !== undefined;
    checkSanity(point);
    // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84
    if (source.datum && dest.datum && checkNotWGS(source, dest)) {
      wgs84 = new Projection('WGS84');
      point = transform(source, wgs84, point, enforceAxis);
      source = wgs84;
    }
    // DGR, 2010/11/12
    if (enforceAxis && source.axis !== 'enu') {
      point = adjust_axis(source, false, point);
    }
    // Transform source points to long/lat, if they aren't already.
    if (source.projName === 'longlat') {
      point = {
        x: point.x * D2R$1,
        y: point.y * D2R$1,
        z: point.z || 0
      };
    } else {
      if (source.to_meter) {
        point = {
          x: point.x * source.to_meter,
          y: point.y * source.to_meter,
          z: point.z || 0
        };
      }
      point = source.inverse(point); // Convert Cartesian to longlat
      if (!point) {
        return;
      }
    }
    // Adjust for the prime meridian if necessary
    if (source.from_greenwich) {
      point.x += source.from_greenwich;
    }

    // Convert datums if needed, and if possible.
    point = datum_transform(source.datum, dest.datum, point);
    if (!point) {
      return;
    }

    // Adjust for the prime meridian if necessary
    if (dest.from_greenwich) {
      point = {
        x: point.x - dest.from_greenwich,
        y: point.y,
        z: point.z || 0
      };
    }

    if (dest.projName === 'longlat') {
      // convert radians to decimal degrees
      point = {
        x: point.x * R2D,
        y: point.y * R2D,
        z: point.z || 0
      };
    } else { // else project
      point = dest.forward(point);
      if (dest.to_meter) {
        point = {
          x: point.x / dest.to_meter,
          y: point.y / dest.to_meter,
          z: point.z || 0
        };
      }
    }

    // DGR, 2010/11/12
    if (enforceAxis && dest.axis !== 'enu') {
      return adjust_axis(dest, true, point);
    }

    if (point && !hasZ) {
      delete point.z;
    }
    return point;
  }

  var wgs84 = Projection('WGS84');

  function transformer(from, to, coords, enforceAxis) {
    var transformedArray, out, keys;
    if (Array.isArray(coords)) {
      transformedArray = transform(from, to, coords, enforceAxis) || {x: NaN, y: NaN};
      if (coords.length > 2) {
        if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {
          if (typeof transformedArray.z === 'number') {
            return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.slice(3));
          } else {
            return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.slice(3));
          }
        } else {
          return [transformedArray.x, transformedArray.y].concat(coords.slice(2));
        }
      } else {
        return [transformedArray.x, transformedArray.y];
      }
    } else {
      out = transform(from, to, coords, enforceAxis);
      keys = Object.keys(coords);
      if (keys.length === 2) {
        return out;
      }
      keys.forEach(function (key) {
        if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {
          if (key === 'x' || key === 'y' || key === 'z') {
            return;
          }
        } else {
          if (key === 'x' || key === 'y') {
            return;
          }
        }
        out[key] = coords[key];
      });
      return out;
    }
  }

  function checkProj(item) {
    if (item instanceof Projection) {
      return item;
    }
    if (item.oProj) {
      return item.oProj;
    }
    return Projection(item);
  }

  function proj4(fromProj, toProj, coord) {
    fromProj = checkProj(fromProj);
    var single = false;
    var obj;
    if (typeof toProj === 'undefined') {
      toProj = fromProj;
      fromProj = wgs84;
      single = true;
    } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {
      coord = toProj;
      toProj = fromProj;
      fromProj = wgs84;
      single = true;
    }
    toProj = checkProj(toProj);
    if (coord) {
      return transformer(fromProj, toProj, coord);
    } else {
      obj = {
        forward: function (coords, enforceAxis) {
          return transformer(fromProj, toProj, coords, enforceAxis);
        },
        inverse: function (coords, enforceAxis) {
          return transformer(toProj, fromProj, coords, enforceAxis);
        }
      };
      if (single) {
        obj.oProj = toProj;
      }
      return obj;
    }
  }

  /**
   * UTM zones are grouped, and assigned to one of a group of 6
   * sets.
   *
   * {int} @private
   */
  var NUM_100K_SETS = 6;

  /**
   * The column letters (for easting) of the lower left value, per
   * set.
   *
   * {string} @private
   */
  var SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';

  /**
   * The row letters (for northing) of the lower left value, per
   * set.
   *
   * {string} @private
   */
  var SET_ORIGIN_ROW_LETTERS = 'AFAFAF';

  var A = 65; // A
  var I = 73; // I
  var O = 79; // O
  var V = 86; // V
  var Z = 90; // Z
  var mgrs = {
    forward: forward$u,
    inverse: inverse$u,
    toPoint: toPoint
  };
  /**
   * Conversion of lat/lon to MGRS.
   *
   * @param {object} ll Object literal with lat and lon properties on a
   *     WGS84 ellipsoid.
   * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for
   *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.
   * @return {string} the MGRS string for the given location and accuracy.
   */
  function forward$u(ll, accuracy) {
    accuracy = accuracy || 5; // default accuracy 1m
    return encode(LLtoUTM({
      lat: ll[1],
      lon: ll[0]
    }), accuracy);
  }
  /**
   * Conversion of MGRS to lat/lon.
   *
   * @param {string} mgrs MGRS string.
   * @return {array} An array with left (longitude), bottom (latitude), right
   *     (longitude) and top (latitude) values in WGS84, representing the
   *     bounding box for the provided MGRS reference.
   */
  function inverse$u(mgrs) {
    var bbox = UTMtoLL(decode(mgrs.toUpperCase()));
    if (bbox.lat && bbox.lon) {
      return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];
    }
    return [bbox.left, bbox.bottom, bbox.right, bbox.top];
  }
  function toPoint(mgrs) {
    var bbox = UTMtoLL(decode(mgrs.toUpperCase()));
    if (bbox.lat && bbox.lon) {
      return [bbox.lon, bbox.lat];
    }
    return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];
  }/**
   * Conversion from degrees to radians.
   *
   * @private
   * @param {number} deg the angle in degrees.
   * @return {number} the angle in radians.
   */
  function degToRad(deg) {
    return (deg * (Math.PI / 180.0));
  }

  /**
   * Conversion from radians to degrees.
   *
   * @private
   * @param {number} rad the angle in radians.
   * @return {number} the angle in degrees.
   */
  function radToDeg(rad) {
    return (180.0 * (rad / Math.PI));
  }

  /**
   * Converts a set of Longitude and Latitude co-ordinates to UTM
   * using the WGS84 ellipsoid.
   *
   * @private
   * @param {object} ll Object literal with lat and lon properties
   *     representing the WGS84 coordinate to be converted.
   * @return {object} Object literal containing the UTM value with easting,
   *     northing, zoneNumber and zoneLetter properties, and an optional
   *     accuracy property in digits. Returns null if the conversion failed.
   */
  function LLtoUTM(ll) {
    var Lat = ll.lat;
    var Long = ll.lon;
    var a = 6378137.0; //ellip.radius;
    var eccSquared = 0.00669438; //ellip.eccsq;
    var k0 = 0.9996;
    var LongOrigin;
    var eccPrimeSquared;
    var N, T, C, A, M;
    var LatRad = degToRad(Lat);
    var LongRad = degToRad(Long);
    var LongOriginRad;
    var ZoneNumber;
    // (int)
    ZoneNumber = Math.floor((Long + 180) / 6) + 1;

    //Make sure the longitude 180.00 is in Zone 60
    if (Long === 180) {
      ZoneNumber = 60;
    }

    // Special zone for Norway
    if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {
      ZoneNumber = 32;
    }

    // Special zones for Svalbard
    if (Lat >= 72.0 && Lat < 84.0) {
      if (Long >= 0.0 && Long < 9.0) {
        ZoneNumber = 31;
      }
      else if (Long >= 9.0 && Long < 21.0) {
        ZoneNumber = 33;
      }
      else if (Long >= 21.0 && Long < 33.0) {
        ZoneNumber = 35;
      }
      else if (Long >= 33.0 && Long < 42.0) {
        ZoneNumber = 37;
      }
    }

    LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin
    // in middle of
    // zone
    LongOriginRad = degToRad(LongOrigin);

    eccPrimeSquared = (eccSquared) / (1 - eccSquared);

    N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));
    T = Math.tan(LatRad) * Math.tan(LatRad);
    C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);
    A = Math.cos(LatRad) * (LongRad - LongOriginRad);

    M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));

    var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);

    var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));
    if (Lat < 0.0) {
      UTMNorthing += 10000000.0; //10000000 meter offset for
      // southern hemisphere
    }

    return {
      northing: Math.round(UTMNorthing),
      easting: Math.round(UTMEasting),
      zoneNumber: ZoneNumber,
      zoneLetter: getLetterDesignator(Lat)
    };
  }

  /**
   * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience
   * class where the Zone can be specified as a single string eg."60N" which
   * is then broken down into the ZoneNumber and ZoneLetter.
   *
   * @private
   * @param {object} utm An object literal with northing, easting, zoneNumber
   *     and zoneLetter properties. If an optional accuracy property is
   *     provided (in meters), a bounding box will be returned instead of
   *     latitude and longitude.
   * @return {object} An object literal containing either lat and lon values
   *     (if no accuracy was provided), or top, right, bottom and left values
   *     for the bounding box calculated according to the provided accuracy.
   *     Returns null if the conversion failed.
   */
  function UTMtoLL(utm) {

    var UTMNorthing = utm.northing;
    var UTMEasting = utm.easting;
    var zoneLetter = utm.zoneLetter;
    var zoneNumber = utm.zoneNumber;
    // check the ZoneNummber is valid
    if (zoneNumber < 0 || zoneNumber > 60) {
      return null;
    }

    var k0 = 0.9996;
    var a = 6378137.0; //ellip.radius;
    var eccSquared = 0.00669438; //ellip.eccsq;
    var eccPrimeSquared;
    var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));
    var N1, T1, C1, R1, D, M;
    var LongOrigin;
    var mu, phi1Rad;

    // remove 500,000 meter offset for longitude
    var x = UTMEasting - 500000.0;
    var y = UTMNorthing;

    // We must know somehow if we are in the Northern or Southern
    // hemisphere, this is the only time we use the letter So even
    // if the Zone letter isn't exactly correct it should indicate
    // the hemisphere correctly
    if (zoneLetter < 'N') {
      y -= 10000000.0; // remove 10,000,000 meter offset used
      // for southern hemisphere
    }

    // There are 60 zones with zone 1 being at West -180 to -174
    LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin
    // in middle of
    // zone

    eccPrimeSquared = (eccSquared) / (1 - eccSquared);

    M = y / k0;
    mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));

    phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);
    // double phi1 = ProjMath.radToDeg(phi1Rad);

    N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));
    T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);
    C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);
    R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);
    D = x / (N1 * k0);

    var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);
    lat = radToDeg(lat);

    var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);
    lon = LongOrigin + radToDeg(lon);

    var result;
    if (utm.accuracy) {
      var topRight = UTMtoLL({
        northing: utm.northing + utm.accuracy,
        easting: utm.easting + utm.accuracy,
        zoneLetter: utm.zoneLetter,
        zoneNumber: utm.zoneNumber
      });
      result = {
        top: topRight.lat,
        right: topRight.lon,
        bottom: lat,
        left: lon
      };
    }
    else {
      result = {
        lat: lat,
        lon: lon
      };
    }
    return result;
  }

  /**
   * Calculates the MGRS letter designator for the given latitude.
   *
   * @private
   * @param {number} lat The latitude in WGS84 to get the letter designator
   *     for.
   * @return {char} The letter designator.
   */
  function getLetterDesignator(lat) {
    //This is here as an error flag to show that the Latitude is
    //outside MGRS limits
    var LetterDesignator = 'Z';

    if ((84 >= lat) && (lat >= 72)) {
      LetterDesignator = 'X';
    }
    else if ((72 > lat) && (lat >= 64)) {
      LetterDesignator = 'W';
    }
    else if ((64 > lat) && (lat >= 56)) {
      LetterDesignator = 'V';
    }
    else if ((56 > lat) && (lat >= 48)) {
      LetterDesignator = 'U';
    }
    else if ((48 > lat) && (lat >= 40)) {
      LetterDesignator = 'T';
    }
    else if ((40 > lat) && (lat >= 32)) {
      LetterDesignator = 'S';
    }
    else if ((32 > lat) && (lat >= 24)) {
      LetterDesignator = 'R';
    }
    else if ((24 > lat) && (lat >= 16)) {
      LetterDesignator = 'Q';
    }
    else if ((16 > lat) && (lat >= 8)) {
      LetterDesignator = 'P';
    }
    else if ((8 > lat) && (lat >= 0)) {
      LetterDesignator = 'N';
    }
    else if ((0 > lat) && (lat >= -8)) {
      LetterDesignator = 'M';
    }
    else if ((-8 > lat) && (lat >= -16)) {
      LetterDesignator = 'L';
    }
    else if ((-16 > lat) && (lat >= -24)) {
      LetterDesignator = 'K';
    }
    else if ((-24 > lat) && (lat >= -32)) {
      LetterDesignator = 'J';
    }
    else if ((-32 > lat) && (lat >= -40)) {
      LetterDesignator = 'H';
    }
    else if ((-40 > lat) && (lat >= -48)) {
      LetterDesignator = 'G';
    }
    else if ((-48 > lat) && (lat >= -56)) {
      LetterDesignator = 'F';
    }
    else if ((-56 > lat) && (lat >= -64)) {
      LetterDesignator = 'E';
    }
    else if ((-64 > lat) && (lat >= -72)) {
      LetterDesignator = 'D';
    }
    else if ((-72 > lat) && (lat >= -80)) {
      LetterDesignator = 'C';
    }
    return LetterDesignator;
  }

  /**
   * Encodes a UTM location as MGRS string.
   *
   * @private
   * @param {object} utm An object literal with easting, northing,
   *     zoneLetter, zoneNumber
   * @param {number} accuracy Accuracy in digits (1-5).
   * @return {string} MGRS string for the given UTM location.
   */
  function encode(utm, accuracy) {
    // prepend with leading zeroes
    var seasting = "00000" + utm.easting,
      snorthing = "00000" + utm.northing;

    return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);
  }

  /**
   * Get the two letter 100k designator for a given UTM easting,
   * northing and zone number value.
   *
   * @private
   * @param {number} easting
   * @param {number} northing
   * @param {number} zoneNumber
   * @return the two letter 100k designator for the given UTM location.
   */
  function get100kID(easting, northing, zoneNumber) {
    var setParm = get100kSetForZone(zoneNumber);
    var setColumn = Math.floor(easting / 100000);
    var setRow = Math.floor(northing / 100000) % 20;
    return getLetter100kID(setColumn, setRow, setParm);
  }

  /**
   * Given a UTM zone number, figure out the MGRS 100K set it is in.
   *
   * @private
   * @param {number} i An UTM zone number.
   * @return {number} the 100k set the UTM zone is in.
   */
  function get100kSetForZone(i) {
    var setParm = i % NUM_100K_SETS;
    if (setParm === 0) {
      setParm = NUM_100K_SETS;
    }

    return setParm;
  }

  /**
   * Get the two-letter MGRS 100k designator given information
   * translated from the UTM northing, easting and zone number.
   *
   * @private
   * @param {number} column the column index as it relates to the MGRS
   *        100k set spreadsheet, created from the UTM easting.
   *        Values are 1-8.
   * @param {number} row the row index as it relates to the MGRS 100k set
   *        spreadsheet, created from the UTM northing value. Values
   *        are from 0-19.
   * @param {number} parm the set block, as it relates to the MGRS 100k set
   *        spreadsheet, created from the UTM zone. Values are from
   *        1-60.
   * @return two letter MGRS 100k code.
   */
  function getLetter100kID(column, row, parm) {
    // colOrigin and rowOrigin are the letters at the origin of the set
    var index = parm - 1;
    var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);
    var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);

    // colInt and rowInt are the letters to build to return
    var colInt = colOrigin + column - 1;
    var rowInt = rowOrigin + row;
    var rollover = false;

    if (colInt > Z) {
      colInt = colInt - Z + A - 1;
      rollover = true;
    }

    if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {
      colInt++;
    }

    if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {
      colInt++;

      if (colInt === I) {
        colInt++;
      }
    }

    if (colInt > Z) {
      colInt = colInt - Z + A - 1;
    }

    if (rowInt > V) {
      rowInt = rowInt - V + A - 1;
      rollover = true;
    }
    else {
      rollover = false;
    }

    if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {
      rowInt++;
    }

    if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {
      rowInt++;

      if (rowInt === I) {
        rowInt++;
      }
    }

    if (rowInt > V) {
      rowInt = rowInt - V + A - 1;
    }

    var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);
    return twoLetter;
  }

  /**
   * Decode the UTM parameters from a MGRS string.
   *
   * @private
   * @param {string} mgrsString an UPPERCASE coordinate string is expected.
   * @return {object} An object literal with easting, northing, zoneLetter,
   *     zoneNumber and accuracy (in meters) properties.
   */
  function decode(mgrsString) {

    if (mgrsString && mgrsString.length === 0) {
      throw ("MGRSPoint coverting from nothing");
    }

    var length = mgrsString.length;

    var hunK = null;
    var sb = "";
    var testChar;
    var i = 0;

    // get Zone number
    while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {
      if (i >= 2) {
        throw ("MGRSPoint bad conversion from: " + mgrsString);
      }
      sb += testChar;
      i++;
    }

    var zoneNumber = parseInt(sb, 10);

    if (i === 0 || i + 3 > length) {
      // A good MGRS string has to be 4-5 digits long,
      // ##AAA/#AAA at least.
      throw ("MGRSPoint bad conversion from: " + mgrsString);
    }

    var zoneLetter = mgrsString.charAt(i++);

    // Should we check the zone letter here? Why not.
    if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {
      throw ("MGRSPoint zone letter " + zoneLetter + " not handled: " + mgrsString);
    }

    hunK = mgrsString.substring(i, i += 2);

    var set = get100kSetForZone(zoneNumber);

    var east100k = getEastingFromChar(hunK.charAt(0), set);
    var north100k = getNorthingFromChar(hunK.charAt(1), set);

    // We have a bug where the northing may be 2000000 too low.
    // How
    // do we know when to roll over?

    while (north100k < getMinNorthing(zoneLetter)) {
      north100k += 2000000;
    }

    // calculate the char index for easting/northing separator
    var remainder = length - i;

    if (remainder % 2 !== 0) {
      throw ("MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters" + mgrsString);
    }

    var sep = remainder / 2;

    var sepEasting = 0.0;
    var sepNorthing = 0.0;
    var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;
    if (sep > 0) {
      accuracyBonus = 100000.0 / Math.pow(10, sep);
      sepEastingString = mgrsString.substring(i, i + sep);
      sepEasting = parseFloat(sepEastingString) * accuracyBonus;
      sepNorthingString = mgrsString.substring(i + sep);
      sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;
    }

    easting = sepEasting + east100k;
    northing = sepNorthing + north100k;

    return {
      easting: easting,
      northing: northing,
      zoneLetter: zoneLetter,
      zoneNumber: zoneNumber,
      accuracy: accuracyBonus
    };
  }

  /**
   * Given the first letter from a two-letter MGRS 100k zone, and given the
   * MGRS table set for the zone number, figure out the easting value that
   * should be added to the other, secondary easting value.
   *
   * @private
   * @param {char} e The first letter from a two-letter MGRS 100Â´k zone.
   * @param {number} set The MGRS table set for the zone number.
   * @return {number} The easting value for the given letter and set.
   */
  function getEastingFromChar(e, set) {
    // colOrigin is the letter at the origin of the set for the
    // column
    var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);
    var eastingValue = 100000.0;
    var rewindMarker = false;

    while (curCol !== e.charCodeAt(0)) {
      curCol++;
      if (curCol === I) {
        curCol++;
      }
      if (curCol === O) {
        curCol++;
      }
      if (curCol > Z) {
        if (rewindMarker) {
          throw ("Bad character: " + e);
        }
        curCol = A;
        rewindMarker = true;
      }
      eastingValue += 100000.0;
    }

    return eastingValue;
  }

  /**
   * Given the second letter from a two-letter MGRS 100k zone, and given the
   * MGRS table set for the zone number, figure out the northing value that
   * should be added to the other, secondary northing value. You have to
   * remember that Northings are determined from the equator, and the vertical
   * cycle of letters mean a 2000000 additional northing meters. This happens
   * approx. every 18 degrees of latitude. This method does *NOT* count any
   * additional northings. You have to figure out how many 2000000 meters need
   * to be added for the zone letter of the MGRS coordinate.
   *
   * @private
   * @param {char} n Second letter of the MGRS 100k zone
   * @param {number} set The MGRS table set number, which is dependent on the
   *     UTM zone number.
   * @return {number} The northing value for the given letter and set.
   */
  function getNorthingFromChar(n, set) {

    if (n > 'V') {
      throw ("MGRSPoint given invalid Northing " + n);
    }

    // rowOrigin is the letter at the origin of the set for the
    // column
    var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);
    var northingValue = 0.0;
    var rewindMarker = false;

    while (curRow !== n.charCodeAt(0)) {
      curRow++;
      if (curRow === I) {
        curRow++;
      }
      if (curRow === O) {
        curRow++;
      }
      // fixing a bug making whole application hang in this loop
      // when 'n' is a wrong character
      if (curRow > V) {
        if (rewindMarker) { // making sure that this loop ends
          throw ("Bad character: " + n);
        }
        curRow = A;
        rewindMarker = true;
      }
      northingValue += 100000.0;
    }

    return northingValue;
  }

  /**
   * The function getMinNorthing returns the minimum northing value of a MGRS
   * zone.
   *
   * Ported from Geotrans' c Lattitude_Band_Value structure table.
   *
   * @private
   * @param {char} zoneLetter The MGRS zone to get the min northing for.
   * @return {number}
   */
  function getMinNorthing(zoneLetter) {
    var northing;
    switch (zoneLetter) {
    case 'C':
      northing = 1100000.0;
      break;
    case 'D':
      northing = 2000000.0;
      break;
    case 'E':
      northing = 2800000.0;
      break;
    case 'F':
      northing = 3700000.0;
      break;
    case 'G':
      northing = 4600000.0;
      break;
    case 'H':
      northing = 5500000.0;
      break;
    case 'J':
      northing = 6400000.0;
      break;
    case 'K':
      northing = 7300000.0;
      break;
    case 'L':
      northing = 8200000.0;
      break;
    case 'M':
      northing = 9100000.0;
      break;
    case 'N':
      northing = 0.0;
      break;
    case 'P':
      northing = 800000.0;
      break;
    case 'Q':
      northing = 1700000.0;
      break;
    case 'R':
      northing = 2600000.0;
      break;
    case 'S':
      northing = 3500000.0;
      break;
    case 'T':
      northing = 4400000.0;
      break;
    case 'U':
      northing = 5300000.0;
      break;
    case 'V':
      northing = 6200000.0;
      break;
    case 'W':
      northing = 7000000.0;
      break;
    case 'X':
      northing = 7900000.0;
      break;
    default:
      northing = -1;
    }
    if (northing >= 0.0) {
      return northing;
    }
    else {
      throw ("Invalid zone letter: " + zoneLetter);
    }

  }

  function Point(x, y, z) {
    if (!(this instanceof Point)) {
      return new Point(x, y, z);
    }
    if (Array.isArray(x)) {
      this.x = x[0];
      this.y = x[1];
      this.z = x[2] || 0.0;
    } else if(typeof x === 'object') {
      this.x = x.x;
      this.y = x.y;
      this.z = x.z || 0.0;
    } else if (typeof x === 'string' && typeof y === 'undefined') {
      var coords = x.split(',');
      this.x = parseFloat(coords[0], 10);
      this.y = parseFloat(coords[1], 10);
      this.z = parseFloat(coords[2], 10) || 0.0;
    } else {
      this.x = x;
      this.y = y;
      this.z = z || 0.0;
    }
    console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');
  }

  Point.fromMGRS = function(mgrsStr) {
    return new Point(toPoint(mgrsStr));
  };
  Point.prototype.toMGRS = function(accuracy) {
    return forward$u([this.x, this.y], accuracy);
  };

  var C00 = 1;
  var C02 = 0.25;
  var C04 = 0.046875;
  var C06 = 0.01953125;
  var C08 = 0.01068115234375;
  var C22 = 0.75;
  var C44 = 0.46875;
  var C46 = 0.01302083333333333333;
  var C48 = 0.00712076822916666666;
  var C66 = 0.36458333333333333333;
  var C68 = 0.00569661458333333333;
  var C88 = 0.3076171875;

  function pj_enfn(es) {
    var en = [];
    en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));
    en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));
    var t = es * es;
    en[2] = t * (C44 - es * (C46 + es * C48));
    t *= es;
    en[3] = t * (C66 - es * C68);
    en[4] = t * es * C88;
    return en;
  }

  function pj_mlfn(phi, sphi, cphi, en) {
    cphi *= sphi;
    sphi *= sphi;
    return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));
  }

  var MAX_ITER$3 = 20;

  function pj_inv_mlfn(arg, es, en) {
    var k = 1 / (1 - es);
    var phi = arg;
    for (var i = MAX_ITER$3; i; --i) { /* rarely goes over 2 iterations */
      var s = Math.sin(phi);
      var t = 1 - es * s * s;
      //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;
      //phi -= t * (t * Math.sqrt(t)) * k;
      t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;
      phi -= t;
      if (Math.abs(t) < EPSLN) {
        return phi;
      }
    }
    //..reportError("cass:pj_inv_mlfn: Convergence error");
    return phi;
  }

  // Heavily based on this tmerc projection implementation
  // https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js


  function init$v() {
    this.x0 = this.x0 !== undefined ? this.x0 : 0;
    this.y0 = this.y0 !== undefined ? this.y0 : 0;
    this.long0 = this.long0 !== undefined ? this.long0 : 0;
    this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;

    if (this.es) {
      this.en = pj_enfn(this.es);
      this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);
    }
  }

  /**
      Transverse Mercator Forward  - long/lat to x/y
      long/lat in radians
    */
  function forward$t(p) {
    var lon = p.x;
    var lat = p.y;

    var delta_lon = adjust_lon(lon - this.long0);
    var con;
    var x, y;
    var sin_phi = Math.sin(lat);
    var cos_phi = Math.cos(lat);

    if (!this.es) {
      var b = cos_phi * Math.sin(delta_lon);

      if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {
        return (93);
      }
      else {
        x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;
        y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));
        b = Math.abs(y);

        if (b >= 1) {
          if ((b - 1) > EPSLN) {
            return (93);
          }
          else {
            y = 0;
          }
        }
        else {
          y = Math.acos(y);
        }

        if (lat < 0) {
          y = -y;
        }

        y = this.a * this.k0 * (y - this.lat0) + this.y0;
      }
    }
    else {
      var al = cos_phi * delta_lon;
      var als = Math.pow(al, 2);
      var c = this.ep2 * Math.pow(cos_phi, 2);
      var cs = Math.pow(c, 2);
      var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;
      var t = Math.pow(tq, 2);
      var ts = Math.pow(t, 2);
      con = 1 - this.es * Math.pow(sin_phi, 2);
      al = al / Math.sqrt(con);
      var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);

      x = this.a * (this.k0 * al * (1 +
        als / 6 * (1 - t + c +
        als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +
        als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +
        this.x0;

      y = this.a * (this.k0 * (ml - this.ml0 +
        sin_phi * delta_lon * al / 2 * (1 +
        als / 12 * (5 - t + 9 * c + 4 * cs +
        als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +
        als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +
        this.y0;
    }

    p.x = x;
    p.y = y;

    return p;
  }

  /**
      Transverse Mercator Inverse  -  x/y to long/lat
    */
  function inverse$t(p) {
    var con, phi;
    var lat, lon;
    var x = (p.x - this.x0) * (1 / this.a);
    var y = (p.y - this.y0) * (1 / this.a);

    if (!this.es) {
      var f = Math.exp(x / this.k0);
      var g = 0.5 * (f - 1 / f);
      var temp = this.lat0 + y / this.k0;
      var h = Math.cos(temp);
      con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));
      lat = Math.asin(con);

      if (y < 0) {
        lat = -lat;
      }

      if ((g === 0) && (h === 0)) {
        lon = 0;
      }
      else {
        lon = adjust_lon(Math.atan2(g, h) + this.long0);
      }
    }
    else { // ellipsoidal form
      con = this.ml0 + y / this.k0;
      phi = pj_inv_mlfn(con, this.es, this.en);

      if (Math.abs(phi) < HALF_PI) {
        var sin_phi = Math.sin(phi);
        var cos_phi = Math.cos(phi);
        var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;
        var c = this.ep2 * Math.pow(cos_phi, 2);
        var cs = Math.pow(c, 2);
        var t = Math.pow(tan_phi, 2);
        var ts = Math.pow(t, 2);
        con = 1 - this.es * Math.pow(sin_phi, 2);
        var d = x * Math.sqrt(con) / this.k0;
        var ds = Math.pow(d, 2);
        con = con * tan_phi;

        lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -
          ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -
          ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -
          ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));

        lon = adjust_lon(this.long0 + (d * (1 -
          ds / 6 * (1 + 2 * t + c -
          ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -
          ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));
      }
      else {
        lat = HALF_PI * sign(y);
        lon = 0;
      }
    }

    p.x = lon;
    p.y = lat;

    return p;
  }

  var names$u = ["Fast_Transverse_Mercator", "Fast Transverse Mercator"];
  var tmerc = {
    init: init$v,
    forward: forward$t,
    inverse: inverse$t,
    names: names$u
  };

  function sinh(x) {
    var r = Math.exp(x);
    r = (r - 1 / r) / 2;
    return r;
  }

  function hypot(x, y) {
    x = Math.abs(x);
    y = Math.abs(y);
    var a = Math.max(x, y);
    var b = Math.min(x, y) / (a ? a : 1);

    return a * Math.sqrt(1 + Math.pow(b, 2));
  }

  function log1py(x) {
    var y = 1 + x;
    var z = y - 1;

    return z === 0 ? x : x * Math.log(y) / z;
  }

  function asinhy(x) {
    var y = Math.abs(x);
    y = log1py(y * (1 + y / (hypot(1, y) + 1)));

    return x < 0 ? -y : y;
  }

  function gatg(pp, B) {
    var cos_2B = 2 * Math.cos(2 * B);
    var i = pp.length - 1;
    var h1 = pp[i];
    var h2 = 0;
    var h;

    while (--i >= 0) {
      h = -h2 + cos_2B * h1 + pp[i];
      h2 = h1;
      h1 = h;
    }

    return (B + h * Math.sin(2 * B));
  }

  function clens(pp, arg_r) {
    var r = 2 * Math.cos(arg_r);
    var i = pp.length - 1;
    var hr1 = pp[i];
    var hr2 = 0;
    var hr;

    while (--i >= 0) {
      hr = -hr2 + r * hr1 + pp[i];
      hr2 = hr1;
      hr1 = hr;
    }

    return Math.sin(arg_r) * hr;
  }

  function cosh(x) {
    var r = Math.exp(x);
    r = (r + 1 / r) / 2;
    return r;
  }

  function clens_cmplx(pp, arg_r, arg_i) {
    var sin_arg_r = Math.sin(arg_r);
    var cos_arg_r = Math.cos(arg_r);
    var sinh_arg_i = sinh(arg_i);
    var cosh_arg_i = cosh(arg_i);
    var r = 2 * cos_arg_r * cosh_arg_i;
    var i = -2 * sin_arg_r * sinh_arg_i;
    var j = pp.length - 1;
    var hr = pp[j];
    var hi1 = 0;
    var hr1 = 0;
    var hi = 0;
    var hr2;
    var hi2;

    while (--j >= 0) {
      hr2 = hr1;
      hi2 = hi1;
      hr1 = hr;
      hi1 = hi;
      hr = -hr2 + r * hr1 - i * hi1 + pp[j];
      hi = -hi2 + i * hr1 + r * hi1;
    }

    r = sin_arg_r * cosh_arg_i;
    i = cos_arg_r * sinh_arg_i;

    return [r * hr - i * hi, r * hi + i * hr];
  }

  // Heavily based on this etmerc projection implementation
  // https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js


  function init$u() {
    if (!this.approx && (isNaN(this.es) || this.es <= 0)) {
      throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION["Fast_Transverse_Mercator"] in the WKT.');
    }
    if (this.approx) {
      // When '+approx' is set, use tmerc instead
      tmerc.init.apply(this);
      this.forward = tmerc.forward;
      this.inverse = tmerc.inverse;
    }

    this.x0 = this.x0 !== undefined ? this.x0 : 0;
    this.y0 = this.y0 !== undefined ? this.y0 : 0;
    this.long0 = this.long0 !== undefined ? this.long0 : 0;
    this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;

    this.cgb = [];
    this.cbg = [];
    this.utg = [];
    this.gtu = [];

    var f = this.es / (1 + Math.sqrt(1 - this.es));
    var n = f / (2 - f);
    var np = n;

    this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));
    this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));

    np = np * n;
    this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));
    this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));

    np = np * n;
    this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));
    this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));

    np = np * n;
    this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));
    this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));

    np = np * n;
    this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));
    this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));

    np = np * n;
    this.cgb[5] = np * (601676 / 22275);
    this.cbg[5] = np * (444337 / 155925);

    np = Math.pow(n, 2);
    this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));

    this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));
    this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));

    this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));
    this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));

    np = np * n;
    this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));
    this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));

    np = np * n;
    this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));
    this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));

    np = np * n;
    this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));
    this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));

    np = np * n;
    this.utg[5] = np * (-20648693 / 638668800);
    this.gtu[5] = np * (212378941 / 319334400);

    var Z = gatg(this.cbg, this.lat0);
    this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));
  }

  function forward$s(p) {
    var Ce = adjust_lon(p.x - this.long0);
    var Cn = p.y;

    Cn = gatg(this.cbg, Cn);
    var sin_Cn = Math.sin(Cn);
    var cos_Cn = Math.cos(Cn);
    var sin_Ce = Math.sin(Ce);
    var cos_Ce = Math.cos(Ce);

    Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);
    Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));
    Ce = asinhy(Math.tan(Ce));

    var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);

    Cn = Cn + tmp[0];
    Ce = Ce + tmp[1];

    var x;
    var y;

    if (Math.abs(Ce) <= 2.623395162778) {
      x = this.a * (this.Qn * Ce) + this.x0;
      y = this.a * (this.Qn * Cn + this.Zb) + this.y0;
    }
    else {
      x = Infinity;
      y = Infinity;
    }

    p.x = x;
    p.y = y;

    return p;
  }

  function inverse$s(p) {
    var Ce = (p.x - this.x0) * (1 / this.a);
    var Cn = (p.y - this.y0) * (1 / this.a);

    Cn = (Cn - this.Zb) / this.Qn;
    Ce = Ce / this.Qn;

    var lon;
    var lat;

    if (Math.abs(Ce) <= 2.623395162778) {
      var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);

      Cn = Cn + tmp[0];
      Ce = Ce + tmp[1];
      Ce = Math.atan(sinh(Ce));

      var sin_Cn = Math.sin(Cn);
      var cos_Cn = Math.cos(Cn);
      var sin_Ce = Math.sin(Ce);
      var cos_Ce = Math.cos(Ce);

      Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));
      Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);

      lon = adjust_lon(Ce + this.long0);
      lat = gatg(this.cgb, Cn);
    }
    else {
      lon = Infinity;
      lat = Infinity;
    }

    p.x = lon;
    p.y = lat;

    return p;
  }

  var names$t = ["Extended_Transverse_Mercator", "Extended Transverse Mercator", "etmerc", "Transverse_Mercator", "Transverse Mercator", "Gauss Kruger", "Gauss_Kruger", "tmerc"];
  var etmerc = {
    init: init$u,
    forward: forward$s,
    inverse: inverse$s,
    names: names$t
  };

  function adjust_zone(zone, lon) {
    if (zone === undefined) {
      zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;

      if (zone < 0) {
        return 0;
      } else if (zone > 60) {
        return 60;
      }
    }
    return zone;
  }

  var dependsOn = 'etmerc';


  function init$t() {
    var zone = adjust_zone(this.zone, this.long0);
    if (zone === undefined) {
      throw new Error('unknown utm zone');
    }
    this.lat0 = 0;
    this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R$1;
    this.x0 = 500000;
    this.y0 = this.utmSouth ? 10000000 : 0;
    this.k0 = 0.9996;

    etmerc.init.apply(this);
    this.forward = etmerc.forward;
    this.inverse = etmerc.inverse;
  }

  var names$s = ["Universal Transverse Mercator System", "utm"];
  var utm = {
    init: init$t,
    names: names$s,
    dependsOn: dependsOn
  };

  function srat(esinp, exp) {
    return (Math.pow((1 - esinp) / (1 + esinp), exp));
  }

  var MAX_ITER$2 = 20;

  function init$s() {
    var sphi = Math.sin(this.lat0);
    var cphi = Math.cos(this.lat0);
    cphi *= cphi;
    this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);
    this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));
    this.phic0 = Math.asin(sphi / this.C);
    this.ratexp = 0.5 * this.C * this.e;
    this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));
  }

  function forward$r(p) {
    var lon = p.x;
    var lat = p.y;

    p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;
    p.x = this.C * lon;
    return p;
  }

  function inverse$r(p) {
    var DEL_TOL = 1e-14;
    var lon = p.x / this.C;
    var lat = p.y;
    var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);
    for (var i = MAX_ITER$2; i > 0; --i) {
      lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), -0.5 * this.e)) - HALF_PI;
      if (Math.abs(lat - p.y) < DEL_TOL) {
        break;
      }
      p.y = lat;
    }
    /* convergence failed */
    if (!i) {
      return null;
    }
    p.x = lon;
    p.y = lat;
    return p;
  }
  var gauss = {
    init: init$s,
    forward: forward$r,
    inverse: inverse$r};

  function init$r() {
    gauss.init.apply(this);
    if (!this.rc) {
      return;
    }
    this.sinc0 = Math.sin(this.phic0);
    this.cosc0 = Math.cos(this.phic0);
    this.R2 = 2 * this.rc;
    if (!this.title) {
      this.title = "Oblique Stereographic Alternative";
    }
  }

  function forward$q(p) {
    var sinc, cosc, cosl, k;
    p.x = adjust_lon(p.x - this.long0);
    gauss.forward.apply(this, [p]);
    sinc = Math.sin(p.y);
    cosc = Math.cos(p.y);
    cosl = Math.cos(p.x);
    k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);
    p.x = k * cosc * Math.sin(p.x);
    p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);
    p.x = this.a * p.x + this.x0;
    p.y = this.a * p.y + this.y0;
    return p;
  }

  function inverse$q(p) {
    var sinc, cosc, lon, lat, rho;
    p.x = (p.x - this.x0) / this.a;
    p.y = (p.y - this.y0) / this.a;

    p.x /= this.k0;
    p.y /= this.k0;
    if ((rho = hypot(p.x, p.y))) {
      var c = 2 * Math.atan2(rho, this.R2);
      sinc = Math.sin(c);
      cosc = Math.cos(c);
      lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);
      lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);
    }
    else {
      lat = this.phic0;
      lon = 0;
    }

    p.x = lon;
    p.y = lat;
    gauss.inverse.apply(this, [p]);
    p.x = adjust_lon(p.x + this.long0);
    return p;
  }

  var names$r = ["Stereographic_North_Pole", "Oblique_Stereographic", "sterea","Oblique Stereographic Alternative","Double_Stereographic"];
  var sterea = {
    init: init$r,
    forward: forward$q,
    inverse: inverse$q,
    names: names$r
  };

  function ssfn_(phit, sinphi, eccen) {
    sinphi *= eccen;
    return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));
  }

  function init$q() {

    // setting default parameters
    this.x0 = this.x0 || 0;
    this.y0 = this.y0 || 0;
    this.lat0 = this.lat0 || 0;
    this.long0 = this.long0 || 0;

    this.coslat0 = Math.cos(this.lat0);
    this.sinlat0 = Math.sin(this.lat0);
    if (this.sphere) {
      if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {
        this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));
      }
    }
    else {
      if (Math.abs(this.coslat0) <= EPSLN) {
        if (this.lat0 > 0) {
          //North pole
          //trace('stere:north pole');
          this.con = 1;
        }
        else {
          //South pole
          //trace('stere:south pole');
          this.con = -1;
        }
      }
      this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));
      if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN && Math.abs(Math.cos(this.lat_ts)) > EPSLN) {
        // When k0 is 1 (default value) and lat_ts is a vaild number and lat0 is at a pole and lat_ts is not at a pole
        // Recalculate k0 using formula 21-35 from p161 of Snyder, 1987
        this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));
      }
      this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);
      this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;
      this.cosX0 = Math.cos(this.X0);
      this.sinX0 = Math.sin(this.X0);
    }
  }

  // Stereographic forward equations--mapping lat,long to x,y
  function forward$p(p) {
    var lon = p.x;
    var lat = p.y;
    var sinlat = Math.sin(lat);
    var coslat = Math.cos(lat);
    var A, X, sinX, cosX, ts, rh;
    var dlon = adjust_lon(lon - this.long0);

    if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {
      //case of the origine point
      //trace('stere:this is the origin point');
      p.x = NaN;
      p.y = NaN;
      return p;
    }
    if (this.sphere) {
      //trace('stere:sphere case');
      A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));
      p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;
      p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;
      return p;
    }
    else {
      X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;
      cosX = Math.cos(X);
      sinX = Math.sin(X);
      if (Math.abs(this.coslat0) <= EPSLN) {
        ts = tsfnz(this.e, lat * this.con, this.con * sinlat);
        rh = 2 * this.a * this.k0 * ts / this.cons;
        p.x = this.x0 + rh * Math.sin(lon - this.long0);
        p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);
        //trace(p.toString());
        return p;
      }
      else if (Math.abs(this.sinlat0) < EPSLN) {
        //Eq
        //trace('stere:equateur');
        A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));
        p.y = A * sinX;
      }
      else {
        //other case
        //trace('stere:normal case');
        A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));
        p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;
      }
      p.x = A * cosX * Math.sin(dlon) + this.x0;
    }
    //trace(p.toString());
    return p;
  }

  //* Stereographic inverse equations--mapping x,y to lat/long
  function inverse$p(p) {
    p.x -= this.x0;
    p.y -= this.y0;
    var lon, lat, ts, ce, Chi;
    var rh = Math.sqrt(p.x * p.x + p.y * p.y);
    if (this.sphere) {
      var c = 2 * Math.atan(rh / (2 * this.a * this.k0));
      lon = this.long0;
      lat = this.lat0;
      if (rh <= EPSLN) {
        p.x = lon;
        p.y = lat;
        return p;
      }
      lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);
      if (Math.abs(this.coslat0) < EPSLN) {
        if (this.lat0 > 0) {
          lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));
        }
        else {
          lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));
        }
      }
      else {
        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));
      }
      p.x = lon;
      p.y = lat;
      return p;
    }
    else {
      if (Math.abs(this.coslat0) <= EPSLN) {
        if (rh <= EPSLN) {
          lat = this.lat0;
          lon = this.long0;
          p.x = lon;
          p.y = lat;
          //trace(p.toString());
          return p;
        }
        p.x *= this.con;
        p.y *= this.con;
        ts = rh * this.cons / (2 * this.a * this.k0);
        lat = this.con * phi2z(this.e, ts);
        lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, -1 * p.y));
      }
      else {
        ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));
        lon = this.long0;
        if (rh <= EPSLN) {
          Chi = this.X0;
        }
        else {
          Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);
          lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));
        }
        lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));
      }
    }
    p.x = lon;
    p.y = lat;

    //trace(p.toString());
    return p;

  }

  var names$q = ["stere", "Stereographic_South_Pole", "Polar Stereographic (variant B)", "Polar_Stereographic"];
  var stere = {
    init: init$q,
    forward: forward$p,
    inverse: inverse$p,
    names: names$q,
    ssfn_: ssfn_
  };

  /*
    references:
      Formules et constantes pour le Calcul pour la
      projection cylindrique conforme Ã  axe oblique et pour la transformation entre
      des systÃ¨mes de rÃ©fÃ©rence.
      http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf
    */

  function init$p() {
    var phy0 = this.lat0;
    this.lambda0 = this.long0;
    var sinPhy0 = Math.sin(phy0);
    var semiMajorAxis = this.a;
    var invF = this.rf;
    var flattening = 1 / invF;
    var e2 = 2 * flattening - Math.pow(flattening, 2);
    var e = this.e = Math.sqrt(e2);
    this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));
    this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));
    this.b0 = Math.asin(sinPhy0 / this.alpha);
    var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));
    var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));
    var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));
    this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;
  }

  function forward$o(p) {
    var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));
    var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));
    var S = -this.alpha * (Sa1 + Sa2) + this.K;

    // spheric latitude
    var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);

    // spheric longitude
    var I = this.alpha * (p.x - this.lambda0);

    // psoeudo equatorial rotation
    var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));

    var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));

    p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;
    p.x = this.R * rotI + this.x0;
    return p;
  }

  function inverse$o(p) {
    var Y = p.x - this.x0;
    var X = p.y - this.y0;

    var rotI = Y / this.R;
    var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);

    var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));
    var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));

    var lambda = this.lambda0 + I / this.alpha;

    var S = 0;
    var phy = b;
    var prevPhy = -1e3;
    var iteration = 0;
    while (Math.abs(phy - prevPhy) > 0.0000001) {
      if (++iteration > 20) {
        //...reportError("omercFwdInfinity");
        return;
      }
      //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));
      S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));
      prevPhy = phy;
      phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;
    }

    p.x = lambda;
    p.y = phy;
    return p;
  }

  var names$p = ["somerc"];
  var somerc = {
    init: init$p,
    forward: forward$o,
    inverse: inverse$o,
    names: names$p
  };

  var TOL = 1e-7;

  function isTypeA(P) {
    var typeAProjections = ['Hotine_Oblique_Mercator','Hotine_Oblique_Mercator_Azimuth_Natural_Origin'];
    var projectionName = typeof P.PROJECTION === "object" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;
    
    return 'no_uoff' in P || 'no_off' in P || typeAProjections.indexOf(projectionName) !== -1;
  }


  /* Initialize the Oblique Mercator  projection
      ------------------------------------------*/
  function init$o() {  
    var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0,
      gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0;
    
    // only Type A uses the no_off or no_uoff property
    // https://github.com/OSGeo/proj.4/issues/104
    this.no_off = isTypeA(this);
    this.no_rot = 'no_rot' in this;
    
    var alp = false;
    if ("alpha" in this) {
      alp = true;
    }

    var gam = false;
    if ("rectified_grid_angle" in this) {
      gam = true;
    }

    if (alp) {
      alpha_c = this.alpha;
    }
    
    if (gam) {
      gamma = (this.rectified_grid_angle * D2R$1);
    }
    
    if (alp || gam) {
      lamc = this.longc;
    } else {
      lam1 = this.long1;
      phi1 = this.lat1;
      lam2 = this.long2;
      phi2 = this.lat2;
      
      if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL ||
          Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL ||
          Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {
        throw new Error();
      }
    }
    
    var one_es = 1.0 - this.es;
    com = Math.sqrt(one_es);
    
    if (Math.abs(this.lat0) > EPSLN) {
      sinph0 = Math.sin(this.lat0);
      cosph0 = Math.cos(this.lat0);
      con = 1 - this.es * sinph0 * sinph0;
      this.B = cosph0 * cosph0;
      this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);
      this.A = this.B * this.k0 * com / con;
      D = this.B * com / (cosph0 * Math.sqrt(con));
      F = D * D -1;
      
      if (F <= 0) {
        F = 0;
      } else {
        F = Math.sqrt(F);
        if (this.lat0 < 0) {
          F = -F;
        }
      }
      
      this.E = F += D;
      this.E *= Math.pow(tsfnz(this.e, this.lat0, sinph0), this.B);
    } else {
      this.B = 1 / com;
      this.A = this.k0;
      this.E = D = F = 1;
    }
    
    if (alp || gam) {
      if (alp) {
        gamma0 = Math.asin(Math.sin(alpha_c) / D);
        if (!gam) {
          gamma = alpha_c;
        }
      } else {
        gamma0 = gamma;
        alpha_c = Math.asin(D * Math.sin(gamma0));
      }
      this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;
    } else {
      H = Math.pow(tsfnz(this.e, phi1, Math.sin(phi1)), this.B);
      L = Math.pow(tsfnz(this.e, phi2, Math.sin(phi2)), this.B);
      F = this.E / H;
      p = (L - H) / (L + H);
      J = this.E * this.E;
      J = (J - L * H) / (J + L * H);
      con = lam1 - lam2;
      
      if (con < -Math.pi) {
        lam2 -=TWO_PI;
      } else if (con > Math.pi) {
        lam2 += TWO_PI;
      }
      
      this.lam0 = adjust_lon(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);
      gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon(lam1 - this.lam0)) / (F - 1 / F));
      gamma = alpha_c = Math.asin(D * Math.sin(gamma0));
    }
    
    this.singam = Math.sin(gamma0);
    this.cosgam = Math.cos(gamma0);
    this.sinrot = Math.sin(gamma);
    this.cosrot = Math.cos(gamma);
    
    this.rB = 1 / this.B;
    this.ArB = this.A * this.rB;
    this.BrA = 1 / this.ArB;
    this.A * this.B;
    
    if (this.no_off) {
      this.u_0 = 0;
    } else {
      this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));
      
      if (this.lat0 < 0) {
        this.u_0 = - this.u_0;
      }  
    }
      
    F = 0.5 * gamma0;
    this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));
    this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));
  }


  /* Oblique Mercator forward equations--mapping lat,long to x,y
      ----------------------------------------------------------*/
  function forward$n(p) {
    var coords = {};
    var S, T, U, V, W, temp, u, v;
    p.x = p.x - this.lam0;
    
    if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {
      W = this.E / Math.pow(tsfnz(this.e, p.y, Math.sin(p.y)), this.B);
      
      temp = 1 / W;
      S = 0.5 * (W - temp);
      T = 0.5 * (W + temp);
      V = Math.sin(this.B * p.x);
      U = (S * this.singam - V * this.cosgam) / T;
          
      if (Math.abs(Math.abs(U) - 1.0) < EPSLN) {
        throw new Error();
      }
      
      v = 0.5 * this.ArB * Math.log((1 - U)/(1 + U));
      temp = Math.cos(this.B * p.x);
      
      if (Math.abs(temp) < TOL) {
        u = this.A * p.x;
      } else {
        u = this.ArB * Math.atan2((S * this.cosgam + V * this.singam), temp);
      }    
    } else {
      v = p.y > 0 ? this.v_pole_n : this.v_pole_s;
      u = this.ArB * p.y;
    }
       
    if (this.no_rot) {
      coords.x = u;
      coords.y = v;
    } else {
      u -= this.u_0;
      coords.x = v * this.cosrot + u * this.sinrot;
      coords.y = u * this.cosrot - v * this.sinrot;
    }
    
    coords.x = (this.a * coords.x + this.x0);
    coords.y = (this.a * coords.y + this.y0);
    
    return coords;
  }

  function inverse$n(p) {
    var u, v, Qp, Sp, Tp, Vp, Up;
    var coords = {};
    
    p.x = (p.x - this.x0) * (1.0 / this.a);
    p.y = (p.y - this.y0) * (1.0 / this.a);

    if (this.no_rot) {
      v = p.y;
      u = p.x;
    } else {
      v = p.x * this.cosrot - p.y * this.sinrot;
      u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;
    }
    
    Qp = Math.exp(-this.BrA * v);
    Sp = 0.5 * (Qp - 1 / Qp);
    Tp = 0.5 * (Qp + 1 / Qp);
    Vp = Math.sin(this.BrA * u);
    Up = (Vp * this.cosgam + Sp * this.singam) / Tp;
    
    if (Math.abs(Math.abs(Up) - 1) < EPSLN) {
      coords.x = 0;
      coords.y = Up < 0 ? -HALF_PI : HALF_PI;
    } else {
      coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));
      coords.y = phi2z(this.e, Math.pow(coords.y, 1 / this.B));
      
      if (coords.y === Infinity) {
        throw new Error();
      }
          
      coords.x = -this.rB * Math.atan2((Sp * this.cosgam - Vp * this.singam), Math.cos(this.BrA * u));
    }
    
    coords.x += this.lam0;
    
    return coords;
  }

  var names$o = ["Hotine_Oblique_Mercator", "Hotine Oblique Mercator", "Hotine_Oblique_Mercator_Azimuth_Natural_Origin", "Hotine_Oblique_Mercator_Two_Point_Natural_Origin", "Hotine_Oblique_Mercator_Azimuth_Center", "Oblique_Mercator", "omerc"];
  var omerc = {
    init: init$o,
    forward: forward$n,
    inverse: inverse$n,
    names: names$o
  };

  function init$n() {
    
    //double lat0;                    /* the reference latitude               */
    //double long0;                   /* the reference longitude              */
    //double lat1;                    /* first standard parallel              */
    //double lat2;                    /* second standard parallel             */
    //double r_maj;                   /* major axis                           */
    //double r_min;                   /* minor axis                           */
    //double false_east;              /* x offset in meters                   */
    //double false_north;             /* y offset in meters                   */
    
    //the above value can be set with proj4.defs
    //example: proj4.defs("EPSG:2154","+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs");

    if (!this.lat2) {
      this.lat2 = this.lat1;
    } //if lat2 is not defined
    if (!this.k0) {
      this.k0 = 1;
    }
    this.x0 = this.x0 || 0;
    this.y0 = this.y0 || 0;
    // Standard Parallels cannot be equal and on opposite sides of the equator
    if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
      return;
    }

    var temp = this.b / this.a;
    this.e = Math.sqrt(1 - temp * temp);

    var sin1 = Math.sin(this.lat1);
    var cos1 = Math.cos(this.lat1);
    var ms1 = msfnz(this.e, sin1, cos1);
    var ts1 = tsfnz(this.e, this.lat1, sin1);

    var sin2 = Math.sin(this.lat2);
    var cos2 = Math.cos(this.lat2);
    var ms2 = msfnz(this.e, sin2, cos2);
    var ts2 = tsfnz(this.e, this.lat2, sin2);

    var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));

    if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
      this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);
    }
    else {
      this.ns = sin1;
    }
    if (isNaN(this.ns)) {
      this.ns = sin1;
    }
    this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));
    this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);
    if (!this.title) {
      this.title = "Lambert Conformal Conic";
    }
  }

  // Lambert Conformal conic forward equations--mapping lat,long to x,y
  // -----------------------------------------------------------------
  function forward$m(p) {

    var lon = p.x;
    var lat = p.y;

    // singular cases :
    if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {
      lat = sign(lat) * (HALF_PI - 2 * EPSLN);
    }

    var con = Math.abs(Math.abs(lat) - HALF_PI);
    var ts, rh1;
    if (con > EPSLN) {
      ts = tsfnz(this.e, lat, Math.sin(lat));
      rh1 = this.a * this.f0 * Math.pow(ts, this.ns);
    }
    else {
      con = lat * this.ns;
      if (con <= 0) {
        return null;
      }
      rh1 = 0;
    }
    var theta = this.ns * adjust_lon(lon - this.long0);
    p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;
    p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;

    return p;
  }

  // Lambert Conformal Conic inverse equations--mapping x,y to lat/long
  // -----------------------------------------------------------------
  function inverse$m(p) {

    var rh1, con, ts;
    var lat, lon;
    var x = (p.x - this.x0) / this.k0;
    var y = (this.rh - (p.y - this.y0) / this.k0);
    if (this.ns > 0) {
      rh1 = Math.sqrt(x * x + y * y);
      con = 1;
    }
    else {
      rh1 = -Math.sqrt(x * x + y * y);
      con = -1;
    }
    var theta = 0;
    if (rh1 !== 0) {
      theta = Math.atan2((con * x), (con * y));
    }
    if ((rh1 !== 0) || (this.ns > 0)) {
      con = 1 / this.ns;
      ts = Math.pow((rh1 / (this.a * this.f0)), con);
      lat = phi2z(this.e, ts);
      if (lat === -9999) {
        return null;
      }
    }
    else {
      lat = -HALF_PI;
    }
    lon = adjust_lon(theta / this.ns + this.long0);

    p.x = lon;
    p.y = lat;
    return p;
  }

  var names$n = [
    "Lambert Tangential Conformal Conic Projection",
    "Lambert_Conformal_Conic",
    "Lambert_Conformal_Conic_1SP",
    "Lambert_Conformal_Conic_2SP",
    "lcc",
    "Lambert Conic Conformal (1SP)",
    "Lambert Conic Conformal (2SP)"
  ];

  var lcc = {
    init: init$n,
    forward: forward$m,
    inverse: inverse$m,
    names: names$n
  };

  function init$m() {
    this.a = 6377397.155;
    this.es = 0.006674372230614;
    this.e = Math.sqrt(this.es);
    if (!this.lat0) {
      this.lat0 = 0.863937979737193;
    }
    if (!this.long0) {
      this.long0 = 0.7417649320975901 - 0.308341501185665;
    }
    /* if scale not set default to 0.9999 */
    if (!this.k0) {
      this.k0 = 0.9999;
    }
    this.s45 = 0.785398163397448; /* 45 */
    this.s90 = 2 * this.s45;
    this.fi0 = this.lat0;
    this.e2 = this.es;
    this.e = Math.sqrt(this.e2);
    this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));
    this.uq = 1.04216856380474;
    this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);
    this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);
    this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;
    this.k1 = this.k0;
    this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));
    this.s0 = 1.37008346281555;
    this.n = Math.sin(this.s0);
    this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);
    this.ad = this.s90 - this.uq;
  }

  /* ellipsoid */
  /* calculate xy from lat/lon */
  /* Constants, identical to inverse transform function */
  function forward$l(p) {
    var gfi, u, deltav, s, d, eps, ro;
    var lon = p.x;
    var lat = p.y;
    var delta_lon = adjust_lon(lon - this.long0);
    /* Transformation */
    gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));
    u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);
    deltav = -delta_lon * this.alfa;
    s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));
    d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));
    eps = this.n * d;
    ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);
    p.y = ro * Math.cos(eps) / 1;
    p.x = ro * Math.sin(eps) / 1;

    if (!this.czech) {
      p.y *= -1;
      p.x *= -1;
    }
    return (p);
  }

  /* calculate lat/lon from xy */
  function inverse$l(p) {
    var u, deltav, s, d, eps, ro, fi1;
    var ok;

    /* Transformation */
    /* revert y, x*/
    var tmp = p.x;
    p.x = p.y;
    p.y = tmp;
    if (!this.czech) {
      p.y *= -1;
      p.x *= -1;
    }
    ro = Math.sqrt(p.x * p.x + p.y * p.y);
    eps = Math.atan2(p.y, p.x);
    d = eps / Math.sin(this.s0);
    s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);
    u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));
    deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));
    p.x = this.long0 - deltav / this.alfa;
    fi1 = u;
    ok = 0;
    var iter = 0;
    do {
      p.y = 2 * (Math.atan(Math.pow(this.k, -1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);
      if (Math.abs(fi1 - p.y) < 0.0000000001) {
        ok = 1;
      }
      fi1 = p.y;
      iter += 1;
    } while (ok === 0 && iter < 15);
    if (iter >= 15) {
      return null;
    }

    return (p);
  }

  var names$m = ["Krovak", "krovak"];
  var krovak = {
    init: init$m,
    forward: forward$l,
    inverse: inverse$l,
    names: names$m
  };

  function mlfn(e0, e1, e2, e3, phi) {
    return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));
  }

  function e0fn(x) {
    return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));
  }

  function e1fn(x) {
    return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));
  }

  function e2fn(x) {
    return (0.05859375 * x * x * (1 + 0.75 * x));
  }

  function e3fn(x) {
    return (x * x * x * (35 / 3072));
  }

  function gN(a, e, sinphi) {
    var temp = e * sinphi;
    return a / Math.sqrt(1 - temp * temp);
  }

  function adjust_lat(x) {
    return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));
  }

  function imlfn(ml, e0, e1, e2, e3) {
    var phi;
    var dphi;

    phi = ml / e0;
    for (var i = 0; i < 15; i++) {
      dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));
      phi += dphi;
      if (Math.abs(dphi) <= 0.0000000001) {
        return phi;
      }
    }

    //..reportError("IMLFN-CONV:Latitude failed to converge after 15 iterations");
    return NaN;
  }

  function init$l() {
    if (!this.sphere) {
      this.e0 = e0fn(this.es);
      this.e1 = e1fn(this.es);
      this.e2 = e2fn(this.es);
      this.e3 = e3fn(this.es);
      this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);
    }
  }

  /* Cassini forward equations--mapping lat,long to x,y
    -----------------------------------------------------------------------*/
  function forward$k(p) {

    /* Forward equations
        -----------------*/
    var x, y;
    var lam = p.x;
    var phi = p.y;
    lam = adjust_lon(lam - this.long0);

    if (this.sphere) {
      x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));
      y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);
    }
    else {
      //ellipsoid
      var sinphi = Math.sin(phi);
      var cosphi = Math.cos(phi);
      var nl = gN(this.a, this.e, sinphi);
      var tl = Math.tan(phi) * Math.tan(phi);
      var al = lam * Math.cos(phi);
      var asq = al * al;
      var cl = this.es * cosphi * cosphi / (1 - this.es);
      var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);

      x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));
      y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);


    }

    p.x = x + this.x0;
    p.y = y + this.y0;
    return p;
  }

  /* Inverse equations
    -----------------*/
  function inverse$k(p) {
    p.x -= this.x0;
    p.y -= this.y0;
    var x = p.x / this.a;
    var y = p.y / this.a;
    var phi, lam;

    if (this.sphere) {
      var dd = y + this.lat0;
      phi = Math.asin(Math.sin(dd) * Math.cos(x));
      lam = Math.atan2(Math.tan(x), Math.cos(dd));
    }
    else {
      /* ellipsoid */
      var ml1 = this.ml0 / this.a + y;
      var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);
      if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {
        p.x = this.long0;
        p.y = HALF_PI;
        if (y < 0) {
          p.y *= -1;
        }
        return p;
      }
      var nl1 = gN(this.a, this.e, Math.sin(phi1));

      var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);
      var tl1 = Math.pow(Math.tan(phi1), 2);
      var dl = x * this.a / nl1;
      var dsq = dl * dl;
      phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);
      lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);

    }

    p.x = adjust_lon(lam + this.long0);
    p.y = adjust_lat(phi);
    return p;

  }

  var names$l = ["Cassini", "Cassini_Soldner", "cass"];
  var cass = {
    init: init$l,
    forward: forward$k,
    inverse: inverse$k,
    names: names$l
  };

  function qsfnz(eccent, sinphi) {
    var con;
    if (eccent > 1.0e-7) {
      con = eccent * sinphi;
      return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));
    }
    else {
      return (2 * sinphi);
    }
  }

  /*
    reference
      "New Equal-Area Map Projections for Noncircular Regions", John P. Snyder,
      The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.
    */

  var S_POLE = 1;

  var N_POLE = 2;
  var EQUIT = 3;
  var OBLIQ = 4;

  /* Initialize the Lambert Azimuthal Equal Area projection
    ------------------------------------------------------*/
  function init$k() {
    var t = Math.abs(this.lat0);
    if (Math.abs(t - HALF_PI) < EPSLN) {
      this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;
    }
    else if (Math.abs(t) < EPSLN) {
      this.mode = this.EQUIT;
    }
    else {
      this.mode = this.OBLIQ;
    }
    if (this.es > 0) {
      var sinphi;

      this.qp = qsfnz(this.e, 1);
      this.mmf = 0.5 / (1 - this.es);
      this.apa = authset(this.es);
      switch (this.mode) {
      case this.N_POLE:
        this.dd = 1;
        break;
      case this.S_POLE:
        this.dd = 1;
        break;
      case this.EQUIT:
        this.rq = Math.sqrt(0.5 * this.qp);
        this.dd = 1 / this.rq;
        this.xmf = 1;
        this.ymf = 0.5 * this.qp;
        break;
      case this.OBLIQ:
        this.rq = Math.sqrt(0.5 * this.qp);
        sinphi = Math.sin(this.lat0);
        this.sinb1 = qsfnz(this.e, sinphi) / this.qp;
        this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);
        this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);
        this.ymf = (this.xmf = this.rq) / this.dd;
        this.xmf *= this.dd;
        break;
      }
    }
    else {
      if (this.mode === this.OBLIQ) {
        this.sinph0 = Math.sin(this.lat0);
        this.cosph0 = Math.cos(this.lat0);
      }
    }
  }

  /* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y
    -----------------------------------------------------------------------*/
  function forward$j(p) {

    /* Forward equations
        -----------------*/
    var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;
    var lam = p.x;
    var phi = p.y;

    lam = adjust_lon(lam - this.long0);
    if (this.sphere) {
      sinphi = Math.sin(phi);
      cosphi = Math.cos(phi);
      coslam = Math.cos(lam);
      if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
        y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;
        if (y <= EPSLN) {
          return null;
        }
        y = Math.sqrt(2 / y);
        x = y * cosphi * Math.sin(lam);
        y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
      }
      else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
        if (this.mode === this.N_POLE) {
          coslam = -coslam;
        }
        if (Math.abs(phi + this.lat0) < EPSLN) {
          return null;
        }
        y = FORTPI - phi * 0.5;
        y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));
        x = y * Math.sin(lam);
        y *= coslam;
      }
    }
    else {
      sinb = 0;
      cosb = 0;
      b = 0;
      coslam = Math.cos(lam);
      sinlam = Math.sin(lam);
      sinphi = Math.sin(phi);
      q = qsfnz(this.e, sinphi);
      if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
        sinb = q / this.qp;
        cosb = Math.sqrt(1 - sinb * sinb);
      }
      switch (this.mode) {
      case this.OBLIQ:
        b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;
        break;
      case this.EQUIT:
        b = 1 + cosb * coslam;
        break;
      case this.N_POLE:
        b = HALF_PI + phi;
        q = this.qp - q;
        break;
      case this.S_POLE:
        b = phi - HALF_PI;
        q = this.qp + q;
        break;
      }
      if (Math.abs(b) < EPSLN) {
        return null;
      }
      switch (this.mode) {
      case this.OBLIQ:
      case this.EQUIT:
        b = Math.sqrt(2 / b);
        if (this.mode === this.OBLIQ) {
          y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);
        }
        else {
          y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;
        }
        x = this.xmf * b * cosb * sinlam;
        break;
      case this.N_POLE:
      case this.S_POLE:
        if (q >= 0) {
          x = (b = Math.sqrt(q)) * sinlam;
          y = coslam * ((this.mode === this.S_POLE) ? b : -b);
        }
        else {
          x = y = 0;
        }
        break;
      }
    }

    p.x = this.a * x + this.x0;
    p.y = this.a * y + this.y0;
    return p;
  }

  /* Inverse equations
    -----------------*/
  function inverse$j(p) {
    p.x -= this.x0;
    p.y -= this.y0;
    var x = p.x / this.a;
    var y = p.y / this.a;
    var lam, phi, cCe, sCe, q, rho, ab;
    if (this.sphere) {
      var cosz = 0,
        rh, sinz = 0;

      rh = Math.sqrt(x * x + y * y);
      phi = rh * 0.5;
      if (phi > 1) {
        return null;
      }
      phi = 2 * Math.asin(phi);
      if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
        sinz = Math.sin(phi);
        cosz = Math.cos(phi);
      }
      switch (this.mode) {
      case this.EQUIT:
        phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);
        x *= sinz;
        y = cosz * rh;
        break;
      case this.OBLIQ:
        phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);
        x *= sinz * this.cosph0;
        y = (cosz - Math.sin(phi) * this.sinph0) * rh;
        break;
      case this.N_POLE:
        y = -y;
        phi = HALF_PI - phi;
        break;
      case this.S_POLE:
        phi -= HALF_PI;
        break;
      }
      lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);
    }
    else {
      ab = 0;
      if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
        x /= this.dd;
        y *= this.dd;
        rho = Math.sqrt(x * x + y * y);
        if (rho < EPSLN) {
          p.x = this.long0;
          p.y = this.lat0;
          return p;
        }
        sCe = 2 * Math.asin(0.5 * rho / this.rq);
        cCe = Math.cos(sCe);
        x *= (sCe = Math.sin(sCe));
        if (this.mode === this.OBLIQ) {
          ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;
          q = this.qp * ab;
          y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;
        }
        else {
          ab = y * sCe / rho;
          q = this.qp * ab;
          y = rho * cCe;
        }
      }
      else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
        if (this.mode === this.N_POLE) {
          y = -y;
        }
        q = (x * x + y * y);
        if (!q) {
          p.x = this.long0;
          p.y = this.lat0;
          return p;
        }
        ab = 1 - q / this.qp;
        if (this.mode === this.S_POLE) {
          ab = -ab;
        }
      }
      lam = Math.atan2(x, y);
      phi = authlat(Math.asin(ab), this.apa);
    }

    p.x = adjust_lon(this.long0 + lam);
    p.y = phi;
    return p;
  }

  /* determine latitude from authalic latitude */
  var P00 = 0.33333333333333333333;

  var P01 = 0.17222222222222222222;
  var P02 = 0.10257936507936507936;
  var P10 = 0.06388888888888888888;
  var P11 = 0.06640211640211640211;
  var P20 = 0.01641501294219154443;

  function authset(es) {
    var t;
    var APA = [];
    APA[0] = es * P00;
    t = es * es;
    APA[0] += t * P01;
    APA[1] = t * P10;
    t *= es;
    APA[0] += t * P02;
    APA[1] += t * P11;
    APA[2] = t * P20;
    return APA;
  }

  function authlat(beta, APA) {
    var t = beta + beta;
    return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));
  }

  var names$k = ["Lambert Azimuthal Equal Area", "Lambert_Azimuthal_Equal_Area", "laea"];
  var laea = {
    init: init$k,
    forward: forward$j,
    inverse: inverse$j,
    names: names$k,
    S_POLE: S_POLE,
    N_POLE: N_POLE,
    EQUIT: EQUIT,
    OBLIQ: OBLIQ
  };

  function asinz(x) {
    if (Math.abs(x) > 1) {
      x = (x > 1) ? 1 : -1;
    }
    return Math.asin(x);
  }

  function init$j() {

    if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
      return;
    }
    this.temp = this.b / this.a;
    this.es = 1 - Math.pow(this.temp, 2);
    this.e3 = Math.sqrt(this.es);

    this.sin_po = Math.sin(this.lat1);
    this.cos_po = Math.cos(this.lat1);
    this.t1 = this.sin_po;
    this.con = this.sin_po;
    this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);
    this.qs1 = qsfnz(this.e3, this.sin_po);

    this.sin_po = Math.sin(this.lat2);
    this.cos_po = Math.cos(this.lat2);
    this.t2 = this.sin_po;
    this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);
    this.qs2 = qsfnz(this.e3, this.sin_po);

    this.sin_po = Math.sin(this.lat0);
    this.cos_po = Math.cos(this.lat0);
    this.t3 = this.sin_po;
    this.qs0 = qsfnz(this.e3, this.sin_po);

    if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
      this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);
    }
    else {
      this.ns0 = this.con;
    }
    this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;
    this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;
  }

  /* Albers Conical Equal Area forward equations--mapping lat,long to x,y
    -------------------------------------------------------------------*/
  function forward$i(p) {

    var lon = p.x;
    var lat = p.y;

    this.sin_phi = Math.sin(lat);
    this.cos_phi = Math.cos(lat);

    var qs = qsfnz(this.e3, this.sin_phi);
    var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;
    var theta = this.ns0 * adjust_lon(lon - this.long0);
    var x = rh1 * Math.sin(theta) + this.x0;
    var y = this.rh - rh1 * Math.cos(theta) + this.y0;

    p.x = x;
    p.y = y;
    return p;
  }

  function inverse$i(p) {
    var rh1, qs, con, theta, lon, lat;

    p.x -= this.x0;
    p.y = this.rh - p.y + this.y0;
    if (this.ns0 >= 0) {
      rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
      con = 1;
    }
    else {
      rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
      con = -1;
    }
    theta = 0;
    if (rh1 !== 0) {
      theta = Math.atan2(con * p.x, con * p.y);
    }
    con = rh1 * this.ns0 / this.a;
    if (this.sphere) {
      lat = Math.asin((this.c - con * con) / (2 * this.ns0));
    }
    else {
      qs = (this.c - con * con) / this.ns0;
      lat = this.phi1z(this.e3, qs);
    }

    lon = adjust_lon(theta / this.ns0 + this.long0);
    p.x = lon;
    p.y = lat;
    return p;
  }

  /* Function to compute phi1, the latitude for the inverse of the
     Albers Conical Equal-Area projection.
  -------------------------------------------*/
  function phi1z(eccent, qs) {
    var sinphi, cosphi, con, com, dphi;
    var phi = asinz(0.5 * qs);
    if (eccent < EPSLN) {
      return phi;
    }

    var eccnts = eccent * eccent;
    for (var i = 1; i <= 25; i++) {
      sinphi = Math.sin(phi);
      cosphi = Math.cos(phi);
      con = eccent * sinphi;
      com = 1 - con * con;
      dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
      phi = phi + dphi;
      if (Math.abs(dphi) <= 1e-7) {
        return phi;
      }
    }
    return null;
  }

  var names$j = ["Albers_Conic_Equal_Area", "Albers", "aea"];
  var aea = {
    init: init$j,
    forward: forward$i,
    inverse: inverse$i,
    names: names$j,
    phi1z: phi1z
  };

  /*
    reference:
      Wolfram Mathworld "Gnomonic Projection"
      http://mathworld.wolfram.com/GnomonicProjection.html
      Accessed: 12th November 2009
    */
  function init$i() {

    /* Place parameters in static storage for common use
        -------------------------------------------------*/
    this.sin_p14 = Math.sin(this.lat0);
    this.cos_p14 = Math.cos(this.lat0);
    // Approximation for projecting points to the horizon (infinity)
    this.infinity_dist = 1000 * this.a;
    this.rc = 1;
  }

  /* Gnomonic forward equations--mapping lat,long to x,y
      ---------------------------------------------------*/
  function forward$h(p) {
    var sinphi, cosphi; /* sin and cos value        */
    var dlon; /* delta longitude value      */
    var coslon; /* cos of longitude        */
    var ksp; /* scale factor          */
    var g;
    var x, y;
    var lon = p.x;
    var lat = p.y;
    /* Forward equations
        -----------------*/
    dlon = adjust_lon(lon - this.long0);

    sinphi = Math.sin(lat);
    cosphi = Math.cos(lat);

    coslon = Math.cos(dlon);
    g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
    ksp = 1;
    if ((g > 0) || (Math.abs(g) <= EPSLN)) {
      x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;
      y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;
    }
    else {

      // Point is in the opposing hemisphere and is unprojectable
      // We still need to return a reasonable point, so we project
      // to infinity, on a bearing
      // equivalent to the northern hemisphere equivalent
      // This is a reasonable approximation for short shapes and lines that
      // straddle the horizon.

      x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);
      y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);

    }
    p.x = x;
    p.y = y;
    return p;
  }

  function inverse$h(p) {
    var rh; /* Rho */
    var sinc, cosc;
    var c;
    var lon, lat;

    /* Inverse equations
        -----------------*/
    p.x = (p.x - this.x0) / this.a;
    p.y = (p.y - this.y0) / this.a;

    p.x /= this.k0;
    p.y /= this.k0;

    if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {
      c = Math.atan2(rh, this.rc);
      sinc = Math.sin(c);
      cosc = Math.cos(c);

      lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);
      lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);
      lon = adjust_lon(this.long0 + lon);
    }
    else {
      lat = this.phic0;
      lon = 0;
    }

    p.x = lon;
    p.y = lat;
    return p;
  }

  var names$i = ["gnom"];
  var gnom = {
    init: init$i,
    forward: forward$h,
    inverse: inverse$h,
    names: names$i
  };

  function iqsfnz(eccent, q) {
    var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));
    if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {
      if (q < 0) {
        return (-1 * HALF_PI);
      }
      else {
        return HALF_PI;
      }
    }
    //var phi = 0.5* q/(1-eccent*eccent);
    var phi = Math.asin(0.5 * q);
    var dphi;
    var sin_phi;
    var cos_phi;
    var con;
    for (var i = 0; i < 30; i++) {
      sin_phi = Math.sin(phi);
      cos_phi = Math.cos(phi);
      con = eccent * sin_phi;
      dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
      phi += dphi;
      if (Math.abs(dphi) <= 0.0000000001) {
        return phi;
      }
    }

    //console.log("IQSFN-CONV:Latitude failed to converge after 30 iterations");
    return NaN;
  }

  /*
    reference:
      "Cartographic Projection Procedures for the UNIX Environment-
      A User's Manual" by Gerald I. Evenden,
      USGS Open File Report 90-284and Release 4 Interim Reports (2003)
  */
  function init$h() {
    //no-op
    if (!this.sphere) {
      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
    }
  }

  /* Cylindrical Equal Area forward equations--mapping lat,long to x,y
      ------------------------------------------------------------*/
  function forward$g(p) {
    var lon = p.x;
    var lat = p.y;
    var x, y;
    /* Forward equations
        -----------------*/
    var dlon = adjust_lon(lon - this.long0);
    if (this.sphere) {
      x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);
      y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);
    }
    else {
      var qs = qsfnz(this.e, Math.sin(lat));
      x = this.x0 + this.a * this.k0 * dlon;
      y = this.y0 + this.a * qs * 0.5 / this.k0;
    }

    p.x = x;
    p.y = y;
    return p;
  }

  /* Cylindrical Equal Area inverse equations--mapping x,y to lat/long
      ------------------------------------------------------------*/
  function inverse$g(p) {
    p.x -= this.x0;
    p.y -= this.y0;
    var lon, lat;

    if (this.sphere) {
      lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));
      lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));
    }
    else {
      lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);
      lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));
    }

    p.x = lon;
    p.y = lat;
    return p;
  }

  var names$h = ["cea"];
  var cea = {
    init: init$h,
    forward: forward$g,
    inverse: inverse$g,
    names: names$h
  };

  function init$g() {

    this.x0 = this.x0 || 0;
    this.y0 = this.y0 || 0;
    this.lat0 = this.lat0 || 0;
    this.long0 = this.long0 || 0;
    this.lat_ts = this.lat_ts || 0;
    this.title = this.title || "Equidistant Cylindrical (Plate Carre)";

    this.rc = Math.cos(this.lat_ts);
  }

  // forward equations--mapping lat,long to x,y
  // -----------------------------------------------------------------
  function forward$f(p) {

    var lon = p.x;
    var lat = p.y;

    var dlon = adjust_lon(lon - this.long0);
    var dlat = adjust_lat(lat - this.lat0);
    p.x = this.x0 + (this.a * dlon * this.rc);
    p.y = this.y0 + (this.a * dlat);
    return p;
  }

  // inverse equations--mapping x,y to lat/long
  // -----------------------------------------------------------------
  function inverse$f(p) {

    var x = p.x;
    var y = p.y;

    p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));
    p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));
    return p;
  }

  var names$g = ["Equirectangular", "Equidistant_Cylindrical", "eqc"];
  var eqc = {
    init: init$g,
    forward: forward$f,
    inverse: inverse$f,
    names: names$g
  };

  var MAX_ITER$1 = 20;

  function init$f() {
    /* Place parameters in static storage for common use
        -------------------------------------------------*/
    this.temp = this.b / this.a;
    this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles
    this.e = Math.sqrt(this.es);
    this.e0 = e0fn(this.es);
    this.e1 = e1fn(this.es);
    this.e2 = e2fn(this.es);
    this.e3 = e3fn(this.es);
    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas
  }

  /* Polyconic forward equations--mapping lat,long to x,y
      ---------------------------------------------------*/
  function forward$e(p) {
    var lon = p.x;
    var lat = p.y;
    var x, y, el;
    var dlon = adjust_lon(lon - this.long0);
    el = dlon * Math.sin(lat);
    if (this.sphere) {
      if (Math.abs(lat) <= EPSLN) {
        x = this.a * dlon;
        y = -1 * this.a * this.lat0;
      }
      else {
        x = this.a * Math.sin(el) / Math.tan(lat);
        y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));
      }
    }
    else {
      if (Math.abs(lat) <= EPSLN) {
        x = this.a * dlon;
        y = -1 * this.ml0;
      }
      else {
        var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);
        x = nl * Math.sin(el);
        y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));
      }

    }
    p.x = x + this.x0;
    p.y = y + this.y0;
    return p;
  }

  /* Inverse equations
    -----------------*/
  function inverse$e(p) {
    var lon, lat, x, y, i;
    var al, bl;
    var phi, dphi;
    x = p.x - this.x0;
    y = p.y - this.y0;

    if (this.sphere) {
      if (Math.abs(y + this.a * this.lat0) <= EPSLN) {
        lon = adjust_lon(x / this.a + this.long0);
        lat = 0;
      }
      else {
        al = this.lat0 + y / this.a;
        bl = x * x / this.a / this.a + al * al;
        phi = al;
        var tanphi;
        for (i = MAX_ITER$1; i; --i) {
          tanphi = Math.tan(phi);
          dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);
          phi += dphi;
          if (Math.abs(dphi) <= EPSLN) {
            lat = phi;
            break;
          }
        }
        lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));
      }
    }
    else {
      if (Math.abs(y + this.ml0) <= EPSLN) {
        lat = 0;
        lon = adjust_lon(this.long0 + x / this.a);
      }
      else {

        al = (this.ml0 + y) / this.a;
        bl = x * x / this.a / this.a + al * al;
        phi = al;
        var cl, mln, mlnp, ma;
        var con;
        for (i = MAX_ITER$1; i; --i) {
          con = this.e * Math.sin(phi);
          cl = Math.sqrt(1 - con * con) * Math.tan(phi);
          mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);
          mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);
          ma = mln / this.a;
          dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);
          phi -= dphi;
          if (Math.abs(dphi) <= EPSLN) {
            lat = phi;
            break;
          }
        }

        //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);
        cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);
        lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));
      }
    }

    p.x = lon;
    p.y = lat;
    return p;
  }

  var names$f = ["Polyconic", "poly"];
  var poly = {
    init: init$f,
    forward: forward$e,
    inverse: inverse$e,
    names: names$f
  };

  function init$e() {
    this.A = [];
    this.A[1] = 0.6399175073;
    this.A[2] = -0.1358797613;
    this.A[3] = 0.063294409;
    this.A[4] = -0.02526853;
    this.A[5] = 0.0117879;
    this.A[6] = -55161e-7;
    this.A[7] = 0.0026906;
    this.A[8] = -1333e-6;
    this.A[9] = 0.00067;
    this.A[10] = -34e-5;

    this.B_re = [];
    this.B_im = [];
    this.B_re[1] = 0.7557853228;
    this.B_im[1] = 0;
    this.B_re[2] = 0.249204646;
    this.B_im[2] = 0.003371507;
    this.B_re[3] = -1541739e-9;
    this.B_im[3] = 0.041058560;
    this.B_re[4] = -0.10162907;
    this.B_im[4] = 0.01727609;
    this.B_re[5] = -0.26623489;
    this.B_im[5] = -0.36249218;
    this.B_re[6] = -0.6870983;
    this.B_im[6] = -1.1651967;

    this.C_re = [];
    this.C_im = [];
    this.C_re[1] = 1.3231270439;
    this.C_im[1] = 0;
    this.C_re[2] = -0.577245789;
    this.C_im[2] = -7809598e-9;
    this.C_re[3] = 0.508307513;
    this.C_im[3] = -0.112208952;
    this.C_re[4] = -0.15094762;
    this.C_im[4] = 0.18200602;
    this.C_re[5] = 1.01418179;
    this.C_im[5] = 1.64497696;
    this.C_re[6] = 1.9660549;
    this.C_im[6] = 2.5127645;

    this.D = [];
    this.D[1] = 1.5627014243;
    this.D[2] = 0.5185406398;
    this.D[3] = -0.03333098;
    this.D[4] = -0.1052906;
    this.D[5] = -0.0368594;
    this.D[6] = 0.007317;
    this.D[7] = 0.01220;
    this.D[8] = 0.00394;
    this.D[9] = -13e-4;
  }

  /**
      New Zealand Map Grid Forward  - long/lat to x/y
      long/lat in radians
    */
  function forward$d(p) {
    var n;
    var lon = p.x;
    var lat = p.y;

    var delta_lat = lat - this.lat0;
    var delta_lon = lon - this.long0;

    // 1. Calculate d_phi and d_psi    ...                          // and d_lambda
    // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.
    var d_phi = delta_lat / SEC_TO_RAD * 1E-5;
    var d_lambda = delta_lon;
    var d_phi_n = 1; // d_phi^0

    var d_psi = 0;
    for (n = 1; n <= 10; n++) {
      d_phi_n = d_phi_n * d_phi;
      d_psi = d_psi + this.A[n] * d_phi_n;
    }

    // 2. Calculate theta
    var th_re = d_psi;
    var th_im = d_lambda;

    // 3. Calculate z
    var th_n_re = 1;
    var th_n_im = 0; // theta^0
    var th_n_re1;
    var th_n_im1;

    var z_re = 0;
    var z_im = 0;
    for (n = 1; n <= 6; n++) {
      th_n_re1 = th_n_re * th_re - th_n_im * th_im;
      th_n_im1 = th_n_im * th_re + th_n_re * th_im;
      th_n_re = th_n_re1;
      th_n_im = th_n_im1;
      z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;
      z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;
    }

    // 4. Calculate easting and northing
    p.x = (z_im * this.a) + this.x0;
    p.y = (z_re * this.a) + this.y0;

    return p;
  }

  /**
      New Zealand Map Grid Inverse  -  x/y to long/lat
    */
  function inverse$d(p) {
    var n;
    var x = p.x;
    var y = p.y;

    var delta_x = x - this.x0;
    var delta_y = y - this.y0;

    // 1. Calculate z
    var z_re = delta_y / this.a;
    var z_im = delta_x / this.a;

    // 2a. Calculate theta - first approximation gives km accuracy
    var z_n_re = 1;
    var z_n_im = 0; // z^0
    var z_n_re1;
    var z_n_im1;

    var th_re = 0;
    var th_im = 0;
    for (n = 1; n <= 6; n++) {
      z_n_re1 = z_n_re * z_re - z_n_im * z_im;
      z_n_im1 = z_n_im * z_re + z_n_re * z_im;
      z_n_re = z_n_re1;
      z_n_im = z_n_im1;
      th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;
      th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;
    }

    // 2b. Iterate to refine the accuracy of the calculation
    //        0 iterations gives km accuracy
    //        1 iteration gives m accuracy -- good enough for most mapping applications
    //        2 iterations bives mm accuracy
    for (var i = 0; i < this.iterations; i++) {
      var th_n_re = th_re;
      var th_n_im = th_im;
      var th_n_re1;
      var th_n_im1;

      var num_re = z_re;
      var num_im = z_im;
      for (n = 2; n <= 6; n++) {
        th_n_re1 = th_n_re * th_re - th_n_im * th_im;
        th_n_im1 = th_n_im * th_re + th_n_re * th_im;
        th_n_re = th_n_re1;
        th_n_im = th_n_im1;
        num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
        num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
      }

      th_n_re = 1;
      th_n_im = 0;
      var den_re = this.B_re[1];
      var den_im = this.B_im[1];
      for (n = 2; n <= 6; n++) {
        th_n_re1 = th_n_re * th_re - th_n_im * th_im;
        th_n_im1 = th_n_im * th_re + th_n_re * th_im;
        th_n_re = th_n_re1;
        th_n_im = th_n_im1;
        den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
        den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
      }

      // Complex division
      var den2 = den_re * den_re + den_im * den_im;
      th_re = (num_re * den_re + num_im * den_im) / den2;
      th_im = (num_im * den_re - num_re * den_im) / den2;
    }

    // 3. Calculate d_phi              ...                                    // and d_lambda
    var d_psi = th_re;
    var d_lambda = th_im;
    var d_psi_n = 1; // d_psi^0

    var d_phi = 0;
    for (n = 1; n <= 9; n++) {
      d_psi_n = d_psi_n * d_psi;
      d_phi = d_phi + this.D[n] * d_psi_n;
    }

    // 4. Calculate latitude and longitude
    // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.
    var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);
    var lon = this.long0 + d_lambda;

    p.x = lon;
    p.y = lat;

    return p;
  }

  var names$e = ["New_Zealand_Map_Grid", "nzmg"];
  var nzmg = {
    init: init$e,
    forward: forward$d,
    inverse: inverse$d,
    names: names$e
  };

  /*
    reference
      "New Equal-Area Map Projections for Noncircular Regions", John P. Snyder,
      The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.
    */


  /* Initialize the Miller Cylindrical projection
    -------------------------------------------*/
  function init$d() {
    //no-op
  }

  /* Miller Cylindrical forward equations--mapping lat,long to x,y
      ------------------------------------------------------------*/
  function forward$c(p) {
    var lon = p.x;
    var lat = p.y;
    /* Forward equations
        -----------------*/
    var dlon = adjust_lon(lon - this.long0);
    var x = this.x0 + this.a * dlon;
    var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;

    p.x = x;
    p.y = y;
    return p;
  }

  /* Miller Cylindrical inverse equations--mapping x,y to lat/long
      ------------------------------------------------------------*/
  function inverse$c(p) {
    p.x -= this.x0;
    p.y -= this.y0;

    var lon = adjust_lon(this.long0 + p.x / this.a);
    var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);

    p.x = lon;
    p.y = lat;
    return p;
  }

  var names$d = ["Miller_Cylindrical", "mill"];
  var mill = {
    init: init$d,
    forward: forward$c,
    inverse: inverse$c,
    names: names$d
  };

  var MAX_ITER = 20;


  function init$c() {
    /* Place parameters in static storage for common use
      -------------------------------------------------*/


    if (!this.sphere) {
      this.en = pj_enfn(this.es);
    }
    else {
      this.n = 1;
      this.m = 0;
      this.es = 0;
      this.C_y = Math.sqrt((this.m + 1) / this.n);
      this.C_x = this.C_y / (this.m + 1);
    }

  }

  /* Sinusoidal forward equations--mapping lat,long to x,y
    -----------------------------------------------------*/
  function forward$b(p) {
    var x, y;
    var lon = p.x;
    var lat = p.y;
    /* Forward equations
      -----------------*/
    lon = adjust_lon(lon - this.long0);

    if (this.sphere) {
      if (!this.m) {
        lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;
      }
      else {
        var k = this.n * Math.sin(lat);
        for (var i = MAX_ITER; i; --i) {
          var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));
          lat -= V;
          if (Math.abs(V) < EPSLN) {
            break;
          }
        }
      }
      x = this.a * this.C_x * lon * (this.m + Math.cos(lat));
      y = this.a * this.C_y * lat;

    }
    else {

      var s = Math.sin(lat);
      var c = Math.cos(lat);
      y = this.a * pj_mlfn(lat, s, c, this.en);
      x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);
    }

    p.x = x;
    p.y = y;
    return p;
  }

  function inverse$b(p) {
    var lat, temp, lon, s;

    p.x -= this.x0;
    lon = p.x / this.a;
    p.y -= this.y0;
    lat = p.y / this.a;

    if (this.sphere) {
      lat /= this.C_y;
      lon = lon / (this.C_x * (this.m + Math.cos(lat)));
      if (this.m) {
        lat = asinz((this.m * lat + Math.sin(lat)) / this.n);
      }
      else if (this.n !== 1) {
        lat = asinz(Math.sin(lat) / this.n);
      }
      lon = adjust_lon(lon + this.long0);
      lat = adjust_lat(lat);
    }
    else {
      lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);
      s = Math.abs(lat);
      if (s < HALF_PI) {
        s = Math.sin(lat);
        temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));
        //temp = this.long0 + p.x / (this.a * Math.cos(lat));
        lon = adjust_lon(temp);
      }
      else if ((s - EPSLN) < HALF_PI) {
        lon = this.long0;
      }
    }
    p.x = lon;
    p.y = lat;
    return p;
  }

  var names$c = ["Sinusoidal", "sinu"];
  var sinu = {
    init: init$c,
    forward: forward$b,
    inverse: inverse$b,
    names: names$c
  };

  function init$b() {}
  /* Mollweide forward equations--mapping lat,long to x,y
      ----------------------------------------------------*/
  function forward$a(p) {

    /* Forward equations
        -----------------*/
    var lon = p.x;
    var lat = p.y;

    var delta_lon = adjust_lon(lon - this.long0);
    var theta = lat;
    var con = Math.PI * Math.sin(lat);

    /* Iterate using the Newton-Raphson method to find theta
        -----------------------------------------------------*/
    while (true) {
      var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));
      theta += delta_theta;
      if (Math.abs(delta_theta) < EPSLN) {
        break;
      }
    }
    theta /= 2;

    /* If the latitude is 90 deg, force the x coordinate to be "0 + false easting"
         this is done here because of precision problems with "cos(theta)"
         --------------------------------------------------------------------------*/
    if (Math.PI / 2 - Math.abs(lat) < EPSLN) {
      delta_lon = 0;
    }
    var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;
    var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;

    p.x = x;
    p.y = y;
    return p;
  }

  function inverse$a(p) {
    var theta;
    var arg;

    /* Inverse equations
        -----------------*/
    p.x -= this.x0;
    p.y -= this.y0;
    arg = p.y / (1.4142135623731 * this.a);

    /* Because of division by zero problems, 'arg' can not be 1.  Therefore
         a number very close to one is used instead.
         -------------------------------------------------------------------*/
    if (Math.abs(arg) > 0.999999999999) {
      arg = 0.999999999999;
    }
    theta = Math.asin(arg);
    var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));
    if (lon < (-Math.PI)) {
      lon = -Math.PI;
    }
    if (lon > Math.PI) {
      lon = Math.PI;
    }
    arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;
    if (Math.abs(arg) > 1) {
      arg = 1;
    }
    var lat = Math.asin(arg);

    p.x = lon;
    p.y = lat;
    return p;
  }

  var names$b = ["Mollweide", "moll"];
  var moll = {
    init: init$b,
    forward: forward$a,
    inverse: inverse$a,
    names: names$b
  };

  function init$a() {

    /* Place parameters in static storage for common use
        -------------------------------------------------*/
    // Standard Parallels cannot be equal and on opposite sides of the equator
    if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
      return;
    }
    this.lat2 = this.lat2 || this.lat1;
    this.temp = this.b / this.a;
    this.es = 1 - Math.pow(this.temp, 2);
    this.e = Math.sqrt(this.es);
    this.e0 = e0fn(this.es);
    this.e1 = e1fn(this.es);
    this.e2 = e2fn(this.es);
    this.e3 = e3fn(this.es);

    this.sinphi = Math.sin(this.lat1);
    this.cosphi = Math.cos(this.lat1);

    this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);
    this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);

    if (Math.abs(this.lat1 - this.lat2) < EPSLN) {
      this.ns = this.sinphi;
    }
    else {
      this.sinphi = Math.sin(this.lat2);
      this.cosphi = Math.cos(this.lat2);
      this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);
      this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);
      this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);
    }
    this.g = this.ml1 + this.ms1 / this.ns;
    this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);
    this.rh = this.a * (this.g - this.ml0);
  }

  /* Equidistant Conic forward equations--mapping lat,long to x,y
    -----------------------------------------------------------*/
  function forward$9(p) {
    var lon = p.x;
    var lat = p.y;
    var rh1;

    /* Forward equations
        -----------------*/
    if (this.sphere) {
      rh1 = this.a * (this.g - lat);
    }
    else {
      var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);
      rh1 = this.a * (this.g - ml);
    }
    var theta = this.ns * adjust_lon(lon - this.long0);
    var x = this.x0 + rh1 * Math.sin(theta);
    var y = this.y0 + this.rh - rh1 * Math.cos(theta);
    p.x = x;
    p.y = y;
    return p;
  }

  /* Inverse equations
    -----------------*/
  function inverse$9(p) {
    p.x -= this.x0;
    p.y = this.rh - p.y + this.y0;
    var con, rh1, lat, lon;
    if (this.ns >= 0) {
      rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
      con = 1;
    }
    else {
      rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
      con = -1;
    }
    var theta = 0;
    if (rh1 !== 0) {
      theta = Math.atan2(con * p.x, con * p.y);
    }

    if (this.sphere) {
      lon = adjust_lon(this.long0 + theta / this.ns);
      lat = adjust_lat(this.g - rh1 / this.a);
      p.x = lon;
      p.y = lat;
      return p;
    }
    else {
      var ml = this.g - rh1 / this.a;
      lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);
      lon = adjust_lon(this.long0 + theta / this.ns);
      p.x = lon;
      p.y = lat;
      return p;
    }

  }

  var names$a = ["Equidistant_Conic", "eqdc"];
  var eqdc = {
    init: init$a,
    forward: forward$9,
    inverse: inverse$9,
    names: names$a
  };

  /* Initialize the Van Der Grinten projection
    ----------------------------------------*/
  function init$9() {
    //this.R = 6370997; //Radius of earth
    this.R = this.a;
  }

  function forward$8(p) {

    var lon = p.x;
    var lat = p.y;

    /* Forward equations
      -----------------*/
    var dlon = adjust_lon(lon - this.long0);
    var x, y;

    if (Math.abs(lat) <= EPSLN) {
      x = this.x0 + this.R * dlon;
      y = this.y0;
    }
    var theta = asinz(2 * Math.abs(lat / Math.PI));
    if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {
      x = this.x0;
      if (lat >= 0) {
        y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);
      }
      else {
        y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);
      }
      //  return(OK);
    }
    var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));
    var asq = al * al;
    var sinth = Math.sin(theta);
    var costh = Math.cos(theta);

    var g = costh / (sinth + costh - 1);
    var gsq = g * g;
    var m = g * (2 / sinth - 1);
    var msq = m * m;
    var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);
    if (dlon < 0) {
      con = -con;
    }
    x = this.x0 + con;
    //con = Math.abs(con / (Math.PI * this.R));
    var q = asq + g;
    con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);
    if (lat >= 0) {
      //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
      y = this.y0 + con;
    }
    else {
      //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
      y = this.y0 - con;
    }
    p.x = x;
    p.y = y;
    return p;
  }

  /* Van Der Grinten inverse equations--mapping x,y to lat/long
    ---------------------------------------------------------*/
  function inverse$8(p) {
    var lon, lat;
    var xx, yy, xys, c1, c2, c3;
    var a1;
    var m1;
    var con;
    var th1;
    var d;

    /* inverse equations
      -----------------*/
    p.x -= this.x0;
    p.y -= this.y0;
    con = Math.PI * this.R;
    xx = p.x / con;
    yy = p.y / con;
    xys = xx * xx + yy * yy;
    c1 = -Math.abs(yy) * (1 + xys);
    c2 = c1 - 2 * yy * yy + xx * xx;
    c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;
    d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;
    a1 = (c1 - c2 * c2 / 3 / c3) / c3;
    m1 = 2 * Math.sqrt(-a1 / 3);
    con = ((3 * d) / a1) / m1;
    if (Math.abs(con) > 1) {
      if (con >= 0) {
        con = 1;
      }
      else {
        con = -1;
      }
    }
    th1 = Math.acos(con) / 3;
    if (p.y >= 0) {
      lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
    }
    else {
      lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
    }

    if (Math.abs(xx) < EPSLN) {
      lon = this.long0;
    }
    else {
      lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);
    }

    p.x = lon;
    p.y = lat;
    return p;
  }

  var names$9 = ["Van_der_Grinten_I", "VanDerGrinten", "vandg"];
  var vandg = {
    init: init$9,
    forward: forward$8,
    inverse: inverse$8,
    names: names$9
  };

  function init$8() {
    this.sin_p12 = Math.sin(this.lat0);
    this.cos_p12 = Math.cos(this.lat0);
  }

  function forward$7(p) {
    var lon = p.x;
    var lat = p.y;
    var sinphi = Math.sin(p.y);
    var cosphi = Math.cos(p.y);
    var dlon = adjust_lon(lon - this.long0);
    var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;
    if (this.sphere) {
      if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
        //North Pole case
        p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);
        p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);
        return p;
      }
      else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
        //South Pole case
        p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);
        p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);
        return p;
      }
      else {
        //default case
        cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);
        c = Math.acos(cos_c);
        kp = c ? c / Math.sin(c) : 1;
        p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);
        p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));
        return p;
      }
    }
    else {
      e0 = e0fn(this.es);
      e1 = e1fn(this.es);
      e2 = e2fn(this.es);
      e3 = e3fn(this.es);
      if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
        //North Pole case
        Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
        Ml = this.a * mlfn(e0, e1, e2, e3, lat);
        p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);
        p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);
        return p;
      }
      else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
        //South Pole case
        Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
        Ml = this.a * mlfn(e0, e1, e2, e3, lat);
        p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);
        p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);
        return p;
      }
      else {
        //Default case
        tanphi = sinphi / cosphi;
        Nl1 = gN(this.a, this.e, this.sin_p12);
        Nl = gN(this.a, this.e, sinphi);
        psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));
        Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));
        if (Az === 0) {
          s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
        }
        else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {
          s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
        }
        else {
          s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));
        }
        G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);
        H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);
        GH = G * H;
        Hs = H * H;
        s2 = s * s;
        s3 = s2 * s;
        s4 = s3 * s;
        s5 = s4 * s;
        c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);
        p.x = this.x0 + c * Math.sin(Az);
        p.y = this.y0 + c * Math.cos(Az);
        return p;
      }
    }


  }

  function inverse$7(p) {
    p.x -= this.x0;
    p.y -= this.y0;
    var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;
    if (this.sphere) {
      rh = Math.sqrt(p.x * p.x + p.y * p.y);
      if (rh > (2 * HALF_PI * this.a)) {
        return;
      }
      z = rh / this.a;

      sinz = Math.sin(z);
      cosz = Math.cos(z);

      lon = this.long0;
      if (Math.abs(rh) <= EPSLN) {
        lat = this.lat0;
      }
      else {
        lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);
        con = Math.abs(this.lat0) - HALF_PI;
        if (Math.abs(con) <= EPSLN) {
          if (this.lat0 >= 0) {
            lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));
          }
          else {
            lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));
          }
        }
        else {
          /*con = cosz - this.sin_p12 * Math.sin(lat);
          if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {
            //no-op, just keep the lon value as is
          } else {
            var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));
            lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));
          }*/
          lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));
        }
      }

      p.x = lon;
      p.y = lat;
      return p;
    }
    else {
      e0 = e0fn(this.es);
      e1 = e1fn(this.es);
      e2 = e2fn(this.es);
      e3 = e3fn(this.es);
      if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
        //North pole case
        Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
        rh = Math.sqrt(p.x * p.x + p.y * p.y);
        M = Mlp - rh;
        lat = imlfn(M / this.a, e0, e1, e2, e3);
        lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));
        p.x = lon;
        p.y = lat;
        return p;
      }
      else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
        //South pole case
        Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
        rh = Math.sqrt(p.x * p.x + p.y * p.y);
        M = rh - Mlp;

        lat = imlfn(M / this.a, e0, e1, e2, e3);
        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));
        p.x = lon;
        p.y = lat;
        return p;
      }
      else {
        //default case
        rh = Math.sqrt(p.x * p.x + p.y * p.y);
        Az = Math.atan2(p.x, p.y);
        N1 = gN(this.a, this.e, this.sin_p12);
        cosAz = Math.cos(Az);
        tmp = this.e * this.cos_p12 * cosAz;
        A = -tmp * tmp / (1 - this.es);
        B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);
        D = rh / N1;
        Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;
        F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;
        psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);
        lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));
        sinpsi = Math.sin(psi);
        lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));
        p.x = lon;
        p.y = lat;
        return p;
      }
    }

  }

  var names$8 = ["Azimuthal_Equidistant", "aeqd"];
  var aeqd = {
    init: init$8,
    forward: forward$7,
    inverse: inverse$7,
    names: names$8
  };

  function init$7() {
    //double temp;      /* temporary variable    */

    /* Place parameters in static storage for common use
        -------------------------------------------------*/
    this.sin_p14 = Math.sin(this.lat0);
    this.cos_p14 = Math.cos(this.lat0);
  }

  /* Orthographic forward equations--mapping lat,long to x,y
      ---------------------------------------------------*/
  function forward$6(p) {
    var sinphi, cosphi; /* sin and cos value        */
    var dlon; /* delta longitude value      */
    var coslon; /* cos of longitude        */
    var ksp; /* scale factor          */
    var g, x, y;
    var lon = p.x;
    var lat = p.y;
    /* Forward equations
        -----------------*/
    dlon = adjust_lon(lon - this.long0);

    sinphi = Math.sin(lat);
    cosphi = Math.cos(lat);

    coslon = Math.cos(dlon);
    g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
    ksp = 1;
    if ((g > 0) || (Math.abs(g) <= EPSLN)) {
      x = this.a * ksp * cosphi * Math.sin(dlon);
      y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
    }
    p.x = x;
    p.y = y;
    return p;
  }

  function inverse$6(p) {
    var rh; /* height above ellipsoid      */
    var z; /* angle          */
    var sinz, cosz; /* sin of z and cos of z      */
    var con;
    var lon, lat;
    /* Inverse equations
        -----------------*/
    p.x -= this.x0;
    p.y -= this.y0;
    rh = Math.sqrt(p.x * p.x + p.y * p.y);
    z = asinz(rh / this.a);

    sinz = Math.sin(z);
    cosz = Math.cos(z);

    lon = this.long0;
    if (Math.abs(rh) <= EPSLN) {
      lat = this.lat0;
      p.x = lon;
      p.y = lat;
      return p;
    }
    lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);
    con = Math.abs(this.lat0) - HALF_PI;
    if (Math.abs(con) <= EPSLN) {
      if (this.lat0 >= 0) {
        lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));
      }
      else {
        lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));
      }
      p.x = lon;
      p.y = lat;
      return p;
    }
    lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));
    p.x = lon;
    p.y = lat;
    return p;
  }

  var names$7 = ["ortho"];
  var ortho = {
    init: init$7,
    forward: forward$6,
    inverse: inverse$6,
    names: names$7
  };

  // QSC projection rewritten from the original PROJ4
  // https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c


  /* constants */
  var FACE_ENUM = {
      FRONT: 1,
      RIGHT: 2,
      BACK: 3,
      LEFT: 4,
      TOP: 5,
      BOTTOM: 6
  };

  var AREA_ENUM = {
      AREA_0: 1,
      AREA_1: 2,
      AREA_2: 3,
      AREA_3: 4
  };

  function init$6() {

    this.x0 = this.x0 || 0;
    this.y0 = this.y0 || 0;
    this.lat0 = this.lat0 || 0;
    this.long0 = this.long0 || 0;
    this.lat_ts = this.lat_ts || 0;
    this.title = this.title || "Quadrilateralized Spherical Cube";

    /* Determine the cube face from the center of projection. */
    if (this.lat0 >= HALF_PI - FORTPI / 2.0) {
      this.face = FACE_ENUM.TOP;
    } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {
      this.face = FACE_ENUM.BOTTOM;
    } else if (Math.abs(this.long0) <= FORTPI) {
      this.face = FACE_ENUM.FRONT;
    } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {
      this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;
    } else {
      this.face = FACE_ENUM.BACK;
    }

    /* Fill in useful values for the ellipsoid <-> sphere shift
     * described in [LK12]. */
    if (this.es !== 0) {
      this.one_minus_f = 1 - (this.a - this.b) / this.a;
      this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;
    }
  }

  // QSC forward equations--mapping lat,long to x,y
  // -----------------------------------------------------------------
  function forward$5(p) {
    var xy = {x: 0, y: 0};
    var lat, lon;
    var theta, phi;
    var t, mu;
    /* nu; */
    var area = {value: 0};

    // move lon according to projection's lon
    p.x -= this.long0;

    /* Convert the geodetic latitude to a geocentric latitude.
     * This corresponds to the shift from the ellipsoid to the sphere
     * described in [LK12]. */
    if (this.es !== 0) {//if (P->es != 0) {
      lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));
    } else {
      lat = p.y;
    }

    /* Convert the input lat, lon into theta, phi as used by QSC.
     * This depends on the cube face and the area on it.
     * For the top and bottom face, we can compute theta and phi
     * directly from phi, lam. For the other faces, we must use
     * unit sphere cartesian coordinates as an intermediate step. */
    lon = p.x; //lon = lp.lam;
    if (this.face === FACE_ENUM.TOP) {
      phi = HALF_PI - lat;
      if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
        area.value = AREA_ENUM.AREA_0;
        theta = lon - HALF_PI;
      } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {
        area.value = AREA_ENUM.AREA_1;
        theta = (lon > 0.0 ? lon - SPI : lon + SPI);
      } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {
        area.value = AREA_ENUM.AREA_2;
        theta = lon + HALF_PI;
      } else {
        area.value = AREA_ENUM.AREA_3;
        theta = lon;
      }
    } else if (this.face === FACE_ENUM.BOTTOM) {
      phi = HALF_PI + lat;
      if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
        area.value = AREA_ENUM.AREA_0;
        theta = -lon + HALF_PI;
      } else if (lon < FORTPI && lon >= -FORTPI) {
        area.value = AREA_ENUM.AREA_1;
        theta = -lon;
      } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {
        area.value = AREA_ENUM.AREA_2;
        theta = -lon - HALF_PI;
      } else {
        area.value = AREA_ENUM.AREA_3;
        theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);
      }
    } else {
      var q, r, s;
      var sinlat, coslat;
      var sinlon, coslon;

      if (this.face === FACE_ENUM.RIGHT) {
        lon = qsc_shift_lon_origin(lon, +HALF_PI);
      } else if (this.face === FACE_ENUM.BACK) {
        lon = qsc_shift_lon_origin(lon, 3.14159265359);
      } else if (this.face === FACE_ENUM.LEFT) {
        lon = qsc_shift_lon_origin(lon, -HALF_PI);
      }
      sinlat = Math.sin(lat);
      coslat = Math.cos(lat);
      sinlon = Math.sin(lon);
      coslon = Math.cos(lon);
      q = coslat * coslon;
      r = coslat * sinlon;
      s = sinlat;

      if (this.face === FACE_ENUM.FRONT) {
        phi = Math.acos(q);
        theta = qsc_fwd_equat_face_theta(phi, s, r, area);
      } else if (this.face === FACE_ENUM.RIGHT) {
        phi = Math.acos(r);
        theta = qsc_fwd_equat_face_theta(phi, s, -q, area);
      } else if (this.face === FACE_ENUM.BACK) {
        phi = Math.acos(-q);
        theta = qsc_fwd_equat_face_theta(phi, s, -r, area);
      } else if (this.face === FACE_ENUM.LEFT) {
        phi = Math.acos(-r);
        theta = qsc_fwd_equat_face_theta(phi, s, q, area);
      } else {
        /* Impossible */
        phi = theta = 0;
        area.value = AREA_ENUM.AREA_0;
      }
    }

    /* Compute mu and nu for the area of definition.
     * For mu, see Eq. (3-21) in [OL76], but note the typos:
     * compare with Eq. (3-14). For nu, see Eq. (3-38). */
    mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));
    t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));

    /* Apply the result to the real area. */
    if (area.value === AREA_ENUM.AREA_1) {
      mu += HALF_PI;
    } else if (area.value === AREA_ENUM.AREA_2) {
      mu += SPI;
    } else if (area.value === AREA_ENUM.AREA_3) {
      mu += 1.5 * SPI;
    }

    /* Now compute x, y from mu and nu */
    xy.x = t * Math.cos(mu);
    xy.y = t * Math.sin(mu);
    xy.x = xy.x * this.a + this.x0;
    xy.y = xy.y * this.a + this.y0;

    p.x = xy.x;
    p.y = xy.y;
    return p;
  }

  // QSC inverse equations--mapping x,y to lat/long
  // -----------------------------------------------------------------
  function inverse$5(p) {
    var lp = {lam: 0, phi: 0};
    var mu, nu, cosmu, tannu;
    var tantheta, theta, cosphi, phi;
    var t;
    var area = {value: 0};

    /* de-offset */
    p.x = (p.x - this.x0) / this.a;
    p.y = (p.y - this.y0) / this.a;

    /* Convert the input x, y to the mu and nu angles as used by QSC.
     * This depends on the area of the cube face. */
    nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));
    mu = Math.atan2(p.y, p.x);
    if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {
      area.value = AREA_ENUM.AREA_0;
    } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {
      area.value = AREA_ENUM.AREA_1;
      mu -= HALF_PI;
    } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {
      area.value = AREA_ENUM.AREA_2;
      mu = (mu < 0.0 ? mu + SPI : mu - SPI);
    } else {
      area.value = AREA_ENUM.AREA_3;
      mu += HALF_PI;
    }

    /* Compute phi and theta for the area of definition.
     * The inverse projection is not described in the original paper, but some
     * good hints can be found here (as of 2011-12-14):
     * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302
     * (search for "Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>") */
    t = (SPI / 12) * Math.tan(mu);
    tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));
    theta = Math.atan(tantheta);
    cosmu = Math.cos(mu);
    tannu = Math.tan(nu);
    cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));
    if (cosphi < -1) {
      cosphi = -1;
    } else if (cosphi > 1) {
      cosphi = 1;
    }

    /* Apply the result to the real area on the cube face.
     * For the top and bottom face, we can compute phi and lam directly.
     * For the other faces, we must use unit sphere cartesian coordinates
     * as an intermediate step. */
    if (this.face === FACE_ENUM.TOP) {
      phi = Math.acos(cosphi);
      lp.phi = HALF_PI - phi;
      if (area.value === AREA_ENUM.AREA_0) {
        lp.lam = theta + HALF_PI;
      } else if (area.value === AREA_ENUM.AREA_1) {
        lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);
      } else if (area.value === AREA_ENUM.AREA_2) {
        lp.lam = theta - HALF_PI;
      } else /* area.value == AREA_ENUM.AREA_3 */ {
        lp.lam = theta;
      }
    } else if (this.face === FACE_ENUM.BOTTOM) {
      phi = Math.acos(cosphi);
      lp.phi = phi - HALF_PI;
      if (area.value === AREA_ENUM.AREA_0) {
        lp.lam = -theta + HALF_PI;
      } else if (area.value === AREA_ENUM.AREA_1) {
        lp.lam = -theta;
      } else if (area.value === AREA_ENUM.AREA_2) {
        lp.lam = -theta - HALF_PI;
      } else /* area.value == AREA_ENUM.AREA_3 */ {
        lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);
      }
    } else {
      /* Compute phi and lam via cartesian unit sphere coordinates. */
      var q, r, s;
      q = cosphi;
      t = q * q;
      if (t >= 1) {
        s = 0;
      } else {
        s = Math.sqrt(1 - t) * Math.sin(theta);
      }
      t += s * s;
      if (t >= 1) {
        r = 0;
      } else {
        r = Math.sqrt(1 - t);
      }
      /* Rotate q,r,s into the correct area. */
      if (area.value === AREA_ENUM.AREA_1) {
        t = r;
        r = -s;
        s = t;
      } else if (area.value === AREA_ENUM.AREA_2) {
        r = -r;
        s = -s;
      } else if (area.value === AREA_ENUM.AREA_3) {
        t = r;
        r = s;
        s = -t;
      }
      /* Rotate q,r,s into the correct cube face. */
      if (this.face === FACE_ENUM.RIGHT) {
        t = q;
        q = -r;
        r = t;
      } else if (this.face === FACE_ENUM.BACK) {
        q = -q;
        r = -r;
      } else if (this.face === FACE_ENUM.LEFT) {
        t = q;
        q = r;
        r = -t;
      }
      /* Now compute phi and lam from the unit sphere coordinates. */
      lp.phi = Math.acos(-s) - HALF_PI;
      lp.lam = Math.atan2(r, q);
      if (this.face === FACE_ENUM.RIGHT) {
        lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);
      } else if (this.face === FACE_ENUM.BACK) {
        lp.lam = qsc_shift_lon_origin(lp.lam, -3.14159265359);
      } else if (this.face === FACE_ENUM.LEFT) {
        lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);
      }
    }

    /* Apply the shift from the sphere to the ellipsoid as described
     * in [LK12]. */
    if (this.es !== 0) {
      var invert_sign;
      var tanphi, xa;
      invert_sign = (lp.phi < 0 ? 1 : 0);
      tanphi = Math.tan(lp.phi);
      xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);
      lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));
      if (invert_sign) {
        lp.phi = -lp.phi;
      }
    }

    lp.lam += this.long0;
    p.x = lp.lam;
    p.y = lp.phi;
    return p;
  }

  /* Helper function for forward projection: compute the theta angle
   * and determine the area number. */
  function qsc_fwd_equat_face_theta(phi, y, x, area) {
    var theta;
    if (phi < EPSLN) {
      area.value = AREA_ENUM.AREA_0;
      theta = 0.0;
    } else {
      theta = Math.atan2(y, x);
      if (Math.abs(theta) <= FORTPI) {
        area.value = AREA_ENUM.AREA_0;
      } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {
        area.value = AREA_ENUM.AREA_1;
        theta -= HALF_PI;
      } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {
        area.value = AREA_ENUM.AREA_2;
        theta = (theta >= 0.0 ? theta - SPI : theta + SPI);
      } else {
        area.value = AREA_ENUM.AREA_3;
        theta += HALF_PI;
      }
    }
    return theta;
  }

  /* Helper function: shift the longitude. */
  function qsc_shift_lon_origin(lon, offset) {
    var slon = lon + offset;
    if (slon < -3.14159265359) {
      slon += TWO_PI;
    } else if (slon > 3.14159265359) {
      slon -= TWO_PI;
    }
    return slon;
  }

  var names$6 = ["Quadrilateralized Spherical Cube", "Quadrilateralized_Spherical_Cube", "qsc"];
  var qsc = {
    init: init$6,
    forward: forward$5,
    inverse: inverse$5,
    names: names$6
  };

  // Robinson projection
  // Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c
  // Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039


  var COEFS_X = [
      [1.0000, 2.2199e-17, -715515e-10, 3.1103e-06],
      [0.9986, -482243e-9, -24897e-9, -13309e-10],
      [0.9954, -83103e-8, -448605e-10, -9.86701e-7],
      [0.9900, -135364e-8, -59661e-9, 3.6777e-06],
      [0.9822, -167442e-8, -449547e-11, -572411e-11],
      [0.9730, -214868e-8, -903571e-10, 1.8736e-08],
      [0.9600, -305085e-8, -900761e-10, 1.64917e-06],
      [0.9427, -382792e-8, -653386e-10, -26154e-10],
      [0.9216, -467746e-8, -10457e-8, 4.81243e-06],
      [0.8962, -536223e-8, -323831e-10, -543432e-11],
      [0.8679, -609363e-8, -113898e-9, 3.32484e-06],
      [0.8350, -698325e-8, -640253e-10, 9.34959e-07],
      [0.7986, -755338e-8, -500009e-10, 9.35324e-07],
      [0.7597, -798324e-8, -35971e-9, -227626e-11],
      [0.7186, -851367e-8, -701149e-10, -86303e-10],
      [0.6732, -986209e-8, -199569e-9, 1.91974e-05],
      [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],
      [0.5722, -906601e-8, 0.000182, 6.24051e-06],
      [0.5322, -677797e-8, 0.000275608, 6.24051e-06]
  ];

  var COEFS_Y = [
      [-520417e-23, 0.0124, 1.21431e-18, -845284e-16],
      [0.0620, 0.0124, -1.26793e-9, 4.22642e-10],
      [0.1240, 0.0124, 5.07171e-09, -1.60604e-9],
      [0.1860, 0.0123999, -1.90189e-8, 6.00152e-09],
      [0.2480, 0.0124002, 7.10039e-08, -2.24e-8],
      [0.3100, 0.0123992, -2.64997e-7, 8.35986e-08],
      [0.3720, 0.0124029, 9.88983e-07, -3.11994e-7],
      [0.4340, 0.0123893, -369093e-11, -4.35621e-7],
      [0.4958, 0.0123198, -102252e-10, -3.45523e-7],
      [0.5571, 0.0121916, -154081e-10, -5.82288e-7],
      [0.6176, 0.0119938, -241424e-10, -5.25327e-7],
      [0.6769, 0.011713, -320223e-10, -5.16405e-7],
      [0.7346, 0.0113541, -397684e-10, -6.09052e-7],
      [0.7903, 0.0109107, -489042e-10, -104739e-11],
      [0.8435, 0.0103431, -64615e-9, -1.40374e-9],
      [0.8936, 0.00969686, -64636e-9, -8547e-9],
      [0.9394, 0.00840947, -192841e-9, -42106e-10],
      [0.9761, 0.00616527, -256e-6, -42106e-10],
      [1.0000, 0.00328947, -319159e-9, -42106e-10]
  ];

  var FXC = 0.8487;
  var FYC = 1.3523;
  var C1 = R2D/5; // rad to 5-degree interval
  var RC1 = 1/C1;
  var NODES = 18;

  var poly3_val = function(coefs, x) {
      return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));
  };

  var poly3_der = function(coefs, x) {
      return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);
  };

  function newton_rapshon(f_df, start, max_err, iters) {
      var x = start;
      for (; iters; --iters) {
          var upd = f_df(x);
          x -= upd;
          if (Math.abs(upd) < max_err) {
              break;
          }
      }
      return x;
  }

  function init$5() {
      this.x0 = this.x0 || 0;
      this.y0 = this.y0 || 0;
      this.long0 = this.long0 || 0;
      this.es = 0;
      this.title = this.title || "Robinson";
  }

  function forward$4(ll) {
      var lon = adjust_lon(ll.x - this.long0);

      var dphi = Math.abs(ll.y);
      var i = Math.floor(dphi * C1);
      if (i < 0) {
          i = 0;
      } else if (i >= NODES) {
          i = NODES - 1;
      }
      dphi = R2D * (dphi - RC1 * i);
      var xy = {
          x: poly3_val(COEFS_X[i], dphi) * lon,
          y: poly3_val(COEFS_Y[i], dphi)
      };
      if (ll.y < 0) {
          xy.y = -xy.y;
      }

      xy.x = xy.x * this.a * FXC + this.x0;
      xy.y = xy.y * this.a * FYC + this.y0;
      return xy;
  }

  function inverse$4(xy) {
      var ll = {
          x: (xy.x - this.x0) / (this.a * FXC),
          y: Math.abs(xy.y - this.y0) / (this.a * FYC)
      };

      if (ll.y >= 1) { // pathologic case
          ll.x /= COEFS_X[NODES][0];
          ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;
      } else {
          // find table interval
          var i = Math.floor(ll.y * NODES);
          if (i < 0) {
              i = 0;
          } else if (i >= NODES) {
              i = NODES - 1;
          }
          for (;;) {
              if (COEFS_Y[i][0] > ll.y) {
                  --i;
              } else if (COEFS_Y[i+1][0] <= ll.y) {
                  ++i;
              } else {
                  break;
              }
          }
          // linear interpolation in 5 degree interval
          var coefs = COEFS_Y[i];
          var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);
          // find t so that poly3_val(coefs, t) = ll.y
          t = newton_rapshon(function(x) {
              return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);
          }, t, EPSLN, 100);

          ll.x /= poly3_val(COEFS_X[i], t);
          ll.y = (5 * i + t) * D2R$1;
          if (xy.y < 0) {
              ll.y = -ll.y;
          }
      }

      ll.x = adjust_lon(ll.x + this.long0);
      return ll;
  }

  var names$5 = ["Robinson", "robin"];
  var robin = {
    init: init$5,
    forward: forward$4,
    inverse: inverse$4,
    names: names$5
  };

  function init$4() {
      this.name = 'geocent';

  }

  function forward$3(p) {
      var point = geodeticToGeocentric(p, this.es, this.a);
      return point;
  }

  function inverse$3(p) {
      var point = geocentricToGeodetic(p, this.es, this.a, this.b);
      return point;
  }

  var names$4 = ["Geocentric", 'geocentric', "geocent", "Geocent"];
  var geocent = {
      init: init$4,
      forward: forward$3,
      inverse: inverse$3,
      names: names$4
  };

  var mode = {
    N_POLE: 0,
    S_POLE: 1,
    EQUIT: 2,
    OBLIQ: 3
  };

  var params = {
    h:     { def: 100000, num: true },           // default is Karman line, no default in PROJ.7
    azi:   { def: 0, num: true, degrees: true }, // default is North
    tilt:  { def: 0, num: true, degrees: true }, // default is Nadir
    long0: { def: 0, num: true },                // default is Greenwich, conversion to rad is automatic
    lat0:  { def: 0, num: true }                 // default is Equator, conversion to rad is automatic
  };

  function init$3() {
    Object.keys(params).forEach(function (p) {
      if (typeof this[p] === "undefined") {
        this[p] = params[p].def;
      } else if (params[p].num && isNaN(this[p])) {
        throw new Error("Invalid parameter value, must be numeric " + p + " = " + this[p]);
      } else if (params[p].num) {
        this[p] = parseFloat(this[p]);
      }
      if (params[p].degrees) {
        this[p] = this[p] * D2R$1;
      }
    }.bind(this));

    if (Math.abs((Math.abs(this.lat0) - HALF_PI)) < EPSLN) {
      this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;
    } else if (Math.abs(this.lat0) < EPSLN) {
      this.mode = mode.EQUIT;
    } else {
      this.mode = mode.OBLIQ;
      this.sinph0 = Math.sin(this.lat0);
      this.cosph0 = Math.cos(this.lat0);
    }

    this.pn1 = this.h / this.a;  // Normalize relative to the Earth's radius

    if (this.pn1 <= 0 || this.pn1 > 1e10) {
      throw new Error("Invalid height");
    }
    
    this.p = 1 + this.pn1;
    this.rp = 1 / this.p;
    this.h1 = 1 / this.pn1;
    this.pfact = (this.p + 1) * this.h1;
    this.es = 0;

    var omega = this.tilt;
    var gamma = this.azi;
    this.cg = Math.cos(gamma);
    this.sg = Math.sin(gamma);
    this.cw = Math.cos(omega);
    this.sw = Math.sin(omega);
  }

  function forward$2(p) {
    p.x -= this.long0;
    var sinphi = Math.sin(p.y);
    var cosphi = Math.cos(p.y);
    var coslam = Math.cos(p.x);
    var x, y;
    switch (this.mode) {
      case mode.OBLIQ:
        y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;
        break;
      case mode.EQUIT:
        y = cosphi * coslam;
        break;
      case mode.S_POLE:
        y = -sinphi;
        break;
      case mode.N_POLE:
        y = sinphi;
        break;
    }
    y = this.pn1 / (this.p - y);
    x = y * cosphi * Math.sin(p.x);

    switch (this.mode) {
      case mode.OBLIQ:
        y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
        break;
      case mode.EQUIT:
        y *= sinphi;
        break;
      case mode.N_POLE:
        y *= -(cosphi * coslam);
        break;
      case mode.S_POLE:
        y *= cosphi * coslam;
        break;
    }

    // Tilt 
    var yt, ba;
    yt = y * this.cg + x * this.sg;
    ba = 1 / (yt * this.sw * this.h1 + this.cw);
    x = (x * this.cg - y * this.sg) * this.cw * ba;
    y = yt * ba;

    p.x = x * this.a;
    p.y = y * this.a;
    return p;
  }

  function inverse$2(p) {
    p.x /= this.a;
    p.y /= this.a;
    var r = { x: p.x, y: p.y };

    // Un-Tilt
    var bm, bq, yt;
    yt = 1 / (this.pn1 - p.y * this.sw);
    bm = this.pn1 * p.x * yt;
    bq = this.pn1 * p.y * this.cw * yt;
    p.x = bm * this.cg + bq * this.sg;
    p.y = bq * this.cg - bm * this.sg;

    var rh = hypot(p.x, p.y);
    if (Math.abs(rh) < EPSLN) {
      r.x = 0;
      r.y = p.y;
    } else {
      var cosz, sinz;
      sinz = 1 - rh * rh * this.pfact;
      sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);
      cosz = Math.sqrt(1 - sinz * sinz);
      switch (this.mode) {
        case mode.OBLIQ:
          r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);
          p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;
          p.x *= sinz * this.cosph0;
          break;
        case mode.EQUIT:
          r.y = Math.asin(p.y * sinz / rh);
          p.y = cosz * rh;
          p.x *= sinz;
          break;
        case mode.N_POLE:
          r.y = Math.asin(cosz);
          p.y = -p.y;
          break;
        case mode.S_POLE:
          r.y = -Math.asin(cosz);
          break;
      }
      r.x = Math.atan2(p.x, p.y);
    }

    p.x = r.x + this.long0;
    p.y = r.y;
    return p;
  }

  var names$3 = ["Tilted_Perspective", "tpers"];
  var tpers = {
    init: init$3,
    forward: forward$2,
    inverse: inverse$2,
    names: names$3
  };

  function init$2() {
      this.flip_axis = (this.sweep === 'x' ? 1 : 0);
      this.h = Number(this.h);
      this.radius_g_1 = this.h / this.a;

      if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {
          throw new Error();
      }

      this.radius_g = 1.0 + this.radius_g_1;
      this.C = this.radius_g * this.radius_g - 1.0;

      if (this.es !== 0.0) {
          var one_es = 1.0 - this.es;
          var rone_es = 1 / one_es;

          this.radius_p = Math.sqrt(one_es);
          this.radius_p2 = one_es;
          this.radius_p_inv2 = rone_es;

          this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.
      } else {
          this.radius_p = 1.0;
          this.radius_p2 = 1.0;
          this.radius_p_inv2 = 1.0;

          this.shape = 'sphere';  // Use as a condition in the forward and inverse functions.
      }

      if (!this.title) {
          this.title = "Geostationary Satellite View";
      }
  }

  function forward$1(p) {
      var lon = p.x;
      var lat = p.y;
      var tmp, v_x, v_y, v_z;
      lon = lon - this.long0;

      if (this.shape === 'ellipse') {
          lat = Math.atan(this.radius_p2 * Math.tan(lat));
          var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));

          v_x = r * Math.cos(lon) * Math.cos(lat);
          v_y = r * Math.sin(lon) * Math.cos(lat);
          v_z = r * Math.sin(lat);

          if (((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2) < 0.0) {
              p.x = Number.NaN;
              p.y = Number.NaN;
              return p;
          }

          tmp = this.radius_g - v_x;
          if (this.flip_axis) {
              p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));
              p.y = this.radius_g_1 * Math.atan(v_z / tmp);
          } else {
              p.x = this.radius_g_1 * Math.atan(v_y / tmp);
              p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));
          }
      } else if (this.shape === 'sphere') {
          tmp = Math.cos(lat);
          v_x = Math.cos(lon) * tmp;
          v_y = Math.sin(lon) * tmp;
          v_z = Math.sin(lat);
          tmp = this.radius_g - v_x;

          if (this.flip_axis) {
              p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));
              p.y = this.radius_g_1 * Math.atan(v_z / tmp);
          } else {
              p.x = this.radius_g_1 * Math.atan(v_y / tmp);
              p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));
          }
      }
      p.x = p.x * this.a;
      p.y = p.y * this.a;
      return p;
  }

  function inverse$1(p) {
      var v_x = -1;
      var v_y = 0.0;
      var v_z = 0.0;
      var a, b, det, k;

      p.x = p.x / this.a;
      p.y = p.y / this.a;

      if (this.shape === 'ellipse') {
          if (this.flip_axis) {
              v_z = Math.tan(p.y / this.radius_g_1);
              v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);
          } else {
              v_y = Math.tan(p.x / this.radius_g_1);
              v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);
          }

          var v_zp = v_z / this.radius_p;
          a = v_y * v_y + v_zp * v_zp + v_x * v_x;
          b = 2 * this.radius_g * v_x;
          det = (b * b) - 4 * a * this.C;

          if (det < 0.0) {
              p.x = Number.NaN;
              p.y = Number.NaN;
              return p;
          }

          k = (-b - Math.sqrt(det)) / (2.0 * a);
          v_x = this.radius_g + k * v_x;
          v_y *= k;
          v_z *= k;

          p.x = Math.atan2(v_y, v_x);
          p.y = Math.atan(v_z * Math.cos(p.x) / v_x);
          p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));
      } else if (this.shape === 'sphere') {
          if (this.flip_axis) {
              v_z = Math.tan(p.y / this.radius_g_1);
              v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);
          } else {
              v_y = Math.tan(p.x / this.radius_g_1);
              v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);
          }

          a = v_y * v_y + v_z * v_z + v_x * v_x;
          b = 2 * this.radius_g * v_x;
          det = (b * b) - 4 * a * this.C;
          if (det < 0.0) {
              p.x = Number.NaN;
              p.y = Number.NaN;
              return p;
          }

          k = (-b - Math.sqrt(det)) / (2.0 * a);
          v_x = this.radius_g + k * v_x;
          v_y *= k;
          v_z *= k;

          p.x = Math.atan2(v_y, v_x);
          p.y = Math.atan(v_z * Math.cos(p.x) / v_x);
      }
      p.x = p.x + this.long0;
      return p;
  }

  var names$2 = ["Geostationary Satellite View", "Geostationary_Satellite", "geos"];
  var geos = {
      init: init$2,
      forward: forward$1,
      inverse: inverse$1,
      names: names$2,
  };

  /**
   * Copyright 2018 Bernie Jenny, Monash University, Melbourne, Australia.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * Equal Earth is a projection inspired by the Robinson projection, but unlike
   * the Robinson projection retains the relative size of areas. The projection
   * was designed in 2018 by Bojan Savric, Tom Patterson and Bernhard Jenny.
   *
   * Publication:
   * Bojan Savric, Tom Patterson & Bernhard Jenny (2018). The Equal Earth map
   * projection, International Journal of Geographical Information Science,
   * DOI: 10.1080/13658816.2018.1504949
   *
   * Code released August 2018
   * Ported to JavaScript and adapted for mapshaper-proj by Matthew Bloch August 2018
   * Modified for proj4js by Andreas Hocevar by Andreas Hocevar March 2024
   */


  var A1 = 1.340264,
      A2 = -0.081106,
      A3 = 0.000893,
      A4 = 0.003796,
      M = Math.sqrt(3) / 2.0;

  function init$1() {
    this.es = 0;
    this.long0 = this.long0 !== undefined ? this.long0 : 0;
  }

  function forward(p) {
    var lam = adjust_lon(p.x - this.long0);
    var phi = p.y;
    var paramLat = Math.asin(M * Math.sin(phi)),
    paramLatSq = paramLat * paramLat,
    paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
    p.x = lam * Math.cos(paramLat) /
    (M * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)));
    p.y = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq));

    p.x = this.a * p.x + this.x0;
    p.y = this.a * p.y + this.y0;
    return p;
  }

  function inverse(p) {
    p.x = (p.x - this.x0) / this.a;
    p.y = (p.y - this.y0) / this.a;

    var EPS = 1e-9,
        NITER = 12,
        paramLat = p.y,
        paramLatSq, paramLatPow6, fy, fpy, dlat, i;

    for (i = 0; i < NITER; ++i) {
      paramLatSq = paramLat * paramLat;
      paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
      fy = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq)) - p.y;
      fpy = A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq);
      paramLat -= dlat = fy / fpy;
      if (Math.abs(dlat) < EPS) {
          break;
      }
    }
    paramLatSq = paramLat * paramLat;
    paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
    p.x = M * p.x * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)) /
            Math.cos(paramLat);
    p.y = Math.asin(Math.sin(paramLat) / M);

    p.x = adjust_lon(p.x + this.long0);
    return p;
  }

  var names$1 = ["eqearth", "Equal Earth", "Equal_Earth"];
  var eqearth = {
    init: init$1,
    forward: forward,
    inverse: inverse,
    names: names$1
  };

  var EPS10 = 1e-10;

  function init() {
    var c;

    this.phi1 = this.lat1;
    if (Math.abs(this.phi1) < EPS10) {
      throw new Error();
    }
    if (this.es) {
      this.en = pj_enfn(this.es);
      this.m1 = pj_mlfn(this.phi1, this.am1 = Math.sin(this.phi1),
        c = Math.cos(this.phi1), this.en);
      this.am1 = c / (Math.sqrt(1 - this.es * this.am1 * this.am1) * this.am1);
      this.inverse = e_inv;
      this.forward = e_fwd;
    } else {
      if (Math.abs(this.phi1) + EPS10 >= HALF_PI) {
        this.cphi1 = 0;
      }
      else {
        this.cphi1 = 1 / Math.tan(this.phi1);
      }
      this.inverse = s_inv;
      this.forward = s_fwd;
    }
  }

  function e_fwd(p) {
    var lam = adjust_lon(p.x - (this.long0 || 0));
    var phi = p.y;
    var rh, E, c;
    rh = this.am1 + this.m1 - pj_mlfn(phi, E = Math.sin(phi), c = Math.cos(phi), this.en);
    E = c * lam / (rh * Math.sqrt(1 - this.es * E * E));
    p.x = rh * Math.sin(E);
    p.y = this.am1 - rh * Math.cos(E);

    p.x = this.a * p.x + (this.x0 || 0);
    p.y = this.a * p.y + (this.y0 || 0);
    return p;
  }

  function e_inv(p) {
    p.x = (p.x - (this.x0 || 0)) / this.a;
    p.y = (p.y - (this.y0 || 0)) / this.a;

    var s, rh, lam, phi;
    rh = hypot(p.x, p.y = this.am1 - p.y);
    phi = pj_inv_mlfn(this.am1 + this.m1 - rh, this.es, this.en);
    if ((s = Math.abs(phi)) < HALF_PI) {
      s = Math.sin(phi);
      lam = rh * Math.atan2(p.x, p.y) * Math.sqrt(1 - this.es * s * s) / Math.cos(phi);
    } else if (Math.abs(s - HALF_PI) <= EPS10) {
      lam = 0;
    }
    else {
      throw new Error();
    }
    p.x = adjust_lon(lam + (this.long0 || 0));
    p.y = adjust_lat(phi);
    return p;
  }

  function s_fwd(p) {
    var lam = adjust_lon(p.x - (this.long0 || 0));
    var phi = p.y;
    var E, rh;
    rh = this.cphi1 + this.phi1 - phi;
    if (Math.abs(rh) > EPS10) {
      p.x = rh * Math.sin(E = lam * Math.cos(phi) / rh);
      p.y = this.cphi1 - rh * Math.cos(E);
    } else {
      p.x = p.y = 0;
    }

    p.x = this.a * p.x + (this.x0 || 0);
    p.y = this.a * p.y + (this.y0 || 0);
    return p;
  }

  function s_inv(p) {
    p.x = (p.x - (this.x0 || 0)) / this.a;
    p.y = (p.y - (this.y0 || 0)) / this.a;

    var lam, phi;
    var rh = hypot(p.x, p.y = this.cphi1 - p.y);
    phi = this.cphi1 + this.phi1 - rh;
    if (Math.abs(phi) > HALF_PI) {
      throw new Error();
    }
    if (Math.abs(Math.abs(phi) - HALF_PI) <= EPS10) {
      lam = 0;
    } else {
      lam = rh * Math.atan2(p.x, p.y) / Math.cos(phi);
    }
    p.x = adjust_lon(lam + (this.long0 || 0));
    p.y = adjust_lat(phi);
    return p;
  }

  var names = ["bonne", "Bonne (Werner lat_1=90)"];
  var bonne = {
    init: init,
    names: names
  };

  function includedProjections(proj4){
    proj4.Proj.projections.add(tmerc);
    proj4.Proj.projections.add(etmerc);
    proj4.Proj.projections.add(utm);
    proj4.Proj.projections.add(sterea);
    proj4.Proj.projections.add(stere);
    proj4.Proj.projections.add(somerc);
    proj4.Proj.projections.add(omerc);
    proj4.Proj.projections.add(lcc);
    proj4.Proj.projections.add(krovak);
    proj4.Proj.projections.add(cass);
    proj4.Proj.projections.add(laea);
    proj4.Proj.projections.add(aea);
    proj4.Proj.projections.add(gnom);
    proj4.Proj.projections.add(cea);
    proj4.Proj.projections.add(eqc);
    proj4.Proj.projections.add(poly);
    proj4.Proj.projections.add(nzmg);
    proj4.Proj.projections.add(mill);
    proj4.Proj.projections.add(sinu);
    proj4.Proj.projections.add(moll);
    proj4.Proj.projections.add(eqdc);
    proj4.Proj.projections.add(vandg);
    proj4.Proj.projections.add(aeqd);
    proj4.Proj.projections.add(ortho);
    proj4.Proj.projections.add(qsc);
    proj4.Proj.projections.add(robin);
    proj4.Proj.projections.add(geocent);
    proj4.Proj.projections.add(tpers);
    proj4.Proj.projections.add(geos);
    proj4.Proj.projections.add(eqearth);
    proj4.Proj.projections.add(bonne);
  }

  proj4.defaultDatum = 'WGS84'; //default datum
  proj4.Proj = Projection;
  proj4.WGS84 = new proj4.Proj('WGS84');
  proj4.Point = Point;
  proj4.toPoint = common;
  proj4.defs = defs;
  proj4.nadgrid = nadgrid;
  proj4.transform = transform;
  proj4.mgrs = mgrs;
  proj4.version = '__VERSION__';
  includedProjections(proj4);

  /**
   * Marker position display & edit
   */


  class Marker extends VectorLayer {
    constructor(opt) {
      const options = {
        // src: 'imageUrl', // url of marker image
        defaultPosition: [localStorage.myolLon || 2, localStorage.myolLat || 47], // Initial position of the marker
        // dragable: false, // Can draw the marker to edit position
        // focus: number // Center & value of zoom on the marker
        zIndex: 600, // Above points & hover

        prefix: 'marker', // Will take the values on
        // marker-json, // <input> json form
        // marker-lon, marker-lat, // <input> longitude / latitude
        // marker-x, marker-y', // <input> Swiss EPSG:21781
        // marker-select, marker-string, select // display coords format
        //BEST split in 4 options

        ...opt,
      };

      const point = new Point$1(
        transform$1(options.defaultPosition, 'EPSG:4326', 'EPSG:3857') // If no json value
      );

      super({
        source: new VectorSource({
          features: [new Feature({
            geometry: point,
          })],
          wrapX: false,

          ...options,
        }),
        style: new Style({
          image: new Icon(options),
          ...options.styleOptions,
        }),
        properties: {
          marker: true, // To recognise that this is a marker
        },

        ...options,
      });

      this.options = options;
      this.point = point;

      // Initialise specific projection
      if (typeof proj4 === 'function') {
        // Swiss
        proj4.defs('EPSG:21781',
          '+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 ' +
          '+k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel ' +
          '+towgs84=660.077,13.551,369.344,2.484,1.783,2.939,5.66 +units=m +no_defs'
        );
        // UTM zones
        for (let u = 1; u <= 60; u++) {
          proj4.defs('EPSG:' + (32600 + u), '+proj=utm +zone=' + u + ' +ellps=WGS84 +datum=WGS84 +units=m +no_defs');
          proj4.defs('EPSG:' + (32700 + u), '+proj=utm +zone=' + u + ' +ellps=WGS84 +datum=WGS84 +units=m +no_defs');
        }
        register(proj4);
      }

      // Register the action listeners
      this.els = [];
      ['json', 'lon', 'lat', 'x', 'y', 'select', 'string'].forEach(i => {
        this.els[i] = document.getElementById(this.options.prefix + '-' + i) || document.createElement('div');
        this.els[i].addEventListener('change', evt => this.action(evt.target));
      });
    }

    setMapInternal(map) {
      map.once('postrender', () => { //HACK the only event to trigger if the map is not centered
        this.view = map.getView();

        if (this.options.focus) {
          this.action(this.els.lon); // Il value is provided in lon / lat inputs fields
          this.action(this.els.json); // Il value is provided in json inputs fields
          this.view.setZoom(this.options.focus);
        }
      });

      // Change the cursor over a dragable feature
      map.on('pointermove', evt => {
        const hoverDragable = map.getFeaturesAtPixel(evt.pixel, {
          layerFilter: l => {
            if (this.options.dragable)
              return l.ol_uid === this.ol_uid;
          }
        });

        map.getTargetElement().style.cursor = hoverDragable.length ? 'move' : 'auto';
      });

      // Drag the marker
      if (this.options.dragable) {
        map.addInteraction(new PointerInteraction({
          handleDownEvent: evt => map.getFeaturesAtPixel(evt.pixel, {
            layerFilter: l => l.ol_uid === this.ol_uid
          }).length,
          handleDragEvent: evt => {
            this.changeLL(evt.coordinate, 'EPSG:3857');
          },
        }));

        // Get the marker at the dblclick position
        map.on('dblclick', evt => {
          this.changeLL(evt.coordinate, 'EPSG:3857');
          return false;
        });
      }

      return super.setMapInternal(map);
    } // End setMapInternal

    // Read new values
    action(el) {
      // Find changed input type from tne input id
      const idMatch = el.id.match(/-([a-z]+)/u);

      if (idMatch)
        switch (idMatch[1]) {
          case 'json': // Init the field
            this.changeLL([...this.els.json.value.matchAll(/-?[0-9.]+/gu)], 'EPSG:4326', true);
            break;
          case 'lon': // Change lon / lat
          case 'lat':
            this.changeLL([this.els.lon.value, this.els.lat.value], 'EPSG:4326', true);
            break;
          case 'x': // Change X / Y
          case 'y':
            this.changeLL([this.els.x.value, this.els.y.value], 'EPSG:21781', true);
            break;
          case 'select': // Change the display format
            this.changeLL();
        }
    }

    // Display values
    changeLL(pos, prj, focus) {
      let position = pos,
        projection = prj || 'EPSG:3857';

      sessionStorage.myolLastchange = Date.now(); // Mem the last change date

      // If no position is given, use the marker's (dragged)
      if (!position || position.length < 2) {
        position = this.point.getCoordinates();
        projection = 'EPSG:3857';
      }

      // Don't change if none entry
      if (!position[0] && !position[1])
        return;

      const ll4326 = transform$1([
        // Protection against non-digital entries / transform , into .
        parseFloat(position[0].toString().replace(/[^-0-9]+/u, '.')),
        parseFloat(position[1].toString().replace(/[^-0-9]+/u, '.'))
      ], projection, 'EPSG:4326');

      ll4326[0] -= Math.round(ll4326[0] / 360) * 360; // Wrap +-180Â°

      const ll3857 = transform$1(ll4326, 'EPSG:4326', 'EPSG:3857');

      const inEPSG21781 =
        typeof proj4 === 'function' &&
        containsCoordinate([664577, 5753148, 1167741, 6075303], ll3857);

      // Move the marker
      this.point.setCoordinates(ll3857);

      // Move the map
      if (focus && this.view)
        this.view.setCenter(ll3857);

      // Populate inputs
      this.els.lon.value = Math.round(ll4326[0] * 100000) / 100000;
      this.els.lat.value = Math.round(ll4326[1] * 100000) / 100000;
      this.els.json.value = '{"type":"Point","coordinates":[' + this.els.lon.value + ',' + this.els.lat.value + ']}';

      // Display
      const strings = {
        dec: 'Lon: ' + this.els.lon.value + ', Lat: ' + this.els.lat.value,
        dms: toStringHDMS(ll4326),
      };

      if (inEPSG21781) {
        const ll21781 = transform$1(ll4326, 'EPSG:4326', 'EPSG:21781'),
          z = Math.floor(ll4326[0] / 6 + 90) % 60 + 1,
          u = 32600 + z + (ll4326[1] < 0 ? 100 : 0),
          llutm = transform$1(ll3857, 'EPSG:4326', 'EPSG:' + u);

        // UTM zones
        strings.utm = ' UTM ' + z +
          ' E:' + Math.round(llutm[0]) + ' ' +
          (llutm[1] > 0 ? 'N:' : 'S:') + Math.round(llutm[1] + (llutm[1] > 0 ? 0 : 10000000));

        // Swiss
        this.els.x.value = Math.round(ll21781[0]);
        this.els.y.value = Math.round(ll21781[1]);
        strings.swiss = 'X=' + this.els.x.value + ', Y=' + this.els.y.value + ' (CH1903)';
      }
      // When not on the CH1903 extend, hide the choice
      else if (this.els.select.value === 'swiss')
        this.els.select.value = 'dec';

      // Hide Swiss coordinates when out of extent
      document.querySelectorAll('.xy').forEach(el => {
        el.style.display = inEPSG21781 ? '' : 'none';
      });

      // Display selected format
      this.els.string.textContent = strings[this.els.select.value || 'dec'];
    }
  }

  /**
   * Manage a collection of checkboxes with the same name
   * name : name of all the related input checkbox
   * The checkbox without value (all) check / uncheck the others
   * Check all the checkboxes check the checkbox without value (all)
   * Current selection is saved in window.localStorage
   * You can force the values in window.localStorage[simplified name]
   * callback(selection) : function to call at init or click
   * getSelection() : returns an array of selected values
   * If no name is specified or there are no checkbox with this name, return []
   */

  class Selector {
    constructor(name, initSelect) {
      if (name) {
        this.safeName = 'myol_' + name.replace(/[^a-z]/giu, '');
        this.init =
          typeof initSelect === 'undefined' ?
          localStorage[this.safeName] || '' :
          initSelect.toString();
        this.init = this.init.split(',');
        this.selectEls = [...document.getElementsByName(name)];
        this.selectEls.forEach(el => {
          el.addEventListener('click', evt => this.action(evt));
          el.checked =
            this.init.includes(el.value) ||
            this.init.includes('all') ||
            this.init.join(',') === el.value;
        });
        this.action(); // Init with "all"
      }
      this.callbacks = [];
    }

    action(evt) {
      // Test the "all" box & set other boxes
      if (evt && evt.target.value === 'all')
        this.selectEls.forEach(el => {
          el.checked = evt.target.checked;
        });

      // Test if all values are checked
      const allChecked = this.selectEls
        .filter(el => !el.checked && el.value !== 'all');

      // Set the "all" box
      this.selectEls
        .forEach(el => {
          if (el.value === 'all')
            el.checked = !allChecked.length;
        });

      // Save the current status
      if (this.safeName && this.getSelection().length)
        localStorage[this.safeName] = this.getSelection().join(',');
      //BEST BUG : don't recover values including a ,
      else
        delete localStorage[this.safeName];

      // Call the posted callbacks
      if (evt)
        this.callbacks.forEach(cb => cb(this.getSelection()));
    }

    getSelection() {
      if (this.selectEls)
        return this.selectEls
          .filter(el => el.checked && el.value !== 'all')
          .map(el => el.value);

      return [null];
    }
  }

  /**
   * Some usefull style functions
   * These functions return an area of style options to be transformed into an area of Style
   * They all take 2 arguments :
   *   feature : to be displayed
   *   layer : that owns the feature
   */


  // Display a label with properties.label
  function label(feature) {
    const properties = feature.getProperties();

    if (properties.label) {
      const featureArea = getArea$1(feature.getGeometry().getExtent()),
        elLabel = document.createElement('span');

      elLabel.innerHTML = properties.label; //HACK to render the html entities in the canvas

      return {
        text: new Text({
          text: elLabel.innerText,
          overflow: properties.overflow, // Display label even if not contained in polygon
          textBaseline: featureArea ? 'middle' : 'bottom',
          offsetY: featureArea ? 0 : -13, // Above the icon
          padding: [1, 1, -1, 3],
          //BEST line & poly label following the cursor
          font: '12px Verdana',
          fill: new Fill({
            color: 'black',
          }),
          backgroundFill: new Fill({
            color: 'white',
          }),
          backgroundStroke: new Stroke({
            color: 'blue',
          }),
        }),
      };
    }
  }

  // Basic style to display a geo vector layer based on standard properties
  function basic(feature, resolution, layer) {
    const properties = feature.getProperties();

    return [{
      // Point
      image: properties.icon ?
        new Icon({
          anchor: resolution < layer.options.minResolution ? [
            feature.getId() / 5 % 1 / 2 + 0.25, // 32 px width frame
            feature.getId() / 9 % 1, // 44 px hight frame
          ] : [0.5, 0.5],
          src: properties.icon, // 24 * 24 icons
        }) : null,

      // Lines
      stroke: new Stroke({
        color: 'blue',
        width: 2,
      }),

      // Polygons
      fill: new Fill({
        color: 'rgba(0,0,256,0.3)',
      }),
      // properties.label if any
      //BEST appliquer gigue anchor au label
      ...label(...arguments),
    }];
  }

  // Display a circle with the number of features on the cluster
  function cluster(feature) {
    return [{
      image: new CircleStyle({
        radius: 14,
        stroke: new Stroke({
          color: 'blue',
        }),
        fill: new Fill({
          color: 'white',
        }),
      }),
      //BEST laisser le texte sur les clusters < 3 icÃ´nes
      text: new Text({
        text: feature.getProperties().cluster.toString(),
        font: '12px Verdana',
      }),
    }];
  }

  // Display the detailed information of a cluster based on standard properties
  // Simplify & aggregate an array of lines
  function agregateText(lines, glue) {
    return lines
      .filter(Boolean) // Avoid empty lines
      .map(l => l.toString().replace('_', ' ').trim())
      .map(l => l[0].toUpperCase() + l.substring(1))
      .join(glue || '\n');
  }

  function details(feature, resolution, layer) {
    const properties = feature.getProperties();

    feature.setProperties({
      overflow: true, // Display label even if not contained in polygon
      label: agregateText([
        properties.name,
        agregateText([
          properties.ele ? parseInt(properties.ele, 10) + ' m' : null,
          properties.bed ? parseInt(properties.bed, 10) + '\u255E\u2550\u2555' : null,
        ], ', '),
        properties.type,
        properties.cluster ? null : properties.attribution || layer.options.attribution,
      ]),
    }, true);

    return label(...arguments);
  }

  // Display the basic hovered features
  function hover(...args) {
    return {
      ...details(...args),

      stroke: new Stroke({
        color: 'red',
        width: 2,
      }),
    };
  }

  var stylesOptions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    agregateText: agregateText,
    basic: basic,
    cluster: cluster,
    details: details,
    hover: hover,
    label: label
  });

  /**
   * MyVectorLayer class to facilitate vector layers display
   */


  /**
   * GeoJSON vector display
   * display the loading status
   */
  class MyVectorSource extends VectorSource {
    constructor(options) {
      // selectName: '', // Name of checkbox inputs to tune the url parameters
      // addProperties: properties => {}, // Add properties to each received feature

      super(options);

      this.options = options;
      this.statusEl = document.getElementById(options.selectName + '-status');

      // Display loading satus
      this.on(['featuresloadstart', 'featuresloadend', 'error', 'featuresloaderror'], evt => {
        if (this.statusEl)
          switch (evt.type) {
            case 'featuresloadstart':
              this.statusEl.innerHTML = '&#8987;';
              break;
            case 'featuresloadend':
              this.statusEl.innerHTML = '';
              break;
            default:
              this.statusEl.innerHTML = '&#9888;'; // Error symbol
          }
      });

      // Compute properties when the layer is loaded & before the cluster layer is computed
      this.on('change', () =>
        this.getFeatures().forEach(f => {
          if (!f.yetAdded) {
            f.yetAdded = true;
            f.setProperties(
              options.addProperties(f.getProperties()),
              true, // Silent : add the feature without refresh the layer
            );
          }
        })
      );
    }

    tuneDistance() {} // MyClusterSource compatibility

    // Redirection for cluster.source compatibility
    reload() {
      this.refresh();
    }
  }

  /**
   * Cluster source to manage clusters in the browser
   */
  class MyClusterSource extends Cluster {
    constructor(options) {
      // options:
      // browserClusterFeaturelMaxPerimeter: 300, // (pixels) perimeter of a line or poly above which we do not cluster
      // Any MyVectorSource options

      // Source to handle the features
      const initialSource = new MyVectorSource(options);

      // Source to handle the clusters & the isolated features
      super({
        source: initialSource,
        geometryFunction: f => this.geometryFunction_(f, options),
        createCluster: (p, f) => this.createCluster_(p, f),

        ...options,
      });

      this.options = options;
    }

    // Generate a center point where to display the cluster
    geometryFunction_(feature, options) {
      const geometry = feature.getGeometry();

      if (geometry) {
        const ex = feature.getGeometry().getExtent(),
          featurePixelPerimeter = (ex[2] - ex[0] + ex[3] - ex[1]) * 2 / this.resolution;

        // Don't cluster lines or polygons whose the extent perimeter is more than x pixels
        if (featurePixelPerimeter > options.browserClusterFeaturelMaxPerimeter)
          this.addFeature(feature); // And return null to not cluster this feature
        else
          return new Point$1(getCenter(feature.getGeometry().getExtent()));
      }
    }

    // Generate the features to render the cluster
    createCluster_(point, features) {
      let nbMaxClusters = 0,
        includeCluster = false,
        lines = [];

      features.forEach(f => {
        const properties = f.getProperties();

        lines.push(properties.name);
        nbMaxClusters += parseInt(properties.cluster, 10) || 1;
        if (properties.cluster)
          includeCluster = true;
      });

      // Single feature : display it
      if (nbMaxClusters === 1)
        return features[0];

      if (includeCluster || lines.length > 5)
        lines = ['Cliquer pour zoomer'];

      // Display a cluster point
      return new Feature({
        id: features[0].getId(), // Pseudo id = the id of the first feature in the cluster
        name: agregateText(lines),
        geometry: point, // The gravity center of all the features in the cluster
        features: features,
        cluster: nbMaxClusters, //BEST voir pourquoi on ne met pas Ã§a dans properties
      });
    }

    tuneDistance(map) {
      const s = map.getSize(),
        n = this.options.nbMaxClusters,
        f = (s[0] + s[1] + 5000) / 5000; // More clusters on big maps

      if (n)
        this.setDistance(Math.sqrt(s[0] * s[1] / n / f));
    }

    reload() {
      // Reload the wrapped source
      this.getSource().reload();
    }
  }

  /**
   * Browser & server clustered layer
   */
  class MyBrowserClusterVectorLayer extends VectorLayer {
    constructor(options) {
      // browserClusterMinResolution: 10, // (meters per pixel) resolution below which the browser no longer clusters but add a jitter

      // Any ol.source.layer.Vector options

      // High resolutions layer, can call for server clustering
      const hiResOptions = {
        source: options.nbMaxClusters ?
          new MyClusterSource(options) : // Use a cluster source and a vector source to manages clusters
          new MyVectorSource(options), // or a vector source to get the data

        ...options,

        minResolution: Math.max(
          options.minResolution || 0,
          options.browserClusterMinResolution || 0,
        ),
      };

      super(hiResOptions);
      this.options = hiResOptions; // Mem for further use

      // Low resolutions layer without clustering
      if (options.browserClusterMinResolution &&
        options.browserClusterMinResolution < options.maxResolution) {
        const lowResOptions = {
          source: new MyVectorSource(options),

          ...options,

          maxResolution: options.browserClusterMinResolution,
          type: 'lowResolution',
        };

        this.lowResolutionLayer = new VectorLayer(lowResOptions);
        this.lowResolutionLayer.options = lowResOptions;
      }
    }

    setMapInternal(map) {
      if (this.lowResolutionLayer)
        map.addLayer(this.lowResolutionLayer);

      return super.setMapInternal(map);
    }

    // Propagate reload
    reload(visible) {
      this.setVisible(visible);

      if (visible && this.state_) //BEST find better than this.state_
        this.getSource().reload();

      if (this.lowResolutionLayer) {
        this.lowResolutionLayer.setVisible(visible);

        if (visible && this.lowResolutionLayer.state_)
          this.lowResolutionLayer.getSource().reload();
      }
    }
  }

  class MyServerClusterVectorLayer extends MyBrowserClusterVectorLayer {
    constructor(options) {
      // serverClusterMinResolution: 100, // (meters per pixel) resolution above which we ask clusters to the server

      // Low resolutions layer to display the normal data
      super({
        ...options,

        maxResolution: options.serverClusterMinResolution,
        type: 'browserCluster',
      });

      // High resolutions layer to get and display the clusters delivered by the server at hight resolutions
      if (options.serverClusterMinResolution)
        this.serverClusterLayer = new MyBrowserClusterVectorLayer({
          ...options,

          minResolution: options.serverClusterMinResolution,
          type: 'serverCluster',
        });
    }

    setMapInternal(map) {
      if (this.serverClusterLayer)
        map.addLayer(this.serverClusterLayer);

      map.on('change:size', () => {
        this.getSource().tuneDistance(map);

        if (this.serverClusterLayer)
          this.serverClusterLayer.getSource().tuneDistance(map);
      });

      return super.setMapInternal(map);
    }

    // Propagate the setVisible to the serverClusterLayer
    //BEST check why reload doesn't do the job
    setVisible(visible) {
      if (this.serverClusterLayer)
        this.serverClusterLayer.setVisible(visible);

      return super.setVisible(visible);
    }

    // Propagate the reload to the serverClusterLayer
    reload(visible) {
      if (this.serverClusterLayer)
        this.serverClusterLayer.reload(visible);

      return super.reload(visible);
    }
  }

  /**
   * Facilities added vector layer
   * Style features
   * Layer & features selector
   */
  class MyVectorLayer extends MyServerClusterVectorLayer {
    constructor(opt) {
      const options = {
        // host: '',
        strategy: bbox,
        dataProjection: 'EPSG:4326',

        // Clusters:
        // serverClusterMinResolution: 100, // (meters per pixel) resolution above which we ask clusters to the server
        // browserClusterMinResolution: 10, // (meters per pixel) resolution below which the browser no longer clusters but add a jitter
        // nbMaxClusters: 108, // Number of clusters on the map display. Replace distance
        // distance: 50, // (pixels) distance above which we cluster
        minDistance: 24, // (pixels) minimum distance in pixels between clusters (can slide cluster icons)
        // browserClusterFeaturelMaxPerimeter: 300, // (pixels) perimeter of a line or poly above which we do not cluster

        // Features
        // addProperties: properties => {}, // Add properties to each received feature
        basicStylesOptions: basic, // (feature, resolution, layer)
        hoverStylesOptions: hover, // (feature, resolution, layer)
        // selectName: '', // Name of checkbox inputs to tune the url parameters
        // initSelect: string|true|false, // If defined, force the selector
        selector: new Selector(opt.selectName, opt.initSelect), // Tune the url parameters
        zIndex: 100, // Above tiles layers

        // Any ol.source.Vector options
        // Any ol.source.layer.Vector options

        // Methods to instantiate
        // url (extent, resolution, mapProjection) // Calculate the url
        // query (extent, resolution, mapProjection, optioons) ({_path: '...'}),
        // bbox (extent, resolution, mapProjection) => {}
        // addProperties (properties) => {}, // Add properties to each received features

        ...opt,
      };
      options.format ||= new GeoJSON(options); //BEST treat & display Json errors

      super({
        url: (e, r, p) => this.url(e, r, p),
        addProperties: p => this.addProperties(p),
        style: (f, r) => this.style(f, r, this), //BEST BUG should apply on each ol.vector.layer (now only the basic layer of 3)

        ...options,
      });

      this.host = options.host;
      this.url ||= options.url;
      this.query ||= options.query;
      this.bbox ||= options.bbox;
      this.addProperties ||= options.addProperties;
      this.style ||= options.style;
      this.strategy = options.strategy;
      this.dataProjection = options.dataProjection;
      this.format = options.format;
      this.selector = options.selector;

      // Define the selector action
      this.selector.callbacks.push(() => this.reload());
      this.reload();
    }

    url(...args) {
      const urlArgs = this.query(...args, this.options),
        url = this.host + urlArgs._path; // Mem _path

      if (this.strategy === bbox)
        urlArgs.bbox = this.bbox(...args);

      // Add a pseudo parameter if any marker or edit has been done
      const version = sessionStorage.myolLastchange ?
        '&' + Math.round(sessionStorage.myolLastchange / 2500 % 46600).toString(36) : '';

      // Clean null & not relative parameters
      Object.keys(urlArgs).forEach(k => {
        if (k === '_path' || urlArgs[k] === 'on' || !urlArgs[k] || !urlArgs[k].toString())
          delete urlArgs[k];
      });

      return url + '?' + new URLSearchParams(urlArgs).toString() + version;
    }

    bbox(extent, resolution, mapProjection) {
      return transformExtent(
        extent,
        mapProjection,
        this.dataProjection, // Received projection
      ).map(c => c.toPrecision(6)); // Limit the number of digits (10 m)
    }

    addProperties() {}

    // Function returning an array of styles options
    style(feature, ...args) {
      const sof = feature.getProperties().cluster ?
        cluster :
        this.options.basicStylesOptions;

      return sof(feature, ...args) // Call the styleOptions function
        .map(so => new Style(so)); // Transform into an array of Style objects
    }

    // Define reload action
    reload() {
      return super.reload(this.selector.getSelection().length > 0);
    }
  }

  /**
   * Many simplified display of various vector layers services
   */


  // Get icon from chemineur.fr
  function genericIconUrl(type, hostIcons) {
    if (type) {
      const icons = type.split(' ');

      return (hostIcons || 'https://chemineur.fr/ext/Dominique92/GeoBB/icones/') +
        icons[0] +
        (icons.length > 1 ? '_' + icons[1] : '') + // Limit to 2 type names & ' ' -> '_'
        '.svg';
    }
  }

  function addTag(doc, node, k, v) {
    const newTag = doc.createElement('tag');

    newTag.setAttribute('k', k);
    newTag.setAttribute('v', v);
    node.appendChild(newTag);
  }

  class GeoBB extends MyVectorLayer {
    constructor(options) {
      super({
        serverClusterMinResolution: 100, // (meters per pixel) resolution above which we ask clusters to the server
        browserClusterMinResolution: 10, // (meters per pixel) resolution below which the browser no longer clusters but add a jitter
        nbMaxClusters: 108, // Number of clusters on the map display. Replace distance
        browserClusterFeaturelMaxPerimeter: 300, // (pixels) perimeter of a line or poly above which we do not cluster

        // Any myol.layer.MyVectorLayer, ol.source.Vector options, ol.source.layer.Vector
        ...options,
      });
    }

    query(extent, resolution) {
      return {
        _path: 'ext/Dominique92/GeoBB/gis.php',
        cat: this.options.selector.getSelection(),
        layer: resolution < this.options.serverClusterMinResolution ? null : 'cluster', // For server cluster layer
      };
    }
  }

  // chemineur.fr
  class Chemineur extends GeoBB {
    constructor(options) {
      super({
        host: 'https://chemineur.fr/',
        attribution: '&copy;chemineur.fr',

        // Any myol.layer.MyVectorLayer, ol.source.Vector options, ol.source.layer.Vector

        ...options,
      });
    }
  }

  // alpages.info
  //TODO vite : Access to XMLHttpRequest at 'https://alpages.info/ext/Dominique92/GeoBB/gis.php?forums=on&bbox=5.85311%2C44.7727%2C5.91689%2C44.8093' from origin 'http://localhost:5173' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
  class Alpages extends MyVectorLayer {
    constructor(options) {
      super({
        host: 'https://alpages.info/',
        attribution: '&copy;alpages.info',
        browserClusterFeaturelMaxPerimeter: 300, // (pixels) perimeter of a line or poly above which we do not cluster

        // Any myol.layer.MyVectorLayer, ol.source.Vector options, ol.source.layer.Vector

        ...options,
      });
    }

    query() {
      return {
        _path: 'ext/Dominique92/GeoBB/gis.php',
        forums: this.options.selector.getSelection(),
      };
    }

    addProperties(properties) {
      return {
        icon: genericIconUrl(properties.type, this.options.hostIcons), // Replace the alpages icon
        link: this.host + 'viewtopic.php?t=' + properties.id,
      };
    }
  }

  // refuges.info
  class WRI extends MyVectorLayer {
    constructor(options) {
      super({
        host: 'https://www.refuges.info/',
        attribution: '&copy;refuges.info',

        serverClusterMinResolution: 100, // (meters per pixel) resolution above which we ask clusters to the server
        nbMaxClusters: 108, // Number of clusters on the map display. Replace distance
        browserClusterMinResolution: 10, // (meters per pixel) resolution below which the browser no longer clusters

        // Any myol.layer.MyVectorLayer, ol.source.Vector options, ol.source.layer.Vector

        ...options,
      });
    }

    query(extent, resolution) {
      return {
        _path: 'api/bbox',
        'nb_points': 'all',
        'type_points': this.options.selector.getSelection(),
        cluster: resolution > this.options.serverClusterMinResolution ? 0.1 : null, // For server cluster layer
      };
    }

    addProperties(properties) {
      if (!properties.cluster)
        return {
          name: properties.nom,
          icon: this.host + 'images/icones/' + properties.type.icone + '.svg',
          ele: properties.coord.alt,
          bed: properties.places.valeur,
          type: properties.type.valeur,
          link: properties.lien,
        };
    }
  }

  // pyrenees-refuges.com
  class PRC extends MyVectorLayer {
    constructor(options) {
      super({
        url: 'https://www.pyrenees-refuges.com/api.php?type_fichier=GEOJSON',
        strategy: all,
        attribution: '&copy;Pyrenees-Refuges',
        nbMaxClusters: 108, // Number of clusters on the map display. Replace distance

        // Any myol.layer.MyVectorLayer, ol.source.Vector options, ol.source.layer.Vector

        ...options,
      });
    }

    addProperties(properties) {
      return {
        type: properties.type_hebergement,
        icon: genericIconUrl(properties.type_hebergement, this.options.hostIcons),
        ele: properties.altitude,
        capacity: properties.cap_ete,
        link: properties.url,
      };
    }
  }

  // pere-lachaise.plan-interactif.com
  class PL extends MyVectorLayer {
    constructor(options) {
      super({
        url: 'https://chemineur.fr/ressources/pl.geojson.php',
        strategy: all,
        nbMaxClusters: 100,
        attribution: '&copy<a href="https://pere-lachaise.plan-interactif.com">' +
          'pere-lachaise.plan-interactif.com</a>',

        ...options,
      });
    }

    addProperties(properties) {
      return {
        icon: 'https://chemineur.fr/ext/Dominique92/GeoBB/icones/edifice_religieux.svg',
        link: 'https://pere-lachaise.plan-interactif.com/fr/#!/category/' + properties.parent + '/marker/' + properties.id,
      };
    }
  }

  // CampToCamp.org
  class C2C extends MyVectorLayer {
    constructor(options) {
      super({
        host: 'https://api.camptocamp.org/',
        dataProjection: 'EPSG:3857',
        attribution: '&copy;Camp2camp',

        // Any myol.layer.MyVectorLayer options

        ...options,
      });

      this.format.readFeatures = json => {
        const features = [];

        JSON.parse(json).documents.forEach(properties =>
          features.push({
            id: properties.document_id,
            type: 'Feature',
            geometry: JSON.parse(properties.geometry.geom),
            properties: {
              name: properties.locales[0].title,
              type: properties.waypoint_type,
              icon: genericIconUrl(properties.waypoint_type, options.hostIcons),
              ele: properties.elevation,
              link: 'https://www.camptocamp.org/waypoints/' + properties.document_id,
            },
          })
        );

        return this.format.readFeaturesFromObject({
          type: 'FeatureCollection',
          features: features,
        });
      };
    }

    query() {
      return {
        _path: 'waypoints',
        wtyp: this.selector.getSelection(),
        limit: 100, // C2C max limit
      };
    }
  }

  /**
   * OSM XML overpass POI layer
   * From: https://openlayers.org/en/latest/examples/vector-osm.html
   * Doc: http://wiki.openstreetmap.org/wiki/Overpass_API/Language_Guide
   */
  class Overpass extends MyVectorLayer {
    constructor(options) {
      const statusEl = document.getElementById(options.selectName),
        selectEls = document.getElementsByName(options.selectName);

      super({
        host: 'https://overpass-api.de',
        //host: 'https://lz4.overpass-api.de',
        //host: 'https://overpass.kumi.systems',
        bbox: () => null, // No bbox at the end of the url
        format: new OSMXML(),
        attribution: '&copy;OpenStreetMap',

        maxResolution: 50,
        nbMaxClusters: 108, // Number of clusters on the map display. Replace distance

        // Any myol.layer.MyVectorLayer, ol.source.Vector options, ol.source.layer.Vector
        ...options,
      });

      // List of acceptable tags in the request return
      let tags = '';

      for (const e in selectEls)
        if (selectEls[e].value)
          tags += selectEls[e].value.replace('private', '');

      // Extract features from data when received
      this.format.readFeatures = function(doc, opt) {
        const newNodes = [];

        for (let node = doc.documentElement.firstElementChild; node; node = node.nextSibling) {
          // Translate attributes to standard myol
          for (let tag = node.firstElementChild; tag; tag = tag.nextSibling)
            if (tag.attributes) {
              const tagv = tag.getAttribute('v');
              if (tags.indexOf(tag.getAttribute('k')) !== -1 &&
                tags.indexOf(tagv) !== -1 &&
                tag.getAttribute('k') !== 'type') {
                addTag(doc, node, 'type', tagv);
                addTag(doc, node, 'icon',
                  genericIconUrl(tagv, options.hostIcons)
                );

                // Only once for a node
                addTag(doc, node, 'link', 'https://www.openstreetmap.org/' + node.nodeName + '/' + node.id);
              }

              if (tag.getAttribute('k') && tag.getAttribute('k').includes('capacity:'))
                addTag(doc, node, 'capacity', tagv);
            }

          // Transform an area to a node (picto) at the center of this area
          if (node.nodeName === 'way') {
            const newNode = doc.createElement('node');

            newNode.id = node.id;
            newNodes.push(newNode);

            // Browse <way> attributes to build a new node
            for (let subTagNode = node.firstElementChild; subTagNode; subTagNode = subTagNode.nextSibling)
              switch (subTagNode.nodeName) {
                case 'center':
                  // Set node attributes
                  newNode.setAttribute('lon', subTagNode.getAttribute('lon'));
                  newNode.setAttribute('lat', subTagNode.getAttribute('lat'));
                  newNode.setAttribute('nodeName', subTagNode.nodeName);
                  break;

                case 'tag':
                  // Get existing properties
                  newNode.appendChild(subTagNode.cloneNode());

                  // Add a tag to mem what node type it was (for link build)
                  addTag(doc, newNode, 'nodetype', node.nodeName);
              }
          }

          // Status 200 / error message
          if (node.nodeName === 'remark' && statusEl)
            statusEl.textContent = node.textContent;
        }

        // Add new nodes to the document
        newNodes.forEach(n => doc.documentElement.appendChild(n));

        return OSMXML.prototype.readFeatures.call(this, doc, opt);
      };
    }

    query(extent, resolution, mapProjection) {
      const selections = this.selector.getSelection(),
        ex4326 = transformExtent(extent, mapProjection, 'EPSG:4326').map(c => c.toPrecision(6)),
        bbox = '(' + ex4326[1] + ',' + ex4326[0] + ',' + ex4326[3] + ',' + ex4326[2] + ');',
        args = [];

      for (let s = 0; s < selections.length; s++) // For each selected input checkbox
        selections[s].split('+') // Multiple choices separated by "+"
        .forEach(sel => args.push('nwr' + sel + bbox)); // Ask for node, way & relation in the bbox

      return {
        _path: '/api/interpreter',
        data: '[timeout:5];(' + args.join('') + ');out center;',
      };
    }

    bbox() {}
  }

  // Vectors layers examples
  function collection(options = {}) {
    return [
      new WRI(options.wri),
      new PRC(options.prc),
      new C2C(options.c2c),
      new Overpass(options.osm),
      new Chemineur(options.chemineur),
      new Alpages(options.alpages),
    ];
  }

  var vectorLayerCollection = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Alpages: Alpages,
    C2C: C2C,
    Chemineur: Chemineur,
    GeoBB: GeoBB,
    Overpass: Overpass,
    PL: PL,
    PRC: PRC,
    WRI: WRI,
    collection: collection
  });

  /**
   * This file defines the myol.layer exports
   */


  var layer = {
    BackgroundLayer: BackgroundLayer,
    VectorEditor: VectorEditor,
    Hover: Hover,
    Marker: Marker,
    MyVectorLayer: MyVectorLayer,
    Selector: Selector,
    tile: tileLayercollection,
    vector: vectorLayerCollection,
  };

  /**
   * Display misc values
   */


  const VERSION = '1.1.2.dev 19/04/2025 17:18:58';

  async function trace() {
    const data = [
      'Ol v' + VERSION$1,
      'MyOl ' + VERSION,
      'Geocoder 4.3.3-4',
      'Proj4 2.15.0',
      'language ' + navigator.language,
    ];

    // Storages in the subdomain
    ['localStorage', 'sessionStorage'].forEach(s => {
      if (window[s].length)
        data.push(s + ':');

      Object.keys(window[s])
        .forEach(k => data.push('  ' + k + ': ' + window[s].getItem(k)));
    });

    // Registered service workers in the scope
    if ('serviceWorker' in navigator)
      await navigator.serviceWorker.getRegistrations().then(registrations => {
        if (registrations.length) {
          data.push('service-workers:');

          for (const registration of registrations)
            if (registration.active)
              data.push('  ' + registration.active.scriptURL);
        }
      });

    // Registered caches in the scope
    if (typeof caches === 'object')
      await caches.keys().then(names => {
        if (names.length) {
          data.push('caches:');

          for (const name of names)
            data.push('  ' + name);
        }
      });

    // Log all the traces
    console.info(data.join('\n'));
  }

  /* global map */
  // Zoom & resolution
  function traceZoom() {
    console.log(
      'zoom ' + map.getView().getZoom().toFixed(2) + ', ' +
      'res ' + map.getView().getResolution().toPrecision(4) + ' m/pix'
    );
  }

  window.addEventListener('load', () => { // Wait for document load
    if (typeof map === 'object' && map.once)
      map.once('precompose', () => { // Wait for view load
        traceZoom();
        map.getView().on('change:resolution', traceZoom);
      });
  });

  /**
   * This file defines the myol exports
   */


  var myol = {
    control: control,
    layer: layer,
    Selector: layer.Selector,
    stylesOptions: stylesOptions,
    trace: trace,
    VERSION: VERSION,
  };

  // This file defines the contents of the dist/myol.css & dist/myol libraries
  // It contains all what is necessary for refuges.info & chemineur.fr websites

  window.ol ||= ol; // Makes a global ol

  return myol;

}));
